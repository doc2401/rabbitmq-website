"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-blog-2023-05-17-rabbitmq-3-12-performance-improvements-6-d-4-9db"],{

/***/ "./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2023-05-17-rabbitmq-3-12-performance-improvements-index-md-6d4.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"permalink":"/rabbitmq-website/blog/2023/05/17/rabbitmq-3.12-performance-improvements","editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/blog/2023-05-17-rabbitmq-3.12-performance-improvements/index.md","source":"@site/blog/2023-05-17-rabbitmq-3.12-performance-improvements/index.md","title":"RabbitMQ 3.12 Performance Improvements","description":"RabbitMQ 3.12 will be released soon with many new features and improvements.","date":"2023-05-17T00:00:00.000Z","tags":[{"inline":true,"label":"Performance","permalink":"/rabbitmq-website/blog/tags/performance"}],"readingTime":12.27,"hasTruncateMarker":true,"authors":[{"name":"MichaÅ‚ Kuratczyk","url":"https://github.com/mkuratczyk","socials":{"github":"https://github.com/mkuratczyk","linkedin":"https://www.linkedin.com/in/mkuratczyk/","mastodon":"https://fosstodon.org/@kura","bluesky":"https://bsky.app/profile/mkuratczyk.bsky.social"},"imageURL":"https://github.com/mkuratczyk.png","key":"kura","page":null}],"frontMatter":{"title":"RabbitMQ 3.12 Performance Improvements","tags":["Performance"],"authors":["kura"]},"unlisted":false,"prevItem":{"title":"MQTT 5.0 support is coming in RabbitMQ 3.13","permalink":"/rabbitmq-website/blog/2023/07/21/mqtt5"},"nextItem":{"title":"Announcing RabbitMQ Community Discord Server","permalink":"/rabbitmq-website/blog/2023/04/04/announcing-rabbitmq-community-discord-server"}}');

/***/ }),

/***/ "./blog/2023-05-17-rabbitmq-3.12-performance-improvements/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2023_05_17_rabbitmq_3_12_performance_improvements_index_md_6d4_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2023_05_17_rabbitmq_3_12_performance_improvements_index_md_6d4_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2023-05-17-rabbitmq-3-12-performance-improvements-index-md-6d4.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'RabbitMQ 3.12 Performance Improvements',\n\ttags: [\n\t\t'Performance'\n\t],\n\tauthors: [\n\t\t'kura'\n\t]\n};\nconst contentTitle = undefined;\n\nconst assets = {\n\"authorsImageUrls\": [undefined],\n};\n\n\n\nconst toc = [{\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"Classic Queues: Changes to the Lazy Mode\",\n  \"id\": \"classic-queues-changes-to-the-lazy-mode\",\n  \"level\": 3\n}, {\n  \"value\": \"Classic Queues: Massively Improved Classic Queues v2 (CQv2)\",\n  \"id\": \"classic-queues-massively-improved-classic-queues-v2-cqv2\",\n  \"level\": 3\n}, {\n  \"value\": \"New MQTT implementation: Significant Memory Savings Per Connection, Supports Millions of Connections per Node\",\n  \"id\": \"new-mqtt-implementation-significant-memory-savings-per-connection-supports-millions-of-connections-per-node\",\n  \"level\": 3\n}, {\n  \"value\": \"Significant improvements to quorum queues\",\n  \"id\": \"significant-improvements-to-quorum-queues\",\n  \"level\": 3\n}, {\n  \"value\": \"Nodes Should Stop and Start Faster\",\n  \"id\": \"nodes-should-stop-and-start-faster\",\n  \"level\": 3\n}, {\n  \"value\": \"Benchmarking Setup\",\n  \"id\": \"benchmarking-setup\",\n  \"level\": 2\n}, {\n  \"value\": \"Benchmark Tests\",\n  \"id\": \"benchmark-tests\",\n  \"level\": 2\n}, {\n  \"value\": \"The Environment\",\n  \"id\": \"the-environment\",\n  \"level\": 3\n}, {\n  \"value\": \"Test Results\",\n  \"id\": \"test-results\",\n  \"level\": 2\n}, {\n  \"value\": \"New Lazy-like Default Behavior of Classic Queues and Classic Queues v2\",\n  \"id\": \"new-lazy-like-default-behavior-of-classic-queues-and-classic-queues-v2\",\n  \"level\": 3\n}, {\n  \"value\": \"3.11 non-lazy vs 3.12\",\n  \"id\": \"311-non-lazy-vs-312\",\n  \"level\": 4\n}, {\n  \"value\": \"3.12 CQv1 vs CQv2\",\n  \"id\": \"312-cqv1-vs-cqv2\",\n  \"level\": 4\n}, {\n  \"value\": \"Classic Mirrored Queues\",\n  \"id\": \"classic-mirrored-queues\",\n  \"level\": 3\n}, {\n  \"value\": \"Quorum Queues\",\n  \"id\": \"quorum-queues\",\n  \"level\": 3\n}, {\n  \"value\": \"Publishing to a Long Quorum Queue\",\n  \"id\": \"publishing-to-a-long-quorum-queue\",\n  \"level\": 4\n}, {\n  \"value\": \"Consumption Throughput\",\n  \"id\": \"consumption-throughput\",\n  \"level\": 4\n}, {\n  \"value\": \"Faster Node Restarts\",\n  \"id\": \"faster-node-restarts\",\n  \"level\": 3\n}, {\n  \"value\": \"No More Periodic Resource Usage Spikes With Many Idle Queues\",\n  \"id\": \"no-more-periodic-resource-usage-spikes-with-many-idle-queues\",\n  \"level\": 3\n}, {\n  \"value\": \"Conclusion\",\n  \"id\": \"conclusion\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    figcaption: \"figcaption\",\n    figure: \"figure\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    img: \"img\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ 3.12 will be released soon with many new features and improvements.\\r\\nThis blog post focuses on the the performance-related differences.\\r\\nThe most important change is that the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"lazy\"\n      }), \" mode for classic queues is now the standard behavior (more on this below).\\r\\nThe new implementation should be even more memory efficient\\r\\nwhile proving higher throughput and lower latency than both \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"lazy\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"non-lazy\"\n      }), \" implementations did in earlier versions.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For even better performance, we highly recommend switching to classic queues version 2 (CQv2).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Let's quickly go through the most important performance-related improvements in RabbitMQ 3.12.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"classic-queues-changes-to-the-lazy-mode\",\n      children: \"Classic Queues: Changes to the Lazy Mode\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Starting with 3.12, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-queue-mode=lazy\"\n      }), \" argument is ignored. All classic queues will now behave similarly to the way lazy queues behaved previously.\\r\\nThat is, messages tend to be written to disk and only a small subset is kept in memory. The number of messages in memory depends on the consumption rate.\\r\\nThis change affects all users of classic queues. Based on our testing, for the vast majority of them,\\r\\nthe new implementation should bring significant improvements in performance and should lower the memory usage. Keep reading for some benchmark results,\\r\\nbut also make sure to test your system \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://rabbitmq.github.io/rabbitmq-perf-test/stable/htmlsingle/\",\n        children: \"using PerfTest\"\n      }), \" before upgrading.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"classic-queues-massively-improved-classic-queues-v2-cqv2\",\n      children: \"Classic Queues: Massively Improved Classic Queues v2 (CQv2)\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"note\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"This paragraph was updated to reflect the changes to the roadmap. Classic queues version 2 will become the\\r\\ndefault and only option in RabbitMQ 4.0 (perviously we planned to make it the default in 3.13).\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Since RabbitMQ 3.10, we have had \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/persistence-conf#queue-version\",\n        children: \"two implementation of classic queues\"\n      }), \": the original\\r\\none (CQv1) and a new one (CQv2). The difference between them is mostly around on-disk storage.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Most users still use CQv1, but starting with 3.12 we highly recommend switching to,\\r\\nor at least evaluating, CQv2. Version 2 will become the the only implementation available in RabbitMQ 4.0.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The migration process is easy: add a new policy key or an optional queue argument, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-queue-version=2\"\n      }), \", when declaring the queue.\\r\\nTo switch to CQv2 globally, set \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"classic_queue.default_version\"\n      }), \" to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"2\"\n      }), \" in the config file:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"classic_queue.default_version = 2\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is possible to go back by setting the version back to 1. Every time the value changes, RabbitMQ will convert the on-disk representation of the queue.\\r\\nFor mostly empty queues, the process is instantaneous. For reasonable backlogs, it can take a few seconds.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In many use cases, switching to CQv2 will result in a 20-40% throughput improvement\\r\\nand lower memory usage at the same time. Those who still use classic queue mirroring (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2023/03/02/quorum-queues-migration\",\n        children: \"you shouldn't, it'll be removed soon!\"\n      }), \"),\\r\\nneed to test your system more thoroughly as there are a few cases where version 1 works better with mirrored classic queues,\\r\\nbut there are also many scenarios where version 2 is much better, despite not having any mirroring-specific code optimizations.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"new-mqtt-implementation-significant-memory-savings-per-connection-supports-millions-of-connections-per-node\",\n      children: \"New MQTT implementation: Significant Memory Savings Per Connection, Supports Millions of Connections per Node\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/mqtt\",\n        children: \"MQTT plugin\"\n      }), \" has been completely reworked and provides much lower memory usage,\\r\\nlower latency and can handle many more connections than before.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"We've published \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2023/03/21/native-mqtt\",\n        children: \"a separate blog post about the MQTT-related improvements\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"significant-improvements-to-quorum-queues\",\n      children: \"Significant improvements to quorum queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The work on making quorum queues more efficient continues. RabbitMQ 3.12 brings a number of improvements so all quorum queue users should see better performance.\\r\\nThe biggest change will be observed in the environments with long quorum queues.\\r\\nPreviously, as the queue got longer, its throughput decreased. This should no longer be a problem.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"nodes-should-stop-and-start-faster\",\n      children: \"Nodes Should Stop and Start Faster\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ nodes with many classic queues (tens of thousands or more) should stop and start faster. That means shorter node unavailability during an upgrade\\r\\nand other maintenance operations.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"benchmarking-setup\",\n      children: \"Benchmarking Setup\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"All the data present below compares 3.11.7 and 3.12-rc.2. Some, mostly smaller, optimizations have been backported to more recent 3.11 patch releases,\\r\\nwhich is why this comparison does not use the latest 3.11 patch release.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"benchmark-tests\",\n      children: \"Benchmark Tests\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"At the moment of writing, Team RabbitMQ's standard performance test suite contains 14 tests. Each test runs for 5 minutes.\\r\\nSeparate environments go through the same tests at the same time with different message sizes,\\r\\nso that it is easy to see the impact of the message size and/or to compare different queue types or versions under the same workload.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Here is a list of the tests, in the order they appear in the Grafana dashboard:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"One publisher publishes as fast as it can, while one consumer consumes as fast as it can\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Two publishers and no consumers (performance as the queue gets longer)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"One consumer consumes a long queue from the previous test (performance of consumers unaffected by publishers)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Five queues, each has 1 publisher publishing at 10k messages/s and 1 consumer (the total expected throughput is 50k/s, we look at the latency)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Fanout to 10 queues - 1 publishers and 10 consumers, a fanout exchange\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"One publisher, one consumer, but only 1 unconfirmed message (the publisher waits for the confirmation of the previous message before sending the next one)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Fan-in: 7000 publishers publishing 1 message per second, to a single queue\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"1000 publishers publish 10 messages/s, each to a different queue; each queue has a consumer as well (total expected throughput: 10k/s)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"One publisher without consumers creates a backlog of messages, then 10 consumers join to drain the queue\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Similar to the previous one, but 50 consumers join, but a single-active-consumer is set (so only one starts draining the queue)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Similar to the first test, but multi-ack of 1000 is used on the consumer-side\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Messages with TTL are published and expire quickly (they never get consumed)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Messages get published to be negatively acknowledged later (this is just a setup for the next test)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Messages from the previous test are negatively acknowledged\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The last few tests are less interesting. They were introduced to look for issues in some specific areas.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"the-environment\",\n      children: \"The Environment\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"These tests were conducted using the following environment:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"A GKE cluster with e2-standard-16 nodes\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"RabbitMQ clusters deployed using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/kubernetes/operator/operator-overview\",\n          children: \"our Kubernetes Operator\"\n        }), \" with the following resources and configuration\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-yaml\",\n        children: \"apiVersion: rabbitmq.com/v1beta1\\r\\nkind: RabbitmqCluster\\r\\nmetadata:\\r\\n  name: ...\\r\\nspec:\\r\\n  replicas: 1 # or 3 for mirrored and quorum queues\\r\\n  image: rabbitmq:3.11.7-management # or rabbitmq:3.12.0-rc.2-management\\r\\n  resources:\\r\\n    requests:\\r\\n      cpu: 14\\r\\n      memory: 12Gi\\r\\n    limits:\\r\\n      cpu: 14\\r\\n      memory: 12Gi\\r\\n  persistence:\\r\\n    storageClassName: premium-rwo\\r\\n    storage: \\\"150Gi\\\"\\r\\n  rabbitmq:\\r\\n    advancedConfig: |\\r\\n      [\\r\\n      {rabbit, [\\r\\n          {credit_flow_default_credit,{0,0}}\\r\\n      ]}\\r\\n      ].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Some notes on the environment:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"For many tests (or even production workloads), these resource settings are excessive. This is simply a configuration we happen to use for performance testing, it is not a recommendation\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"You should be able to reach higher values with better hardware. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"e2-standard-16\"\n        }), \" is far from the best hardware money can buy/rent\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The credit flow was disabled because otherwise a single fast publisher will be throttled (to prevent overload and to give a fair chance to other publishers);\\r\\nflow control is important in systems with many users/connections, but usually not something we want when benchmarking\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"test-results\",\n      children: \"Test Results\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"new-lazy-like-default-behavior-of-classic-queues-and-classic-queues-v2\",\n      children: \"New Lazy-like Default Behavior of Classic Queues and Classic Queues v2\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Initial version of RabbitMQ was released in 2007. Back then, disk access was very slow compared to any other operation.\\r\\nHowever, as the storage technology evolved over the years, there was less and less need to avoid writing data to disk. In version 3.6.0, back in 2015,\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/lazy-queues\",\n        children: \"lazy queues\"\n      }), \" were added as an option. Lazy queues store all messages on disk to save memory, which is particularly important for queues that can become long.\\r\\nThese days, writing messages to disk is a pretty cheap operation (unless you perform \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"fsync\"\n      }), \" to guarantee high data safety, as quorum queues do).\\r\\nBy storing messages on disk, we can use much less memory. That means lower costs, fewer memory alarms and fewer headaches caused by sudden memory spikes in your cluster.\\r\\nWe've therefore made this the only option for classic queues going forward.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"311-non-lazy-vs-312\",\n      children: \"3.11 non-lazy vs 3.12\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Let's start by looking at what we expect to happen for users that currently use non-lazy classic queues version 1 (CQv1), after the upgrade.\\r\\nThe screenshot was taken from 12 bytes message sizes test.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Classic queues: non-lazy classic queues in 3.11 vs 3.12\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/lazy-3.11-vs-3.12.png\")[\"default\"]) + \"\",\n          width: \"1958\",\n          height: \"1800\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"Classic queues: non-lazy classic queues in 3.11 vs 3.12\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"As you can see, 3.12 performs better in every single test: higher throughput, lower latency, less variability (fewer spikes in rates).\\r\\nAt the same time, 3.12 has a much lower memory usage (similar to lazy queues). On the last panel you can see 3.11 memory spikes whenever the queues get longer,\\r\\nwhile 3.12 only exceeds 1GB memory usage in the tests that involve many connections (it's the connections that use the memory, not the queues).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"312-cqv1-vs-cqv2\",\n      children: \"3.12 CQv1 vs CQv2\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Above, we saw some of the benefits that most users should get after upgrading to RabbitMQ 3.12, but we are just getting started! Let's add classic queues version 2\\r\\nto the comparison:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Classic queues: non-lazy classic queues in 3.11 vs 3.12 v1 and v2\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/lazy-3.11-vs-3.12-v1-and-v2.png\")[\"default\"]) + \"\",\n          width: \"1974\",\n          height: \"1794\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"Classic queues: non-lazy classic queues in 3.11 vs 3.12 v1 and v2\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"With CQv2, we observe even higher throughput and even lower latency. Especially in the second test when the queue gets long, version 2 doesn't exceed 50ms latency,\\r\\nwhile 3.11 can spike into multiple seconds.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Please do not hesitate to give classic queues version 2 a try. All you need to do is set the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-queue-version=2\"\n      }), \" policy key.\\r\\nTo switch to CQv2 globally, set \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"classic_queue.default_version\"\n      }), \" to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"2\"\n      }), \" in the config file:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"classic_queue.default_version = 2\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Version 2 will become the default version starting with RabbitMQ 3.13.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"classic-mirrored-queues\",\n      children: \"Classic Mirrored Queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As mentioned above, classic queues version 1 contain a few optimizations specifically implemented to improve the behaviour when a queue is mirrored.\\r\\nAs we prepare to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://blog.rabbitmq.com/blog/2023/03/21/quorum-queues-migration\",\n        children: \"remove the mirroring feature\"\n      }), \", version 2 no longer performs any special mirroring tricks.\\r\\nTherefore, the results are mixed, but version 2 is so efficient that even without special considerations, it can outperform version 1 in most scenarios, even with mirroring.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Mirrored queues: 3.11 lazy and non-lazy vs 3.12 v2; 1kb messages\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/mirrored-3.11-vs-3.12.png\")[\"default\"]) + \"\",\n          width: \"1936\",\n          height: \"1796\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"Mirrored queues: 3.11 lazy and non-lazy vs 3.12 v2; 1kb messages\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"You can see whether version 2 works better for you but more importantly, please \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://blog.rabbitmq.com/blog/2023/03/21/quorum-queues-migration\",\n        children: \"start migrating to quorum queues\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/streams\",\n        children: \"streams\"\n      }), \" ASAP.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"quorum-queues\",\n      children: \"Quorum Queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/quorum-queues\",\n        children: \"Quorum queues\"\n      }), \" have offered much better performance and data safety than queue mirroring for several years now,\\r\\nand they only get better.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The biggest improvement in 3.12 is in how quorum queues handle long backlogs.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Quorum queues: 3.11 vs 3.12; 5kb messages\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/qq-3.11-vs-3.12-5kb.png\")[\"default\"]) + \"\",\n          width: \"1974\",\n          height: \"1794\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"Quorum queues: 3.11 vs 3.12; 5kb messages\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"publishing-to-a-long-quorum-queue\",\n      children: \"Publishing to a Long Quorum Queue\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Prior to RabbitMQ 3.12, if a quorum queue had a long backlog, publishing latency could increase significantly, lowering throughput.\\r\\nStarting with 3.12, the length of the queue should no longer matter much for latency and throughput.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"You can see this in the second test: while both versions start at about 25k messages/s,\\r\\n3.11 quickly degrades to 10k/s or so. Meanwhile, 3.12 remains above 20k/s.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The 3.12 performance is not as smooth as we wish it was, but it's\\r\\nmuch better already and could be improved further. It's also important to remember that in these tests, we are effectively overloading\\r\\nthe queues: the messages keep flowing in as fast as possible and therefore any garbage collection or periodic operation (eg. Raft write-ahead log\\r\\nroll-over) will be observable as a latency spike.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"consumption-throughput\",\n      children: \"Consumption Throughput\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Consuming messages from quorum queues is also much faster than it used to be. In particular, consuming messages from a very long queue can up to 10 times faster in our tests.\\r\\nQueues are still meant to be kept relatively short (you can use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/streams\",\n        children: \"streams\"\n      }), \" if you need to store a lot of messages),\\r\\nbut with these improvements, quorum queues should cope well with all kinds of message backlogs.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Take a look at the third test on the last panel (Messages consumed / s). 3.12 starts at over 15k messages/s and gets even faster as the queue\\r\\ngets shorter. Meanwhile, 3.11 can hardly exceed 1000 messages per second. In this test, we are consuming a queue with a backlog of 5 million messages,\\r\\nso you have hopefully never seen quorum queues struggle like this, but the good news is: even in these situations,\\r\\nquorum queues should now perform better and more predictably.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A more likely scenario is a situation where the consumers were unavailable for some time and need to catch up. Let's focus on these tests:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Quorum queues: 3.11 vs 3.12\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/qq-3.11-vs-3.12-consumption.png\")[\"default\"]) + \"\",\n          width: \"1946\",\n          height: \"1188\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"Quorum queues: 3.11 vs 3.12\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In the first phase of each test, consumers are off and a backlog of messages is created. Then the consumers start. In the first test 10 of them,\\r\\nin the second test 50, but only one is active (as a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/consumers#single-active-consumer\",\n        children: \"Single Active Consumer\"\n      }), \").\\r\\nIn both cases, 3.12 offers a significantly higher consumption\\r\\nrate and the queue is drained much more quickly. In the case of 3.11, we can see that it gets progressively faster as the queue backlog gets shorter.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"faster-node-restarts\",\n      children: \"Faster Node Restarts\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This one shouldn't affect most users, but should be very good news for users with many classic queues (eg. MQTT users with many subscriptions).\\r\\nIn our test, we started a node, imported 100,000 classic queues version 2 and then restarted the node. 3.12 was up and running within 3 minutes,\\r\\nwhile 3.11 needed 15 minutes to start serving clients again. 3.11 hit a memory alarm on startup, which made the boot\\r\\nprocess particularly slow. There was a client running just to see when it loses the connection and can establish it again.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Node restart with 100k classic queues v2: 3.11 vs 3.12\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/100k-queues-restart.png\")[\"default\"]) + \"\",\n          width: \"1936\",\n          height: \"578\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"Node restart with 100k classic queues v2: 3.11 vs 3.12\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"no-more-periodic-resource-usage-spikes-with-many-idle-queues\",\n      children: \"No More Periodic Resource Usage Spikes With Many Idle Queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"You may have noticed on the screenshot above, that 3.11 not only took much longer to restart, but also that the publishing rate was spiky, even\\r\\nthough it was a very light workload (just 100 messages a second). The spikes are caused by an internal process which checks the health of the queues\\r\\nto prevent stale queue metrics being emitted. Before 3.12, it'd query each queue for its status to decide if the queue is healthy. However,\\r\\nidle classic queues hibernate (their Erlang process is stopped and its memory compacted) and need to be awaken just to reply that they are healthy.\\r\\nStarting with 3.12, hibernated queues are considered healthy without waking them up, so CPU and memory usage should be lower and more consistent,\\r\\neven on nodes with many queues.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"conclusion\",\n      children: \"Conclusion\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ 3.12 should improve the performance for virtually all users, often significantly. As always, we wholeheartedly recommend\\r\\ntesting release candidates and new versions before you upgrade. We are also always interested in learning how people use RabbitMQ\\r\\nin \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/discussions\",\n        children: \"GitHub Discussions\"\n      }), \" and our \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.rabbitmq.com/discord\",\n        children: \"community Discord server\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If you can share information about your workload, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://perftest.rabbitmq.com/\",\n        children: \"ideally as a perf-test command\"\n      }), \", it will help\\r\\nus make RabbitMQ better for you.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./blog/2023-05-17-rabbitmq-3.12-performance-improvements/index.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/100k-queues-restart.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/100k-queues-restart-d746048c4c9757add94aa9698ab19f4e.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDIzLTA1LTE3LXJhYmJpdG1xLTMuMTItcGVyZm9ybWFuY2UtaW1wcm92ZW1lbnRzLzEwMGstcXVldWVzLXJlc3RhcnQucG5nIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ibG9nLzIwMjMtMDUtMTctcmFiYml0bXEtMy4xMi1wZXJmb3JtYW5jZS1pbXByb3ZlbWVudHMvMTAway1xdWV1ZXMtcmVzdGFydC5wbmc/N2UyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2ltYWdlcy8xMDBrLXF1ZXVlcy1yZXN0YXJ0LWQ3NDYwNDhjNGM5NzU3YWRkOTRhYTk2OThhYjE5ZjRlLnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/100k-queues-restart.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/lazy-3.11-vs-3.12-v1-and-v2.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/lazy-3.11-vs-3.12-v1-and-v2-2aac60d554f8b218f064b6c38ea6d4b5.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDIzLTA1LTE3LXJhYmJpdG1xLTMuMTItcGVyZm9ybWFuY2UtaW1wcm92ZW1lbnRzL2xhenktMy4xMS12cy0zLjEyLXYxLWFuZC12Mi5wbmciLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL2Jsb2cvMjAyMy0wNS0xNy1yYWJiaXRtcS0zLjEyLXBlcmZvcm1hbmNlLWltcHJvdmVtZW50cy9sYXp5LTMuMTEtdnMtMy4xMi12MS1hbmQtdjIucG5nPzJkZTkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvbGF6eS0zLjExLXZzLTMuMTItdjEtYW5kLXYyLTJhYWM2MGQ1NTRmOGIyMThmMDY0YjZjMzhlYTZkNGI1LnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/lazy-3.11-vs-3.12-v1-and-v2.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/lazy-3.11-vs-3.12.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/lazy-3.11-vs-3.12-ab2560a083634ee8816e7e5632e8d420.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDIzLTA1LTE3LXJhYmJpdG1xLTMuMTItcGVyZm9ybWFuY2UtaW1wcm92ZW1lbnRzL2xhenktMy4xMS12cy0zLjEyLnBuZyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWJiaXRtcS13ZWJzaXRlLy4vYmxvZy8yMDIzLTA1LTE3LXJhYmJpdG1xLTMuMTItcGVyZm9ybWFuY2UtaW1wcm92ZW1lbnRzL2xhenktMy4xMS12cy0zLjEyLnBuZz9lODY0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvaW1hZ2VzL2xhenktMy4xMS12cy0zLjEyLWFiMjU2MGEwODM2MzRlZTg4MTZlN2U1NjMyZThkNDIwLnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/lazy-3.11-vs-3.12.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/mirrored-3.11-vs-3.12.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/mirrored-3.11-vs-3.12-91abd7246f7a44fb779a09efcdd45bf9.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDIzLTA1LTE3LXJhYmJpdG1xLTMuMTItcGVyZm9ybWFuY2UtaW1wcm92ZW1lbnRzL21pcnJvcmVkLTMuMTEtdnMtMy4xMi5wbmciLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL2Jsb2cvMjAyMy0wNS0xNy1yYWJiaXRtcS0zLjEyLXBlcmZvcm1hbmNlLWltcHJvdmVtZW50cy9taXJyb3JlZC0zLjExLXZzLTMuMTIucG5nP2ZhODgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvbWlycm9yZWQtMy4xMS12cy0zLjEyLTkxYWJkNzI0NmY3YTQ0ZmI3NzlhMDllZmNkZDQ1YmY5LnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/mirrored-3.11-vs-3.12.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/qq-3.11-vs-3.12-5kb.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/qq-3.11-vs-3.12-5kb-4460bd73d32064069d18c73397c21711.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDIzLTA1LTE3LXJhYmJpdG1xLTMuMTItcGVyZm9ybWFuY2UtaW1wcm92ZW1lbnRzL3FxLTMuMTEtdnMtMy4xMi01a2IucG5nIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ibG9nLzIwMjMtMDUtMTctcmFiYml0bXEtMy4xMi1wZXJmb3JtYW5jZS1pbXByb3ZlbWVudHMvcXEtMy4xMS12cy0zLjEyLTVrYi5wbmc/YzJkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2ltYWdlcy9xcS0zLjExLXZzLTMuMTItNWtiLTQ0NjBiZDczZDMyMDY0MDY5ZDE4YzczMzk3YzIxNzExLnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/qq-3.11-vs-3.12-5kb.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/qq-3.11-vs-3.12-consumption.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/qq-3.11-vs-3.12-consumption-53940cfd6c2b2c34a4acfa8de1b55a74.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDIzLTA1LTE3LXJhYmJpdG1xLTMuMTItcGVyZm9ybWFuY2UtaW1wcm92ZW1lbnRzL3FxLTMuMTEtdnMtMy4xMi1jb25zdW1wdGlvbi5wbmciLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL2Jsb2cvMjAyMy0wNS0xNy1yYWJiaXRtcS0zLjEyLXBlcmZvcm1hbmNlLWltcHJvdmVtZW50cy9xcS0zLjExLXZzLTMuMTItY29uc3VtcHRpb24ucG5nPzA0MWUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvcXEtMy4xMS12cy0zLjEyLWNvbnN1bXB0aW9uLTUzOTQwY2ZkNmMyYjJjMzRhNGFjZmE4ZGUxYjU1YTc0LnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-05-17-rabbitmq-3.12-performance-improvements/qq-3.11-vs-3.12-consumption.png\n");

/***/ })

}]);