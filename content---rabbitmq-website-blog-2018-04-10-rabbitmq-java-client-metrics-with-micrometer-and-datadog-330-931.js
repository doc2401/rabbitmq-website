"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-blog-2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog-330-931"],{

/***/ "./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog-index-md-330.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"permalink":"/rabbitmq-website/blog/2018/04/10/rabbitmq-java-client-metrics-with-micrometer-and-datadog","editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/index.md","source":"@site/blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/index.md","title":"RabbitMQ Java Client Metrics with Micrometer and Datadog","description":"In this post we\'ll cover how the RabbitMQ Java client library gathers runtime metrics and sends them to monitoring systems like JMX and Datadog.","date":"2018-04-10T00:00:00.000Z","tags":[{"inline":true,"label":"Performance","permalink":"/rabbitmq-website/blog/tags/performance"},{"inline":true,"label":"Programming Languages","permalink":"/rabbitmq-website/blog/tags/programming-languages"},{"inline":true,"label":"New Features","permalink":"/rabbitmq-website/blog/tags/new-features"}],"readingTime":5.435,"hasTruncateMarker":true,"authors":[{"name":"Arnaud CogoluÃ¨gnes","url":"https://github.com/acogoluegnes","socials":{"github":"https://github.com/acogoluegnes","linkedin":"https://www.linkedin.com/in/arnaudcogoluegnes/","bluesky":"https://bsky.app/profile/acogoluegnes.bsky.social"},"imageURL":"https://github.com/acogoluegnes.png","key":"acogoluegnes","page":null}],"frontMatter":{"title":"RabbitMQ Java Client Metrics with Micrometer and Datadog","tags":["Performance","Programming Languages","New Features"],"authors":["acogoluegnes"]},"unlisted":false,"prevItem":{"title":"This Month in RabbitMQ, November 2018","permalink":"/rabbitmq-website/blog/2018/12/04/this-month-in-rabbitmq-dec-4-2018"},"nextItem":{"title":"New Configuration Format in RabbitMQ 3.7","permalink":"/rabbitmq-website/blog/2018/02/22/new-configuration-format-in-rabbitmq-3-7"}}');

/***/ }),

/***/ "./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2018_04_10_rabbitmq_java_client_metrics_with_micrometer_and_datadog_index_md_330_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2018_04_10_rabbitmq_java_client_metrics_with_micrometer_and_datadog_index_md_330_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog-index-md-330.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'RabbitMQ Java Client Metrics with Micrometer and Datadog',\n\ttags: [\n\t\t'Performance',\n\t\t'Programming Languages',\n\t\t'New Features'\n\t],\n\tauthors: [\n\t\t'acogoluegnes'\n\t]\n};\nconst contentTitle = undefined;\n\nconst assets = {\n\"authorsImageUrls\": [undefined],\n};\n\n\n\nconst toc = [{\n  \"value\": \"Micrometer in RabbitMQ Java Client\",\n  \"id\": \"micrometer-in-rabbitmq-java-client\",\n  \"level\": 2\n}, {\n  \"value\": \"Going Further\",\n  \"id\": \"going-further\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    em: \"em\",\n    figcaption: \"figcaption\",\n    figure: \"figure\",\n    h2: \"h2\",\n    img: \"img\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In this post we'll cover how the RabbitMQ Java client library gathers runtime metrics and sends them to monitoring systems like JMX and Datadog.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"micrometer-in-rabbitmq-java-client\",\n      children: \"Micrometer in RabbitMQ Java Client\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The Java client provides support for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://micrometer.io/\",\n        children: \"Micrometer\"\n      }), \" as of 4.6.0 and 5.2.0. What does this bring to the table? Micrometer is a metrics facade: an application can use the Micrometer API for metrics collection and choose to send these metrics to different backends like JMX, Prometheus, Netflix Atlas, CloudWatch, Datadog, Graphite, Ganglia, and more.\\r\\nNext lets see how RabbitMQ Java client's users can benefit from Micrometer has to offer.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"We can start by gathering the Java client metrics and exposing them on JMX with Micrometer:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"MeterRegistry jmxRegistry = new JmxMeterRegistry(JmxConfig.DEFAULT, Clock.SYSTEM);\\r\\nConnectionFactory connectionFactory = new ConnectionFactory();\\r\\nMicrometerMetricsCollector metricsCollector = new MicrometerMetricsCollector(\\r\\n    jmxRegistry, \\\"rabbitmq.client\\\"\\r\\n);\\r\\nconnectionFactory.setMetricsCollector(metricsCollector);\\r\\n\\r\\nConnection connection = connectionFactory.newConnection();\\r\\nChannel channel = connection.createChannel();\\r\\nString queue = channel.queueDeclare().getQueue();\\r\\nchannel.basicConsume(queue, true, (ctag, msg) -> { }, (ctag) -> { });\\r\\nexecutor.submit(() -> {\\r\\n    Random random = new Random();\\r\\n    while (true) {\\r\\n        Thread.sleep(random.nextInt(100));\\r\\n        channel.basicPublish(\\\"\\\", queue, null, \\\"\\\".getBytes());\\r\\n    }\\r\\n});\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Then these metrics can be inspected in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://visualvm.github.io/download.html\",\n        children: \"VisualVM\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Java Client Metrics on JMX\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/rabbitmq-java-client-metrics-jmx.png\")[\"default\"]) + \"\",\n          title: \"Java Client Metrics on JMX\",\n          width: \"1051\",\n          height: \"323\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"Java Client Metrics on JMX\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Nothing much new compared to what we had done with Dropwizard Metrics \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2016/11/30/metrics-support-in-rabbitmq-java-client-4-0\",\n        children: \"in a previous post\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"But Micrometer can easily bring value with metrics related to the JVM process. We simply have to bind the appropriate \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"MeterBinder\"\n      }), \"s to the JMX meter registry:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"MeterRegistry jmxRegistry = new JmxMeterRegistry(JmxConfig.DEFAULT, Clock.SYSTEM);\\r\\n// JVM and system metrics:\\r\\nnew ClassLoaderMetrics().bindTo(jmxRegistry);\\r\\nnew JvmMemoryMetrics().bindTo(jmxRegistry);\\r\\nnew JvmGcMetrics().bindTo(jmxRegistry);\\r\\nnew ProcessorMetrics().bindTo(jmxRegistry);\\r\\nnew JvmThreadMetrics().bindTo(jmxRegistry);\\r\\nConnectionFactory connectionFactory = new ConnectionFactory();\\r\\nMicrometerMetricsCollector metricsCollector = new MicrometerMetricsCollector(\\r\\n    jmxRegistry, \\\"rabbitmq.client\\\"\\r\\n);\\r\\nconnectionFactory.setMetricsCollector(metricsCollector);\\r\\n\\r\\nConnection connection = connectionFactory.newConnection();\\r\\nChannel channel = connection.createChannel();\\r\\nString queue = channel.queueDeclare().getQueue();\\r\\nchannel.basicConsume(queue, true, (ctag, msg) -> { }, (ctag) -> { });\\r\\nexecutor.submit(() -> {\\r\\n    Random random = new Random();\\r\\n    while (true) {\\r\\n        Thread.sleep(random.nextInt(100));\\r\\n        channel.basicPublish(\\\"\\\", queue, null, \\\"\\\".getBytes());\\r\\n    }\\r\\n});\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Then the new metrics show up in JVisualVM, there is a bunch of them:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Java Client,JVM, and System Metrics on JMX\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/rabbitmq-java-client-metrics-jmx-more-metrics.png\")[\"default\"]) + \"\",\n          title: \"Java Client, JVM, and System Metrics on JMX\",\n          width: \"1345\",\n          height: \"645\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"Java Client,JVM, and System Metrics on JMX\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In practice applications often have several instances running at once, sometimes distributed across different data centers. How can we identify an instance that runs in a given datacenter and make the monitoring system aware of this information? Micrometer provides metrics \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"tags\"\n      }), \": it's a matter of adding the datacenter information to the metric collector. We can adapt our example program and iterate over a list of data centers to simulate distributed instances. We use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"dc\"\n      }), \" tag for the data center information, and add a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"host\"\n      }), \" tag as well:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"for (String dc : new String[] {\\\"us\\\", \\\"europe\\\", \\\"asia\\\"}) {\\r\\n    Tags tags = Tags.of(\\\"host\\\", hostname, \\\"dc\\\", dc);\\r\\n    MeterRegistry jmxRegistry = new JmxMeterRegistry(JmxConfig.DEFAULT, Clock.SYSTEM);\\r\\n    new ClassLoaderMetrics(tags).bindTo(jmxRegistry);\\r\\n    new JvmMemoryMetrics(tags).bindTo(jmxRegistry);\\r\\n    new JvmGcMetrics(tags).bindTo(jmxRegistry);\\r\\n    new ProcessorMetrics(tags).bindTo(jmxRegistry);\\r\\n    new JvmThreadMetrics(tags).bindTo(jmxRegistry);\\r\\n    ConnectionFactory connectionFactory = new ConnectionFactory();\\r\\n    MicrometerMetricsCollector metricsCollector = new MicrometerMetricsCollector(\\r\\n        jmxRegistry, \\\"rabbitmq.client\\\", tags\\r\\n    );\\r\\n    connectionFactory.setMetricsCollector(metricsCollector);\\r\\n\\r\\n    Connection connection = connectionFactory.newConnection();\\r\\n    Channel channel = connection.createChannel();\\r\\n    String queue = channel.queueDeclare().getQueue();\\r\\n    channel.basicConsume(queue, true, (ctag, msg) -> { }, (ctag) -> { });\\r\\n    executor.submit(() -> {\\r\\n        Random random = new Random();\\r\\n        int offset = dc.length() * 10;\\r\\n        while (true) {\\r\\n            Thread.sleep(random.nextInt(100) + offset);\\r\\n            channel.basicPublish(\\\"\\\", queue, null, \\\"\\\".getBytes());\\r\\n        }\\r\\n    }); \\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Let's see how it looks now in VisualVM:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Java Client Metrics for Different Datacenters on JMX\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/rabbitmq-java-client-metrics-jmx-dc.png\")[\"default\"]) + \"\",\n          title: \"Java Client Metrics for Different Datacenters on JMX\",\n          width: \"1299\",\n          height: \"582\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"Java Client Metrics for Different Datacenters on JMX\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"There's now a really long list of metrics as Micrometer flattens the set of tag/key value pairs and adds them to the name. This is because JMX is a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"hierarchical\"\n      }), \" monitoring system, it doesn't support \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"dimensions\"\n      }), \". This makes it hard to reason about our metrics as a whole, across all our instances and datacenters. And that would be even worse in real life: here we simulate different instances of our application in the same JVM process, but in a real system, we would have a tab for each process, even harder to reason about.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Fortunately, Micrometer takes advantage of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"dimensional\"\n      }), \" monitoring systems. Just imagine we can see the aggregated metrics of our different instances and drill down into a specific datacenter or a given host.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.datadoghq.com/\",\n        children: \"Datadog\"\n      }), \" is such a system, and Micrometer supports it out of the box. We can use a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"DatadogMeterRegistry\"\n      }), \" and keep using JMX thanks to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"CompositeMeterRegistry\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"for (String dc : new String[] {\\\"us\\\", \\\"europe\\\", \\\"asia\\\"}) {\\r\\n    CompositeMeterRegistry compositeMeterRegistry = new CompositeMeterRegistry();\\r\\n    MeterRegistry datadogRegistry = new DatadogMeterRegistry(config, Clock.SYSTEM);\\r\\n    MeterRegistry jmxRegistry = new JmxMeterRegistry(JmxConfig.DEFAULT, Clock.SYSTEM);\\r\\n\\r\\n    Tags tags = Tags.of(\\\"host\\\", hostname, \\\"dc\\\", dc);\\r\\n    new ClassLoaderMetrics(tags).bindTo(compositeMeterRegistry);\\r\\n    new JvmMemoryMetrics(tags).bindTo(compositeMeterRegistry);\\r\\n    new JvmGcMetrics(tags).bindTo(compositeMeterRegistry);\\r\\n    new ProcessorMetrics(tags).bindTo(compositeMeterRegistry);\\r\\n    new JvmThreadMetrics(tags).bindTo(compositeMeterRegistry);\\r\\n\\r\\n    compositeMeterRegistry.add(datadogRegistry);\\r\\n    compositeMeterRegistry.add(jmxRegistry);\\r\\n\\r\\n    ConnectionFactory connectionFactory = new ConnectionFactory();\\r\\n    MicrometerMetricsCollector metricsCollector = new MicrometerMetricsCollector(\\r\\n        compositeMeterRegistry, \\\"rabbitmq.client\\\", tags\\r\\n    );\\r\\n    connectionFactory.setMetricsCollector(metricsCollector);\\r\\n\\r\\n    Connection connection = connectionFactory.newConnection();\\r\\n    Channel channel = connection.createChannel();\\r\\n    String queue = channel.queueDeclare().getQueue();\\r\\n    channel.basicConsume(queue, true, (ctag, msg) -> { }, (ctag) -> { });\\r\\n    executor.submit(() -> {\\r\\n        Random random = new Random();\\r\\n        int offset = dc.length() * 10;\\r\\n        while (true) {\\r\\n            Thread.sleep(random.nextInt(100) + offset);\\r\\n            channel.basicPublish(\\\"\\\", queue, null, \\\"\\\".getBytes());\\r\\n        }\\r\\n    });\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"What happens under the hood? Micrometer gathers the metrics and send them every 10 seconds to the Datadog service through HTTPS. Note you need a Datadog API key for this to work, it is used in the Datadog registry configuration. The host and the metrics should show up in your Datadog web UI and you can easilly build a dashboard for your RabbitMQ Java client instances:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"RabbitMQ Java Client Metrics Datadog Dashboard\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/rabbitmq-java-client-metrics-datadog-dashboard.png\")[\"default\"]) + \"\",\n          title: \"RabbitMQ Java Client Metrics Datadog Dashboard\",\n          width: \"643\",\n          height: \"667\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"RabbitMQ Java Client Metrics Datadog Dashboard\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Neat isn't it?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"going-further\",\n      children: \"Going Further\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Collecting metrics at a single level â say, a particular library such as the RabbitMQ Java client â is only a single step on the path\\r\\nof gaining visibility into the entire service-oriented system.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Datadog also provides \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.datadoghq.com/integrations/rabbitmq/\",\n        children: \"support for RabbitMQ nodes and clusters\"\n      }), \". A node needs to have the Datadog agent installed and this agent will connect to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/management\",\n        children: \"RabbitMQ Management Plugin\"\n      }), \" to gather metrics. Datadog engineers wrote a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.datadoghq.com/blog/rabbitmq-monitoring/\",\n        children: \"series\"\n      }), \" of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.datadoghq.com/blog/rabbitmq-monitoring-tools\",\n        children: \"blog posts\"\n      }), \" that cover \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.datadoghq.com/blog/monitoring-rabbitmq-performance-with-datadog/\",\n        children: \"how to monitor RabbitMQ\"\n      }), \". This is a piece of recommended reading for anyone interested in RabbitMQ operations.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Back to the client level, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://projects.spring.io/spring-boot/\",\n        children: \"Spring Boot\"\n      }), \" is a popular way to write RabbitMQ applications in Java. Micrometer is the library that backs up Spring Boot 2.0 metrics system. RabbitMQ Java client metrics collection is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#production-ready-metrics-rabbitmq\",\n        children: \"configured automatically\"\n      }), \", the developer doesn't even need to register any \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"MetricsCollector\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In the world of microservices and IoT workloads where application instances spring up like mushrooms, we hope this makes it easier to gain visibility\\r\\ninto operations of your Java-based apps that use RabbitMQ for messaging thanks to these metrics!\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/acogoluegnes/rabbitmq-java-client-micrometer-datadog\",\n        children: \"Source code\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/index.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/rabbitmq-java-client-metrics-datadog-dashboard.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/rabbitmq-java-client-metrics-datadog-dashboard-1fba9d42681ecda4f8794d37153a3085.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDE4LTA0LTEwLXJhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3Mtd2l0aC1taWNyb21ldGVyLWFuZC1kYXRhZG9nL3JhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3MtZGF0YWRvZy1kYXNoYm9hcmQucG5nIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ibG9nLzIwMTgtMDQtMTAtcmFiYml0bXEtamF2YS1jbGllbnQtbWV0cmljcy13aXRoLW1pY3JvbWV0ZXItYW5kLWRhdGFkb2cvcmFiYml0bXEtamF2YS1jbGllbnQtbWV0cmljcy1kYXRhZG9nLWRhc2hib2FyZC5wbmc/ZTYwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2ltYWdlcy9yYWJiaXRtcS1qYXZhLWNsaWVudC1tZXRyaWNzLWRhdGFkb2ctZGFzaGJvYXJkLTFmYmE5ZDQyNjgxZWNkYTRmODc5NGQzNzE1M2EzMDg1LnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/rabbitmq-java-client-metrics-datadog-dashboard.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/rabbitmq-java-client-metrics-jmx-dc.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/rabbitmq-java-client-metrics-jmx-dc-733ce7a076daf056905ca81e8699f5ac.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDE4LTA0LTEwLXJhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3Mtd2l0aC1taWNyb21ldGVyLWFuZC1kYXRhZG9nL3JhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3Mtam14LWRjLnBuZyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWJiaXRtcS13ZWJzaXRlLy4vYmxvZy8yMDE4LTA0LTEwLXJhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3Mtd2l0aC1taWNyb21ldGVyLWFuZC1kYXRhZG9nL3JhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3Mtam14LWRjLnBuZz9mODIyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvaW1hZ2VzL3JhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3Mtam14LWRjLTczM2NlN2EwNzZkYWYwNTY5MDVjYTgxZTg2OTlmNWFjLnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/rabbitmq-java-client-metrics-jmx-dc.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/rabbitmq-java-client-metrics-jmx-more-metrics.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/rabbitmq-java-client-metrics-jmx-more-metrics-aa99c9d89ee978cf7a9a356a5ac1ad30.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDE4LTA0LTEwLXJhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3Mtd2l0aC1taWNyb21ldGVyLWFuZC1kYXRhZG9nL3JhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3Mtam14LW1vcmUtbWV0cmljcy5wbmciLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL2Jsb2cvMjAxOC0wNC0xMC1yYWJiaXRtcS1qYXZhLWNsaWVudC1tZXRyaWNzLXdpdGgtbWljcm9tZXRlci1hbmQtZGF0YWRvZy9yYWJiaXRtcS1qYXZhLWNsaWVudC1tZXRyaWNzLWpteC1tb3JlLW1ldHJpY3MucG5nPzNkMDIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvcmFiYml0bXEtamF2YS1jbGllbnQtbWV0cmljcy1qbXgtbW9yZS1tZXRyaWNzLWFhOTljOWQ4OWVlOTc4Y2Y3YTlhMzU2YTVhYzFhZDMwLnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/rabbitmq-java-client-metrics-jmx-more-metrics.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/rabbitmq-java-client-metrics-jmx.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/rabbitmq-java-client-metrics-jmx-bba9faf18c453ad83e7d7b3d11975d65.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDE4LTA0LTEwLXJhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3Mtd2l0aC1taWNyb21ldGVyLWFuZC1kYXRhZG9nL3JhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3Mtam14LnBuZyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWJiaXRtcS13ZWJzaXRlLy4vYmxvZy8yMDE4LTA0LTEwLXJhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3Mtd2l0aC1taWNyb21ldGVyLWFuZC1kYXRhZG9nL3JhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3Mtam14LnBuZz80MGM5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvaW1hZ2VzL3JhYmJpdG1xLWphdmEtY2xpZW50LW1ldHJpY3Mtam14LWJiYTlmYWYxOGM0NTNhZDgzZTdkN2IzZDExOTc1ZDY1LnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/rabbitmq-java-client-metrics-jmx.png\n");

/***/ })

}]);