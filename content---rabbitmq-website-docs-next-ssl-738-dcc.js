"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-docs-next-ssl-738-dcc"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/default/site-docs-ssl-index-md-738.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"ssl/index","title":"TLS Support","description":"<!--","source":"@site/docs/ssl/index.md","sourceDirName":"ssl","slug":"/ssl/","permalink":"/rabbitmq-website/docs/next/ssl/","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/docs/ssl/index.md","tags":[],"version":"current","frontMatter":{"title":"TLS Support"},"sidebar":"docsSidebar","previous":{"title":"Net Tick Time","permalink":"/rabbitmq-website/docs/next/nettick"},"next":{"title":"Troubleshooting Connectivity","permalink":"/rabbitmq-website/docs/next/troubleshooting-networking"}}');

/***/ }),

/***/ "./docs/ssl/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_default_site_docs_ssl_index_md_738_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_default_site_docs_ssl_index_md_738_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/default/site-docs-ssl-index-md-738.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n/* harmony import */ var _site_src_components_DotNetClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/components/DotNetClient/index.js\");\n/* harmony import */ var _theme_Tabs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n/* harmony import */ var _theme_TabItem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'TLS Support'\n};\nconst contentTitle = 'TLS Support';\n\nconst assets = {\n\n};\n\n\n\n\n\n\nconst toc = [{\n  \"value\": \"Table of Contents\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"Where to Learn the Basics of TLS\",\n  \"id\": \"basics\",\n  \"level\": 2\n}, {\n  \"value\": \"TLS and Messaging Protocols\",\n  \"id\": \"protocols\",\n  \"level\": 2\n}, {\n  \"value\": \"Common Approaches to TLS for client Connections with RabbitMQ\",\n  \"id\": \"tls-connectivity-options\",\n  \"level\": 2\n}, {\n  \"value\": \"Erlang/OTP Requirements for TLS Support\",\n  \"id\": \"erlang-otp-requirements\",\n  \"level\": 2\n}, {\n  \"value\": \"Known Incompatibilities and Limitations\",\n  \"id\": \"known-compatibility-issues\",\n  \"level\": 2\n}, {\n  \"value\": \"TLS Basics: Certificate Authorities, Certificates, Keys\",\n  \"id\": \"certificates-and-keys\",\n  \"level\": 2\n}, {\n  \"value\": \"Two Primary Objectives of TLS\",\n  \"id\": \"two-primary-objectives-of-tls\",\n  \"level\": 3\n}, {\n  \"value\": \"Certificates, Private Keys, and Certificate Authorities\",\n  \"id\": \"certificates-private-keys-and-certificate-authorities\",\n  \"level\": 3\n}, {\n  \"value\": \"The Short Route to Generating a CA, Certificates, and Keys\",\n  \"id\": \"automated-certificate-generation\",\n  \"level\": 2\n}, {\n  \"value\": \"Using tls-gen&#39;s Basic Profile\",\n  \"id\": \"automated-certificate-generation-transcript\",\n  \"level\": 3\n}, {\n  \"value\": \"Enabling TLS Support in RabbitMQ\",\n  \"id\": \"enabling-tls\",\n  \"level\": 2\n}, {\n  \"value\": \"Certificate and Private Key File Paths\",\n  \"id\": \"enabling-tls-paths\",\n  \"level\": 3\n}, {\n  \"value\": \"How to Verify that TLS is Enabled\",\n  \"id\": \"enabling-tls-verify-configuration\",\n  \"level\": 3\n}, {\n  \"value\": \"Providing Private Key Password\",\n  \"id\": \"private-key-passwords\",\n  \"level\": 3\n}, {\n  \"value\": \"TLS Peer Verification: Who Do You Say You Are?\",\n  \"id\": \"peer-verification\",\n  \"level\": 2\n}, {\n  \"value\": \"How Peer Verification Works\",\n  \"id\": \"peer-verification-how-it-works\",\n  \"level\": 3\n}, {\n  \"value\": \"Mutual Peer Verification (Mutual TLS Authentication or mTLS)\",\n  \"id\": \"mutual-peer-verification-mutual-tls-authentication-or-mtls\",\n  \"level\": 3\n}, {\n  \"value\": \"When Peer Verification Fails\",\n  \"id\": \"when-peer-verification-fails\",\n  \"level\": 3\n}, {\n  \"value\": \"Trusted Certificates\",\n  \"id\": \"peer-verification-trusted-certificates\",\n  \"level\": 3\n}, {\n  \"value\": \"Enabling Peer Verification\",\n  \"id\": \"peer-verification-configuration\",\n  \"level\": 3\n}, {\n  \"value\": \"Certificate Chains and Verification Depth\",\n  \"id\": \"peer-verification-depth\",\n  \"level\": 3\n}, {\n  \"value\": \"Using TLS in the Java Client\",\n  \"id\": \"java-client\",\n  \"level\": 2\n}, {\n  \"value\": \"Key Managers, Trust Managers and Stores\",\n  \"id\": \"java-client-trust-managers-and-stores\",\n  \"level\": 3\n}, {\n  \"value\": \"Connecting with TLS\",\n  \"id\": \"java-client-connecting\",\n  \"level\": 3\n}, {\n  \"value\": \"Connecting with Peer Verification Enabled\",\n  \"id\": \"java-client-connecting-with-peer-verification\",\n  \"level\": 3\n}, {\n  \"value\": \"<a class=\\\"anchor\\\">Server Hostname Verification</a>\",\n  \"id\": \"server-hostname-verification\",\n  \"level\": 4\n}, {\n  \"value\": \"Configuring TLS Version in Java Client\",\n  \"id\": \"tls-versions-java-client\",\n  \"level\": 3\n}, {\n  \"value\": \"Using TLS in the .NET Client\",\n  \"id\": \"dotnet-client\",\n  \"level\": 2\n}, {\n  \"value\": \".NET Trust Store\",\n  \"id\": \"dotnet-peer-verification\",\n  \"level\": 3\n}, {\n  \"value\": \"Certificate Management with Certmgr\",\n  \"id\": \"certmgr\",\n  \"level\": 3\n}, {\n  \"value\": \"Connection TLS Settings\",\n  \"id\": \"dotnet-connection-params\",\n  \"level\": 3\n}, {\n  \"value\": \"TLS Versions\",\n  \"id\": \"dotnet-tls-versions-dotnet-client\",\n  \"level\": 3\n}, {\n  \"value\": \"Code Example\",\n  \"id\": \"dotnet-example\",\n  \"level\": 3\n}, {\n  \"value\": \"TLS Peer Verification in .NET Client\",\n  \"id\": \"tls-verification-in-dotnet\",\n  \"level\": 3\n}, {\n  \"value\": \"Limiting TLS Versions Used by the Server\",\n  \"id\": \"tls-versions\",\n  \"level\": 2\n}, {\n  \"value\": \"Why Limit TLS Versions\",\n  \"id\": \"tls-versions-why-limit\",\n  \"level\": 3\n}, {\n  \"value\": \"Why Not Limit TLS Versions\",\n  \"id\": \"tls-versions-why-not-limit\",\n  \"level\": 3\n}, {\n  \"value\": \"Verifying Enabled TLS Versions\",\n  \"id\": \"verifying-tls-versions\",\n  \"level\": 3\n}, {\n  \"value\": \"TLSv1.3\",\n  \"id\": \"tls1.3\",\n  \"level\": 3\n}, {\n  \"value\": \"TLS Version Support Table for JDK and .NET\",\n  \"id\": \"tls-version-support-in-jdk-and-net\",\n  \"level\": 3\n}, {\n  \"value\": \"Public Key Usage Options\",\n  \"id\": \"key-usage\",\n  \"level\": 2\n}, {\n  \"value\": \"Extensions and Their Effect on Accepted Cipher Suites (Cipher Suite Filtering)\",\n  \"id\": \"key-usage-effects-on-cipher-suites\",\n  \"level\": 3\n}, {\n  \"value\": \"Examining Certificate Extensions\",\n  \"id\": \"examining-certificate-extensions\",\n  \"level\": 3\n}, {\n  \"value\": \"Cipher Suites\",\n  \"id\": \"cipher-suites\",\n  \"level\": 2\n}, {\n  \"value\": \"Listing Cipher Suites Available on a RabbitMQ Node\",\n  \"id\": \"available-cipher-suites\",\n  \"level\": 3\n}, {\n  \"value\": \"Configuring Cipher Suites\",\n  \"id\": \"configuring-cipher-suites\",\n  \"level\": 3\n}, {\n  \"value\": \"Cipher Suite Order\",\n  \"id\": \"cipher-suite-order\",\n  \"level\": 3\n}, {\n  \"value\": \"Known TLS Vulnerabilities and Their Mitigation\",\n  \"id\": \"major-vulnerabilities\",\n  \"level\": 2\n}, {\n  \"value\": \"ROBOT\",\n  \"id\": \"robot\",\n  \"level\": 3\n}, {\n  \"value\": \"POODLE\",\n  \"id\": \"poodle\",\n  \"level\": 3\n}, {\n  \"value\": \"BEAST\",\n  \"id\": \"beast\",\n  \"level\": 3\n}, {\n  \"value\": \"Evaluating TLS Setup Security\",\n  \"id\": \"tls-evaluation-tools\",\n  \"level\": 2\n}, {\n  \"value\": \"testssl.sh\",\n  \"id\": \"testssl-sh\",\n  \"level\": 3\n}, {\n  \"value\": \"Evaluation of a TLS 1.3 Setup\",\n  \"id\": \"evaluation-of-a-tls-13-setup\",\n  \"level\": 3\n}, {\n  \"value\": \"Evaluation of a TLS 1.2 Setup with Restricted Cipher Suites\",\n  \"id\": \"evaluation-of-a-tls-12-setup-with-restricted-cipher-suites\",\n  \"level\": 3\n}, {\n  \"value\": \"TLS Certificate and Private Key Rotation\",\n  \"id\": \"rotation\",\n  \"level\": 2\n}, {\n  \"value\": \"Replacing Certificate and Private Key Files on Disk\",\n  \"id\": \"replacing-certificate-and-private-key-files-on-disk\",\n  \"level\": 3\n}, {\n  \"value\": \"Clearing the Certificate and Private Key Store Cache\",\n  \"id\": \"clearing-the-certificate-and-private-key-store-cache\",\n  \"level\": 3\n}, {\n  \"value\": \"The Trust Store Plugin\",\n  \"id\": \"trust-store-plugin\",\n  \"level\": 2\n}, {\n  \"value\": \"Using TLS in the Erlang Client\",\n  \"id\": \"erlang-client\",\n  \"level\": 2\n}, {\n  \"value\": \"Erlang TLS Options\",\n  \"id\": \"erlang-ssl\",\n  \"level\": 3\n}, {\n  \"value\": \"Code Example\",\n  \"id\": \"erlang-code-example\",\n  \"level\": 3\n}, {\n  \"value\": \"Manually Generating a CA, Certificates and Private Keys\",\n  \"id\": \"manual-certificate-generation\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    header: \"header\",\n    img: \"img\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"tls-support\",\n        children: \"TLS Support\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Table of Contents\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ has inbuilt support for TLS. This includes client connections and popular plugins, where applicable,\\r\\nsuch as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./federation\",\n        children: \"Federation links\"\n      }), \". It is also possible to use TLS\\r\\nto \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering-ssl\",\n        children: \"encrypt inter-node connections in clusters\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This guide covers various topics related to TLS in RabbitMQ, with a focus on client\\r\\nconnections:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Two \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#tls-connectivity-options\",\n          children: \"ways of using TLS\"\n        }), \" for client connections: direct or via a TLS terminating proxy\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#erlang-otp-requirements\",\n          children: \"Erlang/OTP requirements\"\n        }), \" for TLS support\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#enabling-tls\",\n          children: \"Enabling TLS\"\n        }), \" in RabbitMQ\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"How to generate self-signed certificates for development and QA environments \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#automated-certificate-generation\",\n          children: \"with tls-gen\"\n        }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#manual-certificate-generation\",\n          children: \"manually\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"TLS configuration in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#java-client\",\n          children: \"Java\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#dotnet-client\",\n          children: \".NET\"\n        }), \" clients\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#peer-verification\",\n          children: \"Peer (certificate chain) verification\"\n        }), \" of client connections or mutual (\\\"mTLS\\\")\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Public \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#key-usage\",\n          children: \"key usage extensions\"\n        }), \" relevant to RabbitMQ\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"How to control what \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#tls-versions\",\n          children: \"TLS version\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#cipher-suites\",\n          children: \"cipher suite\"\n        }), \" are enabled\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#tls1.3\",\n          children: \"TLSv1.3\"\n        }), \" support\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Tools that can be used to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#tls-evaluation-tools\",\n          children: \"evaluate a TLS setup\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#rotation\",\n          children: \"Certificate and key rotation\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#trust-store-plugin\",\n          children: \"trust store plugin\"\n        }), \" for environments where trusted certificates changes frequently\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Known \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#major-vulnerabilities\",\n          children: \"attacks on TLS\"\n        }), \" and their mitigation\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"How to use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#private-key-passwords\",\n          children: \"private key passwords\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"and more.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"basics\",\n      children: \"Where to Learn the Basics of TLS\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This guide tries to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#certificates-and-keys\",\n        children: \"explain the basics of TLS\"\n      }), \" but it is not, however, a primer on TLS, encryption, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/public_key_infrastructure\",\n        children: \"public Key Infrastructure\"\n      }), \" and related topics, so the concepts are covered very briefly.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A number of beginner-oriented primers on TLS are available elsewhere on the Web:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://medium.com/zkpass/a-primer-on-transport-layer-security-tls-a7495eeff004\",\n          children: \"one\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://www.cloudflare.com/en-ca/learning/ssl/why-use-tls-1.3/\",\n          children: \"two\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://hpbn.co/transport-layer-security-tls/\",\n          children: \"three\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://medium.com/talpor/ssl-tls-authentication-explained-86f00064280\",\n          children: \"four\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"protocols\",\n      children: \"TLS and Messaging Protocols\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"TLS can be enabled for all protocols supported by RabbitMQ.\\r\\nHowever, this guide primarily focuses on AMQP 1.0 and AMQP 0-9-1 listeners.\\r\\nSee \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./mqtt\",\n        children: \"MQTT\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./stomp\",\n        children: \"STOMP\"\n      }), \", and their \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./web-mqtt\",\n        children: \"respective WebSocket transport\"\n      }), \" guides\\r\\nfor TLS configuration examples for those protocols.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./management\",\n        children: \"HTTP API\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering-ssl\",\n        children: \"inter-node and CLI tool traffic\"\n      }), \" can be configured\\r\\nto use TLS (HTTPS) as well.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To configure TLS on Kubernetes using the RabbitMQ Cluster Operator, see the guide for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/kubernetes/operator/using-operator#tls\",\n        children: \"Configuring TLS\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For an overview of common TLS troubleshooting techniques, see \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./troubleshooting-ssl\",\n        children: \"Troubleshooting TLS-related issues\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./troubleshooting-networking\",\n        children: \"Troubleshooting Networking\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"tls-connectivity-options\",\n      children: \"Common Approaches to TLS for client Connections with RabbitMQ\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For client connections, there are two common approaches:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Configure RabbitMQ to handle TLS connections\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Use a proxy or load balancer (such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"http://www.haproxy.org/\",\n          children: \"HAproxy\"\n        }), \")\\r\\nto perform \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/TLS_termination_proxy\",\n          children: \"TLS termination\"\n        }), \" of client connections and use plain TCP connections to RabbitMQ nodes.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Both approaches are valid and have pros and cons. This guide will focus on the\\r\\nfirst option. Certain parts of this guide would still be relevant for environments\\r\\nthat choose the second option.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"erlang-otp-requirements\",\n      children: \"Erlang/OTP Requirements for TLS Support\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In order to support TLS connections, RabbitMQ needs TLS and\\r\\ncrypto-related modules to be available in the Erlang/OTP\\r\\ninstallation. The recommended Erlang/OTP version to use with\\r\\nTLS is the most recent \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./which-erlang\",\n        children: \"supported Erlang release\"\n      }), \".\\r\\nEarlier versions, even if they are supported, may work for most certificates\\r\\nbut have known limitations (see below).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The Erlang \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"asn1\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"crypto\"\n      }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"public_key\"\n      }), \", and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ssl\"\n      }), \" libraries\\r\\n(applications) must be installed and functional. On Debian and\\r\\nUbuntu this is provided by the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://packages.ubuntu.com/search?keywords=erlang-asn1\",\n        children: \"erlang-asn1\"\n      }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://packages.ubuntu.com/search?keywords=erlang-crypto\",\n        children: \"erlang-crypto\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://packages.ubuntu.com/search?keywords=erlang-public-key\",\n        children: \"erlang-public-key\"\n      }), \", and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://packages.ubuntu.com/search?keywords=erlang-ssl\",\n        children: \"erlang-ssl\"\n      }), \" packages, respectively. The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/erlang-rpm\",\n        children: \"zero dependency\\r\\nErlang RPM for RabbitMQ\"\n      }), \" includes the above modules.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If Erlang/OTP is compiled from source, it is necessary to ensure that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"configure\"\n      }), \"\\r\\nfinds OpenSSL and builds the above libraries.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When investigating TLS connectivity issues, please keep in mind that in the vast majority\\r\\nof cases they are environment-specific (e.g. certificates are missing from the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-verification-trusted-certificates\",\n        children: \"trusted certificate store\"\n      }), \")\\r\\nand do not indicate a bug or limitation in Erlang/OTP's TLS implementation. Please go through the steps outlined\\r\\nin the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./troubleshooting-ssl\",\n        children: \"Troubleshooting TLS guide\"\n      }), \" to gather\\r\\nmore information first.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"known-compatibility-issues\",\n      children: \"Known Incompatibilities and Limitations\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If Elliptic curve cryptography (ECC) cipher suites is\\r\\nexpected to be used, a recent \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./which-erlang\",\n        children: \"supported Erlang release\"\n      }), \"\\r\\nis highly recommended. Earlier releases have known limitations around ECC support.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If you face the above limitations or any other incompatibilities,\\r\\nuse the TLS termination option (see above).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"certificates-and-keys\",\n      children: \"TLS Basics: Certificate Authorities, Certificates, Keys\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"TLS is a large and fairly complex topic. Before explaining \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#enabling-tls\",\n        children: \"how to enable TLS in RabbitMQ\"\n      }), \"\\r\\nit's worth briefly cover some of the concepts used in this guide. This section is intentionally brief and oversimplifies\\r\\nsome things. Its goal is to get the reader started with enabling TLS for RabbitMQ and applications.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A number of beginner-oriented primers on TLS are available elsewhere on the Web:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://medium.com/zkpass/a-primer-on-transport-layer-security-tls-a7495eeff004\",\n          children: \"one\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://www.cloudflare.com/en-ca/learning/ssl/why-use-tls-1.3/\",\n          children: \"two\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://hpbn.co/transport-layer-security-tls/\",\n          children: \"three\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://medium.com/talpor/ssl-tls-authentication-explained-86f00064280\",\n          children: \"four\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For a thorough understanding of\\r\\nTLS and how to get the most out of it, we would recommend the use\\r\\nof other resources, for example \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        class: \"extlink\",\n        href: \"http://oreilly.com/catalog/9780596002701/\",\n        children: \"Network Security with\\r\\nOpenSSL\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"two-primary-objectives-of-tls\",\n      children: \"Two Primary Objectives of TLS\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"TLS has two primary purposes: encrypting connection traffic and providing a way to authenticate (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-verification\",\n        children: \"verify\"\n      }), \")\\r\\nthe peer to mitigate against \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Man-in-the-middle_attack\",\n        children: \"Man-in-the-Middle attacks\"\n      }), \".\\r\\nBoth are accomplished using a set of roles, policies and procedures known as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/public_key_infrastructure\",\n        children: \"Public Key Infrastructure\"\n      }), \" (PKI).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A PKI is based on the concept of digital identities that can be cryptographically (mathematically) verified. Those identities are called\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"certificates\"\n      }), \" or more precisely, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"certificate/key pairs\"\n      }), \". Every TLS-enabled server usually has its own certificate/key\\r\\npair that it uses to compute a connection-specific key that will be used to encrypt traffic sent on the connection.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Also, if asked, it can present its certificate (public key) to the connection peer. Clients may or may not have their own certificates.\\r\\nIn the context of messaging and tools such as RabbitMQ it is quite common for\\r\\nclients to also use certificate/key pairs so that servers can validate their identity.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"certificates-private-keys-and-certificate-authorities\",\n      children: \"Certificates, Private Keys, and Certificate Authorities\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Certificate/key pairs are generated by tools such as OpenSSL and signed by entities called \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Certificate_authority\",\n          children: \"Certificate Authorities\"\n        })\n      }), \" (CA).\\r\\nCAs issue certificates that users (applications or other CAs) use. When a certificate is signed by a CA, they form a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"chain of trust\"\n      }), \". Such chains can include\\r\\nmore than one CA but ultimately sign a certificate/key pair used by an application (a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"leaf\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"end user\"\n      }), \" certificate).\\r\\nChains of CA certificates are usually distributed together in a single file. Such file is called a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"CA bundle\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Here's an example of the most basic chain with one root CA and one leaf (server or client) certificate:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"figure\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Root CA and leaf certificates\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./docs/ssl/root_ca_and_leaf.png\")[\"default\"]) + \"\",\n          width: \"248\",\n          height: \"197\"\n        })\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A chain with intermediate certificates might look like this:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"figure\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Root CA, intermediate and leaf certificates\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./docs/ssl/root_intermediate_ca_and_leaf.png\")[\"default\"]) + \"\",\n          width: \"248\",\n          height: \"318\"\n        })\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"There are organizations that sign and issue certificate/key pairs. Most of them are widely trusted CAs and charge a fee for their services.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A TLS-enabled RabbitMQ node must have a set of Certificate Authority certificates it considers to be trusted in a file (a CA bundle),\\r\\na certificate (public key) file and a private key file. The files will be read from the local filesystem. They must be readable by the effective user\\r\\nof the RabbitMQ node process.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Both ends of a TLS-enabled connection can optionally verify\\r\\nthe other end of the connection. While doing so, they try to locate a trusted Certificate Authority in the certificate list\\r\\npresented by the peer. When both sides perform this verification process, this is known\\r\\nas \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"mutual TLS authentication\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"mTLS\"\n      }), \".\\r\\nMore on this in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-verification\",\n        children: \"Peer Verification\"\n      }), \" section.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This guide assumes the user has access to a Certificate Authority and two certificate/key pairs\\r\\nin a number of formats for different client libraries to use.\\r\\nThis is best done using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#automated-certificate-generation\",\n        children: \"existing tools\"\n      }), \"\\r\\nbut those looking to get more familiar with the topic and OpenSSL command line\\r\\ntools there's a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#manual-certificate-generation\",\n        children: \"separate section\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In production environments certificates are generated by a commercial Certificate Authority\\r\\nor a Certificate Authority issued by the internal security team. In those cases Certificate Authority\\r\\nbundle files very likely will contain more than one certificate. This doesn't change how the bundle file\\r\\nis used when configuration RabbitMQ as long as the same basic \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#enabling-tls-paths\",\n        children: \"file and path requirements\"\n      }), \" are met.\\r\\nIn other words, whether the certificates are self-signed or issued by a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-verification-trusted-certificates\",\n        children: \"trusted CA\"\n      }), \", they are\\r\\nconfigured the same way. The section on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-verification\",\n        children: \"peer verification\"\n      }), \" covers this in detail.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"automated-certificate-generation\",\n      children: \"The Short Route to Generating a CA, Certificates, and Keys\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This guide assumes the user has access to a CA certificate bundle file and two \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#certificates-and-keys\",\n        children: \"certificate/key pairs\"\n      }), \".\\r\\nThe certificate/key pairs are used by RabbitMQ and clients that connect to the server on a\\r\\nTLS-enabled port. The process of generating a Certificate Authority and two key pairs is fairly labourious\\r\\nand can be error-prone. An easier way of generating all that\\r\\nstuff on MacOS or Linux is with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        href: \"https://github.com/rabbitmq/tls-gen\",\n        children: \"tls-gen\"\n      }), \":\\r\\nit requires \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Python 3.5+\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"make\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"openssl\"\n      }), \" in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"PATH\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"tls-gen\"\n      }), \" and the certificate/key pairs\\r\\nit generates are self-signed and only suitable for development\\r\\nand test environments. The vast majority of production environments\\r\\nshould use certificates and keys issued by a widely trusted commercial\\r\\nCA.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"tls-gen\"\n      }), \" supports RSA and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-Elliptic-curve-cryptography/\",\n        children: \"Elliptic Curve Cryptography\"\n      }), \"\\r\\nalgorithms for key generation.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"automated-certificate-generation-transcript\",\n      children: \"Using tls-gen's Basic Profile\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Below is an example that generates a CA and uses it to produce two certificate/key pairs, one\\r\\nfor the server and another for clients. This is the setup that is expected by the rest of this guide.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"git clone https://github.com/rabbitmq/tls-gen tls-gen\\r\\ncd tls-gen/basic\\r\\n# private key password\\r\\nmake PASSWORD=bunnies\\r\\nmake verify\\r\\nmake info\\r\\nls -l ./result\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The certificate chain produced by this basic tls-gen profile looks like this:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"figure\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Root CA and leaf certificates\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./docs/ssl/root_ca_and_leaf.png\")[\"default\"]) + \"\",\n          width: \"248\",\n          height: \"197\"\n        })\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"enabling-tls\",\n      children: \"Enabling TLS Support in RabbitMQ\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To enable the TLS support in RabbitMQ, the node has to be configured\\r\\nto know the location of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#certificates-and-keys\",\n        children: \"Certificate Authority\\r\\nbundle\"\n      }), \" (a file with one more CA certificates), the server's certificate file, and the server's\\r\\nkey. A TLS listener should also be enabled to know what port to listen on for TLS-enabled client connections.\\r\\nMore TLS-related things can be configured. Those are covered in the rest of this guide.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Here are the essential configuration settings related to TLS:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"table\", {\n      className: \"plain\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"thead\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Configuration Key\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Description\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"listeners.ssl\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [\"A list of ports to listen on for TLS\\r\\nconnections. RabbitMQ can listen on a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n              href: \"./networking\",\n              children: \"single interface or multiple ones\"\n            }), \".\"]\n          })\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"ssl_options.cacertfile\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Certificate Authority (CA) bundle file path\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"ssl_options.certfile\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Server certificate file path\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"ssl_options.keyfile\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Server private key file path\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"ssl_options.password\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Password for private key file\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"ssl_options.verify\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"td\", {\n          children: [\"Should \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n            href: \"#peer-verification\",\n            children: \"peer verification\"\n          }), \" be enabled?\"]\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"ssl_options.fail_if_no_peer_cert\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [\"When set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"true\"\n            }), \", TLS connection\\r\\nwill be rejected if client fails to provide a certificate\"]\n          })\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The options are provided in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        href: \"./configure#configuration-files\",\n        children: \"configuration\\r\\nfile\"\n      }), \". An example of the config file is below, which\\r\\nwill start one TLS listener on port 5671 on all interfaces\\r\\non this hostname:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.ssl.default = 5671\\r\\n\\r\\nssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile   = /path/to/server_certificate.pem\\r\\nssl_options.keyfile    = /path/to/server_key.pem\\r\\nssl_options.verify     = verify_peer\\r\\nssl_options.fail_if_no_peer_cert = true\\r\\n\\r\\n# If the private key file is password protected, set this value:\\r\\n# ssl_options.password = PASSWORD\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This configuration will also perform \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-verification\",\n        children: \"peer certificate chain verification\"\n      }), \"\\r\\nso clients without any certificates will be rejected.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is possible to completely disable regular (non-TLS) listeners. Only TLS-enabled\\r\\nclients would be able to connect to such a node, and only if they use the correct port:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# disables non-TLS listeners, only TLS-enabled clients will be able to connect\\r\\nlisteners.tcp = none\\r\\n\\r\\nlisteners.ssl.default = 5671\\r\\n\\r\\nssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile   = /path/to/server_certificate.pem\\r\\nssl_options.keyfile    = /path/to/server_key.pem\\r\\nssl_options.verify     = verify_peer\\r\\nssl_options.fail_if_no_peer_cert = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"TLS settings can also be configured using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#erlang-term-config-file\",\n        children: \"classic config format\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-erlang\",\n        children: \"[\\r\\n  {rabbit, [\\r\\n     {ssl_listeners, [5671]},\\r\\n     {ssl_options, [{cacertfile, \\\"/path/to/ca_certificate.pem\\\"},\\r\\n                    {certfile,   \\\"/path/to/server_certificate.pem\\\"},\\r\\n                    {keyfile,    \\\"/path/to/server_key.pem\\\"},\\r\\n                    {verify,     verify_peer},\\r\\n                    {fail_if_no_peer_cert, true}]}\\r\\n   ]}\\r\\n].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"enabling-tls-paths\",\n      children: \"Certificate and Private Key File Paths\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ must be able to read its configured CA certificate bundle, server certificate and private key. The files\\r\\nmust exist and have the appropriate permissions. When that's not the case the node will fail to start or fail to\\r\\naccept TLS-enabled connections.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"Note for Windows users\"\n      }), \": on Windows, backslashes (\\\"\\\") in the\\r\\nconfiguration file are interpreted as escape sequences.\\r\\nFor example, to specify the\\r\\npath \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"c:\\\\ca_certificate.pem\"\n      }), \" for the CA certificate on Windows,\\r\\nwould need to use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"\\\"c:\\\\\\\\ca_certificate.pem\\\"\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"\\\"c:/ca_certificate.pem\\\"\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"enabling-tls-verify-configuration\",\n      children: \"How to Verify that TLS is Enabled\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To verify that TLS has been enabled on the node, restart it and inspect its \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./logging\",\n        children: \"log file\"\n      }), \".\\r\\nIt should contain an entry about a TLS listener being enabled, looking like this:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"2020-07-13 21:13:01.015 [info] <0.573.0> started TCP listener on [::]:5672\\r\\n2020-07-13 21:13:01.055 [info] <0.589.0> started TLS (SSL) listener on [::]:5671\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Another way is by using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-diagnostics listeners\"\n      }), \" which should contain\\r\\nlines for TLS-enabled listeners:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmq-diagnostics listeners\\r\\n#\\r\\n# ... (some output omitted for brevity)\\r\\n# => Interface: [::], port: 5671, protocol: amqp/ssl, purpose: AMQP 0-9-1 and AMQP 1.0 over TLS\\r\\n# ...\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"private-key-passwords\",\n      children: \"Providing Private Key Password\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Private keys can be optional protected by a password.\\r\\nTo provide the password, use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"password\"\n      }), \" option:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.ssl.1 = 5671\\r\\nssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile   = /path/to/server_certificate.pem\\r\\nssl_options.keyfile    = /path/to/server_key.pem\\r\\nssl_options.password   = t0p$3kRe7\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The same example using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#erlang-term-config-file\",\n        children: \"classic config format\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-erlang\",\n        children: \"[\\r\\n {rabbit, [\\r\\n           {ssl_listeners, [5671]},\\r\\n           {ssl_options, [{cacertfile,\\\"/path/to/ca_certificate.pem\\\"},\\r\\n                          {certfile,  \\\"/path/to/server_certificate.pem\\\"},\\r\\n                          {keyfile,   \\\"/path/to/server_key.pem\\\"},\\r\\n                          {password,  \\\"t0p$3kRe7\\\"}\\r\\n                         ]}\\r\\n          ]}\\r\\n].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Classic config file format allows for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#configuration-encryption\",\n        children: \"config value encryption\"\n      }), \",\\r\\nwhich is recommended for passwords.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"peer-verification\",\n      children: \"TLS Peer Verification: Who Do You Say You Are?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As mentioned in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#certificates-and-keys\",\n        children: \"Certificates and Keys\"\n      }), \" section, TLS has two\\r\\nprimary purposes: encrypting connection traffic and providing a way to verify\\r\\nthat the peer can be trusted (e.g. signed by a trusted Certificate Authority)\\r\\nto mitigate against \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Man-in-the-middle_attack\",\n        children: \"Man-in-the-Middle attacks\"\n      }), \",\\r\\na class of attacks where an attacker impersonates a legitimate trusted peer (usually a server).\\r\\nThis section will focus on the latter.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"peer-verification-how-it-works\",\n      children: \"How Peer Verification Works\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When a TLS connection is established client and server perform connection negotiation that takes several steps.\\r\\nThe first step is when the peers \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"optionally\"\n      }), \" exchange their \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#certificates-and-keys\",\n        children: \"certificates\"\n      }), \".\\r\\nHaving exchanged certificates, the peers can \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"optionally\"\n      }), \" attempt\\r\\nto establish a chain of trust between their CA certificates and the certificates presented.\\r\\nThis acts to verify that the peer is who it claims to be (provided the private key hasn't been\\r\\nstolen).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The process is known as peer verification or peer validation\\r\\nand follows an algorithm known as the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Certification_path_validation_algorithm\",\n        children: \"Certification path validation algorithm\"\n      }), \".\\r\\nUnderstanding the entire algorithm is not necessary in order to use peer verification,\\r\\nso this section provides an oversimplified explanation of the key parts.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Each peer provides a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"chain of certificates\"\n      }), \" that begins with a \\\"leaf\\\"\\r\\n(client or server) certificate and continues with at least one Certificate Authority (CA) certificate. That\\r\\nCA issued (signed) the leaf CA. If there are multiple CA certificates, they usually form a chain of signatures,\\r\\nmeaning that each CA certificate was signed by the next one. For example, if certificate B is signed by A and C is signed by B,\\r\\nthe chain is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"A, B, C\"\n      }), \" (commas here are used for clarity). The \\\"topmost\\\" (first or only) CA is often referred\\r\\nto as the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"root CA\"\n      }), \" for the chain. Root CAs can be issued by well-known Certificate Authorities\\r\\n(commercial vendors) or any other party (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Self-signed_certificate\",\n        children: \"self-signed\"\n      }), \").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Here's an example of the most basic chain with one root CA and one leaf (server or client) certificate:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"figure\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Root CA and leaf certificates\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./docs/ssl/root_ca_and_leaf.png\")[\"default\"]) + \"\",\n          width: \"248\",\n          height: \"197\"\n        })\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A chain with intermediate certificates might look like this:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"figure\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Root CA, intermediate and leaf certificates\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./docs/ssl/root_intermediate_ca_and_leaf.png\")[\"default\"]) + \"\",\n          width: \"248\",\n          height: \"318\"\n        })\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"During peer verification TLS connection client (or server) traverses\\r\\nthe chain of certificates presented by the peer\\r\\nand if a trusted certificate is found, considers the peer trusted.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"mutual-peer-verification-mutual-tls-authentication-or-mtls\",\n      children: \"Mutual Peer Verification (Mutual TLS Authentication or mTLS)\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When both sides perform this peer verification process, this is known\\r\\nas \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"mutual TLS authentication\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"mTLS\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Enabling mutual peer verification involves two things:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#peer-verification-configuration\",\n          children: \"Enabling peer verification for client connections\"\n        }), \" on the RabbitMQ side\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#peer-verification\",\n          children: \"Enabling peer verification of the server\"\n        }), \" in application code\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In other words, mutual peer verification (\\\"mTLS\\\") is a joint responsibility of RabbitMQ nodes\\r\\nand client connections. Enabling peer verification on just one end is not enough.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"when-peer-verification-fails\",\n      children: \"When Peer Verification Fails\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If no trusted and otherwise valid certificate is found, peer verification fails and client's TLS (TCP) connection is\\r\\nclosed with a fatal error (\\\"alert\\\" in OpenSSL parlance) that says \\\"Unknown CA\\\" or similar. The alert\\r\\nwill be logged by the server with a message similar to this:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"2018-09-10 18:10:46.502 [info] <0.902.0< TLS server generated SERVER ALERT: Fatal - Unknown CA\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Certificate validity is also checked at every step. Certificates that are expired\\r\\nor aren't yet valid will be rejected. The TLS alert in that case will look something\\r\\nlike this:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"2018-09-10 18:11:05.168 [info] <0.923.0< TLS server generated SERVER ALERT: Fatal - Certificate Expired\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The examples above demonstrate TLS alert messages logged by a RabbitMQ node.\\r\\nClients that perform peer verification will also raise alerts but may use different\\r\\nerror messages. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://tools.ietf.org/html/rfc8446#section-6.2\",\n        children: \"RFC 8446 section 6.2\"\n      }), \"\\r\\nprovides an overview of various alerts and what they mean.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"peer-verification-trusted-certificates\",\n      children: \"Trusted Certificates\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Every TLS-enabled tool and TLS implementation, including Erlang/OTP and\\r\\nRabbitMQ, has a way of marking a set of certificates as trusted.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"There are three common approaches to this:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"All trusted CA certificates must be added to a single file called the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n          children: \"CA certificate bundle\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"All CA certificates in a directory are considered to be trusted\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"A dedicated tool is used to manage trusted CA certificates\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Different TLS implementation and tools use different options. In the context of RabbitMQ this means that\\r\\nthe trusted certificate management approach may be different for different client\\r\\nlibraries, tools and RabbitMQ server itself.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For example, OpenSSL and OpenSSL command line tools such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"s_client\"\n      }), \" on Linux and other UNIX-like systems\\r\\nwill use a directory administered by superusers.\\r\\nCA certificates in that directory will be considered trusted,\\r\\nand so are the certificates issued by them (such as those presented by clients).\\r\\nLocations of the trusted certificate directory will \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.happyassassin.net/2015/01/12/a-note-about-ssltls-trusted-certificate-stores-and-platforms/\",\n        children: \"vary\"\n      }), \"\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://gagravarr.org/writing/openssl-certs/others.shtml\",\n        children: \"between distributions\"\n      }), \", operating systems and releases.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"On Windows trusted certificates are managed using tools such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.microsoft.com/en-us/dotnet/framework/tools/certmgr-exe-certificate-manager-tool\",\n        children: \"certmgr\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The certificates in the server's CA certificate bundle may be considered trusted.\\r\\nWe say \\\"may\\\" because it doesn't work the same way for all client libraries since this varies from TLS implementation\\r\\nto implementation. Certificates in a CA certificate bundler won't be considered to be trusted in Python,\\r\\nfor example, unless explicitly added to the trust store.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ relies on Erlang's TLS implementation. It assumes that\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"all trusted CA certificates are added to the server certificate bundle\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When performing peer verification, RabbitMQ will only consider the root certificate (first certificate in the list) to be trusted.\\r\\nAny intermediate certificates will be ignored. If it's desired that intermediate certificates\\r\\nare also considered to be trusted they must be added to the trusted certificate list: the certificate bundle.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"While it is possible to place final (\\\"leaf\\\") certificates\\r\\nsuch as those used by servers and clients to the trusted certificate directory,\\r\\na much more common practice is to add CA certificates to the trusted certificate list.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The most common way of appending several certificates to one\\r\\nanother and use in a single Certificate Authority bundle file\\r\\nis to simply concatenate them:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"cat rootca/ca_certificate.pem otherca/ca_certificate.pem > all_cacerts.pem\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"peer-verification-configuration\",\n      children: \"Enabling Peer Verification\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"On the server end, peer verification is primarily controlled using two configuration\\r\\noptions: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ssl_options.verify\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ssl_options.fail_if_no_peer_cert\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Setting the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ssl_options.fail_if_no_peer_cert\"\n      }), \" option to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"false\"\n      }), \" tells\\r\\nthe node to accept clients which don't present a certificate (for example, were not configured to use one).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ssl_options.verify\"\n      }), \" option is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"verify_peer\"\n      }), \",\\r\\nthe client does send us a certificate, the node must perform peer verification.\\r\\nWhen set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"verify_none\"\n      }), \", peer verification will be disabled and certificate\\r\\nexchange won't be performed.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For example, the following\\r\\nconfig will perform peer verification and reject clients that do not provide\\r\\na certificate:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.ssl.default = 5671\\r\\n\\r\\nssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile = /path/to/server_certificate.pem\\r\\nssl_options.keyfile = /path/to/server_key.pem\\r\\nssl_options.verify = verify_peer\\r\\nssl_options.fail_if_no_peer_cert = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The same example in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#config-file\",\n        children: \"classic config format\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-erlang\",\n        children: \"[\\r\\n{rabbit, [\\r\\n   {ssl_listeners, [5671]},\\r\\n   {ssl_options, [{cacertfile,\\\"/path/to/ca_certificate.pem\\\"},\\r\\n                  {certfile,\\\"/path/to/server_certificate.pem\\\"},\\r\\n                  {keyfile,\\\"/path/to/server_key.pem\\\"},\\r\\n                  {verify, verify_peer},\\r\\n                  {fail_if_no_peer_cert, true}]}\\r\\n ]}\\r\\n].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"How exactly peer verification is configured in client libraries varies from library to library.\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#java-client\",\n        children: \"Java\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#dotnet-client\",\n        children: \".NET\"\n      }), \" client sections cover peer\\r\\nverification in those clients.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Peer verification is highly recommended in production environments. With careful consideration,\\r\\ndisabling it can make sense in certain environments (e.g. development).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n      id: \"peer-verification-clients\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Thus it is possible to create an encrypted TLS connection \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"without\"\n      }), \" having to\\r\\nverify certificates. Client libraries usually support both modes of operation.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When peer verification is enabled, it is common for clients to also check whether\\r\\nthe hostname of the server\\r\\nthey are connecting to matches one of two fields\\r\\nin the server certificate: the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Subject_Alternative_Name\",\n        children: \"SAN (Subject Alternative Name)\"\n      }), \"\\r\\nor CN (Common Name). When \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Wildcard_certificate\",\n        children: \"wildcard certificates\"\n      }), \" are used,\\r\\nthe hostname is matched against a pattern. If there is no match, peer verification will also be\\r\\nfailed by the client. Hostname checks are also optional and generally orthogonal to certificate chain\\r\\nverification performed by the client.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Because of this it is important to know what SAN (Subject Alternative Name) or CN (Common Name) values\\r\\nwere used when generating the certificate. If a certificate is generated on one host and used\\r\\non a different host then the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"$(hostname)\"\n      }), \" value should be replaced with the correct hostname of the target server.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#automated-certificate-generation\",\n        children: \"tls-gen\"\n      }), \" will use local machine's hostname for both values.\\r\\nLikewise, in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#manual-certificate-generation\",\n        children: \"manual certificate/key pair generation section\"\n      }), \" local machine's hostname is specified as\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"...-subj /CN=$(hostname)/...\"\n      }), \" to some OpenSSL CLI tool commands.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"peer-verification-depth\",\n      children: \"Certificate Chains and Verification Depth\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When using a client certificate signed by an intermediate CA, it may be necessary\\r\\nto configure RabbitMQ server to use a higher verification depth.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The depth is the maximum number of non-self-issued intermediate certificates that\\r\\nmay follow the peer certificate in a valid certification path.\\r\\nSo if depth is 0 the peer (e.g. client) certificate must be signed by the trusted CA directly,\\r\\nif 1 the path can be \\\"peer, CA, trusted CA\\\", if it is 2 \\\"peer, CA, CA, trusted CA\\\", and so on.\\r\\nThe default depth is 1.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The following example demonstrates how to configure certificate validation depth for\\r\\nRabbitMQ server:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.ssl.default = 5671\\r\\n\\r\\nssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile = /path/to/server_certificate.pem\\r\\nssl_options.keyfile = /path/to/server_key.pem\\r\\nssl_options.verify = verify_peer\\r\\nssl_options.depth  = 2\\r\\nssl_options.fail_if_no_peer_cert = false\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The same example in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#config-file\",\n        children: \"classic config format\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-erlang\",\n        children: \"[\\r\\n  {rabbit, [\\r\\n     {ssl_listeners, [5671]},\\r\\n     {ssl_options, [{cacertfile,\\\"/path/to/ca_certificate.pem\\\"},\\r\\n                    {certfile,\\\"/path/to/server_certificate.pem\\\"},\\r\\n                    {keyfile,\\\"/path/to/server_key.pem\\\"},\\r\\n                    {depth, 2},\\r\\n                    {verify,verify_peer},\\r\\n                    {fail_if_no_peer_cert,false}]}\\r\\n   ]}\\r\\n].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When using RabbitMQ plugins such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./federation\",\n        children: \"Federation\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./shovel\",\n        children: \"Shovel\"\n      }), \" with TLS,\\r\\nit may be necessary to configure verification depth for the Erlang client that those plugins use under the hood,\\r\\nas \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#erlang-client\",\n        children: \"explained below\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"java-client\",\n      children: \"Using TLS in the Java Client\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"There are two main parts to enabling TLS in the RabbitMQ Java client:\\r\\nsetting up the key store with a bit of Java security framework plumbing and\\r\\nimplementing the desired peer verification strategy.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"java-client-trust-managers-and-stores\",\n      children: \"Key Managers, Trust Managers and Stores\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"There are three main components in the Java security\\r\\nframework: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/KeyManager.html\",\n        children: \"Key Manager\"\n      }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/TrustManager.html\",\n        children: \"Trust Manager\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oracle.com/javase/8/docs/api/java/security/KeyStore.html\",\n        children: \"Key Store\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A Key Manager is used by a peer (in this case, a client connection) to manage its certificates.\\r\\nDuring TLS connection/session negotiation, the key manager will control which\\r\\ncertificates to send to the remote peer.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A Trust Manager is used by a peer to manage remote certificates.\\r\\nDuring TLS connection/session negotiation, the trust manager will control which\\r\\ncertificates are trusted from a remote peer. Trust managers can be used\\r\\nto implement any certificate chain verification logic.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A Key Store is a Java encapsulation of the certificate store concept. All\\r\\ncertificates must either be stored into a Java-specific binary format (JKS)\\r\\nor to be in the PKCS#12 format. These formats are managed using the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"KeyStore\"\n      }), \" class. In the below examples the JKS format is used to add the trusted (server) certificate(s)\\r\\nto the store, while for the client key/certificate pair, the PKCS#12\\r\\nkey file generated by \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#automated-certificate-generation\",\n        children: \"tls-gen\"\n      }), \" will be used.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"All TLS-related settings in the Java client\\r\\nare configured via the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://rabbitmq.github.io/rabbitmq-java-client/api/current/com/rabbitmq/client/ConnectionFactory.html\",\n        children: \"ConnectionFactory\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"java-client-connecting\",\n      children: \"Connecting with TLS\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This very basic example will show a simple client connecting to a RabbitMQ\\r\\nserver over TLS without validating the server certificate, and\\r\\nwithout presenting any client certificate to the server.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"import java.io.*;\\r\\nimport java.security.*;\\r\\n\\r\\nimport com.rabbitmq.client.*;\\r\\n\\r\\npublic class Example1 {\\r\\n\\r\\n    public static void main(String[] args) throws Exception {\\r\\n        ConnectionFactory factory = new ConnectionFactory();\\r\\n        factory.setHost(&quot;localhost&quot;);\\r\\n        factory.setPort(5671);\\r\\n\\r\\n        factory.useSslProtocol();\\r\\n        // Tells the library to setup the default Key and Trust managers for you\\r\\n        // which do not do any form of remote server trust verification\\r\\n\\r\\n        Connection conn = factory.newConnection();\\r\\n        Channel channel = conn.createChannel();\\r\\n\\r\\n        // non-durable, exclusive, auto-delete queue\\r\\n        channel.queueDeclare(&quot;rabbitmq-java-test&quot;, false, true, true, null);\\r\\n        channel.basicPublish(&quot;&quot;, &quot;rabbitmq-java-test&quot;, null, &quot;Hello, World&quot;.getBytes());\\r\\n\\r\\n        GetResponse chResponse = channel.basicGet(&quot;rabbitmq-java-test&quot;, false);\\r\\n        if (chResponse == null) {\\r\\n            System.out.println(&quot;No message retrieved&quot;);\\r\\n        } else {\\r\\n            byte[] body = chResponse.getBody();\\r\\n            System.out.println(&quot;Received: &quot; + new String(body));\\r\\n        }\\r\\n\\r\\n        channel.close();\\r\\n        conn.close();\\r\\n    }\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This simple example is an echo client and server. It creates a channel\\r\\nand publishes to the default direct exchange, then\\r\\nfetches back what has been published and echoes it out. It uses\\r\\nan \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./queues\",\n        children: \"exclusive, non-durable, auto-delete queue\"\n      }), \" that will be deleted shortly\\r\\nafter the connection is closed.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"java-client-connecting-with-peer-verification\",\n      children: \"Connecting with Peer Verification Enabled\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For a Java client to trust a server, the server certificate must be added\\r\\nto a trust store which will be used to instantiate a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/TrustManager.html\",\n        children: \"Trust Manager\"\n      }), \".\\r\\nThe JDK ships with a tool called \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"keytool\"\n      }), \" that manages certificate stores. To import a certificate to\\r\\na store use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"keytool -import\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"keytool -import -alias server1 -file /path/to/server_certificate.pem -keystore /path/to/rabbitstore\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The above command will import \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"server/certificate.pem\"\n      }), \" into the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitstore\"\n      }), \" file\\r\\nusing the JKS format. The certificate will be referred to as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"server1\"\n      }), \" in the trust store.\\r\\nAll certificates and keys must have distinct name in their store.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"keytool\"\n      }), \" will confirm that the certificate is trusted and ask for a password.\\r\\nThe password protects the trust store from any tampering attempt.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The client certificate and key in a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"PKCS#12\"\n      }), \" file are then used. Note Java understands\\r\\nnatively the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"PKCS#12\"\n      }), \" format, no conversion is needed.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The below example demonstrates how the key store and the trust store are used with a\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/KeyManager.html\",\n        children: \"Key Manager\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/TrustManager.html\",\n        children: \"Trust Manager\"\n      }), \", respectively.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"import java.io.*;\\r\\nimport java.security.*;\\r\\nimport javax.net.ssl.*;\\r\\n\\r\\nimport com.rabbitmq.client.*;\\r\\n\\r\\npublic class Example2 {\\r\\n\\r\\n    public static void main(String[] args) throws Exception {\\r\\n      char[] keyPassphrase = &quot;MySecretPassword&quot;.toCharArray();\\r\\n      KeyStore ks = KeyStore.getInstance(&quot;PKCS12&quot;);\\r\\n      ks.load(new FileInputStream(&quot;/path/to/client_key.p12&quot;), keyPassphrase);\\r\\n\\r\\n      KeyManagerFactory kmf = KeyManagerFactory.getInstance(&quot;SunX509&quot;);\\r\\n      kmf.init(ks, keyPassphrase);\\r\\n\\r\\n      char[] trustPassphrase = &quot;rabbitstore&quot;.toCharArray();\\r\\n      KeyStore tks = KeyStore.getInstance(&quot;JKS&quot;);\\r\\n      tks.load(new FileInputStream(&quot;/path/to/trustStore&quot;), trustPassphrase);\\r\\n\\r\\n      TrustManagerFactory tmf = TrustManagerFactory.getInstance(&quot;SunX509&quot;);\\r\\n      tmf.init(tks);\\r\\n\\r\\n      SSLContext c = SSLContext.getInstance(&quot;TLSv1.2&quot;);\\r\\n      c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\\r\\n\\r\\n      ConnectionFactory factory = new ConnectionFactory();\\r\\n      factory.setHost(&quot;localhost&quot;);\\r\\n      factory.setPort(5671);\\r\\n      factory.useSslProtocol(c);\\r\\n      factory.enableHostnameVerification();\\r\\n\\r\\n      Connection conn = factory.newConnection();\\r\\n      Channel channel = conn.createChannel();\\r\\n\\r\\n      channel.queueDeclare(&quot;rabbitmq-java-test&quot;, false, true, true, null);\\r\\n      channel.basicPublish(&quot;&quot;, &quot;rabbitmq-java-test&quot;, null, &quot;Hello, World&quot;.getBytes());\\r\\n\\r\\n      GetResponse chResponse = channel.basicGet(&quot;rabbitmq-java-test&quot;, false);\\r\\n      if (chResponse == null) {\\r\\n          System.out.println(&quot;No message retrieved&quot;);\\r\\n      } else {\\r\\n          byte[] body = chResponse.getBody();\\r\\n          System.out.println(&quot;Received: &quot; + new String(body));\\r\\n      }\\r\\n\\r\\n      channel.close();\\r\\n      conn.close();\\r\\n  }\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To ensure that the above code works as expected with untrusted certificates, set up\\r\\na RabbitMQ node with a certificate that has not been imported\\r\\ninto the key store and watch the connection fail.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"server-hostname-verification\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        class: \"anchor\",\n        href: \"#java-client-hostname-verification\",\n        children: \"Server Hostname Verification\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Hostname verification must be enabled separately using the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ConnectionFactory#enableHostnameVerification()\"\n      }), \" method. This is done in the example\\r\\nabove, for instance:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"import java.io.*;\\r\\nimport java.security.*;\\r\\nimport javax.net.ssl.*;\\r\\n\\r\\nimport com.rabbitmq.client.*;\\r\\n\\r\\npublic class Example2 {\\r\\n\\r\\n    public static void main(String[] args) throws Exception {\\r\\n      char[] keyPassphrase = &quot;MySecretPassword&quot;.toCharArray();\\r\\n      KeyStore ks = KeyStore.getInstance(&quot;PKCS12&quot;);\\r\\n      ks.load(new FileInputStream(&quot;/path/to/client_key.p12&quot;), keyPassphrase);\\r\\n\\r\\n      KeyManagerFactory kmf = KeyManagerFactory.getInstance(&quot;SunX509&quot;);\\r\\n      kmf.init(ks, keyPassphrase);\\r\\n\\r\\n      char[] trustPassphrase = &quot;rabbitstore&quot;.toCharArray();\\r\\n      KeyStore tks = KeyStore.getInstance(&quot;JKS&quot;);\\r\\n      tks.load(new FileInputStream(&quot;/path/to/trustStore&quot;), trustPassphrase);\\r\\n\\r\\n      TrustManagerFactory tmf = TrustManagerFactory.getInstance(&quot;SunX509&quot;);\\r\\n      tmf.init(tks);\\r\\n\\r\\n      SSLContext c = SSLContext.getInstance(&quot;TLSv1.2&quot;);\\r\\n      c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\\r\\n\\r\\n      ConnectionFactory factory = new ConnectionFactory();\\r\\n      factory.setHost(&quot;localhost&quot;);\\r\\n      factory.setPort(5671);\\r\\n      factory.useSslProtocol(c);\\r\\n      factory.enableHostnameVerification();\\r\\n\\r\\n      // this connection will both perform peer verification\\r\\n      // and server hostname verification\\r\\n      Connection conn = factory.newConnection();\\r\\n\\r\\n      // snip ...\\r\\n  }\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This will verify\\r\\nthat the server certificate has been issued for the hostname the\\r\\nclient is connecting to. Unlike certificate chain verification, this feature\\r\\nis client-specific (not usually performed by the server).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tls-versions-java-client\",\n      children: \"Configuring TLS Version in Java Client\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Just like RabbitMQ server can be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#tls-versions\",\n        children: \"configured to support only specific TLS versions\"\n      }), \",\\r\\nit may be necessary to configure preferred TLS version in the Java client. This is done using\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ConnectionFactory#useSslProtocol\"\n      }), \" overloads that accept a protocol version name\\r\\nor a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"SSLContext\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory factory = new ConnectionFactory();\\r\\nfactory.setHost(&quot;localhost&quot;);\\r\\nfactory.setPort(5671);\\r\\n\\r\\nfactory.useSslProtocol(\\\"TLSv1.2\\\");\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Modern releases of the library will attempt to use the latest TLS version\\r\\nsupported by the runtime.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"dotnet-client\",\n      children: \"Using TLS in the .NET Client\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For a client certificate to be understood on the .NET platform, they\\r\\ncan be in a number of formats including DER and PKCS#12 but\\r\\nnot PEM. For the DER format, .NET expects them to\\r\\nbe stored in files with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \".cer\"\n      }), \" extension. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#automated-certificate-generation\",\n        children: \"tls-gen\"\n      }), \"\\r\\ngenerates both PEM and PKCS#12 files.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dotnet-peer-verification\",\n      children: \".NET Trust Store\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"On the .NET platform, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-verification-trusted-certificates\",\n        children: \"trusted certificates\"\n      }), \" are managed by putting them\\r\\ninto any of a number of stores. All management of these stores is done\\r\\nwith the 'certmgr' tool.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"N.B.: on some flavours of Windows there are two versions of\\r\\nthe command: one that ships with the operating system and\\r\\nprovides a graphical interface only, and one that ships\\r\\nwith the Windows SDK and provides both a graphical and command line interface.\\r\\nEither will do the job, but the examples below are based on the latter.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For our case, because we're supplying the client certificate/key pair\\r\\nin a separate PKCS#12 file, all we need to do is to import the\\r\\ncertificate of the root Certificate Authority into\\r\\nthe Root (Windows) or Trust (Mono) store.\\r\\nAll certificates signed by any certificate in that store are automatically trusted.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In contrast to the Java client, which is happy to use a\\r\\nTLS connection without performing peer verification, the .NET client by default requires this\\r\\nverification to succeed. To suppress verification, an application can set\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"System.Net.Security.SslPolicyErrors.RemoteCertificateNotAvailable\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"System.Net.Security.SslPolicyErrors.RemoteCertificateChainErrors\"\n      }), \"\\r\\nflags in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        href: (0,_site_src_components_DotNetClient__WEBPACK_IMPORTED_MODULE_2__.DotNetClientDocURL)() + '/RabbitMQ.Client.SslOption.html',\n        children: \"SslOption\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"certmgr\",\n      children: \"Certificate Management with Certmgr\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"certmgr\"\n      }), \" is a command line tool that manages certificates in a specified store, for example,\\r\\nadds and deletes them. These stores can be per-user stores, or\\r\\nsystem-wide. Only administrative users can have write access to the system-wide stores.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The following example adds a certificate to the store of user \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Root\"\n      }), \" (also known as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Trust\"\n      }), \" in some .NET implementation)\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-PowerShell\",\n        children: \"# Windows\\r\\ncertmgr -add -all \\\\path\\\\to\\\\cacert.cer -s Root\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# Linux with Mono\\r\\ncertmgr -add -c Trust /path/to/cacert.cer\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To add a certificate to the system-wide (machine) certificate store instead, run\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-PowerShell\",\n        children: \"# Windows\\r\\ncertmgr -add -all \\\\path\\\\to\\\\cacert.cer -s -r localMachine Root\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash=\",\n        children: \"# Linux with Mono\\r\\ncertmgr -add -c -m Trust /path/to/cacert.cer\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"After adding to a store, we can view the contents of that store with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"-all\"\n      }), \" (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"-list\"\n      }), \" with Mono) switch:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"certmgr -all -s Root\\r\\n\\r\\n# … snip …\\r\\n\\r\\nSelf-signed X.509 v3 Certificate\\r\\n  Serial Number: AC3F2B74ECDD9EEA00\\r\\n  Issuer Name:   CN=MyTestCA\\r\\n  Subject Name:  CN=MyTestCA\\r\\n  valid From:    25/08/2018 14:03:01\\r\\n  valid Until:   24/09/2018 14:03:01\\r\\n  Unique Hash:   1F04D1D2C20B97BDD5DB70B9EB2013550697A05E\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"certmgr -list -c Trust\\r\\n\\r\\n# … snip …\\r\\n\\r\\nSelf-signed X.509 v3 Certificate\\r\\n  Serial Number: AC3F2B74ECDD9EEA00\\r\\n  Issuer Name:   CN=MyTestCA\\r\\n  Subject Name:  CN=MyTestCA\\r\\n  valid From:    25/08/2018 14:03:01\\r\\n  valid Until:   24/09/2018 14:03:01\\r\\n  Unique Hash:   1F04D1D2C20B97BDD5DB70B9EB2013550697A05E\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"According to the above output there is one Self-signed X.509 v3 Certificate in the\\r\\ntrust store. The Unique Hash uniquely identifies this certificate in\\r\\nthis store. To delete this certificate, use the unique hash:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# Windows\\r\\ncertmgr -del -c -sha1 1F04D1D2C20B97BDD5DB70B9EB2013550697A05E -s Root\\r\\n\\r\\n# … snip …\\r\\n\\r\\nCertificate removed from store.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# Linux with Mono\\r\\ncertmgr -del -c Trust 1F04D1D2C20B97BDD5DB70B9EB2013550697A05E\\r\\n\\r\\n# … snip …\\r\\n\\r\\nCertificate removed from store.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dotnet-connection-params\",\n      children: \"Connection TLS Settings\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To create a TLS-enabled connection to RabbitMQ, we need to set some new\\r\\nfields in the ConnectionFactory's Parameters field.\\r\\nTo make things\\r\\neasier, there is a new Field Parameters.Ssl that acts like a namespace\\r\\nfor all the other fields that we need to set. The fields are:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"table\", {\n      className: \"plain\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"thead\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Property\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Description\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"Ssl.CertPath\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n            children: \"This is the path to the client's certificate in\\r\\nPKCS#12 format if your server expects client side verification. This\\r\\nis optional.\"\n          })\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"Ssl.CertPassphrase\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n            children: \"If you are using a client certificate in PKCS#12\\r\\nformat then it'll probably have a password, which you specify in\\r\\nthis field.\"\n          })\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"Ssl.Enabled\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"This is a boolean field that turns TLS support on or\\r\\noff. It is off by default.\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"Ssl.ServerName\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n            children: \".NET expects this to match the Subject Alternative Name (SAN) or Common Name (CN) on\\r\\nthe certificate that the server sends over.\"\n          })\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dotnet-tls-versions-dotnet-client\",\n      children: \"TLS Versions\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"TLS has been around since the mid-90s, and there are multiple TLS versions available,\\r\\nalthough older versions are retired by the industry \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.cloudflare.com/en-ca/learning/ssl/why-use-tls-1.3/\",\n        children: \"as newer and more secure ones are developed\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Just like RabbitMQ server can be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#tls-versions\",\n        children: \"configured to support only specific TLS versions\"\n      }), \",\\r\\nit may be necessary to configure preferred TLS version in the .NET client. This is done using\\r\\nthe TLS options accessible via \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ConnectionFactory#Ssl\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Supported TLS version values are those of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.microsoft.com/en-us/dotnet/api/system.security.authentication.sslprotocols?view=netframework-4.8\",\n        children: \"System.Security.Authentication.SslProtocols enum\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        children: \"using System.Security.Authentication;\\r\\n\\r\\n// ...\\r\\n\\r\\nConnectionFactory cf = new ConnectionFactory();\\r\\n\\r\\ncf.Ssl.Enabled = true;\\r\\ncf.Ssl.ServerName = System.Net.Dns.GetHostName();\\r\\ncf.Ssl.CertPath = \\\"/path/to/client_key.p12\\\";\\r\\ncf.Ssl.CertPassphrase = \\\"MySecretPassword\\\";\\r\\n\\r\\n// Use TLSv1.2 for this connection\\r\\ncf.Ssl.Version = SslProtocols.Tls12;\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ .NET client 5.x series uses TLSv1.0 by default.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Starting with RabbitMQ .NET client 6.0\\r\\nthe default changes to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.microsoft.com/en-us/dotnet/api/system.security.authentication.sslprotocols?view=netframework-4.8#System_Security_Authentication_SslProtocols_None\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"SslProtocols.None\"\n        })\n      }), \",\\r\\nwhich means the default is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.microsoft.com/en-us/dotnet/framework/network-programming/tls?view=netframework-4.6.2\",\n        children: \"picked by the .NET framework or the operating system\"\n      }), \" depending on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.microsoft.com/en-us/dotnet/framework/network-programming/tls?view=netframework-4.6.2#configuring-security-via-appcontext-switches-for-net-framework-46-or-later-versions\",\n        children: \"app context switches\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If a connection that uses \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"SslProtocols.None\"\n      }), \" to pick a suitable TLS version fails, the client\\r\\nwill retry with TLSv1.2 enabled explicitly. This reduces the need for explicit configuration\\r\\non the application developer's end in environments where automatic TLS version selection is\\r\\ndisabled, not available or otherwise cannot be relied on.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Modern .NET frameworks versions \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.microsoft.com/en-us/dotnet/framework/network-programming/tls?view=netframework-4.6.2\",\n        children: \"default to TLSv1.2\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dotnet-example\",\n      children: \"Code Example\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This is a more or less direct port of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#java-client-connecting\",\n        children: \"Java client example\"\n      }), \". It\\r\\ncreates a channel and publishes to\\r\\nthe default direct exchange, then reads back what has been\\r\\npublished and echoes it out. Note that we use an\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./queues\",\n        children: \"exclusive, non-durable, auto-delete queue\"\n      }), \" so we don't have\\r\\nto worry about manually cleaning up after ourselves\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        children: \"using System;\\r\\nusing System.IO;\\r\\nusing System.Text;\\r\\n\\r\\nusing RabbitMQ.client;\\r\\n\\r\\nnamespace RabbitMQ.client.Examples\\r\\n{\\r\\n  public class TestSSL\\r\\n  {\\r\\n    public static async Task<int> Main(string[] args)\\r\\n    {\\r\\n      ConnectionFactory cf = new ConnectionFactory();\\r\\n\\r\\n      cf.Ssl.Enabled = true;\\r\\n      cf.Ssl.ServerName = System.Net.Dns.GetHostName();\\r\\n      cf.Ssl.CertPath = \\\"/path/to/client_key.p12\\\";\\r\\n      cf.Ssl.CertPassphrase = \\\"MySecretPassword\\\";\\r\\n\\r\\n      using (IConnection conn = await cf.CreateConnectionAsync())\\r\\n      {\\r\\n        using (IChannel ch = await conn.CreateChannelAsync())\\r\\n        {\\r\\n          Console.WriteLine(\\\"Successfully connected and opened a channel\\\");\\r\\n          await ch.QueueDeclareAsync(\\\"rabbitmq-dotnet-test\\\", false, false, false, null);\\r\\n          Console.WriteLine(\\\"Successfully declared a queue\\\");\\r\\n          await ch.QueueDeleteAsync(\\\"rabbitmq-dotnet-test\\\");\\r\\n          Console.WriteLine(\\\"Successfully deleted the queue\\\");\\r\\n        }\\r\\n      }\\r\\n      return 0;\\r\\n    }\\r\\n  }\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tls-verification-in-dotnet\",\n      children: \"TLS Peer Verification in .NET Client\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"TLS offers peer verification (validation), a way for client and server to\\r\\nverify each other's identity based on peer's certificate information.\\r\\nWhen peer verification is enabled, typically the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        class: \"\",\n        children: \"hostname\"\n      }), \" of the server\\r\\nyou're connecting to needs to match the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        class: \"\",\n        children: \"CN (Common Name)\"\n      }), \" field on\\r\\nthe server's certificate, otherwise the certificate will be\\r\\nrejected. However, peer verification doesn't have to be limited to just CN\\r\\nand hostname matching in general.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This is why the commands at the start of this guide specify\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"...-subj /CN=$(hostname)/...\"\n      }), \" which dynamically looks up your\\r\\nhostname. If you're generating certificates on one machine, and using\\r\\nthem on the other then be sure to swap out the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"$(hostname)\"\n      }), \"\\r\\nsection, and replace it with the correct hostname for your server.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"On the .NET platform, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback(v=vs.110).aspx\",\n        children: \"RemoteCertificateValidationCallback\"\n      }), \"\\r\\ncontrols TLS verification behavior.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In RabbitMQ .NET client, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RabbitMQ.client.SslOption.CertificatevalidationCallback\"\n      }), \"\\r\\ncan be used to provide a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback(v=vs.110).aspx\",\n        children: \"RemoteCertificateValidationCallback\"\n      }), \"\\r\\ndelegate. The delegate will be used to verify peer (RabbitMQ node) identity using whatever logic fits\\r\\nthe applications.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If this is not specified, the default callback will be\\r\\nused in conjunction with the AcceptablePolicyErrors\\r\\nproperty to determine if the remote server certificate is\\r\\nvalid.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"System.Net.Security.SslPolicyErrors.RemoteCertificateNameMismatch\"\n      }), \"\\r\\nflag in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RabbitMQ.client.SslOption.AcceptablePolicyErrors\"\n      }), \"\\r\\ncan be used to disable peer verification (not recommended in production environments!).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RabbitMQ.client.SslOption.CertificateSelectionCallback\"\n      }), \"\\r\\ncan be used to provide\\r\\na \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://msdn.microsoft.com/en-us/library/system.net.security.localcertificateselectioncallback(v=vs.110).aspx\",\n        children: \"LocalCertificateSelectionCallback\"\n      }), \"\\r\\nthat will select the local certificate used for peer verification.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"tls-versions\",\n      children: \"Limiting TLS Versions Used by the Server\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tls-versions-why-limit\",\n      children: \"Why Limit TLS Versions\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"TLS (née SSL) has evolved over time and has multiple versions in use.\\r\\nEach version builds on the shortcomings of previous versions. Most of the time\\r\\nthe shortcomings resulted in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#major-vulnerabilities\",\n        children: \"known attacks\"\n      }), \" that affect specific\\r\\nversions of TLS (and SSL). Disabling older TLS versions is a way to mitigate\\r\\nmany of those attacks (another technique is to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#cipher-suites\",\n        children: \"disable affected cipher suites\"\n      }), \").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For the above reasons, recent release series of Erlang only enable latest supported\\r\\nTLS version by default, as demonstrated in the below table.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"table\", {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"thead\", {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"strong\", {\n              children: \"Erlang Series\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"strong\", {\n              children: \"TLS Versions Enabled by Default\"\n            })\n          })]\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tbody\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: \"27.x\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"td\", {\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n              href: \"#tls1.3\",\n              children: \"TLSv1.3\"\n            }), \" and TLSv1.2\"]\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: \"26.x\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"td\", {\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n              href: \"#tls1.3\",\n              children: \"TLSv1.3\"\n            }), \" and TLSv1.2\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Users of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./which-erlang\",\n        children: \"older supported Erlang releases\"\n      }), \"\\r\\nare encouraged to limit supported TLS versions to 1.2 and later versions only, if possible.\\r\\nConsider TLSv1.0 and TLSv1.1 to be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"deprecated by the industry\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tls-versions-why-not-limit\",\n      children: \"Why Not Limit TLS Versions\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Limiting TLS versions to only TLSv1.3 or even only TLSv1.2 means that clients\\r\\nthat \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#tls-version-support-in-jdk-and-net\",\n        children: \"support older TLS versions only\"\n      }), \" won't be able to connect.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If support for applications that use such old runtimes is important, the server must\\r\\nbe configured to support older versions of TLS. In most cases, supporting TLSv1.2\\r\\nshould be sufficient.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n      id: \"tls-versions-server\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To limit enabled TLS protocol versions, use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ssl_options.versions\"\n      }), \" setting.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The example below only accepts TLSv1.3 (the most recent and secure version),\\r\\nand requires the node to be running on Erlang 26 compiled against a very recent OpenSSL.\\r\\nClients that use older runtimes (e.g. JDK, .NET, Python) without TLSv1.3 support\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"will not be able to connect\"\n      }), \" with this setup.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.ssl.1 = 5671\\r\\n\\r\\nssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile   = /path/to/server_certificate.pem\\r\\nssl_options.keyfile    = /path/to/server_key.pem\\r\\n\\r\\nssl_options.versions.1 = tlsv1.3\\r\\n\\r\\n# Limits enable cipher suites to only those used by TLSv1.3.\\r\\n# There are no cipher suites supported by both TLSv1.3 and TLSv1.2.\\r\\nssl_options.ciphers.1  = TLS_AES_256_GCM_SHA384\\r\\nssl_options.ciphers.2  = TLS_AES_128_GCM_SHA256\\r\\nssl_options.ciphers.3  = TLS_CHACHA20_POLY1305_SHA256\\r\\nssl_options.ciphers.4  = TLS_AES_128_CCM_SHA256\\r\\nssl_options.ciphers.5  = TLS_AES_128_CCM_8_SHA256\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The example below disables versions older than TLSv1.2:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.ssl.1 = 5671\\r\\nssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile   = /path/to/server_certificate.pem\\r\\nssl_options.keyfile    = /path/to/server_key.pem\\r\\n\\r\\nssl_options.versions.1 = tlsv1.2\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"verifying-tls-versions\",\n      children: \"Verifying Enabled TLS Versions\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To verify provided TLS versions, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.a, {\n        href: \"https://www.feistyduck.com/library/openssl-cookbook/online/ch-testing-with-open./ssl\",\n        children: [\"use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"openssl s_client\"\n        })]\n      }), \"\\r\\nwith an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.openssl.org/docs/man1.1.1/man1/openssl-s_client.html\",\n        children: \"appropriate TLS version flag\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# connect using TLSv1.3\\r\\nopenssl s_client -connect 127.0.0.1:5671 -tls1_3\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"and look for the following in the output:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In the example below, TLSv1.2 is used:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# connect using TLSv1.2\\r\\nopenssl s_client -connect 127.0.0.1:5671 -tls1_2\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The protocol and negotiated cipher suite in the output would\\r\\nlook like so:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"SSL-Session:\\r\\n    Protocol  : TLSv1.2\\r\\n    Cipher    : ECDHE-RSA-AES256-GCM-SHA384\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tls1.3\",\n      children: \"TLSv1.3\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.admonition, {\n      type: \"important\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"TLS 1.3 is a major revision of the suite of standards collectively known as \\\"TLS\\\".\\r\\nIt intentionally breaks backwards compatibility with all earlier versions.\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"While modern versions of most popular programming languages and runtimes have supports TLS 1.3 for a few years now, adopting of this\\r\\nversion requires planning and should be treated as a change that will affect\\r\\napplications that use TLS.\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"If some applications or their runtimes cannot be easily upgraded to use this new version,\\r\\nTLS 1.3 adoption on the RabbitMQ side might be a non-starter.\"\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://wiki.openssl.org/index.php/TLS1.3\",\n        children: \"TLSv1.3\"\n      }), \" is a major revision to the TLS protocol. It is the most recent\\r\\nand secure option.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"TLSv1.3 support requires the node to be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./which-erlang\",\n        children: \"running on Erlang 27 or 26\"\n      }), \" compiled against a very recent OpenSSL.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Clients that use older runtimes (e.g. JDK, .NET, Python) without TLSv1.3 support\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"will not be able to connect\"\n      }), \" to RabbitMQ nodes that are configured to only accept TLSv1.3 connections.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Because TLSv1.3 shares no cipher suites with earlier TLS versions, when enabling TLSv1.3,\\r\\nlist a set of TLSv1.3-specific cipher suites:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.ssl.1 = 5671\\r\\n\\r\\nssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile   = /path/to/server_certificate.pem\\r\\nssl_options.keyfile    = /path/to/server_key.pem\\r\\n\\r\\nssl_options.versions.1 = tlsv1.3\\r\\n\\r\\n# Limits enable cipher suites to only those used by TLSv1.3.\\r\\n# There are no cipher suites supported by both TLSv1.3 and TLSv1.2.\\r\\nssl_options.ciphers.1  = TLS_AES_256_GCM_SHA384\\r\\nssl_options.ciphers.2  = TLS_AES_128_GCM_SHA256\\r\\nssl_options.ciphers.3  = TLS_CHACHA20_POLY1305_SHA256\\r\\nssl_options.ciphers.4  = TLS_AES_128_CCM_SHA256\\r\\nssl_options.ciphers.5  = TLS_AES_128_CCM_8_SHA256\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Explicit cipher suite configuration may also be necessary on the client side.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To verify provided TLS versions, use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"openssl s_client\"\n      }), \" as\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#verifying-tls-versions\",\n        children: \"explained above\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tls-version-support-in-jdk-and-net\",\n      children: \"TLS Version Support Table for JDK and .NET\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Disabling TLSv1.0 limits the number of client platforms supported. Below is a table that\\r\\nexplains what TLS versions are supported by what JDK and .NET releases.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"table\", {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"thead\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"TLS version\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Minimum JDK version\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Minimum .NET version\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"TLS 1.3\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"td\", {\n          children: [\"JDK 8 \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n            href: \"https://www.oracle.com/java/technologies/javase/8u261-relnotes.html\",\n            children: \"starting with JDK8u261\"\n          }), \", JDK 11+\"]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"td\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n            href: \"https://github.com/dotnet/docs/issues/4675\",\n            children: \".NET 4.7\"\n          }), \" on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n            href: \"https://docs.microsoft.com/en-us/dotnet/framework/network-programming/tls\",\n            children: \"Windows versions that support TLSv1.3\"\n          })]\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"TLS 1.2\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"td\", {\n          children: [\"JDK 7 (see \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n            href: \"http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJSSEProvider\",\n            children: \"Protocols\"\n          }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n            href: \"http://docs.oracle.com/javase/8/docs/technotes/guides/security/enhancements-8.html\",\n            children: \"JDK 8 recommended\"\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \".NET 4.5\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"TLS 1.1\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"td\", {\n          children: [\"JDK 7 (see \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n            href: \"http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJSSEProvider\",\n            children: \"Protocols\"\n          }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n            href: \"http://docs.oracle.com/javase/8/docs/technotes/guides/security/enhancements-8.html\",\n            children: \"JDK 8 recommended\"\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \".NET 4.5\"\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Oracle JDK has a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://java.com/en/jre-jdk-cryptoroadmap.html\",\n        children: \"public roadmap on cryptography\"\n      }), \" and related standards\\r\\nthat outlines when certain cipher suites or TLS versions will be deprecated or removed.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"key-usage\",\n      children: \"Public Key Usage Options\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Public keys (certificates) have a number of fields that describe the intended usage scenarios for the key.\\r\\nThe fields limit how the key is allowed to be used by various tools.\\r\\nFor example, a public key can be used to verify certificate signatures (act as a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#certificates-and-keys\",\n        children: \"Certificate Authority\"\n      }), \" key).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"These fields also have effects on what \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#cipher-suites\",\n        children: \"cipher suites\"\n      }), \" will be used by RabbitMQ nodes\\r\\nand clients during connection negotiation (more specifically, the TLS handshake),\\r\\nso it is important to explain what the effects are.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This guide will cover them with some intentional oversimplification. Broadly speaking, the fields fall into one of three categories:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://tools.ietf.org/html/rfc5280#section-4.2.1.3\",\n          children: \"keyUsage\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://tools.ietf.org/html/rfc5280#section-4.2.1.9\",\n          children: \"Basic Constraints\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://tools.ietf.org/html/rfc5280#section-4.2.1.12\",\n          children: \"extendedKeyUsage\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Some fields are boolean values, others are of different types such as a set of options (bits) that can be set or unset.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Data services are largely agnostic to the constraints and key usage options used. However, some are essential\\r\\nto the use cases described in this guide:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Server authentication (provide server node's identity to the client)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Client authentication (provide client's identity to the server)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Verification of digital signatures\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Key encipherment\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The first two options are used for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-verification\",\n        children: \"peer verification\"\n      }), \". They must be set for the server and client certificates,\\r\\nrespectively, at public key generation time. A certificate can have both options set at the same time.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#automated-certificate-generation\",\n        children: \"tls-gen\"\n      }), \" will make sure that these constraints and extensions are correctly set.\\r\\nWhen \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#manual-certificate-generation\",\n        children: \"generating certificates manually\"\n      }), \", this is a responsibility of\\r\\nthe operator that generates the key pairs, or a key pair provider.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"key-usage-effects-on-cipher-suites\",\n      children: \"Extensions and Their Effect on Accepted Cipher Suites (Cipher Suite Filtering)\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Two key extensions are critically important for two major types of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#cipher-suites\",\n        children: \"cipher suites\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"digitalSignature\"\n        }), \" for ECC (Elliptic Curve Cryptography)-based suites\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"keyEncipherment\"\n        }), \" for RSA-based suites\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is highly recommended that both of the above options (bits) are set for certificates that will\\r\\nbe used by both RabbitMQ nodes and client libraries. If those bits are not set, TLS implementations\\r\\nwill leave out an entire class of cipher suites from consideration, potentially resulting in confusing\\r\\n\\\"no suitable cipher suite found\\\" alerts (error messages) at connection time.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"examining-certificate-extensions\",\n      children: \"Examining Certificate Extensions\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To see what constraints and extensions are set for a public key, use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"openssl x509\"\n      }), \" command:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"openssl x509 -in /path/to/certificate.pem -text -noout\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Its output will include a nested list of extensions and constraints that looks similar to this:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"X509v3 extensions:\\r\\n    X509v3 Basic Constraints:\\r\\n        CA:FALSE\\r\\n    X509v3 Key Usage:\\r\\n        Digital Signature, Key Encipherment\\r\\n    X509v3 Extended Key Usage:\\r\\n        TLS Web Client Authentication\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The above set of extensions says that this is a public key that can be used to authenticate\\r\\na client (provide a client identity to a RabbitMQ node), cannot be used as a Certificate Authority\\r\\ncertificate and can be used for key encipherment and digital signature.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For the purpose of this guide, this is a suitable certificate (public key) to be used for client connections.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Below is an example of a public key suitable certificate for server authentication (provides a RabbitMQ node identity)\\r\\nas well as client authentication (perhaps for the sake of usability):\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"X509v3 extensions:\\r\\n    X509v3 Basic Constraints:\\r\\n        CA:FALSE\\r\\n    X509v3 Key Usage:\\r\\n        Digital Signature, Key Encipherment\\r\\n    X509v3 Extended Key Usage:\\r\\n        TLS Web Server Authentication, TLS Web Client Authentication\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"cipher-suites\",\n      children: \"Cipher Suites\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to configure what cipher suites will be used by RabbitMQ. Note that not all\\r\\nsuites will be available on all systems. For example, to use Elliptic curve ciphers,\\r\\na recent \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./which-erlang\",\n        children: \"supported Erlang release\"\n      }), \" must be used.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"What cipher suites RabbitMQ nodes and clients used can also be effectively limited by the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#key-usage\",\n        children: \"public key usage fields\"\n      }), \"\\r\\nand their values. It is important to make sure that those key usage options are acceptable before proceeding\\r\\nwith cipher suite configuration.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"available-cipher-suites\",\n      children: \"Listing Cipher Suites Available on a RabbitMQ Node\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To list cipher suites supported by the Erlang runtime of a running node, use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-diagnostics cipher_suites --format openssl\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"rabbitmq-diagnostics cipher_suites --format openssl -q\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This will produce a list of cipher suites in the OpenSSL format.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that if you use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"--format erlang\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"rabbitmq-diagnostics cipher_suites --format erlang -q\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"then \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-diagnostics cipher_suites\"\n      }), \" will list cipher suites in the format\\r\\nthat's only accepted in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#erlang-term-config-file\",\n        children: \"classic config format\"\n      }), \". The OpenSSL format is accepted\\r\\nby both config formats. Note that cipher suites are not enquoted in the new style config format\\r\\nbut double quotes are required in the classic format.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The cipher suites listed by the above command are in formats that can be used for inbound and outgoing (e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./shovel\",\n        children: \"Shovel\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./federation\",\n        children: \"Federation\"\n      }), \")\\r\\nclient TLS connections. They are different from those used by \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#configuration-encryption\",\n        children: \"configuration value encryption\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When overriding cipher suites, it is highly recommended\\r\\nthat server-preferred \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#cipher-suite-order\",\n        children: \"cipher suite ordering is enforced\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"configuring-cipher-suites\",\n      children: \"Configuring Cipher Suites\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Cipher suites are configured using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ssl_options.ciphers\"\n      }), \" config option (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit.ssl_options.ciphers\"\n      }), \"\\r\\nin the classic config format).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The below example demonstrates how the option is used.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.ssl.1 = 5671\\r\\n\\r\\nssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile   = /path/to/server_certificate.pem\\r\\nssl_options.keyfile    = /path/to/server_key.pem\\r\\nssl_options.versions.1 = tlsv1.2\\r\\n\\r\\nssl_options.verify = verify_peer\\r\\nssl_options.fail_if_no_peer_cert = false\\r\\n\\r\\nssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384\\r\\nssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384\\r\\nssl_options.ciphers.3  = ECDH-ECDSA-AES256-GCM-SHA384\\r\\nssl_options.ciphers.4  = ECDH-RSA-AES256-GCM-SHA384\\r\\nssl_options.ciphers.5  = DHE-RSA-AES256-GCM-SHA384\\r\\nssl_options.ciphers.6  = DHE-DSS-AES256-GCM-SHA384\\r\\nssl_options.ciphers.7  = ECDHE-ECDSA-AES128-GCM-SHA256\\r\\nssl_options.ciphers.8  = ECDHE-RSA-AES128-GCM-SHA256\\r\\nssl_options.ciphers.9  = ECDH-ECDSA-AES128-GCM-SHA256\\r\\nssl_options.ciphers.10 = ECDH-RSA-AES128-GCM-SHA256\\r\\nssl_options.ciphers.11 = DHE-RSA-AES128-GCM-SHA256\\r\\nssl_options.ciphers.12 = DHE-DSS-AES128-GCM-SHA256\\r\\n\\r\\n# these MUST be disabled if TLSv1.3 is used\\r\\nssl_options.honor_cipher_order = true\\r\\nssl_options.honor_ecc_order    = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#erlang-term-config-file\",\n        children: \"classic config format\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-erlang\",\n        children: \"%% list allowed ciphers\\r\\n[\\r\\n {ssl, [{versions, ['tlsv1.2', 'tlsv1.1']}]},\\r\\n {rabbit, [\\r\\n           {ssl_listeners, [5671]},\\r\\n           {ssl_options, [{cacertfile,\\\"/path/to/ca_certificate.pem\\\"},\\r\\n                          {certfile,  \\\"/path/to/server_certificate.pem\\\"},\\r\\n                          {keyfile,   \\\"/path/to/server_key.pem\\\"},\\r\\n                          {versions, ['tlsv1.2', 'tlsv1.1']},\\r\\n                          %% This list is just an example!\\r\\n                          %% Not all cipher suites are available on all machines.\\r\\n                          %% Cipher suite order is important: preferred suites\\r\\n                          %% should be listed first.\\r\\n                          %% Different suites have different security and CPU load characteristics.\\r\\n                          {ciphers,  [\\r\\n                            \\\"ECDHE-ECDSA-AES256-GCM-SHA384\\\",\\r\\n                            \\\"ECDHE-RSA-AES256-GCM-SHA384\\\",\\r\\n                            \\\"ECDH-ECDSA-AES256-GCM-SHA384\\\",\\r\\n                            \\\"ECDH-RSA-AES256-GCM-SHA384\\\",\\r\\n                            \\\"DHE-RSA-AES256-GCM-SHA384\\\",\\r\\n                            \\\"DHE-DSS-AES256-GCM-SHA384\\\",\\r\\n                            \\\"ECDHE-ECDSA-AES128-GCM-SHA256\\\",\\r\\n                            \\\"ECDHE-RSA-AES128-GCM-SHA256\\\",\\r\\n                            \\\"ECDH-ECDSA-AES128-GCM-SHA256\\\",\\r\\n                            \\\"ECDH-RSA-AES128-GCM-SHA256\\\",\\r\\n                            \\\"DHE-RSA-AES128-GCM-SHA256\\\",\\r\\n                            \\\"DHE-DSS-AES128-GCM-SHA256\\\"\\r\\n                            ]}\\r\\n                         ]}\\r\\n          ]}\\r\\n].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"cipher-suite-order\",\n      children: \"Cipher Suite Order\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"During TLS connection negotiation, the server and the client negotiate\\r\\nwhat cipher suite will be used. It is possible to force server's TLS\\r\\nimplementation to dictate its preference (cipher suite order) to avoid\\r\\nmalicious clients that intentionally negotiate weak cipher suites in\\r\\npreparation for running an attack on them.\\r\\nTo do so, configure \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"honor_cipher_order\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"honor_ecc_order\"\n      }), \" to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.ssl.1        = 5671\\r\\nssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile   = /path/to/server_certificate.pem\\r\\nssl_options.keyfile    = /path/to/server_key.pem\\r\\nssl_options.versions.1 = tlsv1.2\\r\\n\\r\\nssl_options.honor_cipher_order = true\\r\\nssl_options.honor_ecc_order    = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Or, in the classic config format:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-erlang\",\n        children: \"%% Enforce server-provided cipher suite order (preference)\\r\\n[\\r\\n {ssl, [{versions, ['tlsv1.2', 'tlsv1.1']}]},\\r\\n {rabbit, [\\r\\n           {ssl_listeners, [5671]},\\r\\n           {ssl_options, [{cacertfile, \\\"/path/to/ca_certificate.pem\\\"},\\r\\n                          {certfile,   \\\"/path/to/server_certificate.pem\\\"},\\r\\n                          {keyfile,    \\\"/path/to/server_key.pem\\\"},\\r\\n                          {versions,   ['tlsv1.2', 'tlsv1.1']},\\r\\n\\r\\n                          %% ...\\r\\n\\r\\n\\r\\n                          {honor_cipher_order,   true},\\r\\n                          {honor_ecc_order,      true},\\r\\n                         ]}\\r\\n          ]}\\r\\n].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"major-vulnerabilities\",\n      children: \"Known TLS Vulnerabilities and Their Mitigation\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"robot\",\n      children: \"ROBOT\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://robotattack.org/\",\n        children: \"ROBOT attack\"\n      }), \" affects RabbitMQ installations that rely on RSA\\r\\ncipher suites and run on Erlang/OTP versions prior to\\r\\n19.3.6.4 and 20.1.7. To mitigate, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./which-erlang\",\n        children: \"upgrade Erlang/OTP\"\n      }), \" to a patched version\\r\\nand consider \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#cipher-suites\",\n        children: \"limiting the list of supported cipher suites\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"poodle\",\n      children: \"POODLE\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://templatelab.com/ssl-poodle/\",\n        children: \"POODLE\"\n      }), \" is a known SSL/TLS attack that originally compromised SSLv3.\\r\\nStarting with version 3.4.0, RabbitMQ server refuses to accept SSLv3 connections. In December 2014, a modified version of\\r\\nthe POODLE attack that affects TLSv1.0 was \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.imperialviolet.org/2014/12/08/poodleagain.html\",\n        children: \"announced\"\n      }), \".\\r\\nIt is therefore recommended to either run Erlang 18.0 or later, which\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://www.erlang.org/news/88\",\n        children: \"eliminates TLS 1.0 implementation vulnerability to POODLE\"\n      }), \",\\r\\nor \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#tls-versions\",\n        children: \"disable TLSv1.0 support\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"beast\",\n      children: \"BEAST\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Transport_Layer_Security#BEAST_attack\",\n        children: \"BEAST attack\"\n      }), \" is a known vulnerability that\\r\\naffects TLSv1.0. To mitigate it, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#tls-versions\",\n        children: \"disable TLSv1.0 support\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"tls-evaluation-tools\",\n      children: \"Evaluating TLS Setup Security\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Because TLS has many configurable parameters\\r\\nand some of them have suboptimal defaults for historical\\r\\nreasons, TLS setup security evaluation is a recommended practice.\\r\\nMultiple tools exist that perform various tests on TLS-enabled\\r\\nserver endpoints, for example, testing whether it is prone\\r\\nto known attacks such as POODLE, BEAST, and others.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"testssl-sh\",\n      children: \"testssl.sh\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://testssl.sh/\",\n        children: \"testssl.sh\"\n      }), \" is a mature and extensive TLS endpoint testing\\r\\ntool. It can be used with protocol endpoints that do not serve HTTPS.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The tool performs many tests (for instance, on some machines it runs\\r\\nover 350 cipher suite tests alone) and passing every single one may or may not\\r\\nmake sense for every environment. For example, many production deployments\\r\\ndo not use CRLs (Certificate Revocation Lists); most development environments\\r\\nuse self-signed certificates and don't have to worry about\\r\\nthe most optimal set of cipher suites enabled; and so on.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To run \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"testssl.sh\"\n      }), \", provide an endpoint to test in the form of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"{hostname}:5671\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"./testssl.sh localhost:5671\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"evaluation-of-a-tls-13-setup\",\n      children: \"Evaluation of a TLS 1.3 Setup\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The following example configuration that accepts TLSv1.3 connections passes key\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"testssl.sh\"\n      }), \" tests on Erlang 26:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.ssl.1 = 5671\\r\\n\\r\\nssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile   = /path/to/server_certificate.pem\\r\\nssl_options.keyfile    = /path/to/server_key.pem\\r\\n\\r\\nssl_options.versions.1 = tlsv1.3\\r\\n\\r\\nssl_options.verify               = verify_peer\\r\\nssl_options.fail_if_no_peer_cert = true\\r\\n\\r\\nssl_options.ciphers.1  = TLS_AES_256_GCM_SHA384\\r\\nssl_options.ciphers.2  = TLS_AES_128_GCM_SHA256\\r\\nssl_options.ciphers.3  = TLS_CHACHA20_POLY1305_SHA256\\r\\nssl_options.ciphers.4  = TLS_AES_128_CCM_SHA256\\r\\nssl_options.ciphers.5  = TLS_AES_128_CCM_8_SHA256\\r\\n\\r\\nssl_options.honor_cipher_order   = true\\r\\nssl_options.honor_ecc_order      = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This TLSv1.3-exclusive setup is reported as not vulnerable:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"  Using \\\"OpenSSL 3.3.1 4 Jun 2024 (Library: OpenSSL 3.3.1 4 Jun 2024)\\\" [~94 ciphers]\\r\\n on [redacted]:/opt/homebrew/bin/openssl\\r\\n (built: \\\"Jun  4 12:53:04 2024\\\", platform: \\\"darwin64-arm64-cc\\\")\\r\\n\\r\\n\\r\\n Start 2024-08-08 11:56:02                -->> 127.0.0.1:5671 (localhost) <<--\\r\\n\\r\\n A record via:           /etc/hosts\\r\\n rDNS (127.0.0.1):       localhost.\\r\\n Service detected:       Couldn't determine what's running on port 5671, assuming no HTTP service => skipping all HTTP checks\\r\\n\\r\\n\\r\\n Testing protocols via sockets except NPN+ALPN\\r\\n\\r\\n SSLv2      not offered (OK)\\r\\n SSLv3      not offered (OK)\\r\\n TLS 1      not offered\\r\\n TLS 1.1    not offered\\r\\n TLS 1.2    not offered\\r\\n TLS 1.3    offered (OK): final\\r\\n NPN/SPDY   not offered\\r\\n ALPN/HTTP2 not offered\\r\\n\\r\\n Testing cipher categories\\r\\n\\r\\n NULL ciphers (no encryption)                      not offered (OK)\\r\\n Anonymous NULL Ciphers (no authentication)        not offered (OK)\\r\\n Export ciphers (w/o ADH+NULL)                     not offered (OK)\\r\\n LOW: 64 Bit + DES, RC[2,4], MD5 (w/o export)      not offered (OK)\\r\\n Triple DES Ciphers / IDEA                         not offered\\r\\n Obsoleted CBC ciphers (AES, ARIA etc.)            not offered\\r\\n Strong encryption (AEAD ciphers) with no FS       not offered\\r\\n Forward Secrecy strong encryption (AEAD ciphers)  offered (OK)\\r\\n\\r\\n\\r\\n Testing server's cipher preferences\\r\\n\\r\\nHexcode  Cipher Suite Name (OpenSSL)       KeyExch.   Encryption  Bits     Cipher Suite Name (IANA/RFC)\\r\\n-----------------------------------------------------------------------------------------------------------------------------\\r\\nSSLv2\\r\\n -\\r\\nSSLv3\\r\\n -\\r\\nTLSv1\\r\\n -\\r\\nTLSv1.1\\r\\n -\\r\\nTLSv1.2\\r\\n -\\r\\nTLSv1.3 (listed by strength)\\r\\n x1302   TLS_AES_256_GCM_SHA384            ECDH 253   AESGCM      256      TLS_AES_256_GCM_SHA384\\r\\n x1303   TLS_CHACHA20_POLY1305_SHA256      ECDH 253   ChaCha20    256      TLS_CHACHA20_POLY1305_SHA256\\r\\n x1301   TLS_AES_128_GCM_SHA256            ECDH 253   AESGCM      128      TLS_AES_128_GCM_SHA256\\r\\n x1304   TLS_AES_128_CCM_SHA256            ECDH 253   AESCCM      128      TLS_AES_128_CCM_SHA256\\r\\n x1305   TLS_AES_128_CCM_8_SHA256          ECDH 253   AESCCM8     128      TLS_AES_128_CCM_8_SHA256\\r\\n\\r\\n Has server cipher order?     no (TLS 1.3 only)\\r\\n (limited sense as client will pick)\\r\\n\\r\\n Testing robust forward secrecy (FS) -- omitting Null Authentication/Encryption, 3DES, RC4\\r\\n\\r\\n FS is offered (OK)           TLS_AES_256_GCM_SHA384 TLS_CHACHA20_POLY1305_SHA256 TLS_AES_128_GCM_SHA256 TLS_AES_128_CCM_SHA256 TLS_AES_128_CCM_8_SHA256\\r\\n Elliptic curves offered:     prime256v1 secp384r1 X25519 X448\\r\\n TLS 1.3 sig_algs offered:    RSA-PSS-RSAE+SHA256 RSA-PSS-RSAE+SHA384 RSA-PSS-RSAE+SHA512\\r\\n\\r\\n Testing server defaults (Server Hello)\\r\\n\\r\\n TLS extensions (standard)    \\\"key share/#51\\\" \\\"supported versions/#43\\\" \\\"signature algorithms/#13\\\" \\\"certificate authorities/#47\\\"\\r\\n Session Ticket RFC 5077 hint no -- no lifetime advertised\\r\\n SSL Session ID support       no\\r\\n Session Resumption           Tickets no, ID: no\\r\\n TLS clock skew               Random values, no fingerprinting possible\\r\\n Certificate Compression      none\\r\\n Client Authentication        optional\\r\\n CA List for Client Auth      L=$$$$,CN=TLSGenSelfSignedtRootCA 2022-03-22T11:27:45.010198\\r\\n Signature Algorithm          SHA256 with RSA\\r\\n Server key size              RSA 2048 bits (exponent is 65537)\\r\\n Server key usage             Digital Signature, Key Encipherment\\r\\n Server extended key usage    TLS Web Server Authentication\\r\\n Serial                       01 (OK: length 1)\\r\\n Fingerprints                 SHA1 A4346FA6FDC61FCD4C0199EA14B8AE0F5D5121B1\\r\\n                              SHA256 C81025DA6F9BB646239659420D58E73F62CEB7D2AD5AC13FF12A9DE057394953\\r\\n Common Name (CN)             [redacted]\\r\\n subjectAltName (SAN)         [redacted] localhost\\r\\n Trust (hostname)             Ok via SAN (same w/o SNI)\\r\\n Chain of trust               NOT ok (self signed CA in chain)\\r\\n EV cert (experimental)       no\\r\\n Certificate Validity (UTC)   2779 >= 60 days (2022-03-22 07:27 --> 2032-03-19 07:27)\\r\\n                              >= 10 years is way too long\\r\\n ETS/\\\"eTLS\\\", visibility info  not present\\r\\n Certificate Revocation List  --\\r\\n OCSP URI                     --\\r\\n                              NOT ok -- neither CRL nor OCSP URI provided\\r\\n OCSP stapling                not offered\\r\\n OCSP must staple extension   --\\r\\n DNS CAA RR (experimental)    not offered\\r\\n Certificate Transparency     N/A\\r\\n Certificates provided        2\\r\\n Issuer                       TLSGenSelfSignedtRootCA 2022-03-22T11:27:45.010198\\r\\n Intermediate cert validity   #1: ok > 40 days (2032-03-19 07:27). $$$$ <-- $$$$\\r\\n Intermediate Bad OCSP (exp.) Ok\\r\\n\\r\\n\\r\\n Testing vulnerabilities\\r\\n\\r\\n Heartbleed (CVE-2014-0160)                not vulnerable (OK), no heartbeat extension\\r\\n CCS (CVE-2014-0224)                       not vulnerable (OK)\\r\\n Ticketbleed (CVE-2016-9244), experiment.  (applicable only for HTTPS)\\r\\n ROBOT                                     Server does not support any cipher suites that use RSA key transport\\r\\n Secure Renegotiation (RFC 5746)           not vulnerable (OK)\\r\\n Secure Client-Initiated Renegotiation     not vulnerable (OK)\\r\\n CRIME, TLS (CVE-2012-4929)                not vulnerable (OK)\\r\\n POODLE, SSL (CVE-2014-3566)               not vulnerable (OK), no SSLv3 support\\r\\n TLS_FALLBACK_SCSV (RFC 7507)              No fallback possible (OK), TLS 1.3 is the only protocol\\r\\n SWEET32 (CVE-2016-2183, CVE-2016-6329)    not vulnerable (OK)\\r\\n FREAK (CVE-2015-0204)                     not vulnerable (OK)\\r\\n DROWN (CVE-2016-0800, CVE-2016-0703)      not vulnerable on this host and port (OK)\\r\\n                                           make sure you don't use this certificate elsewhere with SSLv2 enabled services, see\\r\\n                                           https://search.censys.io/search?resource=hosts&virtual_hosts=INCLUDE&q=C81025DA6F9BB646239659420D58E73F62CEB7D2AD5AC13FF12A9DE057394953\\r\\n LOGJAM (CVE-2015-4000), experimental      not vulnerable (OK): no DH EXPORT ciphers, no DH key detected with <= TLS 1.2\\r\\n BEAST (CVE-2011-3389)                     not vulnerable (OK), no SSL3 or TLS1\\r\\n LUCKY13 (CVE-2013-0169), experimental     not vulnerable (OK)\\r\\n Winshock (CVE-2014-6321), experimental    not vulnerable (OK)\\r\\n RC4 (CVE-2013-2566, CVE-2015-2808)        not vulnerable (OK)\\r\\n\\r\\nCould not determine the protocol, only simulating generic clients.\\r\\n\\r\\n Running client simulations via sockets\\r\\n\\r\\n Browser                      Protocol  Cipher Suite Name (OpenSSL)       Forward Secrecy\\r\\n------------------------------------------------------------------------------------------------\\r\\n Android 8.1 (native)         No connection\\r\\n Android 9.0 (native)         TLSv1.3   TLS_AES_128_GCM_SHA256            253 bit ECDH (X25519)\\r\\n Android 10.0 (native)        TLSv1.3   TLS_AES_128_GCM_SHA256            253 bit ECDH (X25519)\\r\\n Android 11 (native)          TLSv1.3   TLS_AES_128_GCM_SHA256            253 bit ECDH (X25519)\\r\\n Android 12 (native)          TLSv1.3   TLS_AES_128_GCM_SHA256            253 bit ECDH (X25519)\\r\\n Java 7u25                    No connection\\r\\n Java 8u161                   No connection\\r\\n Java 11.0.2 (OpenJDK)        TLSv1.3   TLS_AES_128_GCM_SHA256            256 bit ECDH (P-256)\\r\\n Java 17.0.3 (OpenJDK)        TLSv1.3   TLS_AES_256_GCM_SHA384            253 bit ECDH (X25519)\\r\\n go 1.17.8                    TLSv1.3   TLS_AES_128_GCM_SHA256            253 bit ECDH (X25519)\\r\\n LibreSSL 2.8.3 (Apple)       No connection\\r\\n OpenSSL 1.0.2e               No connection\\r\\n OpenSSL 1.1.0l (Debian)      No connection\\r\\n OpenSSL 1.1.1d (Debian)      TLSv1.3   TLS_AES_256_GCM_SHA384            253 bit ECDH (X25519)\\r\\n OpenSSL 3.0.3 (git)          TLSv1.3   TLS_AES_256_GCM_SHA384            253 bit ECDH (X25519)\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"evaluation-of-a-tls-12-setup-with-restricted-cipher-suites\",\n      children: \"Evaluation of a TLS 1.2 Setup with Restricted Cipher Suites\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The following example configuration that accepts TLSv1.2 connections passes key\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"testssl.sh\"\n      }), \" tests on Erlang 26.2:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.ssl.default  = 5671\\r\\nssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile   = /path/to/server_certificate.pem\\r\\nssl_options.keyfile    = /path/to/server_key.pem\\r\\nssl_options.versions.1 = tlsv1.2\\r\\n\\r\\nssl_options.verify               = verify_peer\\r\\nssl_options.fail_if_no_peer_cert = false\\r\\n\\r\\nssl_options.honor_cipher_order   = true\\r\\nssl_options.honor_ecc_order      = true\\r\\n\\r\\n# These are highly recommended for TLSv1.2 but cannot be used\\r\\n# with TLSv1.3. If TLSv1.3 is enabled, these lines MUST be removed.\\r\\nssl_options.client_renegotiation = false\\r\\nssl_options.secure_renegotiate   = true\\r\\n\\r\\nssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384\\r\\nssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384\\r\\nssl_options.ciphers.3  = ECDH-ECDSA-AES256-GCM-SHA384\\r\\nssl_options.ciphers.4  = ECDH-RSA-AES256-GCM-SHA384\\r\\nssl_options.ciphers.5  = DHE-RSA-AES256-GCM-SHA384\\r\\nssl_options.ciphers.6  = DHE-DSS-AES256-GCM-SHA384\\r\\nssl_options.ciphers.7  = ECDHE-ECDSA-AES128-GCM-SHA256\\r\\nssl_options.ciphers.8  = ECDHE-RSA-AES128-GCM-SHA256\\r\\nssl_options.ciphers.9  = ECDH-ECDSA-AES128-GCM-SHA256\\r\\nssl_options.ciphers.10 = ECDH-RSA-AES128-GCM-SHA256\\r\\nssl_options.ciphers.11 = DHE-RSA-AES128-GCM-SHA256\\r\\nssl_options.ciphers.12 = DHE-DSS-AES128-GCM-SHA256\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This TLSv1.2-enabled setup is reported as not vulnerable to a set of known\\r\\nhigh profile vulnerabilities:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \" Using \\\"OpenSSL 3.3.1 4 Jun 2024 (Library: OpenSSL 3.3.1 4 Jun 2024)\\\" [~94 ciphers]\\r\\n on [redacted]:/opt/homebrew/bin/openssl\\r\\n (built: \\\"Jun  4 12:53:04 2024\\\", platform: \\\"darwin64-arm64-cc\\\")\\r\\n\\r\\n\\r\\n Start 2024-08-08 13:42:36                -->> 127.0.0.1:5671 (localhost) <<--\\r\\n\\r\\n A record via:           /etc/hosts\\r\\n rDNS (127.0.0.1):       localhost.\\r\\n Service detected:       certificate-based authentication without providing client certificate and private key => skipping all HTTP checks\\r\\n\\r\\n\\r\\n Testing protocols via sockets except NPN+ALPN\\r\\n\\r\\n SSLv2      not offered (OK)\\r\\n SSLv3      not offered (OK)\\r\\n TLS 1      not offered\\r\\n TLS 1.1    not offered\\r\\n TLS 1.2    offered (OK)\\r\\n TLS 1.3    not offered and downgraded to a weaker protocol\\r\\n NPN/SPDY   not offered\\r\\n ALPN/HTTP2 not offered\\r\\n\\r\\n Testing cipher categories\\r\\n\\r\\n NULL ciphers (no encryption)                      not offered (OK)\\r\\n Anonymous NULL Ciphers (no authentication)        not offered (OK)\\r\\n Export ciphers (w/o ADH+NULL)                     not offered (OK)\\r\\n LOW: 64 Bit + DES, RC[2,4], MD5 (w/o export)      not offered (OK)\\r\\n Triple DES Ciphers / IDEA                         not offered\\r\\n Obsoleted CBC ciphers (AES, ARIA etc.)            not offered\\r\\n Strong encryption (AEAD ciphers) with no FS       not offered\\r\\n Forward Secrecy strong encryption (AEAD ciphers)  offered (OK)\\r\\n\\r\\n\\r\\n Testing server's cipher preferences\\r\\n\\r\\nHexcode  Cipher Suite Name (OpenSSL)       KeyExch.   Encryption  Bits     Cipher Suite Name (IANA/RFC)\\r\\n-----------------------------------------------------------------------------------------------------------------------------\\r\\nSSLv2\\r\\n -\\r\\nSSLv3\\r\\n -\\r\\nTLSv1\\r\\n -\\r\\nTLSv1.1\\r\\n -\\r\\nTLSv1.2 (server order)\\r\\n xc030   ECDHE-RSA-AES256-GCM-SHA384       ECDH 253   AESGCM      256      TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\\r\\n x9f     DHE-RSA-AES256-GCM-SHA384         DH 2048    AESGCM      256      TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\\r\\n xc02f   ECDHE-RSA-AES128-GCM-SHA256       ECDH 253   AESGCM      128      TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\\r\\n x9e     DHE-RSA-AES128-GCM-SHA256         DH 2048    AESGCM      128      TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\\r\\nTLSv1.3\\r\\n -\\r\\n\\r\\n Has server cipher order?     yes (OK)\\r\\n\\r\\n\\r\\n Testing robust forward secrecy (FS) -- omitting Null Authentication/Encryption, 3DES, RC4\\r\\n\\r\\n FS is offered (OK)           ECDHE-RSA-AES256-GCM-SHA384 DHE-RSA-AES256-GCM-SHA384 ECDHE-RSA-AES128-GCM-SHA256 DHE-RSA-AES128-GCM-SHA256\\r\\n Elliptic curves offered:     prime256v1 secp384r1 secp521r1 brainpoolP256r1 brainpoolP384r1 brainpoolP512r1 X25519 X448\\r\\n DH group offered:            RFC3526/Oakley Group 14 (2048 bits)\\r\\n TLS 1.2 sig_algs offered:    RSA+SHA256 RSA+SHA384 RSA+SHA512 RSA-PSS-RSAE+SHA256\\r\\n\\r\\n Testing server defaults (Server Hello)\\r\\n\\r\\n TLS extensions (standard)    \\\"renegotiation info/#65281\\\" \\\"EC point formats/#11\\\" \\\"max fragment length/#1\\\"\\r\\n Session Ticket RFC 5077 hint no -- no lifetime advertised\\r\\n SSL Session ID support       yes\\r\\n Session Resumption           Tickets no, Client Auth: ID resumption test not supported\\r\\n TLS clock skew               -1 sec from localtime\\r\\n Client Authentication        required\\r\\n CA List for Client Auth      L=$$$$,CN=TLSGenSelfSignedtRootCA 2022-03-22T11:27:45.010198\\r\\n Signature Algorithm          SHA256 with RSA\\r\\n Server key size              RSA 2048 bits (exponent is 65537)\\r\\n Server key usage             Digital Signature, Key Encipherment\\r\\n Server extended key usage    TLS Web Server Authentication\\r\\n Serial                       01 (OK: length 1)\\r\\n Fingerprints                 SHA1 A4346FA6FDC61FCD4C0199EA14B8AE0F5D5121B1\\r\\n                              SHA256 C81025DA6F9BB646239659420D58E73F62CEB7D2AD5AC13FF12A9DE057394953\\r\\n Common Name (CN)             [redacted]\\r\\n subjectAltName (SAN)         [redacted] localhost\\r\\n Trust (hostname)             Ok via SAN (same w/o SNI)\\r\\n Chain of trust               NOT ok (self signed CA in chain)\\r\\n EV cert (experimental)       no\\r\\n Certificate Validity (UTC)   2779 >= 60 days (2022-03-22 07:27 --> 2032-03-19 07:27)\\r\\n                              >= 10 years is way too long\\r\\n ETS/\\\"eTLS\\\", visibility info  not present\\r\\n Certificate Revocation List  --\\r\\n OCSP URI                     --\\r\\n                              NOT ok -- neither CRL nor OCSP URI provided\\r\\n OCSP stapling                not offered\\r\\n OCSP must staple extension   --\\r\\n DNS CAA RR (experimental)    not offered\\r\\n Certificate Transparency     --\\r\\n Certificates provided        2\\r\\n Issuer                       TLSGenSelfSignedtRootCA 2022-03-22T11:27:45.010198\\r\\n Intermediate cert validity   #1: ok > 40 days (2032-03-19 07:27). $$$$ <-- $$$$\\r\\n Intermediate Bad OCSP (exp.) Ok\\r\\n\\r\\n\\r\\n Testing vulnerabilities\\r\\n\\r\\n Heartbleed (CVE-2014-0160)                not vulnerable (OK), no heartbeat extension\\r\\n CCS (CVE-2014-0224)                       not vulnerable (OK)\\r\\n Ticketbleed (CVE-2016-9244), experiment.  not vulnerable (OK), no session ticket extension\\r\\n ROBOT                                     Server does not support any cipher suites that use RSA key transport\\r\\n Secure Renegotiation (RFC 5746)           supported (OK)\\r\\n Secure Client-Initiated Renegotiation     not having provided client certificate and private key file, the client x509-based authentication prevents this from being tested\\r\\n CRIME, TLS (CVE-2012-4929)                not vulnerable (OK)\\r\\n BREACH (CVE-2013-3587)                    not having provided client certificate and private key file, the client x509-based authentication prevents this from being tested\\r\\n POODLE, SSL (CVE-2014-3566)               not vulnerable (OK), no SSLv3 support\\r\\n TLS_FALLBACK_SCSV (RFC 7507)              No fallback possible (OK), no protocol below TLS 1.2 offered\\r\\n SWEET32 (CVE-2016-2183, CVE-2016-6329)    not vulnerable (OK)\\r\\n FREAK (CVE-2015-0204)                     not vulnerable (OK)\\r\\n DROWN (CVE-2016-0800, CVE-2016-0703)      not vulnerable on this host and port (OK)\\r\\n                                           make sure you don't use this certificate elsewhere with SSLv2 enabled services, see\\r\\n                                           https://search.censys.io/search?resource=hosts&virtual_hosts=INCLUDE&q=C81025DA6F9BB646239659420D58E73F62CEB7D2AD5AC13FF12A9DE057394953\\r\\n LOGJAM (CVE-2015-4000), experimental      common prime with 2048 bits detected: RFC3526/Oakley Group 14 (2048 bits),\\r\\n                                           but no DH EXPORT ciphers\\r\\n BEAST (CVE-2011-3389)                     not vulnerable (OK), no SSL3 or TLS1\\r\\n LUCKY13 (CVE-2013-0169), experimental     not vulnerable (OK)\\r\\n Winshock (CVE-2014-6321), experimental    not vulnerable (OK) - CAMELLIA or ECDHE_RSA GCM ciphers found\\r\\n RC4 (CVE-2013-2566, CVE-2015-2808)        no RC4 ciphers detected (OK)\\r\\n\\r\\nCould not determine the protocol, only simulating generic clients.\\r\\n\\r\\n Running client simulations via sockets\\r\\n\\r\\n Browser                      Protocol  Cipher Suite Name (OpenSSL)       Forward Secrecy\\r\\n------------------------------------------------------------------------------------------------\\r\\n Android 8.1 (native)         TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\\r\\n Android 9.0 (native)         TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\\r\\n Android 10.0 (native)        TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\\r\\n Android 11 (native)          TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\\r\\n Android 12 (native)          TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\\r\\n Java 7u25                    No connection\\r\\n Java 8u161                   TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       521 bit ECDH (P-521)\\r\\n Java 11.0.2 (OpenJDK)        TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       521 bit ECDH (P-521)\\r\\n Java 17.0.3 (OpenJDK)        TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\\r\\n go 1.17.8                    TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\\r\\n LibreSSL 2.8.3 (Apple)       TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\\r\\n OpenSSL 1.0.2e               TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       521 bit ECDH (P-521)\\r\\n OpenSSL 1.1.0l (Debian)      TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\\r\\n OpenSSL 1.1.1d (Debian)      TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\\r\\n OpenSSL 3.0.3 (git)          TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"rotation\",\n      children: \"TLS Certificate and Private Key Rotation\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Server TLS certificates (public keys) and private keys have expiration dates and will need to be replaced\\r\\n(rotated) every so often.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The replacement process involves the following steps:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Replace the files on disk\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Clear the certificate and private key store cache on the node\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Without the second step, the new certificate/key pair will be used by the node after a period of time,\\r\\nas the TLS implementation in the runtimes purges its certificate store cache.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"replacing-certificate-and-private-key-files-on-disk\",\n      children: \"Replacing Certificate and Private Key Files on Disk\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Simply replace the server certificate, server private key and (if needed) the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-verification\",\n        children: \"certificate authority\"\n      }), \"\\r\\nbundle files with their new versions.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"clearing-the-certificate-and-private-key-store-cache\",\n      children: \"Clearing the Certificate and Private Key Store Cache\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqctl eval -n [target-node@hostname] 'ssl:clear_pem_cache().'\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"rabbitmqctl.bat eval -n [target-node@hostname] 'ssl:clear_pem_cache().'\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        value: \"cmd\",\n        label: \"cmd\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-batch\",\n            children: \"rabbitmqctl.bat eval -n [target-node@hostname] \\\"ssl:clear_pem_cache().\\\"\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"trust-store-plugin\",\n      children: \"The Trust Store Plugin\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/tree/main/deps/rabbitmq_trust_store\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbitmq_trust_store\"\n        })\n      }), \" is a plugin that\\r\\ntargets environments where \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-verification\",\n        children: \"peer verification\"\n      }), \" is heavily used and the list of trusted certificates is fairly dynamic.\\r\\nThat is, that the trusted leaf client certificates changes fairly often and it makes more sense to whitelist\\r\\nthem than to use certificate revocation or intermediate certificates.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The trust store plugin supports two sources of trusted leaf client certificates:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"A local directory with certificates\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"A set of HTTPS endpoints that follows a certain convention\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Please refer to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/tree/main/deps/rabbitmq_trust_store\",\n        children: \"doc guide\"\n      }), \" of the plugin\\r\\nto learn more about how both options can be set up.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"erlang-client\",\n      children: \"Using TLS in the Erlang Client\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Enabling TLS in the RabbitMQ Erlang client is similar to configuring other\\r\\nsettings related to networking. The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"#amqp_params_network\"\n      }), \" record\\r\\nprovides a field, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ssl_options\"\n      }), \", for all the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://erlang.org/doc/man/./ssl\",\n        children: \"standard Erlang TLS options\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"erlang-ssl\",\n      children: \"Erlang TLS Options\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The three important options which must be supplied are:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"cacertfile\"\n        }), \" option specifies the certificates of the root\\r\\nCertificate Authorities that we wish to implicitly trust.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"certfile\"\n        }), \" is the client's own certificate in PEM format\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"keyfile\"\n        }), \" is the client's private key file in PEM format\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"server_name_indication\"\n      }), \" - set this option to the host name of the server\\r\\nto which a TLS connection will be made to enable \\\"Server Name Indication\\\" verification\\r\\nof the certificate presented by the server. This ensures that the server certificate's\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"CN=\"\n      }), \" value will be verified during TLS connection establishment. You can\\r\\noverride this behavior by setting \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"server_name_indication\"\n      }), \" to a different\\r\\nhost name or to the special value \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"disable\"\n      }), \" to disable this\\r\\nverification. Note that, by default, SNI is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"b\", {\n        children: \"not\"\n      }), \" enabled. This default\\r\\nwill change in a future RabbitMQ Erlang client release.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"verify\"\n      }), \" - set this option to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"verify_peer\"\n      }), \" to enable X509\\r\\ncertificate chain verification. The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"depth\"\n      }), \" option configures certificate\\r\\nverification depth. Note that, by default, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"verify\"\n      }), \" is set to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"verify_none\"\n      }), \", which disables certificate chain verification. This default\\r\\nwill change in a future RabbitMQ Erlang client release.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"erlang-code-example\",\n      children: \"Code Example\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-erlang\",\n        children: \"SslOpts = [{cacertfile, &quot;/path/to/ca_certificate.pem&quot;},\\r\\n           {certfile, &quot;/path/to/client/certificate.pem&quot;},\\r\\n           {keyfile, &quot;/path/to/client/private_key.pem&quot;},\\r\\n\\r\\n           %% only necessary with intermediate CAs\\r\\n           %% {depth, 2},\\r\\n\\r\\n           %% Note: it is recommended to set 'verify' to\\r\\n           %% to 'verify_peer' to ensure that X509\\r\\n           %% certificate chain validation is enabled\\r\\n           %%\\r\\n           %% Do not set 'verify' or set it to verify_none\\r\\n           %% if x509 certificate chain validation is\\r\\n           %% not desired\\r\\n           {verify, verify_peer},\\r\\n\\r\\n           %% If Server Name Indication validation is desired,\\r\\n           %% set the following option to the host name to which\\r\\n           %% the connection is made. If necessary, this option\\r\\n           %% may be set to another host name to match the server\\r\\n           %% certificate's CN= value.\\r\\n           %% Do not set this option or set it to the atom 'disable'\\r\\n           %% to disable SNI validation\\r\\n           {server_name_indication, \\\"my.rmq-server.net\\\"}],\\r\\n\\r\\nParams = #amqp_params_network{host = \\\"my.rmq-server.net\\\",\\r\\n                              port = 5671,\\r\\n                              ssl_options = SslOpts}\\r\\n\\r\\n{ok, Conn} = amqp_connection:start(Params),\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"You can now go ahead and use Conn as a normal connection.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"manual-certificate-generation\",\n      children: \"Manually Generating a CA, Certificates and Private Keys\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This section of the guide explains how to generate a Certificate Authority and\\r\\nuse it to generate and sign two certificate/key pairs, one for the server and one for\\r\\nclient libraries. Note that the process can be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#automated-certificate-generation\",\n        children: \"automated using\\r\\nexisting tools\"\n      }), \", which is recommended. This section is intended for those who would like to improve their understanding\\r\\nof the process, OpenSSL command line tools and some important aspects of OpenSSL configuration.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This guide assumes a UNIX-like operating system (Linux, MacOS, a BSD variant and so on)\\r\\nand a recent version of OpenSSL available in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"PATH\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"First let's create a directory for our test Certificate Authority:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"mkdir testca\\r\\ncd testca\\r\\nmkdir certs private\\r\\nchmod 700 private\\r\\necho 01 > serial\\r\\ntouch index.txt\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Now add the following OpenSSL configuration file, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"openssl.cnf\"\n      }), \", within the newly created \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"testca\"\n      }), \"\\r\\ndirectory:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"[ ca ]\\r\\ndefault_ca = testca\\r\\n\\r\\n[ testca ]\\r\\ndir = .\\r\\ncertificate = $dir/ca_certificate.pem\\r\\ndatabase = $dir/index.txt\\r\\nnew_certs_dir = $dir/certs\\r\\nprivate_key = $dir/private/ca_private_key.pem\\r\\nserial = $dir/serial\\r\\n\\r\\ndefault_crl_days = 7\\r\\ndefault_days = 365\\r\\ndefault_md = sha256\\r\\n\\r\\npolicy = testca_policy\\r\\nx509_extensions = certificate_extensions\\r\\n\\r\\n[ testca_policy ]\\r\\ncommonName = supplied\\r\\nstateOrProvinceName = optional\\r\\ncountryName = optional\\r\\nemailAddress = optional\\r\\norganizationName = optional\\r\\norganizationalUnitName = optional\\r\\ndomainComponent = optional\\r\\n\\r\\n[ certificate_extensions ]\\r\\nbasicConstraints = CA:false\\r\\n\\r\\n[ req ]\\r\\ndefault_bits = 2048\\r\\ndefault_keyfile = ./private/ca_private_key.pem\\r\\ndefault_md = sha256\\r\\nprompt = yes\\r\\ndistinguished_name = root_ca_distinguished_name\\r\\nx509_extensions = root_ca_extensions\\r\\n\\r\\n[ root_ca_distinguished_name ]\\r\\ncommonName = hostname\\r\\n\\r\\n[ root_ca_extensions ]\\r\\nbasicConstraints = CA:true\\r\\nkeyUsage = keyCertSign, cRLSign\\r\\n\\r\\n[ client_ca_extensions ]\\r\\nbasicConstraints = CA:false\\r\\nkeyUsage = digitalSignature,keyEncipherment\\r\\nextendedKeyUsage = 1.3.6.1.5.5.7.3.2\\r\\n\\r\\n[ server_ca_extensions ]\\r\\nbasicConstraints = CA:false\\r\\nkeyUsage = digitalSignature,keyEncipherment\\r\\nextendedKeyUsage = 1.3.6.1.5.5.7.3.1\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Next we need to generate the key and certificates that our test\\r\\nCertificate Authority will use. Still within the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"testca\"\n      }), \"\\r\\ndirectory:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"openssl req -x509 -config openssl.cnf -newkey rsa:2048 -days 365 \\\\\\r\\n    -out ca_certificate.pem -outform PEM -subj /CN=MyTestCA/ -nodes\\r\\nopenssl x509 -in ca_certificate.pem -out ca_certificate.cer -outform DER\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This is all that is needed to generate a test Certificate\\r\\nAuthority. The root certificate is in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ca_certificate.pem\"\n      }), \"\\r\\nand is also in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"testca/ca_certificate.cer\"\n      }), \". These two files contain the\\r\\nsame information, but in different formats, PEM and DER.\\r\\nMost software uses the former but some tools require the latter.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Having set up our Certificate Authority, we now need to generate\\r\\nprivate keys and certificates for the clients and the server.\\r\\nRabbitMQ broker uses certificates and private keys in the PEM format.\\r\\nSome client libraries use the PEM format, others will require conversion\\r\\nto a different format (e.g. PKCS#12).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Java and .NET clients use a certificate format called PKCS#12 and custom certificate stores.\\r\\nCertificate store contains both the client's certificate and key. The PKCS store is usually password protected, and so that\\r\\na password must be provided.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The process for creating server and client certificates is very\\r\\nsimilar. First the server:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"cd ..\\r\\nls\\r\\n# => testca\\r\\nmkdir server\\r\\ncd server\\r\\nopenssl genrsa -out private_key.pem 2048\\r\\nopenssl req -new -key private_key.pem -out req.pem -outform PEM \\\\\\r\\n    -subj /CN=$(hostname)/O=server/ -nodes\\r\\ncd ../testca\\r\\nopenssl ca -config openssl.cnf -in ../server/req.pem -out \\\\\\r\\n    ../server/server_certificate.pem -notext -batch -extensions server_ca_extensions\\r\\ncd ../server\\r\\nopenssl pkcs12 -export -out server_certificate.p12 -in server_certificate.pem -inkey private_key.pem \\\\\\r\\n    -passout pass:MySecretPassword\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"And now the client:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"cd ..\\r\\nls\\r\\n# => server testca\\r\\nmkdir client\\r\\ncd client\\r\\nopenssl genrsa -out private_key.pem 2048\\r\\nopenssl req -new -key private_key.pem -out req.pem -outform PEM \\\\\\r\\n    -subj /CN=$(hostname)/O=client/ -nodes\\r\\ncd ../testca\\r\\nopenssl ca -config openssl.cnf -in ../client/req.pem -out \\\\\\r\\n    ../client/client_certificate.pem -notext -batch -extensions client_ca_extensions\\r\\ncd ../client\\r\\nopenssl pkcs12 -export -out client_certificate.p12 -in client_certificate.pem -inkey private_key.pem \\\\\\r\\n    -passout pass:MySecretPassword\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The two examples above generate private keys that are 2048 bits in size.\\r\\nIt is possible to use longer (and thus more secure but also slower to generate)\\r\\nkeys by providing a different value to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"openssl genrsa\"\n      }), \", e.g.:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"openssl genrsa -out private_key.pem 4096\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Another option would be to generate a key using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-Elliptic-curve-cryptography/\",\n        children: \"Elliptic Curve Cryptography\"\n      }), \". Instead of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"openssl genrsa\"\n      }), \" use\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"openssl ecparam\"\n      }), \" like so:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"openssl ecparam -out private_key.pem -genkey -name prime256v1\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"prime256v1\"\n      }), \" in the example above is an Elliptic curve name.\\r\\nDifferent versions of OpenSSL will have a different set of curves available,\\r\\nlist them with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"openssl ecparam -list_curves\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/ssl/index.md\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./docs/ssl/root_ca_and_leaf.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/root_ca_and_leaf-8bc604562329d97549515682cb232d74.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZG9jcy9zc2wvcm9vdF9jYV9hbmRfbGVhZi5wbmciLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL2RvY3Mvc3NsL3Jvb3RfY2FfYW5kX2xlYWYucG5nPzg4YTQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvcm9vdF9jYV9hbmRfbGVhZi04YmM2MDQ1NjIzMjlkOTc1NDk1MTU2ODJjYjIzMmQ3NC5wbmdcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./docs/ssl/root_ca_and_leaf.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./docs/ssl/root_intermediate_ca_and_leaf.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/root_intermediate_ca_and_leaf-0db0418e7a066229fe9e758463916de8.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZG9jcy9zc2wvcm9vdF9pbnRlcm1lZGlhdGVfY2FfYW5kX2xlYWYucG5nIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9kb2NzL3NzbC9yb290X2ludGVybWVkaWF0ZV9jYV9hbmRfbGVhZi5wbmc/YmU4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2ltYWdlcy9yb290X2ludGVybWVkaWF0ZV9jYV9hbmRfbGVhZi0wZGIwNDE4ZTdhMDY2MjI5ZmU5ZTc1ODQ2MzkxNmRlOC5wbmdcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./docs/ssl/root_intermediate_ca_and_leaf.png\n");

/***/ }),

/***/ "./src/components/DotNetClient/index.js":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DotNetClientDocRootURL: () => (/* binding */ DotNetClientDocRootURL),\n/* harmony export */   DotNetClientDocURL: () => (/* binding */ DotNetClientDocURL),\n/* harmony export */   DotNetClientVersion: () => (/* binding */ DotNetClientVersion)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _docusaurus_useDocusaurusContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/@docusaurus/core/lib/client/exports/useDocusaurusContext.js\");\nfunction getActualVersion(){const{siteConfig:{customFields:{releaseBranches}}}=(0,_docusaurus_useDocusaurusContext__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();const version=releaseBranches['dotnet'];return version;}function DotNetClientVersion(){const version=getActualVersion();return version;}function DotNetClientDocRootURL(){const url=`https://rabbitmq.github.io/rabbitmq-dotnet-client`;return url;}function DotNetClientDocURL(){const url=`${DotNetClientDocRootURL()}/api`;return url;}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9Eb3ROZXRDbGllbnQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWJiaXRtcS13ZWJzaXRlLy4vc3JjL2NvbXBvbmVudHMvRG90TmV0Q2xpZW50L2luZGV4LmpzP2JkZmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB1c2VEb2N1c2F1cnVzQ29udGV4dCBmcm9tICdAZG9jdXNhdXJ1cy91c2VEb2N1c2F1cnVzQ29udGV4dCc7XHJcblxyXG5mdW5jdGlvbiBnZXRBY3R1YWxWZXJzaW9uKCkge1xyXG4gIGNvbnN0IHtcclxuICAgIHNpdGVDb25maWc6IHtcclxuICAgICAgY3VzdG9tRmllbGRzOiB7cmVsZWFzZUJyYW5jaGVzfSxcclxuICAgIH0sXHJcbiAgfSA9IHVzZURvY3VzYXVydXNDb250ZXh0KCk7XHJcblxyXG4gIGNvbnN0IHZlcnNpb24gPSByZWxlYXNlQnJhbmNoZXNbJ2RvdG5ldCddO1xyXG4gIHJldHVybiB2ZXJzaW9uO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gRG90TmV0Q2xpZW50VmVyc2lvbigpIHtcclxuICBjb25zdCB2ZXJzaW9uID0gZ2V0QWN0dWFsVmVyc2lvbigpO1xyXG4gIHJldHVybiB2ZXJzaW9uO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gRG90TmV0Q2xpZW50RG9jUm9vdFVSTCgpIHtcclxuICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9yYWJiaXRtcS5naXRodWIuaW8vcmFiYml0bXEtZG90bmV0LWNsaWVudGA7XHJcbiAgcmV0dXJuIHVybDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIERvdE5ldENsaWVudERvY1VSTCgpIHtcclxuICBjb25zdCB1cmwgPSBgJHtEb3ROZXRDbGllbnREb2NSb290VVJMKCl9L2FwaWA7XHJcbiAgcmV0dXJuIHVybDtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/DotNetClient/index.js\n");

/***/ })

}]);