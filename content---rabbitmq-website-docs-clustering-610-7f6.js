"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-docs-clustering-610-7f6"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-4-1-clustering-md-610.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"clustering","title":"Clustering Guide","description":"<!--","source":"@site/versioned_docs/version-4.1/clustering.md","sourceDirName":".","slug":"/clustering","permalink":"/rabbitmq-website/docs/clustering","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/versioned_docs/version-4.1/clustering.md","tags":[],"version":"4.1","frontMatter":{"title":"Clustering Guide"},"sidebar":"docsSidebar","previous":{"title":"Troubleshooting TLS","permalink":"/rabbitmq-website/docs/troubleshooting-ssl"},"next":{"title":"Cluster Formation","permalink":"/rabbitmq-website/docs/cluster-formation"}}');

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./versioned_docs/version-4.1/clustering.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_4_1_clustering_md_610_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_4_1_clustering_md_610_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-4-1-clustering-md-610.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Clustering Guide'\n};\nconst contentTitle = 'Clustering Guide';\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"What is a Cluster?\",\n  \"id\": \"what-is-a-cluster\",\n  \"level\": 2\n}, {\n  \"value\": \"Cluster Formation\",\n  \"id\": \"cluster-formation\",\n  \"level\": 2\n}, {\n  \"value\": \"Ways of Forming a Cluster\",\n  \"id\": \"cluster-formation-options\",\n  \"level\": 3\n}, {\n  \"value\": \"Node Names (Identifiers)\",\n  \"id\": \"node-names\",\n  \"level\": 3\n}, {\n  \"value\": \"Cluster Formation Requirements\",\n  \"id\": \"cluster-formation-requirements\",\n  \"level\": 2\n}, {\n  \"value\": \"Hostname Resolution\",\n  \"id\": \"hostname-resolution-requirement\",\n  \"level\": 3\n}, {\n  \"value\": \"Ports That Must Be Opened for Clustering and Replication\",\n  \"id\": \"ports\",\n  \"level\": 2\n}, {\n  \"value\": \"Nodes in a Cluster\",\n  \"id\": \"cluster-membership\",\n  \"level\": 2\n}, {\n  \"value\": \"What is Replicated?\",\n  \"id\": \"overview-what-is-replicated\",\n  \"level\": 3\n}, {\n  \"value\": \"Nodes are Equal Peers\",\n  \"id\": \"peer-equality\",\n  \"level\": 3\n}, {\n  \"value\": \"How CLI Tools Authenticate to Nodes (and Nodes to Each Other): the Erlang Cookie\",\n  \"id\": \"erlang-cookie\",\n  \"level\": 3\n}, {\n  \"value\": \"Cookie File Locations\",\n  \"id\": \"cookie-file-locations\",\n  \"level\": 3\n}, {\n  \"value\": \"Linux, MacOS, *BSD\",\n  \"id\": \"linux-macos-bsd\",\n  \"level\": 4\n}, {\n  \"value\": \"Community Docker Image and Kubernetes\",\n  \"id\": \"community-docker-image-and-kubernetes\",\n  \"level\": 4\n}, {\n  \"value\": \"Windows\",\n  \"id\": \"windows\",\n  \"level\": 4\n}, {\n  \"value\": \"Erlang 20.2 or later\",\n  \"id\": \"erlang-202-or-later\",\n  \"level\": 5\n}, {\n  \"value\": \"Overriding Using CLI and Runtime Command Line Arguments\",\n  \"id\": \"overriding-using-cli-and-runtime-command-line-arguments\",\n  \"level\": 3\n}, {\n  \"value\": \"Troubleshooting\",\n  \"id\": \"cookie-file-troubleshooting\",\n  \"level\": 3\n}, {\n  \"value\": \"Authentication Failures\",\n  \"id\": \"peer-authentication-failures\",\n  \"level\": 3\n}, {\n  \"value\": \"Hostname Resolution\",\n  \"id\": \"hostname-resolution\",\n  \"level\": 4\n}, {\n  \"value\": \"CLI Tools\",\n  \"id\": \"cli-tools\",\n  \"level\": 4\n}, {\n  \"value\": \"Node Counts and Quorum\",\n  \"id\": \"node-count\",\n  \"level\": 2\n}, {\n  \"value\": \"Clustering and Clients\",\n  \"id\": \"clustering-and-clients\",\n  \"level\": 2\n}, {\n  \"value\": \"Messaging Protocols\",\n  \"id\": \"messaging-protocols\",\n  \"level\": 3\n}, {\n  \"value\": \"Stream Clients\",\n  \"id\": \"stream-clients\",\n  \"level\": 3\n}, {\n  \"value\": \"Queue and Stream Leader Replica Placement\",\n  \"id\": \"replica-placement\",\n  \"level\": 3\n}, {\n  \"value\": \"Clustering and Observability\",\n  \"id\": \"clustering-and-observability\",\n  \"level\": 2\n}, {\n  \"value\": \"Node Failure Handling\",\n  \"id\": \"clustering-dealing-with-failure\",\n  \"level\": 3\n}, {\n  \"value\": \"Metrics and Statistics\",\n  \"id\": \"clustering-and-stats\",\n  \"level\": 3\n}, {\n  \"value\": \"Clustering Transcript with <code>rabbitmqctl</code>\",\n  \"id\": \"manual-transcript\",\n  \"level\": 2\n}, {\n  \"value\": \"Starting Independent Nodes\",\n  \"id\": \"starting\",\n  \"level\": 2\n}, {\n  \"value\": \"Creating a Cluster\",\n  \"id\": \"creating\",\n  \"level\": 2\n}, {\n  \"value\": \"Restarting Cluster Nodes\",\n  \"id\": \"restarting\",\n  \"level\": 2\n}, {\n  \"value\": \"Schema Syncing from Online Peers\",\n  \"id\": \"restarting-schema-sync\",\n  \"level\": 3\n}, {\n  \"value\": \"Node Restarts, Kubernetes Pod Management and Health Checks (Readiness Probes)\",\n  \"id\": \"restarting-readiness-probes\",\n  \"level\": 3\n}, {\n  \"value\": \"Hostname Changes Between Restarts\",\n  \"id\": \"restarting-with-hostname-changes\",\n  \"level\": 3\n}, {\n  \"value\": \"Cluster Node Restart Example\",\n  \"id\": \"restarting-transcript\",\n  \"level\": 3\n}, {\n  \"value\": \"How to Remove a Node from the Cluster\",\n  \"id\": \"removing-nodes\",\n  \"level\": 2\n}, {\n  \"value\": \"Removal of a Reachable Node\",\n  \"id\": \"removal-of-a-reachable-node\",\n  \"level\": 3\n}, {\n  \"value\": \"Removal of Stopped Nodes and Their Revival\",\n  \"id\": \"removal-of-stopped-nodes-and-their-revival\",\n  \"level\": 3\n}, {\n  \"value\": \"Removal of Unresponsive Queues\",\n  \"id\": \"removal-of-unresponsive-queues\",\n  \"level\": 3\n}, {\n  \"value\": \"What Happens to Quorum Queue and Stream Replicas?\",\n  \"id\": \"what-happens-to-quorum-queue-and-stream-replicas\",\n  \"level\": 3\n}, {\n  \"value\": \"Node Removal is Explicit (Manual) or Opt-in\",\n  \"id\": \"node-removal-is-explicit-manual-or-opt-in\",\n  \"level\": 3\n}, {\n  \"value\": \"How to Reset a Node\",\n  \"id\": \"resetting-nodes\",\n  \"level\": 2\n}, {\n  \"value\": \"Reset a Running and Responsive Node\",\n  \"id\": \"reset-a-running-and-responsive-node\",\n  \"level\": 3\n}, {\n  \"value\": \"Reset an Unresponsive Node\",\n  \"id\": \"reset-an-unresponsive-node\",\n  \"level\": 3\n}, {\n  \"value\": \"Resetting a Node to Re-add It as a Brand New Node to Its Original Cluster\",\n  \"id\": \"resetting-a-node-to-re-add-it-as-a-brand-new-node-to-its-original-cluster\",\n  \"level\": 3\n}, {\n  \"value\": \"Forcing Node Boot in Case of Unavailable Peers\",\n  \"id\": \"forced-boot\",\n  \"level\": 2\n}, {\n  \"value\": \"Upgrading clusters\",\n  \"id\": \"upgrading\",\n  \"level\": 2\n}, {\n  \"value\": \"A Cluster on a Single Machine\",\n  \"id\": \"single-machine\",\n  \"level\": 2\n}, {\n  \"value\": \"Hostname Changes\",\n  \"id\": \"issues-hostname\",\n  \"level\": 2\n}, {\n  \"value\": \"Firewalled Nodes\",\n  \"id\": \"firewall\",\n  \"level\": 2\n}, {\n  \"value\": \"Erlang Versions Across the Cluster\",\n  \"id\": \"erlang\",\n  \"level\": 2\n}, {\n  \"value\": \"Connecting to Clusters from Clients\",\n  \"id\": \"clients\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    h5: \"h5\",\n    header: \"header\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"clustering-guide\",\n        children: \"Clustering Guide\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This guide covers fundamental topics related to RabbitMQ clustering:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"How RabbitMQ nodes are identified: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#node-names\",\n          children: \"node names\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#cluster-formation-requirements\",\n          children: \"Requirements\"\n        }), \" for clustering\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"What data is and isn't \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#cluster-membership\",\n          children: \"replicated between cluster nodes\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"What clustering \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#clustering-and-clients\",\n          children: \"means for clients\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#cluster-formation\",\n          children: \"How clusters are formed\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"How nodes \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#erlang-cookie\",\n          children: \"authenticate to each other\"\n        }), \" (and with CLI tools)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Why it's important to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#node-count\",\n          children: \"use an odd number of nodes\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n          children: \"two-cluster nodes are strongly discouraged\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#replica-placement\",\n          children: \"Queue and stream leader replica placement\"\n        }), \" strategies\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#restarting\",\n          children: \"Node restarts\"\n        }), \" and how nodes rejoin their cluster\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#restarting-readiness-probes\",\n          children: \"Node readiness probes\"\n        }), \" and how they can affect rolling cluster restarts\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"How to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#removing-nodes\",\n          children: \"remove a cluster node\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"How to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#resetting-nodes\",\n          children: \"reset a cluster node\"\n        }), \" to a pristine (blank) state\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"and more. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cluster-formation\",\n        children: \"Cluster Formation and Peer Discovery\"\n      }), \" is a closely related guide\\r\\nthat focuses on peer discovery and cluster formation automation-related topics. For queue contents\\r\\n(message) replication, see the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"Quorum Queues\"\n      }), \" guide.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.vmware.com/en/VMware-RabbitMQ-for-Kubernetes/index.html\",\n        children: \"VMware Tanzu RabbitMQ\"\n      }), \" provides an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.vmware.com/en/VMware-Tanzu-RabbitMQ-for-Kubernetes/3.13/tanzu-rabbitmq-kubernetes/clustering-compression-rabbitmq.html\",\n        children: \"Intra-cluster Compression\"\n      }), \" feature.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"what-is-a-cluster\",\n      children: \"What is a Cluster?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A RabbitMQ cluster is a logical grouping of one or more (three, five, seven, or more) nodes,\\r\\neach sharing users, virtual hosts, queues, streams, exchanges, bindings, runtime parameters and other distributed state.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For a cluster to be formed, nodes must be configured in a certain way and satisfy\\r\\na number of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#cluster-formation-requirements\",\n        children: \"requirements\"\n      }), \" such as open port access.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"After cluster formation, all nodes in a cluster are aware of other cluster members.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Client applications can be aware or not be aware of the fact that there are multiple cluster nodes,\\r\\nand connect to any of them, or, depending on the protocol used, a subset of them. For example,\\r\\nRabbitMQ Stream Protocol clients \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.rabbitmq.com/blog/2021/07/23/connecting-to-streams\",\n        children: \"can connect to multiple nodes at once\"\n      }), \".\\r\\nThis is covered in more details \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#clustering-and-clients\",\n        children: \"later in this guide\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"cluster-formation\",\n      children: \"Cluster Formation\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"cluster-formation-options\",\n      children: \"Ways of Forming a Cluster\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A RabbitMQ cluster can be formed in a number of ways:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Declaratively by listing cluster nodes in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./configure\",\n          children: \"config file\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Declaratively using DNS-based discovery\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Declaratively using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://github.com/rabbitmq/rabbitmq-server/tree/main/deps/rabbitmq_peer_discovery_aws\",\n          children: \"AWS (EC2) instance discovery\"\n        }), \" (via a plugin)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Declaratively using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://github.com/rabbitmq/rabbitmq-server/tree/main/deps/rabbitmq_peer_discovery_k8s\",\n          children: \"Kubernetes discovery\"\n        }), \" (via a plugin)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Declaratively using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://github.com/rabbitmq/rabbitmq-server/tree/main/deps/rabbitmq_peer_discovery_consul\",\n          children: \"Consul-based discovery\"\n        }), \" (via a plugin)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Declaratively using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://github.com/rabbitmq/rabbitmq-server/tree/main/deps/rabbitmq_peer_discovery_etcd\",\n          children: \"etcd-based discovery\"\n        }), \" (via a plugin)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Manually with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbitmqctl\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"These mechanisms are covered in more details in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cluster-formation\",\n        children: \"Cluster Formation guide\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The composition of a cluster can be altered dynamically.\\r\\nAll RabbitMQ brokers start out as running on a single\\r\\nnode. These nodes can be joined into clusters, and\\r\\nsubsequently turned back into individual brokers again.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"node-names\",\n      children: \"Node Names (Identifiers)\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ nodes are identified by node names. A node name consists of two parts,\\r\\na prefix (usually \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit\"\n      }), \") and hostname. For example, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@node1.messaging.svc.local\"\n      }), \"\\r\\nis a node name with the prefix of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit\"\n      }), \" and hostname of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"node1.messaging.svc.local\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Node names in a cluster must be unique. If more than one node is running on a given host\\r\\n(this is usually the case in development and QA environments), they must use\\r\\ndifferent prefixes, e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit1@hostname\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit2@hostname\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In a cluster, nodes identify and contact each other using node names. This means\\r\\nthat the hostname part of every node name \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#hostname-resolution-requirement\",\n        children: \"must resolve\"\n      }), \".\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: \"CLI tools\"\n      }), \" also identify and address nodes using node names.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When a node starts up, it checks whether it has been assigned a node name. This is done\\r\\nvia the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_NODENAME\"\n      }), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#supported-environment-variables\",\n        children: \"environment variable\"\n      }), \".\\r\\nIf no value was explicitly configured,\\r\\nthe node resolves its hostname and prepends \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit\"\n      }), \" to it to compute its node name.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If a system uses fully qualified domain names (FQDNs) for hostnames, RabbitMQ nodes\\r\\nand CLI tools must be configured to use so called long node names.\\r\\nFor server nodes this is done by setting the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_USE_LONGNAME\"\n      }), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#supported-environment-variables\",\n        children: \"environment variable\"\n      }), \"\\r\\nto \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For CLI tools, either \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_USE_LONGNAME\"\n      }), \" must be set or the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"--longnames\"\n      }), \" option\\r\\nmust be specified.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"cluster-formation-requirements\",\n      children: \"Cluster Formation Requirements\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"hostname-resolution-requirement\",\n      children: \"Hostname Resolution\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ nodes address each other using a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"node name\"\n      }), \", a combination\\r\\nof a prefix and domain name, either short or fully-qualified (FQDNs).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Therefore every cluster member \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"must be able to resolve hostnames\\r\\nof every other cluster member\"\n      }), \", its own hostname, as well\\r\\nas machines on which command line tools such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl\"\n      }), \"\\r\\nmight be used.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Nodes will perform hostname resolution early on node boot.\\r\\nIn container-based environments it is important that hostname\\r\\nresolution is ready before the container is started.\\r\\nFor Kubernetes users, this means the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#stable-network-id\",\n        children: \"DNS cache interval for CoreDNS\"\n      }), \"\\r\\nto a value in the 5-10 second range.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Hostname resolution can use any of the standard OS-provided\\r\\nmethods:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"DNS records\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Local host files (e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"/etc/hosts\"\n        }), \")\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In more restrictive environments, where DNS record or\\r\\nhosts file modification is restricted, impossible or\\r\\nundesired, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        href: \"http://erlang.org/doc/apps/erts/inet_cfg.html\",\n        children: \"Erlang\\r\\nVM can be configured to use alternative hostname\\r\\nresolution methods\"\n      }), \", such as an alternative DNS server,\\r\\na local file, a non-standard hosts file location, or a mix\\r\\nof methods.  Those methods can work in concert with the\\r\\nstandard OS hostname resolution methods.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To use FQDNs, see \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_USE_LONGNAME\"\n      }), \" in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#supported-environment-variables\",\n        children: \"Configuration guide\"\n      }), \".\\r\\nSee \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#node-names\",\n        children: \"Node Names\"\n      }), \" above.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"ports\",\n      children: \"Ports That Must Be Opened for Clustering and Replication\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ nodes \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./networking#ports\",\n        children: \"bind to ports\"\n      }), \" (open server TCP sockets) in order to accept client and CLI tool connections.\\r\\nOther processes and tools such as SELinux may prevent RabbitMQ from binding to a port. When that happens,\\r\\nthe node will fail to start.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"CLI tools, client libraries and RabbitMQ nodes also open connections (client TCP sockets).\\r\\nFirewalls can prevent nodes and CLI tools from communicating with each other.\\r\\nThe following ports are most relevant to inter-node communication in a cluster:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"4369: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./networking#epmd\",\n          children: \"epmd\"\n        }), \", a helper discovery daemon used by RabbitMQ nodes and CLI tools\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"6000 through 6500: used by \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./stream\",\n          children: \"RabbitMQ Stream\"\n        }), \" replication\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"25672: used for inter-node and CLI tools communication (Erlang distribution server port)\\r\\nand is allocated from a dynamic range (limited to a single port by default,\\r\\ncomputed as AMQP port + 20000). Unless external connections on these ports are really necessary (e.g.\\r\\nthe cluster uses \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./federation\",\n          children: \"federation\"\n        }), \" or CLI tools are used on machines outside the subnet),\\r\\nthese ports should not be publicly exposed. See \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./networking\",\n          children: \"networking guide\"\n        }), \" for details.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"35672-35682: used by CLI tools (Erlang distribution client ports) for communication with nodes\\r\\nand is allocated from a dynamic range (computed as server distribution port + 10000 through\\r\\nserver distribution port + 10010).\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure\",\n        children: \"configure RabbitMQ\"\n      }), \"\\r\\nto use different ports and specific network interfaces.\\r\\nSee \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./networking\",\n        children: \"RabbitMQ Networking guide\"\n      }), \" to learn more.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"cluster-membership\",\n      children: \"Nodes in a Cluster\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"overview-what-is-replicated\",\n      children: \"What is Replicated?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"All data/state required for the operation of a RabbitMQ\\r\\nbroker is replicated across all nodes. An exception to this\\r\\nare message queues, which by default reside on one node,\\r\\nthough they are visible and reachable from all nodes. To\\r\\nreplicate queues across nodes in a cluster, use a queue type\\r\\nthat supports replication. This topic is covered in\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"Quorum Queues\"\n      }), \" guide.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"peer-equality\",\n      children: \"Nodes are Equal Peers\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Some distributed systems\\r\\nhave leader and follower nodes. This is generally not true for RabbitMQ.\\r\\nAll nodes in a RabbitMQ cluster are equal peers: there are no special nodes in RabbitMQ core.\\r\\nThis topic becomes more nuanced when \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"quorum queues\"\n      }), \" and plugins\\r\\nare taken into consideration but for most intents and purposes,\\r\\nall cluster nodes should be considered equal.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Many \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: \"CLI tool\"\n      }), \" operations can be executed against any node.\\r\\nAn \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./management\",\n        children: \"HTTP API\"\n      }), \" client can target any cluster node.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Individual plugins can designate (elect)\\r\\ncertain nodes to be \\\"special\\\" for a period of time. For example, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./federation\",\n        children: \"federation links\"\n      }), \"\\r\\nare colocated on a particular cluster node. Should that node fail, the links will\\r\\nbe restarted on a different node.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In older (long maintained) versions, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./management\",\n        children: \"RabbitMQ management plugin\"\n      }), \" used\\r\\na dedicated node for stats collection and aggregation.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"erlang-cookie\",\n      children: \"How CLI Tools Authenticate to Nodes (and Nodes to Each Other): the Erlang Cookie\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ nodes and CLI tools (e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl\"\n      }), \") use a\\r\\ncookie to determine whether they are allowed to communicate with\\r\\neach other. For two nodes to be able to communicate they must have\\r\\nthe same shared secret called the Erlang cookie. The cookie is\\r\\njust a string of alphanumeric characters up to 255 characters in size.\\r\\nIt is usually stored in a local file. The file must be only\\r\\naccessible to the owner (e.g. have UNIX permissions of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"600\"\n      }), \" or similar).\\r\\nEvery cluster node must have the same cookie.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If the file does not exist, Erlang VM will try to create\\r\\none with a randomly generated value when the RabbitMQ server\\r\\nstarts up. Using such generated cookie files are appropriate in development\\r\\nenvironments only. Since each node will generate its own value independently,\\r\\nthis strategy is not really viable in a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering\",\n        children: \"clustered environment\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Erlang cookie generation should be done at cluster deployment stage, ideally using automation\\r\\nand orchestration tools.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In distributed deployment\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"cookie-file-locations\",\n      children: \"Cookie File Locations\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"linux-macos-bsd\",\n      children: \"Linux, MacOS, *BSD\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"On UNIX systems, the cookie will be typically\\r\\nlocated in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/var/lib/rabbitmq/.erlang.cookie\"\n      }), \" (used by the server)\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"$HOME/.erlang.cookie\"\n      }), \" (used by CLI tools). Note that since the value\\r\\nof \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"$HOME\"\n      }), \" varies from user to user, it's necessary to place a copy of\\r\\nthe cookie file for each user that will be using the CLI tools.\\r\\nThis applies to both non-privileged users and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"root\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ nodes will log its effective user's home directory location early on boot.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"community-docker-image-and-kubernetes\",\n      children: \"Community Docker Image and Kubernetes\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/docker-library/rabbitmq/\",\n        children: \"Docker community RabbitMQ image\"\n      }), \" uses \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_ERLANG_COOKIE\"\n      }), \" environment variable value\\r\\nto populate the cookie file.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Configuration management and container orchestration tools that use this image\\r\\nmust make sure that every RabbitMQ node container in a cluster uses the same value.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In the context of Kubernetes, the value must be specified in the pod template specification of\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/\",\n        children: \"stateful set\"\n      }), \".\\r\\nFor instance, this can be seen in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/diy-kubernetes-examples\",\n        children: \"RabbitMQ on Kubernetes examples repository\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"windows\",\n      children: \"Windows\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"On Windows, the cookie location depends on a few factors:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Whether the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"HOMEDRIVE\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"HOMEPATH\"\n        }), \" environment variables are both set\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Erlang version: prior to 20.2 (these are no longer supported by any \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/release-information\",\n          children: \"maintained release series of RabbitMQ\"\n        }), \") or 20.2 and later\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h5, {\n      id: \"erlang-202-or-later\",\n      children: \"Erlang 20.2 or later\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"With Erlang versions starting with 20.2, the cookie file locations are:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"%HOMEDRIVE%%HOMEPATH%\\\\.erlang.cookie\"\n        }), \" (usually \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"C:\\\\Users\\\\%USERNAME%\\\\.erlang.cookie\"\n        }), \" for user \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"%USERNAME%\"\n        }), \") if both the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"HOMEDRIVE\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"HOMEPATH\"\n        }), \" environment variables are set\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"%USERPROFILE%\\\\.erlang.cookie\"\n        }), \" (usually \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"C:\\\\Users\\\\%USERNAME%\\\\.erlang.cookie\"\n        }), \") if \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"HOMEDRIVE\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"HOMEPATH\"\n        }), \" are not both set\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"For the RabbitMQ Windows service - \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"%USERPROFILE%\\\\.erlang.cookie\"\n        }), \" (usually \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"C:\\\\WINDOWS\\\\system32\\\\config\\\\systemprofile\"\n        }), \")\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If the Windows service is used, the cookie should be copied from\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"C:\\\\Windows\\\\system32\\\\config\\\\systemprofile\\\\.erlang.cookie\"\n      }), \" to the expected\\r\\nlocation for users running commands like \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl.bat\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"overriding-using-cli-and-runtime-command-line-arguments\",\n      children: \"Overriding Using CLI and Runtime Command Line Arguments\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As an alternative, the option \\\"\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"-setcookie <value>\"\n      }), \"\\\" can be added\\r\\nto \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS\"\n      }), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        href: \"./configure\",\n        children: \"environment variable value\"\n      }), \"\\r\\nto override the cookie value used by a RabbitMQ node:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\\\"-setcookie cookie-value\\\"\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"CLI tools can take a cookie value using a command line flag:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmq-diagnostics status --erlang-cookie \\\"cookie-value\\\"\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Both are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"the least secure options\"\n      }), \" and generally \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"not recommended\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"cookie-file-troubleshooting\",\n      children: \"Troubleshooting\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When a node starts, it will \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./logging\",\n        children: \"log\"\n      }), \" the home directory location of its effective user:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"node           : rabbit@cdbf4de5f22d\\r\\nhome dir       : /var/lib/rabbitmq\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Unless any \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./relocate\",\n        children: \"server directories\"\n      }), \" were overridden, that's the directory where\\r\\nthe cookie file will be looked for, and created by the node on first boot if it does not already exist.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In the example above, the cookie file location will be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/var/lib/rabbitmq/.erlang.cookie\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"peer-authentication-failures\",\n      children: \"Authentication Failures\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When the cookie is misconfigured (for example, not identical), RabbitMQ nodes will log errors\\r\\nsuch as \\\"Connection attempt from disallowed node\\\", \\\"\\\", \\\"Could not auto-cluster\\\".\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For example, when a CLI tool connects and tries to authenticate using a mismatching secret value:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"2020-06-15 13:03:33 [error] <0.1187.0> ** Connection attempt from node 'rabbitmqcli-99391-rabbit@warp10' rejected. Invalid challenge reply. **\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When a CLI tool such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl\"\n      }), \" fails to authenticate with RabbitMQ,\\r\\nthe message usually says\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"* epmd reports node 'rabbit' running on port 25672\\r\\n* TCP connection succeeded but Erlang distribution failed\\r\\n* suggestion: hostname mismatch?\\r\\n* suggestion: is the cookie set correctly?\\r\\n* suggestion: is the Erlang distribution using TLS?\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"An incorrectly placed cookie file or cookie value mismatch are most common scenarios for such failures.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a recent Erlang/OTP version is used, authentication failures contain\\r\\nmore information and cookie mismatches can be identified better:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"* connected to epmd (port 4369) on warp10\\r\\n* epmd reports node 'rabbit' running on port 25672\\r\\n* TCP connection succeeded but Erlang distribution failed\\r\\n\\r\\n* Authentication failed (rejected by the remote node), please check the Erlang cookie\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"See the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: \"CLI Tools guide\"\n      }), \" for more information.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"hostname-resolution\",\n      children: \"Hostname Resolution\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Since hostname resolution is a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#hostname-resolution-requirement\",\n        children: \"prerequisite for successful inter-node communication\"\n      }), \",\\r\\nstarting with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.a, {\n        href: \"/release-information\",\n        children: [\"RabbitMQ \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"3.8.6\"\n        })]\n      }), \", CLI tools provide two commands that help verify\\r\\nthat hostname resolution on a node works as expected. The commands are not meant to replace\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Dig_(command)\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"dig\"\n        })\n      }), \" and other specialised DNS tools but rather\\r\\nprovide a way to perform most basic checks while taking \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://erlang.org/doc/apps/erts/inet_cfg.html\",\n        children: \"Erlang runtime hostname resolver features\"\n      }), \"\\r\\ninto account.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The commands are covered in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./networking#dns-verify-resolution\",\n        children: \"Networking guide\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"cli-tools\",\n      children: \"CLI Tools\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Starting with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.a, {\n        href: \"/release-information\",\n        children: [\"version \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"3.8.6\"\n        })]\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-diagnostics\"\n      }), \" includes a command\\r\\nthat provides relevant information on the Erlang cookie file used by CLI tools:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmq-diagnostics erlang_cookie_sources\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The command will report on the effective user, user home directory and the expected location\\r\\nof the cookie file:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Cookie File\\r\\n\\r\\nEffective user: antares\\r\\nEffective home directory: /home/cli-user\\r\\nCookie file path: /home/cli-user/.erlang.cookie\\r\\nCookie file exists? true\\r\\nCookie file type: regular\\r\\nCookie file access: read\\r\\nCookie file size: 20\\r\\n\\r\\nCookie CLI Switch\\r\\n\\r\\n--erlang-cookie value set? false\\r\\n--erlang-cookie value length: 0\\r\\n\\r\\nEnv variable  (Deprecated)\\r\\n\\r\\nRABBITMQ_ERLANG_COOKIE value set? false\\r\\nRABBITMQ_ERLANG_COOKIE value length: 0\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"node-count\",\n      children: \"Node Counts and Quorum\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Because several features (e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"quorum queues\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./mqtt\",\n        children: \"client tracking in MQTT\"\n      }), \")\\r\\nrequire a consensus between cluster members, odd numbers of cluster nodes are highly recommended:\\r\\n1, 3, 5, 7 and so on.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Two node clusters are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"highly recommended against\"\n      }), \" since it's impossible for cluster nodes to identify\\r\\na majority and form a consensus in case of connectivity loss. For example, when the two nodes lose connectivity\\r\\nMQTT client connections won't be accepted, quorum queues would lose their availability, and so on.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"From the consensus point of view, four or six node clusters would have the same availability\\r\\ncharacteristics as three and five node clusters.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"Quorum Queues guide\"\n      }), \" covers this topic in more detail.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"clustering-and-clients\",\n      children: \"Clustering and Clients\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"messaging-protocols\",\n      children: \"Messaging Protocols\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Assuming all cluster members\\r\\nare available, a messaging (AMQP 0-9-1, AMQP 1.0, MQTT, STOMP) client can connect to any node and\\r\\nperform any operation. Nodes will route operations to the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"quorum queue leader\"\n      }), \" transparently to clients.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"With all supported messaging protocols a client is only connected to one node\\r\\nat a time.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In case of a node failure, clients should be able to reconnect\\r\\nto a different node, recover their topology and continue operation. For\\r\\nthis reason, most client libraries accept a list of endpoints (hostnames or IP addresses)\\r\\nas a connection option. The list of hosts will be used during initial connection\\r\\nas well as connection recovery, if the client supports it. See documentation guides\\r\\nfor individual clients to learn more.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"With \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"quorum queues\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./streams\",\n        children: \"streams\"\n      }), \", clients will only be able to perform\\r\\noperations on queues that have a quorum of replicas online.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"stream-clients\",\n      children: \"Stream Clients\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ Stream protocol clients \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"behave differently from messaging protocols clients\"\n      }), \": they are\\r\\nmore cluster topology-aware. For publishing, they can connect to any node, and that node\\r\\nwill forward all relevant operations to the node that hosts the leader replica of the stream.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"However, stream consumers should connect to one of the nodes hosting the replicas of\\r\\nthe target stream. The protocol includes a topology discovery operation, so well-behaved client\\r\\nlibraries will select one of the suitable nodes. This won't be the case when a load balancer is used,\\r\\nhowever.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"See \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2021/07/23/connecting-to-streams#well-behaved-clients\",\n        children: \"Connecting to Streams\"\n      }), \"\\r\\nto learn more.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"replica-placement\",\n      children: \"Queue and Stream Leader Replica Placement\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Every queue and stream in RabbitMQ has a primary replica (in case of classic queues,\\r\\nit is the only replica). That replica is called\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"the leader\"\n      }), \". All publishing operations on queues and streams go through the leader\\r\\nreplica first and then are replicated to the followers (secondary replicas). This is necessary to\\r\\nguarantee FIFO ordering of messages.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To avoid some nodes in a cluster hosting a significant majority of queue leader\\r\\nreplicas and thus handling most of the load, queue leaders should\\r\\nbe reasonably evenly distributed across cluster nodes.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Queue leader distribution can be controlled in three ways:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"a policy, by setting \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"queue-leader-locator\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./configure#configuration-files\",\n          children: \"the configuration file\"\n        }), \", by setting \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"queue_leader_locator\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./queues#optional-arguments\",\n          children: \"optional queue argument\"\n        }), \", by setting the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-queue-leader-locator\"\n        }), \" (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./parameters\",\n          children: \"not recommended\"\n        }), \")\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"There are two options available:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"client-local\"\n        }), \", the default, will always pick the node the client is connected to\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"balanced\"\n        }), \", which takes into account the number of queues/leaders already running\\r\\non each node in the cluster; when there are relatively few\\r\\nqueues in the cluster, it picks the node with the least number of them; when there\\r\\nare many (more than 1000 by default), it just picks a random node (calculating the\\r\\nexact number can be slow with many queues, and a random choice is generally just as good)\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"tip\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"Using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"client-local\"\n        }), \" strategy is usually a good choice if the connections that declare queues\\r\\nare evenly distributed between nodes. In such case, even though the queue/leaders are placed locally\\r\\n(where the connection is), they are well balanced within the cluster. Otherwise, prefer the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"balanced\"\n        }), \" strategy.\\r\\nThe disadvantage of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"balanced\"\n        }), \" strategy is that the connection that declared the queue may not have\\r\\nthe best possible performance when using this queues,\\r\\nif a different node is picked. For example, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./queues#temporary-queues\",\n          children: \"for short-lived queues\"\n        }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"client-local\"\n        }), \" is probably\\r\\na better choice. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./queues#exclusive-queues\",\n          children: \"Exclusive queues\"\n        }), \" are always declared locally.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The following example sets the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"queue_leader_locator\"\n      }), \" setting in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq.conf\"\n      }), \" to ensure a balanced queue distribution:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"queue_leader_locator = balanced\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The client-provided queue argument takes precedence when both are used.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that all Raft-based features, namely quorum queues and streams, use this value as a suggestion.\\r\\nRaft leader election algorithm involves a degree of randomness, therefore the selected recommended\\r\\nnode will have a replica placed on it but it will not always be the leader replica.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.admonition, {\n      type: \"note\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"For backwards compatibility, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"queue-master-locator\"\n        }), \" (policy argument), \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-queue-master-locator\"\n        }), \"\\r\\n(queue argument) and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"queue_master_locator\"\n        }), \" (configuration option) are still supported by classic queues.\\r\\nHowever, these are deprecated in favour of the options listed above.\"]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"These options allow different values: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"client-local\"\n        }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"random\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"min-masters\"\n        }), \". The latter two\\r\\nare now mapped to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"balanced\"\n        }), \" internally.\"]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"clustering-and-observability\",\n      children: \"Clustering and Observability\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Client connections, channels and queues will be distributed across cluster nodes.\\r\\nOperators need to be able to inspect and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./monitoring\",\n        children: \"monitor\"\n      }), \" such resources\\r\\nacross all cluster nodes.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: \"CLI tools\"\n      }), \" such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-diagnostics\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl\"\n      }), \"\\r\\nprovide commands that inspect resources and cluster-wide state. Some commands focus on the state of a single node\\r\\n(e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-diagnostics environment\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-diagnostics status\"\n      }), \"), others\\r\\ninspect cluster-wide state. Some examples of the latter include \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl list_connections\"\n      }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl list_mqtt_connections\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl list_stomp_connections\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl list_users\"\n      }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl list_vhosts\"\n      }), \" and so on.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Such \\\"cluster-wide\\\" commands will often contact one node\\r\\nfirst, discover cluster members and contact them all to\\r\\nretrieve and combine their respective state. For example,\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl list_connections\"\n      }), \" will contact all\\r\\nnodes, retrieve their AMQP 0-9-1 and AMQP 1.0 connections,\\r\\nand display them all to the user.  The user doesn't have\\r\\nto manually contact all nodes. Assuming a non-changing\\r\\nstate of the cluster (e.g. no connections are closed or\\r\\nopened), two CLI commands executed against two different\\r\\nnodes one after another will produce identical or\\r\\nsemantically identical results. \\\"Node-local\\\" commands, however, will not produce\\r\\nidentical results since two nodes rarely have identical state: at the very least their\\r\\nnode names will be different!\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./management\",\n        children: \"Management UI\"\n      }), \" works similarly: a node that has to respond to an HTTP API request\\r\\nwill fan out to other cluster members and aggregate their responses. In a cluster with multiple nodes that have management plugin\\r\\nenabled, the operator can use any node to access management UI. The same goes for monitoring tools that use\\r\\nthe HTTP API to collect data about the state of the cluster. There is no need to issue a request to every cluster node in turn.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"clustering-dealing-with-failure\",\n      children: \"Node Failure Handling\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ brokers tolerate the failure of individual\\r\\nnodes. Nodes can be started and stopped at will,\\r\\nas long as they can contact a cluster member node\\r\\nknown at the time of shutdown.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"Quorum queue\"\n      }), \" allows queue contents to be replicated\\r\\nacross multiple cluster nodes with parallel replication and a predictable \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues#leader-election\",\n        children: \"leader election\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues#data-safety\",\n        children: \"data safety\"\n      }), \" behavior as long as a majority of replicas are online.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Non-replicated classic queues can also be used in clusters. Their behaviour in case of node failure\\r\\ndepends on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./queues#durability\",\n        children: \"queue durability\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ clustering has several modes of dealing with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./partitions\",\n        children: \"network partitions\"\n      }), \",\\r\\nprimarily consistency oriented. Clustering is meant to be used across LAN. It is\\r\\nnot recommended to run clusters that span WAN.\\r\\nThe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./shovel\",\n        children: \"Shovel\"\n      }), \" or\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./federation\",\n        children: \"Federation\"\n      }), \"\\r\\nplugins are better solutions for connecting brokers across a\\r\\nWAN. Note that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./distributed\",\n        children: \"Shovel and Federation are not equivalent to clustering\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"clustering-and-stats\",\n      children: \"Metrics and Statistics\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Every node stores and aggregates its own metrics and stats, and provides an API for\\r\\nother nodes to access it. Some stats are cluster-wide, others are specific to individual nodes.\\r\\nNode that responds to an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./management\",\n        children: \"HTTP API\"\n      }), \" request contacts its peers\\r\\nto retrieve their data and then produces an aggregated result.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In older (long unmaintained) versions \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./management\",\n        children: \"RabbitMQ management plugin\"\n      }), \" used\\r\\na dedicated node for stats collection and aggregation.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.h2, {\n      id: \"manual-transcript\",\n      children: [\"Clustering Transcript with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl\"\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The following several sections provide a transcript of manually setting up and manipulating\\r\\na RabbitMQ cluster across three machines: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit1\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit2\"\n      }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit3\"\n      }), \". It is recommended that the example is studied before\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cluster-formation\",\n        children: \"more automation-friendly\"\n      }), \" cluster formation\\r\\noptions are used.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"We assume that the user is logged into all three machines,\\r\\nthat RabbitMQ has been installed on the machines, and that\\r\\nthe rabbitmq-server and rabbitmqctl scripts are in the\\r\\nuser's PATH.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This transcript can be modified to run on a single host, as\\r\\nexplained more details below.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"starting\",\n      children: \"Starting Independent Nodes\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Clusters are set up by re-configuring existing RabbitMQ\\r\\nnodes into a cluster configuration. Hence the first step\\r\\nis to start RabbitMQ on all nodes in the normal way:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit1\\r\\nrabbitmq-server -detached\\r\\n# on rabbit2\\r\\nrabbitmq-server -detached\\r\\n# on rabbit3\\r\\nrabbitmq-server -detached\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This creates three \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n        children: \"independent\"\n      }), \" RabbitMQ brokers,\\r\\none on each node, as confirmed by the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n        children: \"cluster_status\"\n      }), \"\\r\\ncommand:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit1\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit1 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1]}]},{running_nodes,[rabbit@rabbit1]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit2\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit2 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit2]}]},{running_nodes,[rabbit@rabbit2]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit3\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit3 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit3]}]},{running_nodes,[rabbit@rabbit3]}]\\r\\n# => ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The node name of a RabbitMQ broker started from the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-server\"\n      }), \" shell script is\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"code\", {\n        children: [\"rabbit@\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n          children: \"shorthostname\"\n        })]\n      }), \", where the short\\r\\nnode name is lower-case (as in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit1\"\n      }), \",\\r\\nabove). On Windows, if \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-server.bat\"\n      }), \"\\r\\nbatch file is used, the short node name is upper-case (as\\r\\nin \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@RABBIT1\"\n      }), \"). When you type node names,\\r\\ncase matters, and these strings must match exactly.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"creating\",\n      children: \"Creating a Cluster\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In order to link up our three nodes in a cluster, we tell\\r\\ntwo of the nodes, say \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit2\"\n      }), \" and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit3\"\n      }), \", to join the cluster of the\\r\\nthird, say \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit1\"\n      }), \". Prior to that both\\r\\nnewly joining members must be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./man/rabbitmqctl.8#reset\",\n        children: \"reset\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"We first join \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit2\"\n      }), \" in a cluster\\r\\nwith \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit1\"\n      }), \". To do that, on\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit2\"\n      }), \" we stop the RabbitMQ\\r\\napplication and join the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit1\"\n      }), \"\\r\\ncluster, then restart the RabbitMQ application. Note that\\r\\na node must be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./man/rabbitmqctl.8#reset\",\n        children: \"reset\"\n      }), \" before it can join an existing cluster.\\r\\nResetting the node \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"strong\", {\n        children: \"removes all resources and data that were previously\\r\\npresent on that node\"\n      }), \". This means that a node cannot be made a member\\r\\nof a cluster and keep its existing data at the same time. When that's desired,\\r\\nusing the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./blue-green-upgrade\",\n        children: \"Blue/Green deployment strategy\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./backup\",\n        children: \"backup and restore\"\n      }), \"\\r\\nare the available options.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit2\\r\\nrabbitmqctl stop_app\\r\\n# => Stopping node rabbit@rabbit2 ...done.\\r\\n\\r\\nrabbitmqctl reset\\r\\n# => Resetting node rabbit@rabbit2 ...\\r\\n\\r\\nrabbitmqctl join_cluster rabbit@rabbit1\\r\\n# => Clustering node rabbit@rabbit2 with [rabbit@rabbit1] ...done.\\r\\n\\r\\nrabbitmqctl start_app\\r\\n# => Starting node rabbit@rabbit2 ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"We can see that the two nodes are joined in a cluster by\\r\\nrunning the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n        children: \"cluster_status\"\n      }), \" command on either of the nodes:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit1\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit1 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit1]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit2\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit2 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit1,rabbit@rabbit2]}]\\r\\n# => ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Now we join \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit3\"\n      }), \" to the same\\r\\ncluster. The steps are identical to the ones above, except\\r\\nthis time we'll cluster to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit2\"\n      }), \" to\\r\\ndemonstrate that the node chosen to cluster to does not\\r\\nmatter - it is enough to provide one online node and the\\r\\nnode will be clustered to the cluster that the specified\\r\\nnode belongs to.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit3\\r\\nrabbitmqctl stop_app\\r\\n# => Stopping node rabbit@rabbit3 ...done.\\r\\n\\r\\n# on rabbit3\\r\\nrabbitmqctl reset\\r\\n# => Resetting node rabbit@rabbit3 ...\\r\\n\\r\\nrabbitmqctl join_cluster rabbit@rabbit2\\r\\n# => Clustering node rabbit@rabbit3 with rabbit@rabbit2 ...done.\\r\\n\\r\\nrabbitmqctl start_app\\r\\n# => Starting node rabbit@rabbit3 ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"We can see that the three nodes are joined in a cluster by\\r\\nrunning the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_status\"\n      }), \" command on any of the nodes:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit1\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit1 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit3,rabbit@rabbit2,rabbit@rabbit1]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit2\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit2 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit3,rabbit@rabbit1,rabbit@rabbit2]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit3\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit3 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit3,rabbit@rabbit2,rabbit@rabbit1]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit1,rabbit@rabbit3]}]\\r\\n# => ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"By following the above steps we can add new nodes to the\\r\\ncluster at any time, while the cluster is running.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"restarting\",\n      children: \"Restarting Cluster Nodes\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"important\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"Users running RabbitMQ on Kubernetes must also consult\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#restarting-readiness-probes\",\n          children: \"the following section\"\n        }), \" that explains how to avoid a well known\\r\\ncluster restart deadlock scenario specific to Kubernetes.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Nodes that have been joined to a cluster can be stopped at\\r\\nany time. They can also fail or be terminated by the OS.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In general, if the majority of nodes is still online after a node\\r\\nis stopped, this does not affect the rest of the cluster, although\\r\\nclient connection distribution, queue replica placement, and load distribution\\r\\nof the cluster will change.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"restarting-schema-sync\",\n      children: \"Schema Syncing from Online Peers\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A restarted node will sync the schema\\r\\nand other information from its peers on boot. Before this process\\r\\ncompletes, the node \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"won't be fully started and functional\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is therefore important to understand the process node go through when\\r\\nthey are stopped and restarted.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.admonition, {\n      type: \"important\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"Upon restart the node will try to contact that peer 10 times by\\r\\ndefault, with 30 second response timeouts. This means that by default, all cluster\\r\\nmembers must come online within 5 minutes.\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"In environments where nodes are deployed and verified sequentially,\\r\\nsuch as Kubernetes with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"OrderedReady\"\n        }), \" pod management policy,\\r\\nthe restart can run into deadlock unless \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#restarting-readiness-probes\",\n          children: \"a number of recommendations is followed\"\n        }), \".\"]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A stopping node picks an online cluster member (only disc\\r\\nnodes will be considered) to sync with after restart. Upon\\r\\nrestart the node will try to contact that peer 10 times by\\r\\ndefault, with 30 second response timeouts.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In case the peer becomes available in that time interval, the node\\r\\nsuccessfully starts, syncs what it needs from the peer and\\r\\nkeeps going.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If the peer does not become available, the restarted\\r\\nnode will \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"give up and voluntarily stop\"\n      }), \". Such condition can be\\r\\nidentified by the timeout (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"timeout_waiting_for_tables\"\n      }), \") warning messages in the logs\\r\\nthat eventually lead to node startup failure:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"2020-07-27 21:10:51.361 [warning] <0.269.0> Error while waiting for Mnesia tables: {timeout_waiting_for_tables,[rabbit@node2,rabbit@node1],[rabbit_durable_queue]}\\r\\n2020-07-27 21:10:51.361 [info] <0.269.0> Waiting for Mnesia tables for 30000 ms, 1 retries left\\r\\n2020-07-27 21:11:21.362 [warning] <0.269.0> Error while waiting for Mnesia tables: {timeout_waiting_for_tables,[rabbit@node2,rabbit@node1],[rabbit_durable_queue]}\\r\\n2020-07-27 21:11:21.362 [info] <0.269.0> Waiting for Mnesia tables for 30000 ms, 0 retries left\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"2020-07-27 21:15:51.380 [info] <0.269.0> Waiting for Mnesia tables for 30000 ms, 1 retries left\\r\\n2020-07-27 21:16:21.381 [warning] <0.269.0> Error while waiting for Mnesia tables: {timeout_waiting_for_tables,[rabbit@node2,rabbit@node1],[rabbit_user,rabbit_user_permission, …]}\\r\\n2020-07-27 21:16:21.381 [info] <0.269.0> Waiting for Mnesia tables for 30000 ms, 0 retries left\\r\\n2020-07-27 21:16:51.393 [info] <0.44.0> Application mnesia exited with reason: stopped\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"2020-07-27 21:16:51.397 [error] <0.269.0> BOOT FAILED\\r\\n2020-07-27 21:16:51.397 [error] <0.269.0> ===========\\r\\n2020-07-27 21:16:51.397 [error] <0.269.0> Timeout contacting cluster nodes: [rabbit@node1].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a node has no online peers during shutdown, it will start without\\r\\nattempts to sync with any known peers. It does not start as a standalone\\r\\nnode, however, and peers will be able to rejoin it.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When the entire cluster is brought down therefore, the last node to go down\\r\\nis the only one that didn't have any running peers at the time of shutdown.\\r\\nThat node can start without contacting any peers first.\\r\\nSince nodes will try to contact a known peer for up to 5 minutes (by default), nodes\\r\\ncan be restarted in any order in that period of time. In this case\\r\\nthey will rejoin each other one by one successfully. This window of time\\r\\ncan be adjusted using two configuration settings:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# wait for 60 seconds instead of 30\\r\\nmnesia_table_loading_retry_timeout = 60000\\r\\n\\r\\n# retry 15 times instead of 10\\r\\nmnesia_table_loading_retry_limit = 15\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"By adjusting these settings and tweaking the time window in which\\r\\nknown peer has to come back it is possible to account for cluster-wide\\r\\nredeployment scenarios that can be longer than 5 minutes to complete.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"During \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./upgrade\",\n        children: \"upgrades\"\n      }), \", sometimes the last node to stop\\r\\nmust be the first node to be started after the upgrade. That node will be designated to perform\\r\\na cluster-wide schema migration that other nodes can sync from and apply when they\\r\\nrejoin.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"restarting-readiness-probes\",\n      children: \"Node Restarts, Kubernetes Pod Management and Health Checks (Readiness Probes)\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"important\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"Use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"Parallel\"\n        }), \" pod management policy when running RabbitMQ on Kubernetes.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In some environments, node restarts are controlled with a designated \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./monitoring#health-checks\",\n        children: \"health check\"\n      }), \".\\r\\nThe checks verify that one node has started and the deployment process can proceed to the next one.\\r\\nIf the check does not pass, the deployment of the node is considered to be incomplete and the deployment process\\r\\nwill typically wait and retry for a period of time. One popular example of such environment is Kubernetes\\r\\nwhere an operator-defined \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-readiness-gate\",\n        children: \"readiness probe\"\n      }), \"\\r\\ncan prevent a deployment from proceeding when the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.a, {\n        href: \"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#deployment-and-scaling-guarantees\",\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"OrderedReady\"\n        }), \" pod management policy\"]\n      }), \" is used. Using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Parallel\"\n      }), \" pod management policy helps avoid this problem.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Given the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#restarting-schema-sync\",\n        children: \"peer syncing behavior described above\"\n      }), \", such a health check can prevent a cluster-wide restart\\r\\nfrom completing in time. Checks that explicitly or implicitly assume a fully booted node that's rejoined\\r\\nits cluster peers will fail and block further node deployments.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./monitoring#health-checks\",\n        children: \"Most health check\"\n      }), \", even relatively basic ones, implicitly assume that the node has\\r\\nfinished booting. They are not suitable for nodes that are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#restarting-schema-sync\",\n        children: \"awaiting schema table sync\"\n      }), \" from a peer.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"One very common example of such check is\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# will exit with an error for the nodes that are currently waiting for\\r\\n# a peer to sync schema tables from\\r\\nrabbitmq-diagnostics check_running\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"One health check that does not expect a node to be fully booted and have schema tables synced is\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# a very basic check that will succeed for the nodes that are currently waiting for\\r\\n# a peer to sync schema from\\r\\nrabbitmq-diagnostics ping\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This basic check would allow the deployment to proceed and the nodes to eventually rejoin each other,\\r\\nassuming they are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./upgrade\",\n        children: \"compatible\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"restarting-with-hostname-changes\",\n      children: \"Hostname Changes Between Restarts\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A node rejoining after a node name or host name change can start as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cluster-formation#peer-discovery-how-does-it-work\",\n        children: \"a blank node\"\n      }), \"\\r\\nif its data directory path changes as a result. Such nodes will fail to rejoin the cluster.\\r\\nWhile the node is offline, its peers can be reset or started with a blank data directory.\\r\\nIn that case the recovering node will fail to rejoin its peer as well since internal data store cluster\\r\\nidentity would no longer match.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Consider the following scenario:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"A cluster of 3 nodes, A, B and C is formed\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Node A is shut down\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Node B is reset\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Node A is started\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Node A tries to rejoin B but B's cluster identity has changed\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Node B doesn't recognise A as a known cluster member because it's been reset\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"in this case node B will reject the clustering attempt from A with an appropriate error\\r\\nmessage in the log:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Node 'rabbit@node1.local' thinks it's clustered with node 'rabbit@node2.local', but 'rabbit@node2.local' disagrees\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In this case B can be reset again and then will be able to join A, or A\\r\\ncan be reset and will successfully join B.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"restarting-transcript\",\n      children: \"Cluster Node Restart Example\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The below example uses CLI tools to shut down the nodes \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit1\"\n      }), \" and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit3\"\n      }), \" and check on the cluster\\r\\nstatus at each step:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit1\\r\\nrabbitmqctl stop\\r\\n# => Stopping and halting node rabbit@rabbit1 ...done.\\r\\n\\r\\n# on rabbit2\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit2 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit3,rabbit@rabbit2]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit3\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit3 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit3]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit3\\r\\nrabbitmqctl stop\\r\\n# => Stopping and halting node rabbit@rabbit3 ...done.\\r\\n\\r\\n# on rabbit2\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit2 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit2]}]\\r\\n# => ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In the below example, the nodes are started back, checking on the cluster\\r\\nstatus as we go along:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit1\\r\\nrabbitmq-server -detached\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit1 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit1]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit2\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit2 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit1,rabbit@rabbit2]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit3\\r\\nrabbitmq-server -detached\\r\\n\\r\\n# on rabbit1\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit1 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit1,rabbit@rabbit3]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit2\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit2 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit3\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit3 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit1,rabbit@rabbit3]}]\\r\\n# => ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"removing-nodes\",\n      children: \"How to Remove a Node from the Cluster\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Sometimes it is necessary to remove a node from the cluster.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The sequence of actions will be slightly different for the following\\r\\nmost common scenarios:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The node is online and reachable\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The node is offline and cannot be recovered\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In addition, if the cluster \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cluster-formation\",\n        children: \"peer discovery mechanisms\"\n      }), \"\\r\\nsupport node health checks and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cluster-formation#node-health-checks-and-cleanup\",\n        children: \"forced removal of nodes\"\n      }), \" not known to the discovery backend.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"That feature is opt-in (deactivated by default).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Continuing with the three node cluster example used in this guide,\\r\\nlet's demonstrate how to remove \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit3\"\n      }), \" from the cluster, returning it to\\r\\nindependent operation.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"removal-of-a-reachable-node\",\n      children: \"Removal of a Reachable Node\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"First step before removing a node from the cluster is to stop it:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit3\\r\\nrabbitmqctl stop_app\\r\\n# => Stopping node rabbit@rabbit3 ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Then use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl forget_cluster_node\"\n      }), \" on another node\\r\\nand specify the node to remove as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"the first positional argument\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit2\\r\\nrabbitmqctl forget_cluster_node rabbit@rabbit3\\r\\n# => Removing node rabbit@rabbit3 from cluster ...\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Running the\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-shell\",\n        children: \"rabbitmq-diagnostics cluster_status\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"command on the nodes confirms that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit3\"\n      }), \" now is no longer part of\\r\\nthe cluster and operates independently:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit1\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit1 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2]}]},\\r\\n# => {running_nodes,[rabbit@rabbit2,rabbit@rabbit1]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit2\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit2 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2]}]},\\r\\n# =>  {running_nodes,[rabbit@rabbit1,rabbit@rabbit2]}]\\r\\n# => ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Now node \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit3\"\n      }), \" can be decomissioned to reset and started as\\r\\na standalone node:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-shell\",\n        children: \"# on rabbit3\\r\\nrabbitmqctl reset\\r\\n\\r\\nrabbitmqctl start_app\\r\\n# => Starting node rabbit@rabbit3 ...\\r\\n\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit3 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit3]}]},{running_nodes,[rabbit@rabbit3]}]\\r\\n# => ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Nodes can be removed remotely, that is, from a different host, as long as CLI tools\\r\\non said host can \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: \"connect and authenticate\"\n      }), \" to the target node.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This can useful, for example, when having to deal with a host that cannot be accessed.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In the rest of this example, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit1\"\n      }), \" will be removed from its remaining\\r\\ntwo node cluster with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit2\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit1\\r\\nrabbitmqctl stop_app\\r\\n# => Stopping node rabbit@rabbit1 ...done.\\r\\n\\r\\n# on rabbit2\\r\\nrabbitmqctl forget_cluster_node rabbit@rabbit1\\r\\n# => Removing node rabbit@rabbit1 from cluster ...\\r\\n# => ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"removal-of-stopped-nodes-and-their-revival\",\n      children: \"Removal of Stopped Nodes and Their Revival\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"important\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"A node that was removed from the cluster when stopped with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbitmqctl stop_app\"\n        }), \"\\r\\nmust be either reset or decomissioned. If started without a reset,\\r\\nit won't be able to rejoin its original cluster.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"At this point \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit1\"\n      }), \" still thinks it is clustered with\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit2\"\n      }), \", and trying to start it will result in an\\r\\nerror because the rest of the cluster no longer considers it to be a known member:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit1\\r\\nrabbitmqctl start_app\\r\\n# => Starting node rabbit@rabbit1 ...\\r\\n# => Error: inconsistent_cluster: Node rabbit@rabbit1 thinks it's clustered with node rabbit@rabbit2, but rabbit@rabbit2 disagrees\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In order to completely detach it from the cluster, such\\r\\nstopped node must be reset:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-shell\",\n        children: \"rabbitmqctl reset\\r\\n# => Resetting node rabbit@rabbit1 ...done.\\r\\n\\r\\nrabbitmqctl start_app\\r\\n# => Starting node rabbit@rabbit1 ...\\r\\n# => ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_status\"\n      }), \" command now shows all three nodes\\r\\noperating as independent RabbitMQ nodes (single node clusters):\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit1\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit1 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit1]}]},{running_nodes,[rabbit@rabbit1]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit2\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit2 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit2]}]},{running_nodes,[rabbit@rabbit2]}]\\r\\n# => ...done.\\r\\n\\r\\n# on rabbit3\\r\\nrabbitmqctl cluster_status\\r\\n# => Cluster status of node rabbit@rabbit3 ...\\r\\n# => [{nodes,[{disc,[rabbit@rabbit3]}]},{running_nodes,[rabbit@rabbit3]}]\\r\\n# => ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit2\"\n      }), \" retains the residual\\r\\nstate of the cluster, whereas \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit1\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit3\"\n      }), \" are freshly initialised\\r\\nRabbitMQ brokers. If we want to re-initialise\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@rabbit2\"\n      }), \" we follow the same steps as\\r\\nfor the other nodes:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit2\\r\\nrabbitmqctl stop_app\\r\\n# => Stopping node rabbit@rabbit2 ...done.\\r\\nrabbitmqctl reset\\r\\n# => Resetting node rabbit@rabbit2 ...done.\\r\\nrabbitmqctl start_app\\r\\n# => Starting node rabbit@rabbit2 ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"removal-of-unresponsive-queues\",\n      children: \"Removal of Unresponsive Queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When target node is not running, it can still be removed from the cluster using\\r\\nusing \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl forget_cluster_node\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# Tell rabbit@rabbit1 to permanently remove rabbit@rabbit2\\r\\nrabbitmqctl forget_cluster_node -n rabbit@rabbit1 rabbit@rabbit2\\r\\n# => Removing node rabbit@rabbit1 from cluster ...\\r\\n# => ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"what-happens-to-quorum-queue-and-stream-replicas\",\n      children: \"What Happens to Quorum Queue and Stream Replicas?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When a node is removed from the cluster using CLI tools, all \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues#member-management\",\n        children: \"quorum queue\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./streams#member-management\",\n        children: \"stream replicas\"\n      }), \" on the node will be removed,\\r\\neven if that means that queues and streams would temporarily have an even (e.g. two) replicas.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"node-removal-is-explicit-manual-or-opt-in\",\n      children: \"Node Removal is Explicit (Manual) or Opt-in\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Besides \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl forget_cluster_node\"\n      }), \" and the automatic cleanup of unknown nodes\\r\\nby some \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cluster-formation\",\n        children: \"peer discovery\"\n      }), \" plugins, there are no scenarios\\r\\nin which a RabbitMQ node will permanently remove its peer node from a cluster.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"resetting-nodes\",\n      children: \"How to Reset a Node\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"danger\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"Resetting a node will delete all of its data, cluster membership information, configured \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./parameters\",\n          children: \"runtime parameters\"\n        }), \",\\r\\nusers, virtual hosts and any other node data. It will also alter its internal identity.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Sometimes it may be necessary to reset a node (what specifically this means, see below),\\r\\nand later make it rejoin the cluster as a new node.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Generally speaking, there are two possible scenarios: when the node is running, and when the node cannot start\\r\\nor won't respond to CLI tool commands for any reason.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"reset-a-running-and-responsive-node\",\n      children: \"Reset a Running and Responsive Node\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To reset a running and responsive node, first stop RabbitMQ on it using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl stop_app\"\n      }), \"\\r\\nand then reset it using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl reset\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# on rabbit1\\r\\nrabbitmqctl stop_app\\r\\n# => Stopping node rabbit@rabbit1 ...done.\\r\\nrabbitmqctl reset\\r\\n# => Resetting node rabbit@rabbit1 ...done.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"info\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"If the reset node is online and its cluster peers are reachable, the node\\r\\nwill first try to permanently remove itself from its cluster.\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"reset-an-unresponsive-node\",\n      children: \"Reset an Unresponsive Node\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In case of a non-responsive node, it must be stopped first using any means necessary.\\r\\nFor nodes that fail to start this is already the case. Then \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./relocate\",\n        children: \"override\"\n      }), \"\\r\\nthe node's data directory location or remove the existing data store. This will make the node\\r\\nstart as a blank one. It will have to be instructed to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#cluster-formation\",\n        children: \"rejoin its original cluster\"\n      }), \", if any.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"resetting-a-node-to-re-add-it-as-a-brand-new-node-to-its-original-cluster\",\n      children: \"Resetting a Node to Re-add It as a Brand New Node to Its Original Cluster\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A reset node that was \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#removing-nodes\",\n        children: \"removed from the cluster\"\n      }), \" can be re-added to its original\\r\\ncluster as a brand new node.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In that case it will sync all virtual hosts, users, permissions and topology (queues, exchanges, bindings),\\r\\nruntime parameters and policies.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"quorum queue\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./streams\",\n        children: \"stream\"\n      }), \" contents to be replicated to the new [re]added node,\\r\\nthe node must be added to the list of nodes to place replicas on using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-queues grow\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Non-replicated queue contents on a reset node will be lost.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"forced-boot\",\n      children: \"Forcing Node Boot in Case of Unavailable Peers\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In some cases the last node to go\\r\\noffline cannot be brought back up. It can be removed from the\\r\\ncluster using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"forget_cluster_node\"\n      }), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: \"rabbitmqctl\"\n      }), \" command.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Alternatively \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"force_boot\"\n      }), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: \"rabbitmqctl\"\n      }), \" command can be used\\r\\non a node to make it boot without trying to sync with any\\r\\npeers (as if they were last to shut down). This is\\r\\nusually only necessary if the last node to shut down or a\\r\\nset of nodes will never be brought back online.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"upgrading\",\n      children: \"Upgrading clusters\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"You can find instructions for upgrading a cluster in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./upgrade\",\n        children: \"the upgrade\\r\\nguide\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"single-machine\",\n      children: \"A Cluster on a Single Machine\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Under some circumstances it can be useful to run a cluster\\r\\nof RabbitMQ nodes on a single machine. This would\\r\\ntypically be useful for experimenting with clustering on a\\r\\ndesktop or laptop without the overhead of starting several\\r\\nvirtual machines for the cluster.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In order to run multiple RabbitMQ nodes on a single\\r\\nmachine, it is necessary to make sure the nodes have\\r\\ndistinct node names, data store locations, log file\\r\\nlocations, and bind to different ports, including those\\r\\nused by plugins. See \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_NODENAME\"\n      }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_NODE_PORT\"\n      }), \", and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_DIST_PORT\"\n      }), \" in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#supported-environment-variables\",\n        children: \"Configuration\\r\\nguide\"\n      }), \", as well as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_MNESIA_DIR\"\n      }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_CONFIG_FILE\"\n      }), \", and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_LOG_BASE\"\n      }), \" in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./relocate\",\n        children: \"File and Directory Locations guide\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"You can start multiple nodes on the same host manually by\\r\\nrepeated invocation of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-server\"\n      }), \" (\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-server.bat\"\n      }), \" on Windows). For example:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"RABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit rabbitmq-server -detached\\r\\nRABBITMQ_NODE_PORT=5673 RABBITMQ_NODENAME=hare rabbitmq-server -detached\\r\\nrabbitmqctl -n hare stop_app\\r\\nrabbitmqctl -n hare join_cluster rabbit@`hostname -s`\\r\\nrabbitmqctl -n hare start_app\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"will set up a two node cluster, both nodes as disc nodes.\\r\\nNote that if the node \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./networking\",\n        children: \"listens on any ports\"\n      }), \" other\\r\\nthan AMQP 0-9-1 and AMQP 1.0 ones, those must be configured to avoid a collision as\\r\\nwell. This can be done via command line:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"RABBITMQ_NODE_PORT=5672 RABBITMQ_SERVER_START_ARGS=\\\"-rabbitmq_management listener [{port,15672}]\\\" RABBITMQ_NODENAME=rabbit rabbitmq-server -detached\\r\\nRABBITMQ_NODE_PORT=5673 RABBITMQ_SERVER_START_ARGS=\\\"-rabbitmq_management listener [{port,15673}]\\\" RABBITMQ_NODENAME=hare rabbitmq-server -detached\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"will start two nodes (which can then be clustered) when\\r\\nthe management plugin is installed.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"issues-hostname\",\n      children: \"Hostname Changes\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ nodes use hostnames to communicate with each other. Therefore,\\r\\nall node names must be able to resolve names of all cluster peers. This is\\r\\nalso true for tools such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In addition to that, by default RabbitMQ names the database directory using the\\r\\ncurrent hostname of the system. If the hostname\\r\\nchanges, a new empty database is created. To avoid data loss it's\\r\\ncrucial to set up a fixed and resolvable hostname.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Whenever the hostname changes RabbitMQ node must be restarted.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A similar effect can be achieved by using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@localhost\"\n      }), \"\\r\\nas the broker nodename.\\r\\nThe impact of this solution is that clustering will not work because\\r\\nthe chosen hostname does not resolve to a routable address from the remote\\r\\nhosts. The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl\"\n      }), \" command fails when\\r\\ninvoked from a remote host. A better solution is to use DNS, for example,\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://aws.amazon.com/route53/\",\n        children: \"Amazon Route 53\"\n      }), \" if running\\r\\non EC2. If you want to use the full hostname for your nodename (RabbitMQ\\r\\ndefaults to the short name), and that full hostname is resolvable using DNS,\\r\\nyou may want to investigate setting the environment variable\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_USE_LONGNAME=true\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"See the section on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering#hostname-resolution-requirement\",\n        children: \"hostname resolution\"\n      }), \" for more information.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"firewall\",\n      children: \"Firewalled Nodes\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Nodes can have a firewall enabled on them. In such case, traffic on certain ports must be\\r\\nallowed by the firewall in both directions, or nodes won't be able to join each other and\\r\\nperform all the operations they expect to be available on cluster peers.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Learn more in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#ports\",\n        children: \"section on ports\"\n      }), \" above and dedicated \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./networking\",\n        children: \"RabbitMQ Networking guide\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"erlang\",\n      children: \"Erlang Versions Across the Cluster\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"All nodes in a cluster are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"highly recommended\"\n      }), \" to run the same major \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./which-erlang\",\n        children: \"version of Erlang\"\n      }), \": \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"26.2.0\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"26.1.2\"\n      }), \" can be mixed but \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"25.3.2.8\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"26.2.0\"\n      }), \" can potentially introduce breaking changes in\\r\\ninter-node communication protocols. While such breaking changes are rare, they are possible.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Incompatibilities between patch releases of Erlang/OTP versions\\r\\nare very rare.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"clients\",\n      children: \"Connecting to Clusters from Clients\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A client can connect as normal to any node within a\\r\\ncluster. If that node should fail, and the rest of the\\r\\ncluster survives, then the client should notice the closed\\r\\nconnection, and should be able to reconnect to some\\r\\nsurviving member of the cluster.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Many clients support lists of hostnames that will be tried in order\\r\\nat connection time.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Generally it is not recommended to hardcode IP addresses into\\r\\nclient applications: this introduces inflexibility and will\\r\\nrequire client applications to be edited, recompiled and\\r\\nredeployed should the configuration of the cluster change or\\r\\nthe number of nodes in the cluster change.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Instead, consider a more abstracted approach: this could be a\\r\\ndynamic DNS service which has a very short TTL\\r\\nconfiguration, or a plain TCP load balancer, or a combination of them.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In general, this aspect of managing the\\r\\nconnection to nodes within a cluster is beyond the scope of\\r\\nthis guide, and we recommend the use of other\\r\\ntechnologies designed specifically to address these problems.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./versioned_docs/version-4.1/clustering.md\n");

/***/ })

}]);