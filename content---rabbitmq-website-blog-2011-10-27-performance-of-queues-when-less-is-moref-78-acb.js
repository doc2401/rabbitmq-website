"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-blog-2011-10-27-performance-of-queues-when-less-is-moref-78-acb"],{

/***/ "./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2011-10-27-performance-of-queues-when-less-is-more-index-md-f78.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"permalink":"/rabbitmq-website/blog/2011/10/27/performance-of-queues-when-less-is-more","editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/blog/2011-10-27-performance-of-queues-when-less-is-more/index.md","source":"@site/blog/2011-10-27-performance-of-queues-when-less-is-more/index.md","title":"Performance of Queues: when less is more","description":"Since the new persister arrived in RabbitMQ 2.0.0 (yes, it\'s not so","date":"2011-10-27T00:00:00.000Z","tags":[{"inline":true,"label":"New Features","permalink":"/rabbitmq-website/blog/tags/new-features"}],"readingTime":8.085,"hasTruncateMarker":true,"authors":[{"name":"Matthew Sackman","key":"matthew","page":null}],"frontMatter":{"title":"Performance of Queues: when less is more","tags":["New Features"],"authors":["matthew"]},"unlisted":false,"prevItem":{"title":"Ponies, Dragons and Socks","permalink":"/rabbitmq-website/blog/2011/11/30/ponies-dragons-and-socks"},"nextItem":{"title":"High Availability in RabbitMQ: solving part of the puzzle","permalink":"/rabbitmq-website/blog/2011/10/25/high-availability-in-rabbitmq-solving-part-of-the-puzzle"}}');

/***/ }),

/***/ "./blog/2011-10-27-performance-of-queues-when-less-is-more/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2011_10_27_performance_of_queues_when_less_is_more_index_md_f78_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2011_10_27_performance_of_queues_when_less_is_more_index_md_f78_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2011-10-27-performance-of-queues-when-less-is-more-index-md-f78.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Performance of Queues: when less is more',\n\ttags: [\n\t\t'New Features'\n\t],\n\tauthors: [\n\t\t'matthew'\n\t]\n};\nconst contentTitle = undefined;\n\nconst assets = {\n\"authorsImageUrls\": [undefined],\n};\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    em: \"em\",\n    img: \"img\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Since the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"new persister\"\n      }), \" arrived in RabbitMQ 2.0.0 (yes, it's not so\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"new\"\n      }), \" anymore), Rabbit has had a relatively good story to tell about\\r\\ncoping with queues that grow and grow and grow and reach sizes that\\r\\npreclude them from being able to be held in RAM. Rabbit starts writing\\r\\nout messages to disk fairly early on, and continues to do so at a\\r\\ngentle rate so that by the time RAM gets really tight, we've done most\\r\\nof the hard work already and thus avoid sudden bursts of\\r\\nwrites. Provided your message rates aren't too high or too bursty,\\r\\nthis should all happen without any real impact on any connected\\r\\nclients.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Some recent discussion with a client made us return to what we'd\\r\\nthought was a fairly solved problem and has prompted us to make some\\r\\nchanges.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"First, we\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2011/09/24/sizing-your-rabbits\",\n        children: \"took some time to understand better how CPU use per message varies as queues get longer and go to disk\"\n      }), \",\\r\\nand what the effect of that is. The conclusions are not necessarily\\r\\nobvious. Then we started thinking about the justifications behind some\\r\\nof the decisions queues take in the process of going from a\\r\\npurely-in-RAM queue to a purely-on-disk queue.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"An AMQP queue in Rabbit is not simple functional FIFO queue. There are\\r\\nin fact at least four \\\"queues\\\" used internally by each AMQP queue,\\r\\neach of which are allowed to hold messages in various different\\r\\nstates. These states are things like: Is the message held in RAM\\r\\n(regardless of whether it has \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"additionally\"\n      }), \" been written to disk)?;\\r\\nIs the message itself on disk, but its location within the queue still\\r\\nonly held in RAM? That sort of thing. Each message in the AMQP queue\\r\\nwill only appear at any one time in one of these internal queues, but\\r\\nthey can move from queue to queue if and when their state changes\\r\\n(though the movement between these internal queues respects the\\r\\noverall order of messages within the AMQP queue). There is then a\\r\\nfifth \\\"queue\\\" which is not really a queue at all. It is more a couple\\r\\nof numbers that indicate the range of messages that are held solely on\\r\\ndisk (if you like, these are pointers to the head and tail of the\\r\\n\\\"queue\\\" which is solely on disk). Messages in this form have, in\\r\\ntheory, zero RAM-cost (depending on how you count (numbers cost RAM\\r\\ntoo you know!), and elsewhere in Rabbit you can be fairly sure the\\r\\nbest you can get down to is a few bytes per message). The full gory\\r\\ndetails can be gleaned from the essay at the top of the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://hg.rabbitmq.com/rabbitmq-server/file/default/src/rabbit_variable_queue.erl\",\n        children: \"variable_queue\"\n      }), \"\\r\\nmodule. It's not really that terrifying, but it isn't exactly noddy\\r\\nstuff either. The tricky bits are working out how you decide which\\r\\nmessages should be in which states, and when, and I'm not going to\\r\\ncover those decisions in this post.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A message that is captured by this fifth \\\"queue\\\" will potentially take\\r\\ntwo reads to go from that purely-on-disk form right back to a\\r\\nfully-in-RAM message. This is because every message has a message ID\\r\\n(which is random, unordered, and allocated to each message before it\\r\\narrives at any queue, so is useless for determining relative position\\r\\nwithin an AMQP queue), and within each AMQP queue each message is known by its\\r\\nper-queue sequence ID, which enforces the relative order of messages\\r\\nwithin an AMQP queue. This fifth \\\"queue\\\" can be thought of as a\\r\\nmapping from sequence ID to message ID (plus some\\r\\nper-message-per-queue state), and then you can use a different\\r\\nsubsystem to transform that message ID to the actual message.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"As a result of these two reads (though the way we structure it, one of\\r\\nthe reads is shared between 16k messages, so it's probably closer to\\r\\n1+(1/16384) reads per message, at least by default), we've previously\\r\\ntried to prevent the use of this fifth \\\"queue\\\": in the past, even when\\r\\nmemory is running very low, we'll write messages out to disk fully,\\r\\nbut then still hold onto a record in RAM (though by this point it's a\\r\\nfairly small record per message), assuming that this will give us an\\r\\nadvantage later on: yes, it costs more RAM, but if some other big AMQP\\r\\nqueue suddenly gets deleted and frees up lots of RAM then by holding\\r\\nonto this smallish record per message, we avoid having to do the two\\r\\nreads to go from the fifth \\\"queue\\\" back to a full message, and will\\r\\nonly have to do a single read instead. Only when RAM runs out\\r\\ncompletely will we suddenly dump (almost) everything into this fifth\\r\\n\\\"queue\\\" (though by this point, everything will be on disk by now\\r\\nanyway so it's more or less a no-op -- we're just freeing up RAM in\\r\\nthis transition).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"However, because of the effective amortisation of at least one of\\r\\nthese reads, using the fifth \\\"queue\\\" isn't as expensive as we\\r\\nfeared. Plus, if you start to use it earlier then the queue grows in\\r\\nRAM at a slower rate: messages have the lowest per-message RAM cost when\\r\\nthey're in this fifth \\\"queue\\\", and thus the greater your use of this\\r\\n\\\"queue\\\", the lower the rate at which your queue will consume RAM. This\\r\\non its own helps Rabbit smooth out the transition to purely on disk\\r\\noperation (given the same growth rate in messages, a lower growth rate in RAM will result in a lower rate of disk ops).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"So we've changed the behaviour of Rabbit's AMQP queues to use this\\r\\nfifth \\\"queue\\\" more eagerly. Benchmarks suggest that this seems to\\r\\nresult in an AMQP queue's memory use flat-lining earlier on in its\\r\\ngrowth, and actually seems to make Rabbit able to deliver messages\\r\\nfrom large AMQP queues out to consumers faster (probably because by\\r\\nlimiting the size of the other four internal queues, some operations\\r\\nwhich were found to be very inefficient (such as joining two\\r\\nfunctional queues together (Erlang's default queue module does a plain\\r\\nappend (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"++\"\n      }), \") here, which is expensive)) are avoided, thus more CPU is\\r\\navailable for driving consumers). The downside is that queues now\\r\\nspend more time doing reads, but that seems to have been more than\\r\\noffset by the lower user jiffies per message.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Below is a graph. This is very exciting -- not just because of the\\r\\nfact that most of my blog posts are endless words. It shows three runs\\r\\nof the same test program. This test program does the following:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"It creates 3 queues.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"It binds those 3 queues to a fanout exchange.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"It then starts publishing 200-byte messages to that exchange at 600\\r\\nmessages / second.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"For the first 120 seconds, it has 20 consumers per queue consuming\\r\\nwithout auto-ack, one ack per message, and a QoS pre-fetch of 1. This is known to be a very expensive way of consuming\\r\\nmessages. Further, the ack is deliberately delayed so that,\\r\\nignoring network latency, the maximum aggregate consuming rate will\\r\\nbe 1200 messages / second.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"After 120 seconds, the consumers are stopped, and not started again\\r\\nuntil there is a total backlog of 500,000 messages (i.e. each of\\r\\nthe 3 queues will have around 166,000 messages).\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"After that, the consumers resume as before, and you hope that the\\r\\nqueues can cope with the continuing publishes and drive their\\r\\nbacklog out to the consumers. Hopefully, all the queues will\\r\\neventually become empty again.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Now depending on your CPU, RAM, network latency, and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"high_watermark\"\n      }), \"\\r\\nsettings, this backlog can be purely in RAM only, and so no disk\\r\\noperations ever take place; or it could be purely on disk; or anywhere\\r\\nin between. Our desktops in the office here tend to be too powerful\\r\\nfor this test to cause any problems (the backlog always drains), but\\r\\non some EC2 hosts, with older versions of Erlang and older versions of\\r\\nRabbit, it was possible to reach a point where this backlog would\\r\\nnever drain, and instead grow.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In the following graph, we have three successful runs of this test,\\r\\nboth on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"m1.large\"\n      }), \" EC2 instances, with the test being run on a\\r\\nseparate EC2 instance (i.e. we really were going across the\\r\\nnetwork). These are running Ubuntu images, but with a locally compiled\\r\\nErlang R14B04 installation. The three runs are: 1) what was on our\\r\\ndefault branch prior to this work being merged; 2) our default branch\\r\\nafter this work was merged; 3) the 2.6.1 release.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n        src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2011-10-27-performance-of-queues-when-less-is-more/graph.svg\")[\"default\"]) + \"\",\n        width: \"1600\",\n        height: \"1200\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Since 2.6.1 was released, a fairly large number of performance tweaks\\r\\nhave been made, and this is shown by the faster rate at which the\\r\\nbacklog disappears. But the \\\"default prior to change\\\" and \\\"2.6.1\\\"\\r\\nmemory usages are fairly similar, whereas, on average, the \\\"default\\r\\npost change\\\" has a lower memory usage. The memory measurements are not\\r\\nespecially compelling however as, owing to Erlang being an\\r\\nauto-garbage-collected language, it is not always the case that\\r\\nimproving memory efficiency internally results in the VM requesting\\r\\nless RAM or returning RAM to the OS faster. What is more compelling is\\r\\nthe faster rate at which the backlog is eliminated and the lower\\r\\ncumulative jiffies: even though \\\"default post change\\\" is doing more\\r\\nmessages per second than either of the other runs, it still uses fewer\\r\\njiffies per second than the other runs.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Hopefully this change will make improvements to many users across many\\r\\nscenarios. It's possible there may be some use cases where it performs\\r\\nworse -- we certainly can't rule that out. No problem in software\\r\\nengineering that's worth solving has a single correct solution. This\\r\\ncase shows that sometimes, using less memory and doing apparently more disk ops\\r\\ncan actually make things go faster overall.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./blog/2011-10-27-performance-of-queues-when-less-is-more/index.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2011-10-27-performance-of-queues-when-less-is-more/graph.svg":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/graph-c2bce54114145634671f1d00550eb140.svg\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDExLTEwLTI3LXBlcmZvcm1hbmNlLW9mLXF1ZXVlcy13aGVuLWxlc3MtaXMtbW9yZS9ncmFwaC5zdmciLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL2Jsb2cvMjAxMS0xMC0yNy1wZXJmb3JtYW5jZS1vZi1xdWV1ZXMtd2hlbi1sZXNzLWlzLW1vcmUvZ3JhcGguc3ZnP2ZmNzMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvZ3JhcGgtYzJiY2U1NDExNDE0NTYzNDY3MWYxZDAwNTUwZWIxNDAuc3ZnXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2011-10-27-performance-of-queues-when-less-is-more/graph.svg\n");

/***/ })

}]);