"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-tutorials-tutorial-seven-java-2-a-1-c70"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/tutorials/site-tutorials-tutorial-seven-java-md-2a1.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"tutorial-seven-java","title":"RabbitMQ tutorial - Reliable Publishing with Publisher Confirms","description":"<!--","source":"@site/tutorials/tutorial-seven-java.md","sourceDirName":".","slug":"/tutorial-seven-java","permalink":"/rabbitmq-website/tutorials/tutorial-seven-java","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/tutorials/tutorial-seven-java.md","tags":[],"version":"current","frontMatter":{"title":"RabbitMQ tutorial - Reliable Publishing with Publisher Confirms"},"sidebar":"tutorialsSidebar","previous":{"title":"RPC","permalink":"/rabbitmq-website/tutorials/tutorial-six-java"},"next":{"title":"Hello World","permalink":"/rabbitmq-website/tutorials/tutorial-one-ruby"}}');

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./src/components/Tutorials/TutorialsHelp.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [{\n  \"value\": \"Prerequisites\",\n  \"id\": \"prerequisites\",\n  \"level\": 3\n}, {\n  \"value\": \"Where to get help\",\n  \"id\": \"where-to-get-help\",\n  \"level\": 3\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    h3: \"h3\",\n    p: \"p\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_components.admonition, {\n    type: \"info\",\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.h3, {\n      id: \"prerequisites\",\n      children: \"Prerequisites\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_components.p, {\n      children: [\"This tutorial assumes RabbitMQ is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.a, {\n        href: \"/docs/download\",\n        children: \"installed\"\n      }), \" and running on\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.code, {\n        children: \"localhost\"\n      }), \" on the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.a, {\n        href: \"/docs/networking#ports\",\n        children: \"standard port\"\n      }), \" (5672). In case you\\r\\nuse a different host, port or credentials, connections settings would require\\r\\nadjusting.\"]\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.h3, {\n      id: \"where-to-get-help\",\n      children: \"Where to get help\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_components.p, {\n      children: [\"If you're having trouble going through this tutorial you can contact us\\r\\nthrough \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/discussions\",\n        children: \"GitHub Discussions\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.a, {\n        href: \"https://www.rabbitmq.com/discord\",\n        children: \"RabbitMQ community Discord\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9UdXRvcmlhbHMvVHV0b3JpYWxzSGVscC5tZCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9zcmMvY29tcG9uZW50cy9UdXRvcmlhbHMvVHV0b3JpYWxzSGVscC5tZD9lMTQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlxuXG5leHBvcnQgY29uc3QgZnJvbnRNYXR0ZXIgPSB7fTtcbmV4cG9ydCBjb25zdCBjb250ZW50VGl0bGUgPSB1bmRlZmluZWQ7XG5cblxuXG5pbXBvcnQge2pzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7dXNlTURYQ29tcG9uZW50cyBhcyBfcHJvdmlkZUNvbXBvbmVudHN9IGZyb20gXCJAbWR4LWpzL3JlYWN0XCI7XG5leHBvcnQgY29uc3QgdG9jID0gW3tcbiAgXCJ2YWx1ZVwiOiBcIlByZXJlcXVpc2l0ZXNcIixcbiAgXCJpZFwiOiBcInByZXJlcXVpc2l0ZXNcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJXaGVyZSB0byBnZXQgaGVscFwiLFxuICBcImlkXCI6IFwid2hlcmUtdG8tZ2V0LWhlbHBcIixcbiAgXCJsZXZlbFwiOiAzXG59XTtcbmZ1bmN0aW9uIF9jcmVhdGVNZHhDb250ZW50KHByb3BzKSB7XG4gIGNvbnN0IF9jb21wb25lbnRzID0ge1xuICAgIGE6IFwiYVwiLFxuICAgIGFkbW9uaXRpb246IFwiYWRtb25pdGlvblwiLFxuICAgIGNvZGU6IFwiY29kZVwiLFxuICAgIGgzOiBcImgzXCIsXG4gICAgcDogXCJwXCIsXG4gICAgLi4uX3Byb3ZpZGVDb21wb25lbnRzKCksXG4gICAgLi4ucHJvcHMuY29tcG9uZW50c1xuICB9O1xuICByZXR1cm4gX2pzeHMoX2NvbXBvbmVudHMuYWRtb25pdGlvbiwge1xuICAgIHR5cGU6IFwiaW5mb1wiLFxuICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwicHJlcmVxdWlzaXRlc1wiLFxuICAgICAgY2hpbGRyZW46IFwiUHJlcmVxdWlzaXRlc1wiXG4gICAgfSksIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGlzIHR1dG9yaWFsIGFzc3VtZXMgUmFiYml0TVEgaXMgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi9kb2NzL2Rvd25sb2FkXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImluc3RhbGxlZFwiXG4gICAgICB9KSwgXCIgYW5kIHJ1bm5pbmcgb25cXHJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImxvY2FsaG9zdFwiXG4gICAgICB9KSwgXCIgb24gdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIvZG9jcy9uZXR3b3JraW5nI3BvcnRzXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcInN0YW5kYXJkIHBvcnRcIlxuICAgICAgfSksIFwiICg1NjcyKS4gSW4gY2FzZSB5b3VcXHJcXG51c2UgYSBkaWZmZXJlbnQgaG9zdCwgcG9ydCBvciBjcmVkZW50aWFscywgY29ubmVjdGlvbnMgc2V0dGluZ3Mgd291bGQgcmVxdWlyZVxcclxcbmFkanVzdGluZy5cIl1cbiAgICB9KSwgX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwid2hlcmUtdG8tZ2V0LWhlbHBcIixcbiAgICAgIGNoaWxkcmVuOiBcIldoZXJlIHRvIGdldCBoZWxwXCJcbiAgICB9KSwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIklmIHlvdSdyZSBoYXZpbmcgdHJvdWJsZSBnb2luZyB0aHJvdWdoIHRoaXMgdHV0b3JpYWwgeW91IGNhbiBjb250YWN0IHVzXFxyXFxudGhyb3VnaCBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9naXRodWIuY29tL3JhYmJpdG1xL3JhYmJpdG1xLXNlcnZlci9kaXNjdXNzaW9uc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJHaXRIdWIgRGlzY3Vzc2lvbnNcIlxuICAgICAgfSksIFwiIG9yIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCJodHRwczovL3d3dy5yYWJiaXRtcS5jb20vZGlzY29yZFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJSYWJiaXRNUSBjb21tdW5pdHkgRGlzY29yZFwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSldXG4gIH0pO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChwcm9wcyA9IHt9KSB7XG4gIGNvbnN0IHt3cmFwcGVyOiBNRFhMYXlvdXR9ID0ge1xuICAgIC4uLl9wcm92aWRlQ29tcG9uZW50cygpLFxuICAgIC4uLnByb3BzLmNvbXBvbmVudHNcbiAgfTtcbiAgcmV0dXJuIE1EWExheW91dCA/IF9qc3goTURYTGF5b3V0LCB7XG4gICAgLi4ucHJvcHMsXG4gICAgY2hpbGRyZW46IF9qc3goX2NyZWF0ZU1keENvbnRlbnQsIHtcbiAgICAgIC4uLnByb3BzXG4gICAgfSlcbiAgfSkgOiBfY3JlYXRlTWR4Q29udGVudChwcm9wcyk7XG59XG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/Tutorials/TutorialsHelp.md\n");

/***/ }),

/***/ "./tutorials/tutorial-seven-java.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_tutorials_site_tutorials_tutorial_seven_java_md_2a1_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_tutorials_site_tutorials_tutorial_seven_java_md_2a1_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/tutorials/site-tutorials-tutorial-seven-java-md-2a1.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n/* harmony import */ var _site_src_components_Tutorials_TutorialsHelp_md__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/components/Tutorials/TutorialsHelp.md\");\n\n\nconst frontMatter = {\n\ttitle: 'RabbitMQ tutorial - Reliable Publishing with Publisher Confirms'\n};\nconst contentTitle = 'RabbitMQ tutorial - Reliable Publishing with Publisher Confirms';\n\nconst assets = {\n\n};\n\n\n\n\nconst toc = [{\n  \"value\": \"Publisher Confirms\",\n  \"id\": \"publisher-confirms\",\n  \"level\": 2\n}, ..._site_src_components_Tutorials_TutorialsHelp_md__WEBPACK_IMPORTED_MODULE_2__.toc, {\n  \"value\": \"(using the Java client)\",\n  \"id\": \"using-the-java-client\",\n  \"level\": 3\n}, {\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 3\n}, {\n  \"value\": \"Enabling Publisher Confirms on a Channel\",\n  \"id\": \"enabling-publisher-confirms-on-a-channel\",\n  \"level\": 3\n}, {\n  \"value\": \"Strategy #1: Publishing Messages Individually\",\n  \"id\": \"strategy-1-publishing-messages-individually\",\n  \"level\": 3\n}, {\n  \"value\": \"Are Publisher Confirms Asynchronous?\",\n  \"id\": \"are-publisher-confirms-asynchronous\",\n  \"level\": 4\n}, {\n  \"value\": \"Strategy #2: Publishing Messages in Batches\",\n  \"id\": \"strategy-2-publishing-messages-in-batches\",\n  \"level\": 3\n}, {\n  \"value\": \"Strategy #3: Handling Publisher Confirms Asynchronously\",\n  \"id\": \"strategy-3-handling-publisher-confirms-asynchronously\",\n  \"level\": 3\n}, {\n  \"value\": \"How to Track Outstanding Confirms?\",\n  \"id\": \"how-to-track-outstanding-confirms\",\n  \"level\": 4\n}, {\n  \"value\": \"Re-publishing nack-ed Messages?\",\n  \"id\": \"re-publishing-nack-ed-messages\",\n  \"level\": 4\n}, {\n  \"value\": \"Summary\",\n  \"id\": \"summary\",\n  \"level\": 3\n}, {\n  \"value\": \"Putting It All Together\",\n  \"id\": \"putting-it-all-together\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"rabbitmq-tutorial---reliable-publishing-with-publisher-confirms\",\n        children: \"RabbitMQ tutorial - Reliable Publishing with Publisher Confirms\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"publisher-confirms\",\n      children: \"Publisher Confirms\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_site_src_components_Tutorials_TutorialsHelp_md__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {}), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/confirms#publisher-confirms\",\n        children: \"Publisher confirms\"\n      }), \"\\r\\nare a RabbitMQ extension to implement reliable\\r\\npublishing. When publisher confirms are enabled on a channel,\\r\\nmessages the client publishes are confirmed asynchronously\\r\\nby the broker, meaning they have been taken care of on the server\\r\\nside.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"using-the-java-client\",\n      children: \"(using the Java client)\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In this tutorial we're going to use publisher confirms to make\\r\\nsure published messages have safely reached the broker. We will\\r\\ncover several strategies to using publisher confirms and explain\\r\\ntheir pros and cons.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"enabling-publisher-confirms-on-a-channel\",\n      children: \"Enabling Publisher Confirms on a Channel\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Publisher confirms are a RabbitMQ extension to the AMQP 0.9.1 protocol,\\r\\nso they are not enabled by default. Publisher confirms are\\r\\nenabled at the channel level with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"confirmSelect\"\n      }), \" method:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"Channel channel = connection.createChannel();\\r\\nchannel.confirmSelect();\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This method must be called on every channel that you expect to use publisher\\r\\nconfirms. Confirms should be enabled just once, not for every message published.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"strategy-1-publishing-messages-individually\",\n      children: \"Strategy #1: Publishing Messages Individually\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Let's start with the simplest approach to publishing with confirms,\\r\\nthat is, publishing a message and waiting synchronously for its confirmation:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"while (thereAreMessagesToPublish()) {\\r\\n    byte[] body = ...;\\r\\n    BasicProperties properties = ...;\\r\\n    channel.basicPublish(exchange, queue, properties, body);\\r\\n    // uses a 5 second timeout\\r\\n    channel.waitForConfirmsOrDie(5_000);\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In the previous example we publish a message as usual and wait for its\\r\\nconfirmation with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#waitForConfirmsOrDie(long)\"\n      }), \" method.\\r\\nThe method returns as soon as the message has been confirmed. If the\\r\\nmessage is not confirmed within the timeout or if it is nack-ed (meaning\\r\\nthe broker could not take care of it for some reason), the method will\\r\\nthrow an exception. The handling of the exception usually consists\\r\\nin logging an error message and/or retrying to send the message.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Different client libraries have different ways to synchronously deal with publisher confirms,\\r\\nso make sure to read carefully the documentation of the client you are using.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This technique is very straightforward but also has a major drawback:\\r\\nit \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"significantly slows down publishing\"\n      }), \", as the confirmation of a message blocks the publishing\\r\\nof all subsequent messages. This approach is not going to deliver throughput of\\r\\nmore than a few hundreds of published messages per second. Nevertheless, this can be\\r\\ngood enough for some applications.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.blockquote, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n        id: \"are-publisher-confirms-asynchronous\",\n        children: \"Are Publisher Confirms Asynchronous?\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"We mentioned at the beginning that the broker confirms published\\r\\nmessages asynchronously but in the first example the code waits\\r\\nsynchronously until the message is confirmed. The client actually\\r\\nreceives confirms asynchronously and unblocks the call to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"waitForConfirmsOrDie\"\n        }), \"\\r\\naccordingly. Think of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"waitForConfirmsOrDie\"\n        }), \" as a synchronous helper\\r\\nwhich relies on asynchronous notifications under the hood.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"strategy-2-publishing-messages-in-batches\",\n      children: \"Strategy #2: Publishing Messages in Batches\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To improve upon our previous example, we can publish a batch\\r\\nof messages and wait for this whole batch to be confirmed.\\r\\nThe following example uses a batch of 100:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"int batchSize = 100;\\r\\nint outstandingMessageCount = 0;\\r\\nwhile (thereAreMessagesToPublish()) {\\r\\n    byte[] body = ...;\\r\\n    BasicProperties properties = ...;\\r\\n    channel.basicPublish(exchange, queue, properties, body);\\r\\n    outstandingMessageCount++;\\r\\n    if (outstandingMessageCount == batchSize) {\\r\\n        channel.waitForConfirmsOrDie(5_000);\\r\\n        outstandingMessageCount = 0;\\r\\n    }\\r\\n}\\r\\nif (outstandingMessageCount > 0) {\\r\\n    channel.waitForConfirmsOrDie(5_000);\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Waiting for a batch of messages to be confirmed improves throughput drastically over\\r\\nwaiting for a confirm for individual message (up to 20-30 times with a remote RabbitMQ node).\\r\\nOne drawback is that we do not know exactly what went wrong in case of failure,\\r\\nso we may have to keep a whole batch in memory to log something meaningful or\\r\\nto re-publish the messages. And this solution is still synchronous, so it\\r\\nblocks the publishing of messages.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"strategy-3-handling-publisher-confirms-asynchronously\",\n      children: \"Strategy #3: Handling Publisher Confirms Asynchronously\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The broker confirms published messages asynchronously, one just needs\\r\\nto register a callback on the client to be notified of these confirms:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"Channel channel = connection.createChannel();\\r\\nchannel.confirmSelect();\\r\\nchannel.addConfirmListener((sequenceNumber, multiple) -> {\\r\\n    // code when message is confirmed\\r\\n}, (sequenceNumber, multiple) -> {\\r\\n    // code when message is nack-ed\\r\\n});\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"There are 2 callbacks: one for confirmed messages and one for nack-ed messages\\r\\n(messages that can be considered lost by the broker). Each callback has\\r\\n2 parameters:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"sequence number: a number that identifies the confirmed\\r\\nor nack-ed message. We will see shortly how to correlate it with the published message.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"multiple: this is a boolean value. If false, only one message is confirmed/nack-ed, if\\r\\ntrue, all messages with a lower or equal sequence number are confirmed/nack-ed.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The sequence number can be obtained with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#getNextPublishSeqNo()\"\n      }), \"\\r\\nbefore publishing:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"int sequenceNumber = channel.getNextPublishSeqNo());\\r\\nch.basicPublish(exchange, queue, properties, body);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A simple way to correlate messages with sequence number consists in using a\\r\\nmap. Let's assume we want to publish strings because they are easy to turn into\\r\\nan array of bytes for publishing. Here is a code sample that uses a map to\\r\\ncorrelate the publishing sequence number with the string body of the message:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConcurrentNavigableMap<Long, String> outstandingConfirms = new ConcurrentSkipListMap<>();\\r\\n// ... code for confirm callbacks will come later\\r\\nString body = \\\"...\\\";\\r\\noutstandingConfirms.put(channel.getNextPublishSeqNo(), body);\\r\\nchannel.basicPublish(exchange, queue, properties, body.getBytes());\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The publishing code now tracks outbound messages with a map. We need\\r\\nto clean this map when confirms arrive and do something like logging a warning\\r\\nwhen messages are nack-ed:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConcurrentNavigableMap<Long, String> outstandingConfirms = new ConcurrentSkipListMap<>();\\r\\nConfirmCallback cleanOutstandingConfirms = (sequenceNumber, multiple) -> {\\r\\n    if (multiple) {\\r\\n        ConcurrentNavigableMap<Long, String> confirmed = outstandingConfirms.headMap(\\r\\n          sequenceNumber, true\\r\\n        );\\r\\n        confirmed.clear();\\r\\n    } else {\\r\\n        outstandingConfirms.remove(sequenceNumber);\\r\\n    }\\r\\n};\\r\\n\\r\\nchannel.addConfirmListener(cleanOutstandingConfirms, (sequenceNumber, multiple) -> {\\r\\n    String body = outstandingConfirms.get(sequenceNumber);\\r\\n    System.err.format(\\r\\n      \\\"Message with body %s has been nack-ed. Sequence number: %d, multiple: %b%n\\\",\\r\\n      body, sequenceNumber, multiple\\r\\n    );\\r\\n    cleanOutstandingConfirms.handle(sequenceNumber, multiple);\\r\\n});\\r\\n// ... publishing code\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The previous sample contains a callback that cleans the map when\\r\\nconfirms arrive. Note this callback handles both single and multiple\\r\\nconfirms. This callback is used when confirms arrive (as the first argument of\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#addConfirmListener\"\n      }), \"). The callback for nack-ed messages\\r\\nretrieves the message body and issues a warning. It then re-uses the\\r\\nprevious callback to clean the map of outstanding confirms (whether\\r\\nmessages are confirmed or nack-ed, their corresponding entries in the map\\r\\nmust be removed.)\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.blockquote, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n        id: \"how-to-track-outstanding-confirms\",\n        children: \"How to Track Outstanding Confirms?\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"Our samples use a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"ConcurrentNavigableMap\"\n        }), \" to track outstanding confirms.\\r\\nThis data structure is convenient for several reasons. It allows to\\r\\neasily correlate a sequence number with a message (whatever the message data\\r\\nis) and to easily clean the entries up to a given sequence id (to handle\\r\\nmultiple confirms/nacks). At last, it supports concurrent access, because\\r\\nconfirm callbacks are called in a thread owned by the client library, which\\r\\nshould be kept different from the publishing thread.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"There are other ways to track outstanding confirms than with\\r\\na sophisticated map implementation, like using a simple concurrent hash map\\r\\nand a variable to track the lower bound of the publishing sequence, but\\r\\nthey are usually more involved and do not belong to a tutorial.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To sum up, handling publisher confirms asynchronously usually requires the\\r\\nfollowing steps:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"provide a way to correlate the publishing sequence number with a message.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"register a confirm listener on the channel to be notified when\\r\\npublisher acks/nacks arrive to perform the appropriate actions, like\\r\\nlogging or re-publishing a nack-ed message. The sequence-number-to-message\\r\\ncorrelation mechanism may also require some cleaning during this step.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"track the publishing sequence number before publishing a message.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.blockquote, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n        id: \"re-publishing-nack-ed-messages\",\n        children: \"Re-publishing nack-ed Messages?\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"It can be tempting to re-publish a nack-ed message from the corresponding\\r\\ncallback but this should be avoided, as confirm callbacks are\\r\\ndispatched in an I/O thread where channels are not supposed\\r\\nto do operations. A better solution consists in enqueuing the message in an in-memory\\r\\nqueue which is polled by a publishing thread. A class like \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"ConcurrentLinkedQueue\"\n        }), \"\\r\\nwould be a good candidate to transmit messages between the confirm callbacks\\r\\nand a publishing thread.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"summary\",\n      children: \"Summary\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Making sure published messages made it to the broker can be essential in some applications.\\r\\nPublisher confirms are a RabbitMQ feature that helps to meet this requirement. Publisher\\r\\nconfirms are asynchronous in nature but it is also possible to handle them synchronously.\\r\\nThere is no definitive way to implement publisher confirms, this usually comes down\\r\\nto the constraints in the application and in the overall system. Typical techniques are:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"publishing messages individually, waiting for the confirmation synchronously: simple, but very\\r\\nlimited throughput.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"publishing messages in batch, waiting for the confirmation synchronously for a batch: simple, reasonable\\r\\nthroughput, but hard to reason about when something goes wrong.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"asynchronous handling: best performance and use of resources, good control in case of error, but\\r\\ncan be involved to implement correctly.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"putting-it-all-together\",\n      children: \"Putting It All Together\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-tutorials/blob/main/java/PublisherConfirms.java\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"PublisherConfirms.java\"\n        })\n      }), \"\\r\\nclass contains code for the techniques we covered. We can compile it, execute it as-is and\\r\\nsee how they each perform:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"javac -cp $CP PublisherConfirms.java\\r\\njava -cp $CP PublisherConfirms\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The output will look like the following:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"Published 50,000 messages individually in 5,549 ms\\r\\nPublished 50,000 messages in batch in 2,331 ms\\r\\nPublished 50,000 messages and handled confirms asynchronously in 4,054 ms\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The output on your computer should look similar if the\\r\\nclient and the server sit on the same machine. Publishing messages individually\\r\\nperforms poorly as expected, but the results for asynchronously handling\\r\\nare a bit disappointing compared to batch publishing.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Publisher confirms are very network-dependent, so we'd better off\\r\\ntrying with a remote node, which is more realistic as clients\\r\\nand servers are usually not on the same machine in production.\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"PublisherConfirms.java\"\n      }), \" can easily be changed to use a non-local node:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"static Connection createConnection() throws Exception {\\r\\n    ConnectionFactory cf = new ConnectionFactory();\\r\\n    cf.setHost(\\\"remote-host\\\");\\r\\n    cf.setUsername(\\\"remote-user\\\");\\r\\n    cf.setPassword(\\\"remote-password\\\");\\r\\n    return cf.newConnection();\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Recompile the class, execute it again, and wait for the results:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"Published 50,000 messages individually in 231,541 ms\\r\\nPublished 50,000 messages in batch in 7,232 ms\\r\\nPublished 50,000 messages and handled confirms asynchronously in 6,332 ms\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"We see publishing individually now performs terribly. But\\r\\nwith the network between the client and the server, batch publishing and asynchronous handling\\r\\nnow perform similarly, with a small advantage for asynchronous handling of the publisher confirms.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Remember that batch publishing is simple to implement, but does not make it easy to know\\r\\nwhich message(s) could not make it to the broker in case of negative publisher acknowledgment.\\r\\nHandling publisher confirms asynchronously is more involved to implement but provide\\r\\nbetter granularity and better control over actions to perform when published messages\\r\\nare nack-ed.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./tutorials/tutorial-seven-java.md\n");

/***/ })

}]);