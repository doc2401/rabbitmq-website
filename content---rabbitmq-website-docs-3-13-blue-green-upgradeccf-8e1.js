"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-docs-3-13-blue-green-upgradeccf-8e1"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-3-13-blue-green-upgrade-md-ccf.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"blue-green-upgrade","title":"Upgrading RabbitMQ Using Blue-Green Deployment Strategy","description":"<!--","source":"@site/versioned_docs/version-3.13/blue-green-upgrade.md","sourceDirName":".","slug":"/blue-green-upgrade","permalink":"/rabbitmq-website/docs/3.13/blue-green-upgrade","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/versioned_docs/version-3.13/blue-green-upgrade.md","tags":[],"version":"3.13","frontMatter":{"title":"Upgrading RabbitMQ Using Blue-Green Deployment Strategy","displayed_sidebar":"docsSidebar"},"sidebar":"docsSidebar","previous":{"title":"Deprecated Features","permalink":"/rabbitmq-website/docs/3.13/deprecated-features/"},"next":{"title":"Snapshots","permalink":"/rabbitmq-website/docs/3.13/snapshots"}}');

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./versioned_docs/version-3.13/blue-green-upgrade.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_3_13_blue_green_upgrade_md_ccf_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_3_13_blue_green_upgrade_md_ccf_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-3-13-blue-green-upgrade-md-ccf.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Upgrading RabbitMQ Using Blue-Green Deployment Strategy',\n\tdisplayed_sidebar: 'docsSidebar'\n};\nconst contentTitle = 'Upgrading RabbitMQ Using Blue-Green Deployment Strategy';\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"Preparing the &quot;green&quot; Cluster\",\n  \"id\": \"preparation\",\n  \"level\": 2\n}, {\n  \"value\": \"Importing definitions\",\n  \"id\": \"importing-definitions\",\n  \"level\": 3\n}, {\n  \"value\": \"Configuring Queue Federation\",\n  \"id\": \"setup-federation\",\n  \"level\": 3\n}, {\n  \"value\": \"Migrate Consumers Over\",\n  \"id\": \"migrate-consumers\",\n  \"level\": 2\n}, {\n  \"value\": \"Drain Messages\",\n  \"id\": \"drain-messages\",\n  \"level\": 2\n}, {\n  \"value\": \"Migrate Producers Over\",\n  \"id\": \"migrate-producers\",\n  \"level\": 2\n}, {\n  \"value\": \"Decomission the &quot;blue&quot; Cluster\",\n  \"id\": \"decomission-blue\",\n  \"level\": 2\n}, {\n  \"value\": \"Real-world Example\",\n  \"id\": \"example\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"upgrading-rabbitmq-using-blue-green-deployment-strategy\",\n        children: \"Upgrading RabbitMQ Using Blue-Green Deployment Strategy\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Blue-green deployment is a migration technique that can also be used as an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./upgrade\",\n        children: \"upgrade strategy\"\n      }), \".\\r\\nThe main idea is to set up a new environment (the \\\"green\\\" one) and switch to it\\r\\nwhen it is ready. The \\\"upgrade\\\" is not performed \\\"in place\\\", the application just switch\\r\\nto a different environment, which might be using a different version, but can\\r\\nalso differ in other aspects.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The same approach can be used to migrate to a new operating system or new hardware, while keeping the same version of RabbitMQ,\\r\\nor to upgrade from a version that cannot be upgraded to the target series directly,\\r\\nfor example, from 3.12.x to 4.0.x or from a 3.13.x cluster with Khepri enabled to 4.0.x.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When that migration is done, the old (\\\"blue\\\") cluster is decommissioned (shut down, deleted).\\r\\nTo simplify the switch, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./federated-queues\",\n        children: \"federated queues\"\n      }), \"\\r\\ncan be used to transfer enqueued messages from the \\\"blue\\\" to the \\\"green\\\" cluster.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"preparation\",\n      children: \"Preparing the \\\"green\\\" Cluster\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"After deploying a brand new \\\"green\\\" cluster, there are two steps to follow:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"import definitions, e.g. exchanges, queues, bindings;\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"configure federation to later drain messages.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"importing-definitions\",\n      children: \"Importing definitions\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The procedure of definitions export/import is\\r\\ncovered in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./backup#definitions-export\",\n        children: \"Backup guide\"\n      }), \".\\r\\nThe \\\"blue\\\" is the source cluster and the \\\"green\\\" one is the target.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"setup-federation\",\n      children: \"Configuring Queue Federation\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./federation\",\n        children: \"RabbitMQ Federation plugin\"\n      }), \" makes it easy to move consumers\\r\\nfrom \\\"blue\\\" to \\\"green\\\", without disrupting message consumption or losing messages.\\r\\nThe principle of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./federated-queues\",\n        children: \"federated queues\"\n      }), \" is that the consumers\\r\\nnow connected to \\\"green\\\" will get messages published to \\\"blue\\\" as long as there are\\r\\nno consumers in \\\"blue\\\" (local consumers take precedence).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Here is an example to federate all queues. In this example, the \\\"blue\\\" cluster\\r\\nis the upstream and the \\\"green\\\" one is the downstream.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"First define the upstream on \\\"green\\\" and point it to \\\"blue\\\":\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl set_parameter federation-upstream blue \\\\\\r\\n  '{\\\"uri\\\":\\\"amqp://node-in-blue-cluster\\\"}'\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Then define a policy matching all queues which configure \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"blue\"\n      }), \" as the upstream:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl set_policy --apply-to queues blue-green-migration \\\".*\\\" \\\\\\r\\n  '{\\\"federation-upstream\\\":\\\"blue\\\"}'\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Please read the guides linked above and the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./federation-reference\",\n        children: \"federation reference\"\n      }), \" for further details.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"migrate-consumers\",\n      children: \"Migrate Consumers Over\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"You can now switch your consumers to use the new \\\"green\\\" cluster. To achieve\\r\\nthat, reconfigure your load balancer or your consumer applications, depending\\r\\non your setup. The Upgrade guide covers \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./upgrade#rabbitmq-restart-handling\",\n        children: \"some client features which enable\\r\\nthem to switch between nodes\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"At that point, your producers are still publishing to \\\"blue\\\", but thanks to\\r\\nthe federation plugin, message are transferred to consumers connected to \\\"green\\\".\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"drain-messages\",\n      children: \"Drain Messages\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The next step would be to switch producers to \\\"green\\\" as well. However, you may\\r\\nstill have a backlog of messages in \\\"blue\\\". The federation plugin doesn't help\\r\\nhere because it doesn't \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"move\"\n      }), \" messages, it only allows remote consumers to\\r\\ndequeue messages.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In case of a large backlog, use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./shovel-dynamic\",\n        children: \"Shovel plugin\"\n      }), \"\\r\\non \\\"green\\\" to really drain messages in \\\"blue\\\". This would require doing something\\r\\nlike the following for each queue with a backlog:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl set_parameter shovel drain-blue \\\\\\r\\n'{\\\"src-protocol\\\": \\\"amqp091\\\", \\\"src-uri\\\": \\\"amqp://node-in-blue-cluster\\\", \\\\\\r\\n\\\"src-queue\\\": \\\"queue1\\\", \\\"dest-protocol\\\": \\\"amqp091\\\", \\\\\\r\\n\\\"dest-uri\\\": \\\"amqp://\\\", \\\"dest-queue\\\": \\\"queue1\\\"}'\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"migrate-producers\",\n      children: \"Migrate Producers Over\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Once the queues in \\\"blue\\\" are almost empty, you can stop producers. If message\\r\\nordering is important to you, you should still wait a bit more so that the\\r\\nfederation or shovel plugins finish to drain the queues on \\\"blue\\\".\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When they are empty, reconfigure your producers like you did for the consumers\\r\\nand start them again. At this point, everything is moved to the \\\"green\\\" cluster.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"decomission-blue\",\n      children: \"Decomission the \\\"blue\\\" Cluster\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"You are now free to shutdown the nodes in the \\\"blue\\\" cluster.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"example\",\n      children: \"Real-world Example\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Dan Baskette, Gareth Smith and Claude Devarenne of Pivotal\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://content.pivotal.io/blog/blue-green-application-deployments-with-rabbitmq\",\n        children: \"published an article\"\n      }), \"\\r\\nabout this method where producers and consumers are CloudFoundry applications.\\r\\nThe article is very detailed  and uses diagrams to describe the procedure.\\r\\nThey also made a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.youtube.com/watch?v=S2oO-t-E38c\",\n        children: \"video to show it in action\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This guide is inspired by their great work.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi92ZXJzaW9uZWRfZG9jcy92ZXJzaW9uLTMuMTMvYmx1ZS1ncmVlbi11cGdyYWRlLm1kIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWJiaXRtcS13ZWJzaXRlLy4vdmVyc2lvbmVkX2RvY3MvdmVyc2lvbi0zLjEzL2JsdWUtZ3JlZW4tdXBncmFkZS5tZD80OTExIl0sInNvdXJjZXNDb250ZW50IjpbIlxuXG5leHBvcnQgY29uc3QgZnJvbnRNYXR0ZXIgPSB7XG5cdHRpdGxlOiAnVXBncmFkaW5nIFJhYmJpdE1RIFVzaW5nIEJsdWUtR3JlZW4gRGVwbG95bWVudCBTdHJhdGVneScsXG5cdGRpc3BsYXllZF9zaWRlYmFyOiAnZG9jc1NpZGViYXInXG59O1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRUaXRsZSA9ICdVcGdyYWRpbmcgUmFiYml0TVEgVXNpbmcgQmx1ZS1HcmVlbiBEZXBsb3ltZW50IFN0cmF0ZWd5JztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBtZXRhZGF0YX0gZnJvbSAnQHNpdGUvLmRvY3VzYXVydXMvZG9jdXNhdXJ1cy1wbHVnaW4tY29udGVudC1kb2NzL2RlZmF1bHQvc2l0ZS12ZXJzaW9uZWQtZG9jcy12ZXJzaW9uLTMtMTMtYmx1ZS1ncmVlbi11cGdyYWRlLW1kLWNjZi5qc29uJ1xuZXhwb3J0IGNvbnN0IGFzc2V0cyA9IHtcblxufTtcblxuaW1wb3J0IHtGcmFnbWVudCBhcyBfRnJhZ21lbnQsIGpzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7dXNlTURYQ29tcG9uZW50cyBhcyBfcHJvdmlkZUNvbXBvbmVudHN9IGZyb20gXCJAbWR4LWpzL3JlYWN0XCI7XG5leHBvcnQgY29uc3QgdG9jID0gW3tcbiAgXCJ2YWx1ZVwiOiBcIk92ZXJ2aWV3XCIsXG4gIFwiaWRcIjogXCJvdmVydmlld1wiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlByZXBhcmluZyB0aGUgJnF1b3Q7Z3JlZW4mcXVvdDsgQ2x1c3RlclwiLFxuICBcImlkXCI6IFwicHJlcGFyYXRpb25cIixcbiAgXCJsZXZlbFwiOiAyXG59LCB7XG4gIFwidmFsdWVcIjogXCJJbXBvcnRpbmcgZGVmaW5pdGlvbnNcIixcbiAgXCJpZFwiOiBcImltcG9ydGluZy1kZWZpbml0aW9uc1wiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIkNvbmZpZ3VyaW5nIFF1ZXVlIEZlZGVyYXRpb25cIixcbiAgXCJpZFwiOiBcInNldHVwLWZlZGVyYXRpb25cIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJNaWdyYXRlIENvbnN1bWVycyBPdmVyXCIsXG4gIFwiaWRcIjogXCJtaWdyYXRlLWNvbnN1bWVyc1wiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIkRyYWluIE1lc3NhZ2VzXCIsXG4gIFwiaWRcIjogXCJkcmFpbi1tZXNzYWdlc1wiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIk1pZ3JhdGUgUHJvZHVjZXJzIE92ZXJcIixcbiAgXCJpZFwiOiBcIm1pZ3JhdGUtcHJvZHVjZXJzXCIsXG4gIFwibGV2ZWxcIjogMlxufSwge1xuICBcInZhbHVlXCI6IFwiRGVjb21pc3Npb24gdGhlICZxdW90O2JsdWUmcXVvdDsgQ2x1c3RlclwiLFxuICBcImlkXCI6IFwiZGVjb21pc3Npb24tYmx1ZVwiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlJlYWwtd29ybGQgRXhhbXBsZVwiLFxuICBcImlkXCI6IFwiZXhhbXBsZVwiLFxuICBcImxldmVsXCI6IDJcbn1dO1xuZnVuY3Rpb24gX2NyZWF0ZU1keENvbnRlbnQocHJvcHMpIHtcbiAgY29uc3QgX2NvbXBvbmVudHMgPSB7XG4gICAgYTogXCJhXCIsXG4gICAgY29kZTogXCJjb2RlXCIsXG4gICAgaDE6IFwiaDFcIixcbiAgICBoMjogXCJoMlwiLFxuICAgIGgzOiBcImgzXCIsXG4gICAgaGVhZGVyOiBcImhlYWRlclwiLFxuICAgIGxpOiBcImxpXCIsXG4gICAgcDogXCJwXCIsXG4gICAgcHJlOiBcInByZVwiLFxuICAgIHN0cm9uZzogXCJzdHJvbmdcIixcbiAgICB1bDogXCJ1bFwiLFxuICAgIC4uLl9wcm92aWRlQ29tcG9uZW50cygpLFxuICAgIC4uLnByb3BzLmNvbXBvbmVudHNcbiAgfTtcbiAgcmV0dXJuIF9qc3hzKF9GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5oZWFkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmgxLCB7XG4gICAgICAgIGlkOiBcInVwZ3JhZGluZy1yYWJiaXRtcS11c2luZy1ibHVlLWdyZWVuLWRlcGxveW1lbnQtc3RyYXRlZ3lcIixcbiAgICAgICAgY2hpbGRyZW46IFwiVXBncmFkaW5nIFJhYmJpdE1RIFVzaW5nIEJsdWUtR3JlZW4gRGVwbG95bWVudCBTdHJhdGVneVwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJvdmVydmlld1wiLFxuICAgICAgY2hpbGRyZW46IFwiT3ZlcnZpZXdcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiQmx1ZS1ncmVlbiBkZXBsb3ltZW50IGlzIGEgbWlncmF0aW9uIHRlY2huaXF1ZSB0aGF0IGNhbiBhbHNvIGJlIHVzZWQgYXMgYW4gXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vdXBncmFkZVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJ1cGdyYWRlIHN0cmF0ZWd5XCJcbiAgICAgIH0pLCBcIi5cXHJcXG5UaGUgbWFpbiBpZGVhIGlzIHRvIHNldCB1cCBhIG5ldyBlbnZpcm9ubWVudCAodGhlIFxcXCJncmVlblxcXCIgb25lKSBhbmQgc3dpdGNoIHRvIGl0XFxyXFxud2hlbiBpdCBpcyByZWFkeS4gVGhlIFxcXCJ1cGdyYWRlXFxcIiBpcyBub3QgcGVyZm9ybWVkIFxcXCJpbiBwbGFjZVxcXCIsIHRoZSBhcHBsaWNhdGlvbiBqdXN0IHN3aXRjaFxcclxcbnRvIGEgZGlmZmVyZW50IGVudmlyb25tZW50LCB3aGljaCBtaWdodCBiZSB1c2luZyBhIGRpZmZlcmVudCB2ZXJzaW9uLCBidXQgY2FuXFxyXFxuYWxzbyBkaWZmZXIgaW4gb3RoZXIgYXNwZWN0cy5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJUaGUgc2FtZSBhcHByb2FjaCBjYW4gYmUgdXNlZCB0byBtaWdyYXRlIHRvIGEgbmV3IG9wZXJhdGluZyBzeXN0ZW0gb3IgbmV3IGhhcmR3YXJlLCB3aGlsZSBrZWVwaW5nIHRoZSBzYW1lIHZlcnNpb24gb2YgUmFiYml0TVEsXFxyXFxub3IgdG8gdXBncmFkZSBmcm9tIGEgdmVyc2lvbiB0aGF0IGNhbm5vdCBiZSB1cGdyYWRlZCB0byB0aGUgdGFyZ2V0IHNlcmllcyBkaXJlY3RseSxcXHJcXG5mb3IgZXhhbXBsZSwgZnJvbSAzLjEyLnggdG8gNC4wLnggb3IgZnJvbSBhIDMuMTMueCBjbHVzdGVyIHdpdGggS2hlcHJpIGVuYWJsZWQgdG8gNC4wLnguXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIldoZW4gdGhhdCBtaWdyYXRpb24gaXMgZG9uZSwgdGhlIG9sZCAoXFxcImJsdWVcXFwiKSBjbHVzdGVyIGlzIGRlY29tbWlzc2lvbmVkIChzaHV0IGRvd24sIGRlbGV0ZWQpLlxcclxcblRvIHNpbXBsaWZ5IHRoZSBzd2l0Y2gsIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL2ZlZGVyYXRlZC1xdWV1ZXNcIixcbiAgICAgICAgY2hpbGRyZW46IFwiZmVkZXJhdGVkIHF1ZXVlc1wiXG4gICAgICB9KSwgXCJcXHJcXG5jYW4gYmUgdXNlZCB0byB0cmFuc2ZlciBlbnF1ZXVlZCBtZXNzYWdlcyBmcm9tIHRoZSBcXFwiYmx1ZVxcXCIgdG8gdGhlIFxcXCJncmVlblxcXCIgY2x1c3Rlci5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwicHJlcGFyYXRpb25cIixcbiAgICAgIGNoaWxkcmVuOiBcIlByZXBhcmluZyB0aGUgXFxcImdyZWVuXFxcIiBDbHVzdGVyXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJBZnRlciBkZXBsb3lpbmcgYSBicmFuZCBuZXcgXFxcImdyZWVuXFxcIiBjbHVzdGVyLCB0aGVyZSBhcmUgdHdvIHN0ZXBzIHRvIGZvbGxvdzpcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy51bCwge1xuICAgICAgY2hpbGRyZW46IFtcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImltcG9ydCBkZWZpbml0aW9ucywgZS5nLiBleGNoYW5nZXMsIHF1ZXVlcywgYmluZGluZ3M7XCJcbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImNvbmZpZ3VyZSBmZWRlcmF0aW9uIHRvIGxhdGVyIGRyYWluIG1lc3NhZ2VzLlwiXG4gICAgICB9KSwgXCJcXG5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwiaW1wb3J0aW5nLWRlZmluaXRpb25zXCIsXG4gICAgICBjaGlsZHJlbjogXCJJbXBvcnRpbmcgZGVmaW5pdGlvbnNcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhlIHByb2NlZHVyZSBvZiBkZWZpbml0aW9ucyBleHBvcnQvaW1wb3J0IGlzXFxyXFxuY292ZXJlZCBpbiB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vYmFja3VwI2RlZmluaXRpb25zLWV4cG9ydFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJCYWNrdXAgZ3VpZGVcIlxuICAgICAgfSksIFwiLlxcclxcblRoZSBcXFwiYmx1ZVxcXCIgaXMgdGhlIHNvdXJjZSBjbHVzdGVyIGFuZCB0aGUgXFxcImdyZWVuXFxcIiBvbmUgaXMgdGhlIHRhcmdldC5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwic2V0dXAtZmVkZXJhdGlvblwiLFxuICAgICAgY2hpbGRyZW46IFwiQ29uZmlndXJpbmcgUXVldWUgRmVkZXJhdGlvblwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9mZWRlcmF0aW9uXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIlJhYmJpdE1RIEZlZGVyYXRpb24gcGx1Z2luXCJcbiAgICAgIH0pLCBcIiBtYWtlcyBpdCBlYXN5IHRvIG1vdmUgY29uc3VtZXJzXFxyXFxuZnJvbSBcXFwiYmx1ZVxcXCIgdG8gXFxcImdyZWVuXFxcIiwgd2l0aG91dCBkaXNydXB0aW5nIG1lc3NhZ2UgY29uc3VtcHRpb24gb3IgbG9zaW5nIG1lc3NhZ2VzLlxcclxcblRoZSBwcmluY2lwbGUgb2YgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vZmVkZXJhdGVkLXF1ZXVlc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJmZWRlcmF0ZWQgcXVldWVzXCJcbiAgICAgIH0pLCBcIiBpcyB0aGF0IHRoZSBjb25zdW1lcnNcXHJcXG5ub3cgY29ubmVjdGVkIHRvIFxcXCJncmVlblxcXCIgd2lsbCBnZXQgbWVzc2FnZXMgcHVibGlzaGVkIHRvIFxcXCJibHVlXFxcIiBhcyBsb25nIGFzIHRoZXJlIGFyZVxcclxcbm5vIGNvbnN1bWVycyBpbiBcXFwiYmx1ZVxcXCIgKGxvY2FsIGNvbnN1bWVycyB0YWtlIHByZWNlZGVuY2UpLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkhlcmUgaXMgYW4gZXhhbXBsZSB0byBmZWRlcmF0ZSBhbGwgcXVldWVzLiBJbiB0aGlzIGV4YW1wbGUsIHRoZSBcXFwiYmx1ZVxcXCIgY2x1c3RlclxcclxcbmlzIHRoZSB1cHN0cmVhbSBhbmQgdGhlIFxcXCJncmVlblxcXCIgb25lIGlzIHRoZSBkb3duc3RyZWFtLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiRmlyc3QgZGVmaW5lIHRoZSB1cHN0cmVhbSBvbiBcXFwiZ3JlZW5cXFwiIGFuZCBwb2ludCBpdCB0byBcXFwiYmx1ZVxcXCI6XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWJhc2hcIixcbiAgICAgICAgY2hpbGRyZW46IFwicmFiYml0bXFjdGwgc2V0X3BhcmFtZXRlciBmZWRlcmF0aW9uLXVwc3RyZWFtIGJsdWUgXFxcXFxcclxcbiAgJ3tcXFwidXJpXFxcIjpcXFwiYW1xcDovL25vZGUtaW4tYmx1ZS1jbHVzdGVyXFxcIn0nXFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGVuIGRlZmluZSBhIHBvbGljeSBtYXRjaGluZyBhbGwgcXVldWVzIHdoaWNoIGNvbmZpZ3VyZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImJsdWVcIlxuICAgICAgfSksIFwiIGFzIHRoZSB1cHN0cmVhbTpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWJhc2hcIixcbiAgICAgICAgY2hpbGRyZW46IFwicmFiYml0bXFjdGwgc2V0X3BvbGljeSAtLWFwcGx5LXRvIHF1ZXVlcyBibHVlLWdyZWVuLW1pZ3JhdGlvbiBcXFwiLipcXFwiIFxcXFxcXHJcXG4gICd7XFxcImZlZGVyYXRpb24tdXBzdHJlYW1cXFwiOlxcXCJibHVlXFxcIn0nXFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJQbGVhc2UgcmVhZCB0aGUgZ3VpZGVzIGxpbmtlZCBhYm92ZSBhbmQgdGhlXFxyXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vZmVkZXJhdGlvbi1yZWZlcmVuY2VcIixcbiAgICAgICAgY2hpbGRyZW46IFwiZmVkZXJhdGlvbiByZWZlcmVuY2VcIlxuICAgICAgfSksIFwiIGZvciBmdXJ0aGVyIGRldGFpbHMuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDIsIHtcbiAgICAgIGlkOiBcIm1pZ3JhdGUtY29uc3VtZXJzXCIsXG4gICAgICBjaGlsZHJlbjogXCJNaWdyYXRlIENvbnN1bWVycyBPdmVyXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIllvdSBjYW4gbm93IHN3aXRjaCB5b3VyIGNvbnN1bWVycyB0byB1c2UgdGhlIG5ldyBcXFwiZ3JlZW5cXFwiIGNsdXN0ZXIuIFRvIGFjaGlldmVcXHJcXG50aGF0LCByZWNvbmZpZ3VyZSB5b3VyIGxvYWQgYmFsYW5jZXIgb3IgeW91ciBjb25zdW1lciBhcHBsaWNhdGlvbnMsIGRlcGVuZGluZ1xcclxcbm9uIHlvdXIgc2V0dXAuIFRoZSBVcGdyYWRlIGd1aWRlIGNvdmVycyBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi91cGdyYWRlI3JhYmJpdG1xLXJlc3RhcnQtaGFuZGxpbmdcIixcbiAgICAgICAgY2hpbGRyZW46IFwic29tZSBjbGllbnQgZmVhdHVyZXMgd2hpY2ggZW5hYmxlXFxyXFxudGhlbSB0byBzd2l0Y2ggYmV0d2VlbiBub2Rlc1wiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiQXQgdGhhdCBwb2ludCwgeW91ciBwcm9kdWNlcnMgYXJlIHN0aWxsIHB1Ymxpc2hpbmcgdG8gXFxcImJsdWVcXFwiLCBidXQgdGhhbmtzIHRvXFxyXFxudGhlIGZlZGVyYXRpb24gcGx1Z2luLCBtZXNzYWdlIGFyZSB0cmFuc2ZlcnJlZCB0byBjb25zdW1lcnMgY29ubmVjdGVkIHRvIFxcXCJncmVlblxcXCIuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwiZHJhaW4tbWVzc2FnZXNcIixcbiAgICAgIGNoaWxkcmVuOiBcIkRyYWluIE1lc3NhZ2VzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlRoZSBuZXh0IHN0ZXAgd291bGQgYmUgdG8gc3dpdGNoIHByb2R1Y2VycyB0byBcXFwiZ3JlZW5cXFwiIGFzIHdlbGwuIEhvd2V2ZXIsIHlvdSBtYXlcXHJcXG5zdGlsbCBoYXZlIGEgYmFja2xvZyBvZiBtZXNzYWdlcyBpbiBcXFwiYmx1ZVxcXCIuIFRoZSBmZWRlcmF0aW9uIHBsdWdpbiBkb2Vzbid0IGhlbHBcXHJcXG5oZXJlIGJlY2F1c2UgaXQgZG9lc24ndCBcIiwgX2pzeChfY29tcG9uZW50cy5zdHJvbmcsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibW92ZVwiXG4gICAgICB9KSwgXCIgbWVzc2FnZXMsIGl0IG9ubHkgYWxsb3dzIHJlbW90ZSBjb25zdW1lcnMgdG9cXHJcXG5kZXF1ZXVlIG1lc3NhZ2VzLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiSW4gY2FzZSBvZiBhIGxhcmdlIGJhY2tsb2csIHVzZSB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vc2hvdmVsLWR5bmFtaWNcIixcbiAgICAgICAgY2hpbGRyZW46IFwiU2hvdmVsIHBsdWdpblwiXG4gICAgICB9KSwgXCJcXHJcXG5vbiBcXFwiZ3JlZW5cXFwiIHRvIHJlYWxseSBkcmFpbiBtZXNzYWdlcyBpbiBcXFwiYmx1ZVxcXCIuIFRoaXMgd291bGQgcmVxdWlyZSBkb2luZyBzb21ldGhpbmdcXHJcXG5saWtlIHRoZSBmb2xsb3dpbmcgZm9yIGVhY2ggcXVldWUgd2l0aCBhIGJhY2tsb2c6XCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1iYXNoXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdG1xY3RsIHNldF9wYXJhbWV0ZXIgc2hvdmVsIGRyYWluLWJsdWUgXFxcXFxcclxcbid7XFxcInNyYy1wcm90b2NvbFxcXCI6IFxcXCJhbXFwMDkxXFxcIiwgXFxcInNyYy11cmlcXFwiOiBcXFwiYW1xcDovL25vZGUtaW4tYmx1ZS1jbHVzdGVyXFxcIiwgXFxcXFxcclxcblxcXCJzcmMtcXVldWVcXFwiOiBcXFwicXVldWUxXFxcIiwgXFxcImRlc3QtcHJvdG9jb2xcXFwiOiBcXFwiYW1xcDA5MVxcXCIsIFxcXFxcXHJcXG5cXFwiZGVzdC11cmlcXFwiOiBcXFwiYW1xcDovL1xcXCIsIFxcXCJkZXN0LXF1ZXVlXFxcIjogXFxcInF1ZXVlMVxcXCJ9J1xcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJtaWdyYXRlLXByb2R1Y2Vyc1wiLFxuICAgICAgY2hpbGRyZW46IFwiTWlncmF0ZSBQcm9kdWNlcnMgT3ZlclwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiT25jZSB0aGUgcXVldWVzIGluIFxcXCJibHVlXFxcIiBhcmUgYWxtb3N0IGVtcHR5LCB5b3UgY2FuIHN0b3AgcHJvZHVjZXJzLiBJZiBtZXNzYWdlXFxyXFxub3JkZXJpbmcgaXMgaW1wb3J0YW50IHRvIHlvdSwgeW91IHNob3VsZCBzdGlsbCB3YWl0IGEgYml0IG1vcmUgc28gdGhhdCB0aGVcXHJcXG5mZWRlcmF0aW9uIG9yIHNob3ZlbCBwbHVnaW5zIGZpbmlzaCB0byBkcmFpbiB0aGUgcXVldWVzIG9uIFxcXCJibHVlXFxcIi5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIldoZW4gdGhleSBhcmUgZW1wdHksIHJlY29uZmlndXJlIHlvdXIgcHJvZHVjZXJzIGxpa2UgeW91IGRpZCBmb3IgdGhlIGNvbnN1bWVyc1xcclxcbmFuZCBzdGFydCB0aGVtIGFnYWluLiBBdCB0aGlzIHBvaW50LCBldmVyeXRoaW5nIGlzIG1vdmVkIHRvIHRoZSBcXFwiZ3JlZW5cXFwiIGNsdXN0ZXIuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwiZGVjb21pc3Npb24tYmx1ZVwiLFxuICAgICAgY2hpbGRyZW46IFwiRGVjb21pc3Npb24gdGhlIFxcXCJibHVlXFxcIiBDbHVzdGVyXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJZb3UgYXJlIG5vdyBmcmVlIHRvIHNodXRkb3duIHRoZSBub2RlcyBpbiB0aGUgXFxcImJsdWVcXFwiIGNsdXN0ZXIuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwiZXhhbXBsZVwiLFxuICAgICAgY2hpbGRyZW46IFwiUmVhbC13b3JsZCBFeGFtcGxlXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkRhbiBCYXNrZXR0ZSwgR2FyZXRoIFNtaXRoIGFuZCBDbGF1ZGUgRGV2YXJlbm5lIG9mIFBpdm90YWxcXHJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9jb250ZW50LnBpdm90YWwuaW8vYmxvZy9ibHVlLWdyZWVuLWFwcGxpY2F0aW9uLWRlcGxveW1lbnRzLXdpdGgtcmFiYml0bXFcIixcbiAgICAgICAgY2hpbGRyZW46IFwicHVibGlzaGVkIGFuIGFydGljbGVcIlxuICAgICAgfSksIFwiXFxyXFxuYWJvdXQgdGhpcyBtZXRob2Qgd2hlcmUgcHJvZHVjZXJzIGFuZCBjb25zdW1lcnMgYXJlIENsb3VkRm91bmRyeSBhcHBsaWNhdGlvbnMuXFxyXFxuVGhlIGFydGljbGUgaXMgdmVyeSBkZXRhaWxlZCAgYW5kIHVzZXMgZGlhZ3JhbXMgdG8gZGVzY3JpYmUgdGhlIHByb2NlZHVyZS5cXHJcXG5UaGV5IGFsc28gbWFkZSBhIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVMyb08tdC1FMzhjXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcInZpZGVvIHRvIHNob3cgaXQgaW4gYWN0aW9uXCJcbiAgICAgIH0pLCBcIi5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJUaGlzIGd1aWRlIGlzIGluc3BpcmVkIGJ5IHRoZWlyIGdyZWF0IHdvcmsuXCJcbiAgICB9KV1cbiAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHByb3BzID0ge30pIHtcbiAgY29uc3Qge3dyYXBwZXI6IE1EWExheW91dH0gPSB7XG4gICAgLi4uX3Byb3ZpZGVDb21wb25lbnRzKCksXG4gICAgLi4ucHJvcHMuY29tcG9uZW50c1xuICB9O1xuICByZXR1cm4gTURYTGF5b3V0ID8gX2pzeChNRFhMYXlvdXQsIHtcbiAgICAuLi5wcm9wcyxcbiAgICBjaGlsZHJlbjogX2pzeChfY3JlYXRlTWR4Q29udGVudCwge1xuICAgICAgLi4ucHJvcHNcbiAgICB9KVxuICB9KSA6IF9jcmVhdGVNZHhDb250ZW50KHByb3BzKTtcbn1cblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./versioned_docs/version-3.13/blue-green-upgrade.md\n");

/***/ })

}]);