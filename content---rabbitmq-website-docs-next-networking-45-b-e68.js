"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-docs-next-networking-45-b-e68"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/default/site-docs-networking-md-45b.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"networking","title":"Networking and RabbitMQ","description":"<!--","source":"@site/docs/networking.md","sourceDirName":".","slug":"/networking","permalink":"/rabbitmq-website/docs/next/networking","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/docs/networking.md","tags":[],"version":"current","frontMatter":{"title":"Networking and RabbitMQ"},"sidebar":"docsSidebar","previous":{"title":"Schema Definitions","permalink":"/rabbitmq-website/docs/next/definitions"},"next":{"title":"Net Tick Time","permalink":"/rabbitmq-website/docs/next/nettick"}}');

/***/ }),

/***/ "./docs/networking.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_default_site_docs_networking_md_45b_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_default_site_docs_networking_md_45b_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/default/site-docs-networking-md-45b.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n/* harmony import */ var _theme_Tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n/* harmony import */ var _theme_TabItem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Networking and RabbitMQ'\n};\nconst contentTitle = 'Networking and RabbitMQ';\n\nconst assets = {\n\n};\n\n\n\n\n\nconst toc = [{\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"Network Interfaces for Client Connections\",\n  \"id\": \"interfaces\",\n  \"level\": 2\n}, {\n  \"value\": \"Listening on Dual Stack (Both IPv4 and IPv6) Interfaces\",\n  \"id\": \"dual-stack\",\n  \"level\": 3\n}, {\n  \"value\": \"Listening on IPv6 Interfaces Only\",\n  \"id\": \"single-stack-ipv6\",\n  \"level\": 3\n}, {\n  \"value\": \"Listening on IPv4 Interfaces Only\",\n  \"id\": \"single-stack-ipv4\",\n  \"level\": 3\n}, {\n  \"value\": \"Port Access\",\n  \"id\": \"ports\",\n  \"level\": 2\n}, {\n  \"value\": \"How to Temporarily Stop New Client Connections\",\n  \"id\": \"listener-suspension\",\n  \"level\": 2\n}, {\n  \"value\": \"EPMD and Inter-node Communication\",\n  \"id\": \"epmd\",\n  \"level\": 2\n}, {\n  \"value\": \"What is EPMD and How is It Used?\",\n  \"id\": \"what-is-epmd-and-how-is-it-used\",\n  \"level\": 3\n}, {\n  \"value\": \"EPMD Interface\",\n  \"id\": \"epmd-interface\",\n  \"level\": 3\n}, {\n  \"value\": \"EPMD Port\",\n  \"id\": \"epmd-port\",\n  \"level\": 3\n}, {\n  \"value\": \"Inter-node Communication\",\n  \"id\": \"distribution\",\n  \"level\": 2\n}, {\n  \"value\": \"Inter-node Communication Interface\",\n  \"id\": \"distribution-interface\",\n  \"level\": 3\n}, {\n  \"value\": \"Inter-node Communication Port Range\",\n  \"id\": \"distribution-port-range\",\n  \"level\": 3\n}, {\n  \"value\": \"Inter-node Communication Buffer Size Limit\",\n  \"id\": \"distribution-buffer-limit\",\n  \"level\": 3\n}, {\n  \"value\": \"Using IPv6 for Inter-node Communication (and CLI Tools)\",\n  \"id\": \"distribution-ipv6\",\n  \"level\": 2\n}, {\n  \"value\": \"Inter-node Communication Protocol\",\n  \"id\": \"inter-node-communication-protocol\",\n  \"level\": 3\n}, {\n  \"value\": \"CLI Tools\",\n  \"id\": \"cli-tools\",\n  \"level\": 3\n}, {\n  \"value\": \"epmd and Inter-node Communication\",\n  \"id\": \"epmd-and-inter-node-communication\",\n  \"level\": 3\n}, {\n  \"value\": \"systemd Unit File\",\n  \"id\": \"systemd-unit-file\",\n  \"level\": 4\n}, {\n  \"value\": \"Intermediaries: Proxies and Load Balancers\",\n  \"id\": \"intermediaries\",\n  \"level\": 2\n}, {\n  \"value\": \"Proxy Effects\",\n  \"id\": \"proxy-effects\",\n  \"level\": 3\n}, {\n  \"value\": \"Proxy Protocol\",\n  \"id\": \"proxy-protocol\",\n  \"level\": 3\n}, {\n  \"value\": \"TLS (SSL) Support\",\n  \"id\": \"tls-support\",\n  \"level\": 2\n}, {\n  \"value\": \"Tuning for Throughput\",\n  \"id\": \"tuning-for-throughput\",\n  \"level\": 2\n}, {\n  \"value\": \"TCP Buffer Size\",\n  \"id\": \"tuning-for-throughput-tcp-buffers\",\n  \"level\": 3\n}, {\n  \"value\": \"Tuning for a Large Number of Connections\",\n  \"id\": \"tuning-for-large-number-of-connections\",\n  \"level\": 2\n}, {\n  \"value\": \"Open File Handle Limit\",\n  \"id\": \"open-file-handle-limit\",\n  \"level\": 3\n}, {\n  \"value\": \"How to Override the Limit\",\n  \"id\": \"how-to-override-the-limit\",\n  \"level\": 4\n}, {\n  \"value\": \"The ERL_MAX_PORTS Environment Variable\",\n  \"id\": \"erl-max-ports\",\n  \"level\": 4\n}, {\n  \"value\": \"Basic Estimates of the Necessary Limit\",\n  \"id\": \"basic-estimates-of-the-necessary-limit\",\n  \"level\": 4\n}, {\n  \"value\": \"Per Connection Memory Consumption: TCP Buffer Size\",\n  \"id\": \"tuning-for-large-number-of-connections-tcp-buffer-size\",\n  \"level\": 3\n}, {\n  \"value\": \"Reducing CPU Footprint of Stats Emission\",\n  \"id\": \"tuning-for-large-number-of-connections-cpu-footprint\",\n  \"level\": 3\n}, {\n  \"value\": \"Limiting Number of Channels on a Connection\",\n  \"id\": \"tuning-for-large-number-of-connections-channel-max\",\n  \"level\": 3\n}, {\n  \"value\": \"Nagle&#39;s Algorithm (&quot;nodelay&quot;)\",\n  \"id\": \"tuning-for-large-number-of-connections-nodelay\",\n  \"level\": 3\n}, {\n  \"value\": \"Erlang VM I/O Thread Pool Tuning\",\n  \"id\": \"tuning-for-large-number-of-connections-async-thread-pool\",\n  \"level\": 3\n}, {\n  \"value\": \"Connection Backlog\",\n  \"id\": \"tuning-for-large-number-of-connections-connection-backlog\",\n  \"level\": 3\n}, {\n  \"value\": \"Dealing with High Connection Churn\",\n  \"id\": \"dealing-with-high-connection-churn\",\n  \"level\": 2\n}, {\n  \"value\": \"Why is High Connection Churn Problematic?\",\n  \"id\": \"dealing-with-high-connection-churn-overview\",\n  \"level\": 3\n}, {\n  \"value\": \"Inspecting Connections and Gathering Evidence\",\n  \"id\": \"dealing-with-high-connection-churn-troubleshooting\",\n  \"level\": 3\n}, {\n  \"value\": \"The Role of TCP Keepalives\",\n  \"id\": \"dealing-with-high-connection-churn-tcp-keepalives\",\n  \"level\": 3\n}, {\n  \"value\": \"Reducing Amount of Time Spent in TIME_WAIT\",\n  \"id\": \"dealing-with-high-connection-churn-time-wait\",\n  \"level\": 3\n}, {\n  \"value\": \"OS Level Tuning\",\n  \"id\": \"os-tuning\",\n  \"level\": 2\n}, {\n  \"value\": \"Key Relevant Kernel Options\",\n  \"id\": \"key-relevant-kernel-options\",\n  \"level\": 3\n}, {\n  \"value\": \"sysctl-based Configuration\",\n  \"id\": \"sysctl-based-configuration\",\n  \"level\": 3\n}, {\n  \"value\": \"TCP Socket Options\",\n  \"id\": \"socket-gen-tcp-options\",\n  \"level\": 2\n}, {\n  \"value\": \"Common Options\",\n  \"id\": \"socket-gen-tcp-options-common\",\n  \"level\": 3\n}, {\n  \"value\": \"Defaults\",\n  \"id\": \"socket-gen-tcp-options-defaults\",\n  \"level\": 3\n}, {\n  \"value\": \"Heartbeats\",\n  \"id\": \"heartbeats\",\n  \"level\": 2\n}, {\n  \"value\": \"Net Tick Time\",\n  \"id\": \"nettick\",\n  \"level\": 2\n}, {\n  \"value\": \"TCP Keepalives\",\n  \"id\": \"tcp-keepalives\",\n  \"level\": 2\n}, {\n  \"value\": \"Connection Handshake Timeout\",\n  \"id\": \"handshake-timeout\",\n  \"level\": 2\n}, {\n  \"value\": \"TLS Handshake\",\n  \"id\": \"tls-handshake\",\n  \"level\": 3\n}, {\n  \"value\": \"Hostname Resolution and DNS\",\n  \"id\": \"dns\",\n  \"level\": 2\n}, {\n  \"value\": \"Performed by Client Libraries\",\n  \"id\": \"dns-resolution-by-clients\",\n  \"level\": 3\n}, {\n  \"value\": \"Short and Fully-qualified RabbitMQ Node Names\",\n  \"id\": \"dns-resolution-by-nodes\",\n  \"level\": 3\n}, {\n  \"value\": \"Reverse DNS Lookups\",\n  \"id\": \"dns-reverse-dns-lookups\",\n  \"level\": 3\n}, {\n  \"value\": \"The inetrc File\",\n  \"id\": \"the-inetrc-file\",\n  \"level\": 3\n}, {\n  \"value\": \"Verify Hostname Resolution\",\n  \"id\": \"dns-verify-resolution\",\n  \"level\": 3\n}, {\n  \"value\": \"Connection Event Logging\",\n  \"id\": \"logging\",\n  \"level\": 2\n}, {\n  \"value\": \"Troubleshooting Network Connectivity\",\n  \"id\": \"troubleshooting-where-to-start\",\n  \"level\": 2\n}, {\n  \"value\": \"MacOS Application Firewall\",\n  \"id\": \"firewalls-mac-os\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"networking-and-rabbitmq\",\n        children: \"Networking and RabbitMQ\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Clients communicate with RabbitMQ over the network. All\\r\\nprotocols supported by the broker are TCP-based. Both\\r\\nRabbitMQ and the operating system provide a number\\r\\nof knobs that can be tweaked. Some of them are directly\\r\\nrelated to TCP and IP operations, others have to do with\\r\\napplication-level protocols such as TLS. This guide covers\\r\\nmultiple topics related to networking in the context of\\r\\nRabbitMQ.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Some tuneable parameters discussed are OS-specific. This guide focuses on Linux when\\r\\ncovering OS-specific subjects, as it is the most common\\r\\nplatform RabbitMQ is deployed on.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Networking is a very broad topic. Therefore, this guide covers multiple topics,\\r\\nsuch as\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#interfaces\",\n          children: \"Interfaces\"\n        }), \" the node listens on for client connections\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"IP version preferences: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#dual-stack\",\n          children: \"dual stack\"\n        }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#single-stack-ipv6\",\n          children: \"IPv6-only\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#single-stack-ipv4\",\n          children: \"IPv4-only\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#ports\",\n          children: \"Ports\"\n        }), \" used by clients, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#distribution-port-range\",\n          children: \"inter-node traffic\"\n        }), \" in clusters and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./cli\",\n          children: \"CLI tools\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#distribution-ipv6\",\n          children: \"IPv6 support\"\n        }), \" for inter-node traffic\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#tls-support\",\n          children: \"TLS\"\n        }), \" for client connections\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Tuning for a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#tuning-for-large-number-of-connections\",\n          children: \"large number of concurrent connections\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#dealing-with-high-connection-churn\",\n          children: \"High client connection churn\"\n        }), \" scenarios and resource exhaustion\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"TCP buffer size (affects \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#tuning-for-throughput-tcp-buffers\",\n          children: \"throughput\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#tuning-for-large-number-of-connections-tcp-buffer-size\",\n          children: \"how much memory is used per connection\"\n        }), \")\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#dns\",\n          children: \"Hostname resolution\"\n        }), \"-related topics such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#dns-reverse-dns-lookups\",\n          children: \"reverse DNS lookups\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#distribution\",\n          children: \"Inter-node communication\"\n        }), \" interface and port\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#epmd\",\n          children: \"epmd\"\n        }), \" and what role it plays in inter-node communication\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"How to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#listener-suspension\",\n          children: \"suspend and resume listeners\"\n        }), \" to temporarily stop and resume new client connections\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Other TCP socket settings\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#proxy-protocol\",\n          children: \"Proxy protocol\"\n        }), \" support for client connections\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Kernel TCP settings and limits (e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#tcp-keepalives\",\n          children: \"TCP keepalives\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#open-file-handle-limit\",\n          children: \"open file handle limit\"\n        }), \")\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"How to allow Erlang runtime to accept inbound connections\\r\\nwhen \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#firewalls-mac-os\",\n          children: \"MacOS Application Firewall\"\n        }), \" is enabled\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#os-tuning\",\n          children: \"OS-level tuning\"\n        }), \" related to networking\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Except for OS kernel parameters and DNS, all RabbitMQ settings\\r\\nare \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure\",\n        children: \"configured via RabbitMQ configuration file(s)\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Networking is a broad topic. There are many configuration options\\r\\nthat can have positive or negative effect on certain workloads.\\r\\nAs such, this guide does not try to be a complete reference but rather\\r\\noffer an index of key tunable parameters and serve as a starting\\r\\npoint.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In addition, this guide touches on a few topics closely related to networking,\\r\\nsuch as\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Hostnames, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#dns\",\n          children: \"hostname resolution and DNS\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#logging\",\n          children: \"connection lifecycle logging\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#heartbeats\",\n          children: \"Heartbeats\"\n        }), \" (a.k.a. keepalives)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#intermediaries\",\n          children: \"proxies and load balancers\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.vmware.com/en/VMware-RabbitMQ-for-Kubernetes/index.html\",\n        children: \"VMware Tanzu RabbitMQ\"\n      }), \" commercial offerings provide an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.vmware.com/en/VMware-Tanzu-RabbitMQ-for-Kubernetes/3.13/tanzu-rabbitmq-kubernetes/clustering-compression-rabbitmq.html\",\n        children: \"Intra-cluster Compression\"\n      }), \" feature. The previous documentation link goes to the Tanzu RabbitMQ for Kubernetes commercial offering.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A methodology for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./troubleshooting-networking\",\n        children: \"troubleshooting of networking-related issues\"\n      }), \"\\r\\nis covered in a separate guide.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"interfaces\",\n      children: \"Network Interfaces for Client Connections\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For RabbitMQ to accept client connections, it needs to bind to one or more\\r\\ninterfaces and listen on (protocol-specific) ports. One such interface/port pair is called a listener\\r\\nin RabbitMQ parlance. Listeners are configured using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"listeners.tcp.*\"\n      }), \" configuration option(s).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"TCP listeners configure both an interface and port. The following example\\r\\ndemonstrates how to configure AMQP 0-9-1 and AMQP 1.0 listener to use a specific IP and the standard port:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.tcp.1 = 192.168.1.99:5672\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"By default, RabbitMQ will listen on port 5672 on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"all available interfaces\"\n      }), \". It is possible to\\r\\nlimit client connections to a subset of the interfaces or even just one, for example, IPv6-only\\r\\ninterfaces. The following few sections demonstrate how to do it.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dual-stack\",\n      children: \"Listening on Dual Stack (Both IPv4 and IPv6) Interfaces\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The following example demonstrates how to configure RabbitMQ\\r\\nto listen on localhost only for both IPv4 and IPv6:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.tcp.1 = 127.0.0.1:5672\\r\\nlisteners.tcp.2 = ::1:5672\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"With modern Linux kernels and Windows releases,\\r\\nwhen a port is specified and RabbitMQ is configured to\\r\\nlisten on all IPv6 addresses but IPv4 is not deactivated\\r\\nexplicitly, IPv4 address will be included, so\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.tcp.1 = :::5672\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"is equivalent to\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.tcp.1 = 0.0.0.0:5672\\r\\nlisteners.tcp.2 = :::5672\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"single-stack-ipv6\",\n      children: \"Listening on IPv6 Interfaces Only\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In this example RabbitMQ will listen on an IPv6 interface only:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.tcp.1 = fe80::2acf:e9ff:fe17:f97b:5672\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In IPv6-only environments the node must also be configured\\r\\nto \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#distribution-ipv6\",\n        children: \"use IPv6 for inter-node communication and CLI tool connections\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"single-stack-ipv4\",\n      children: \"Listening on IPv4 Interfaces Only\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In this example RabbitMQ will listen on an IPv4 interface with specified IP address only:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"listeners.tcp.1 = 192.168.1.99:5672 # Plain AMQP\\r\\nlisteners.ssl.1 = 192.168.1.99:5671 # TLS (AMQPS)\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to deactivate non-TLS connections by deactivating all regular TCP listeners.\\r\\nOnly \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl\",\n        children: \"TLS-enabled\"\n      }), \" clients will be able to connect:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# deactivates non-TLS listeners, only TLS-enabled (activated) clients will be able to connect\\r\\nlisteners.tcp = none\\r\\n\\r\\nlisteners.ssl.default = 5671\\r\\n\\r\\nssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile   = /path/to/server_certificate.pem\\r\\nssl_options.keyfile    = /path/to/server_key.pem\\r\\nssl_options.verify     = verify_peer\\r\\nssl_options.fail_if_no_peer_cert = false\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"ports\",\n      children: \"Port Access\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ nodes bind to ports (open server TCP sockets) in order to accept client and CLI tool connections.\\r\\nOther processes and tools such as SELinux may prevent RabbitMQ from binding to a port. When that happens,\\r\\nthe node will fail to start.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"CLI tools, client libraries and RabbitMQ nodes also open connections (client TCP sockets).\\r\\nFirewalls can prevent nodes and CLI tools from communicating with each other.\\r\\nMake sure the following ports are accessible:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"4369: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"http://erlang.org/doc/man/epmd.html\",\n          children: \"epmd\"\n        }), \", a peer discovery service used by RabbitMQ nodes and CLI tools\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"5672, 5671: used by AMQP 0-9-1 and AMQP 1.0 clients without and with TLS\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"5552, 5551: used by the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./streams\",\n          children: \"RabbitMQ Stream protocol\"\n        }), \" clients without and with TLS\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"6000 through 6500: used for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./streams\",\n          children: \"stream\"\n        }), \" replication\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"25672: used for inter-node and CLI tools communication (Erlang distribution server port)\\r\\nand is allocated from a dynamic range (limited to a single port by default,\\r\\ncomputed as AMQP port + 20000). Unless external connections on these ports are really necessary (e.g.\\r\\nthe cluster uses \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./federation\",\n          children: \"federation\"\n        }), \" or CLI tools are used on machines outside the subnet),\\r\\nthese ports should not be publicly exposed\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"35672-35682: this client TCP port range is used by CLI tools for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#distribution\",\n          children: \"communication with nodes\"\n        }), \".\\r\\nBy default, the range computed as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"(server distribution port + 10000)\"\n        }), \" through \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"(server distribution port + 10010)\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"15672, 15671: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./management\",\n          children: \"HTTP API\"\n        }), \" clients, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./management\",\n          children: \"management UI\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./management-cli\",\n          children: \"rabbitmqadmin\"\n        }), \", without and with TLS\\r\\n(only if the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./management\",\n          children: \"management plugin\"\n        }), \" is enabled)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"61613, 61614: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://stomp.github.io/stomp-specification-1.2.html\",\n          children: \"STOMP clients\"\n        }), \" without and with TLS (only if the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./stomp\",\n          children: \"STOMP plugin\"\n        }), \" is enabled)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"1883, 8883: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"http://mqtt.org/\",\n          children: \"MQTT clients\"\n        }), \" without and with TLS, if the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./mqtt\",\n          children: \"MQTT plugin\"\n        }), \" is enabled\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"15674: STOMP-over-WebSockets clients (only if the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./web-stomp\",\n          children: \"Web STOMP plugin\"\n        }), \" is enabled)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"15675: MQTT-over-WebSockets clients (only if the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./web-mqtt\",\n          children: \"Web MQTT plugin\"\n        }), \" is enabled)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"15692, 15691: Prometheus metrics, without and with TLS (only if the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./prometheus\",\n          children: \"Prometheus plugin\"\n        }), \" is enabled)\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure\",\n        children: \"configure RabbitMQ\"\n      }), \"\\r\\nto use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./networking\",\n        children: \"different ports and specific network interfaces\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"listener-suspension\",\n      children: \"How to Temporarily Stop New Client Connections\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Client connection listeners can be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"suspended\"\n      }), \" to prevent new client\\r\\nconnections from being accepted. Existing connections will not be affected in any way.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This can be useful during node operations and is one of the steps performed\\r\\nwhen a node is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./upgrade#maintenance-mode\",\n        children: \"put into maintenance mode\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To suspend all listeners on a node and prevent new client connections to it, use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl suspend_listeners\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl suspend_listeners\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As all other CLI commands, this command can be invoked against an arbitrary node (including remote ones)\\r\\nusing the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"-n\"\n      }), \" switch:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# suspends listeners on node rabbit@node2.cluster.rabbitmq.svc: it won't accept any new client connections\\r\\nrabbitmqctl suspend_listeners -n rabbit@node2.cluster.rabbitmq.svc\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To resume all listeners on a node and make it accept new client connections again, use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl resume_listeners\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl resume_listeners\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# resumes listeners on node rabbit@node2.cluster.rabbitmq.svc: it will accept new client connections again\\r\\nrabbitmqctl resume_listeners -n rabbit@node2.cluster.rabbitmq.svc\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Both operations will leave \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./logging\",\n        children: \"log entries\"\n      }), \" in the node's log.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"epmd\",\n      children: \"EPMD and Inter-node Communication\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"what-is-epmd-and-how-is-it-used\",\n      children: \"What is EPMD and How is It Used?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://www.erlang.org/doc/man/epmd.html\",\n        children: \"epmd\"\n      }), \" (for Erlang Port Mapping Daemon)\\r\\nis a small additional daemon that runs alongside every RabbitMQ node and is used by\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./runtime\",\n        children: \"runtime\"\n      }), \" to discover what port a particular node listens on for\\r\\ninter-node communication. The port is then used by peer nodes and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: \"CLI tools\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When a node or CLI tool needs to contact node \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@hostname2\"\n      }), \" it will do the following:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Resolve \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"hostname2\"\n        }), \" to an IPv4 or IPv6 address using the standard OS resolver or a custom one specified in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"http://erlang.org/doc/apps/erts/inet_cfg.html\",\n          children: \"inetrc file\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Contact \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"epmd\"\n        }), \" running on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"hostname2\"\n        }), \" using the above address\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Ask \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"epmd\"\n        }), \" for the port used by node \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbit\"\n        }), \" on it\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Connect to the node using the resolved IP address and the discovered port\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Proceed with communication\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"epmd-interface\",\n      children: \"EPMD Interface\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd\"\n      }), \" will listen on all interfaces by default. It can\\r\\nbe limited to a number of interfaces using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ERL_EPMD_ADDRESS\"\n      }), \"\\r\\nenvironment variable:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# makes epmd listen on loopback IPv6 and IPv4 interfaces\\r\\nexport ERL_EPMD_ADDRESS=\\\"::1\\\"\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ERL_EPMD_ADDRESS\"\n      }), \" is changed, both RabbitMQ node and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd\"\n      }), \" on the host must be stopped.\\r\\nFor \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd\"\n      }), \", use\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# Stops local epmd process.\\r\\n# Use after shutting down RabbitMQ.\\r\\nepmd -kill\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"to terminate it. The service will be started by the local RabbitMQ node automatically on boot.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The loopback interface will be implicitly added\\r\\nto that list (in other words, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd\"\n      }), \" will always bind to the loopback interface).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"epmd-port\",\n      children: \"EPMD Port\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The default epmd port is 4369, but this can be changed using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ERL_EPMD_PORT\"\n      }), \" environment\\r\\nvariable:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# makes epmd bind to port 4369\\r\\nexport ERL_EPMD_PORT=\\\"4369\\\"\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"All hosts in a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering\",\n        children: \"cluster\"\n      }), \" must use the same port.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ERL_EPMD_PORT\"\n      }), \" is changed, both RabbitMQ node and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd\"\n      }), \" on the host must be stopped.\\r\\nFor \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd\"\n      }), \", use\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# Stops local epmd process.\\r\\n# Use after shutting down RabbitMQ.\\r\\nepmd -kill\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"to terminate it. The service will be started by the local RabbitMQ node automatically on boot.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"distribution\",\n      children: \"Inter-node Communication\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ nodes will listen for inbound connections from peers and CLI tools.\\r\\nIt is important to only expose these ports to the hosts and subnets that\\r\\nrun other cluster nodes, or where CLI tools are used, and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://erlef.org/blog/eef/epmd-public-exposure\",\n        children: \"not exposed to the public Internet\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"distribution-interface\",\n      children: \"Inter-node Communication Interface\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In order to configure the RabbitMQ inter-node communication listener to listen only\\r\\non a specific address, use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"distribution.listener.interface\"\n      }), \" in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbitmq.conf\"\n        })\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# Instructs the node to only listen for inter-node communication connections on a local interface.\\r\\n# This affects both connections from cluster peers and CLI tools.\\r\\ndistribution.listener.interface = 192.168.10.84\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# Limit inter-node communication listener to a local interface (using an IPv4 address).\\r\\n#\\r\\n# This particular configuration only makes sense for single-node clusters.\\r\\n# For multi-node clusters, nodes must listen on an \\\"internal network-local\\\" interface\\r\\n# that would allow cluster peers to connect but not be exposed to the public Internet\\r\\ndistribution.listener.interface = 127.0.0.1\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"# Limit inter-node communication listener to a local interface (using an IPv6 address).\\r\\n#\\r\\n# This particular configuration only makes sense for single-node clusters.\\r\\n# For multi-node clusters, nodes must listen on an \\\"internal network-local\\\" interface\\r\\n# that would allow cluster peers to connect but not be exposed to the public Internet\\r\\ndistribution.listener.interface = ::1\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"distribution-port-range\",\n      children: \"Inter-node Communication Port Range\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ nodes will use a port from a certain range known as the inter-node communication port range.\\r\\nThe same port is used by CLI tools when they need to contact the node.\\r\\nThe range can be modified.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ nodes communicate with CLI tools and other nodes using a port known as\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"distribution port\"\n      }), \". It is dynamically allocated from a range of values.\\r\\nFor RabbitMQ, the default range is limited to a single value computed as\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_NODE_PORT\"\n      }), \" (AMQP 0-9-1 and AMQP 1.0 port) + 20000, which results\\r\\nin using port 25672. This single port can be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure\",\n        children: \"configured\"\n      }), \"\\r\\nusing the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_DIST_PORT\"\n      }), \" environment variable.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"info\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"When configuring firewall rules, remote connections\\r\\non the inter-node communication port must be allowed from every cluster node's IP address and every host where\\r\\nCLI tools might be used\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: \"command line tools\"\n      }), \" also use a range of ports. The default range is computed by taking the RabbitMQ\\r\\ndistribution port value and adding 10000 to it. The next 10 ports are also part\\r\\nof this range. Thus, by default, this range is 35672 through 35682. This range\\r\\ncan be configured using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_CTL_DIST_PORT_MIN\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_CTL_DIST_PORT_MAX\"\n      }), \" environment variables.\\r\\nNote that limiting the range to a single port will prevent more than one CLI\\r\\ntool from running concurrently on the same host and may affect CLI commands\\r\\nthat require parallel connections to multiple cluster nodes. A port range of 10\\r\\nis therefore a recommended value.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When configuring firewall rules, remote connections\\r\\non the inter-node communication port must be allowed from every cluster node's IP address and every host where\\r\\nCLI tools might be used. epmd port must be open for CLI tools and clustering\\r\\nto function.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"On Windows, the following settings have no effect when RabbitMQ runs as a service.\\r\\nPlease see \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./windows-configuration\",\n        children: \"Windows Configuration\"\n      }), \" for details.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The range used by RabbitMQ can also be controlled via two configuration keys\\r\\nin \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq.conf\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"inet_dist_listen_min\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"inet_dist_listen_max\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"They define the range's lower and upper bounds, inclusive.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The example below uses a range with a single port but a value different from default:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"inet_dist_listen_min = 33672\\r\\ninet_dist_listen_max = 33672\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To verify what port is used by a node for inter-node and CLI tool communication,\\r\\nrun\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"epmd -names\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"on that node's host. It will produce output that looks like this:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"epmd: up and running on port 4369 with data:\\r\\nname rabbit at port 25672\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"distribution-buffer-limit\",\n      children: \"Inter-node Communication Buffer Size Limit\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Inter-node connections use a buffer for data pending to be sent. Temporary\\r\\nthrottling on inter-node traffic is applied when the buffer is at max allowed\\r\\ncapacity. The limit is controlled via the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_DISTRIBUTION_BUFFER_SIZE\"\n      }), \"\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#supported-environment-variables\",\n        children: \"environment variable\"\n      }), \"\\r\\nin kilobytes. Default value is 128 MB (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"128000\"\n      }), \" kB).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In clusters with heavy inter-node traffic increasing this value may\\r\\nhave a positive effect on throughput. Values lower than 64 MB are not\\r\\nrecommended.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"distribution-ipv6\",\n      children: \"Using IPv6 for Inter-node Communication (and CLI Tools)\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In addition to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#single-stack-ipv6\",\n        children: \"exclusive IPv6 use for client connections\"\n      }), \" for client connections,\\r\\na node can also be configured to use IPv6 exclusively for inter-node and CLI tool connectivity.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This involves configuration in a few places:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Inter-node communication protocol setting in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./runtime\",\n          children: \"runtime\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Configuring IPv6 to be used by CLI tools\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#epmd\",\n          children: \"epmd\"\n        }), \", a service involved in inter-node communication (discovery)\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is possible to use IPv6 for inter-node and CLI tool communication but use IPv4 for client\\r\\nconnections or vice versa. Such configurations can be hard to troubleshoot and reason about,\\r\\nso using the same IP version (e.g. IPv6) across the board or a dual stack setup is recommended.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"inter-node-communication-protocol\",\n      children: \"Inter-node Communication Protocol\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To instruct the runtime to use IPv6 for inter-node communication and related tasks, use\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS\"\n      }), \" environment variable to pass a couple of flags:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# these flags will be used by RabbitMQ nodes\\r\\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\\\"-kernel inetrc '/etc/rabbitmq/erl_inetrc' -proto_dist inet6_tcp\\\"\\r\\n# these flags will be used by CLI tools\\r\\nRABBITMQ_CTL_ERL_ARGS=\\\"-proto_dist inet6_tcp\\\"\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS\"\n      }), \" above uses two closely related flags:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"-kernel inetrc\"\n        }), \" to configure a path to an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"http://erlang.org/doc/apps/erts/inet_cfg.html\",\n          children: \"inetrc file\"\n        }), \"\\r\\nthat controls hostname resolution\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"-proto_dist inet6_tcp\"\n        }), \" to tell the node to use IPv6 when connecting to peer nodes and\\r\\nlistening for CLI tool connections\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"erl_inetrc\"\n      }), \" file at \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/etc/rabbitmq/erl_inetrc\"\n      }), \" will control hostname resolution settings.\\r\\nFor IPv6-only environments, it must include the following line:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"%% Tells DNS client on RabbitMQ nodes and CLI tools to resolve hostnames to IPv6 addresses.\\r\\n%% The trailing dot is not optional.\\r\\n{inet6,true}.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"cli-tools\",\n      children: \"CLI Tools\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"With CLI tools, use the same runtime flag as used for RabbitMQ nodes above but provide it\\r\\nusing a different environment variable, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_CTL_ERL_ARGS\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"RABBITMQ_CTL_ERL_ARGS=\\\"-proto_dist inet6_tcp\\\"\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that once instructed to use IPv6, CLI tools won't be able to connect to nodes that\\r\\ndo not use IPv6 for inter-node communication. This involves the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd\"\n      }), \" service running on the same\\r\\nhost as target RabbitMQ node.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"epmd-and-inter-node-communication\",\n      children: \"epmd and Inter-node Communication\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd\"\n      }), \" is a small helper daemon that runs next to a RabbitMQ node and lets its peers and CLI\\r\\ntools discover what port they should use to communicate to it. It can be configured to bind\\r\\nto a specific interface, much like RabbitMQ listeners. This is done using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ERL_EPMD_ADDRESS\"\n      }), \"\\r\\nenvironment variable:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# instructs epmd to only listen on a local interface\\r\\nexport ERL_EPMD_ADDRESS=\\\"::1\\\"\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"By default RabbitMQ nodes will use an IPv4 interface when connecting to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd\"\n      }), \".\\r\\nNodes that are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#distribution-ipv6\",\n        children: \"configured to use IPv6\"\n      }), \" for inter-node communication\\r\\nwill also use IPv6 to connect to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd\"\n      }), \" is configured to use IPv6 exclusively but RabbitMQ nodes are not,\\r\\nRabbitMQ will log an error message similar to this:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"Protocol 'inet_tcp': register/listen error: econnrefused\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In order to configure the RabbitMQ inter-node communication listener to listen only\\r\\non a specific address, use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"distribution.listener.interface\"\n      }), \" in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbitmq.conf\"\n        })\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# Instructs the node to only listen for inter-node communication connections on a local interface.\\r\\n# This affects both connections from cluster peers and CLI tools.\\r\\n#\\r\\n# This particular configuration only makes sense for single-node clusters.\\r\\n# For multi-node clusters, nodes must listen on an \\\"internal network-local\\\" interface\\r\\n# that would allow cluster peers to connect but not be exposed to the public Internet\\r\\ndistribution.listener.interface = ::1\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"systemd-unit-file\",\n      children: \"systemd Unit File\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"On distributions that use systemd, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd.socket\"\n      }), \" service controls network settings of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd\"\n      }), \".\\r\\nIt is possible to configure \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"epmd\"\n      }), \" to only listen on IPv6 interfaces:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"ListenStream=[::1]:4369\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The service will need reloading after its unit file has been updated:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"systemctl daemon-reload\\r\\nsystemctl restart epmd.socket epmd.service\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"intermediaries\",\n      children: \"Intermediaries: Proxies and Load Balancers\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Proxies and load balancers are fairly commonly used to distribute client connections\\r\\nbetween \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering\",\n        children: \"cluster nodes\"\n      }), \". Proxies can also be useful\\r\\nto make it possible for clients to access RabbitMQ nodes without exposing them publicly.\\r\\nIntermediaries can also have side effects on connections.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"proxy-effects\",\n      children: \"Proxy Effects\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Proxies and load balancers introduce an extra network hop (or even multiple ones)\\r\\nbetween client and its target node. Intermediaries also can become a network\\r\\ncontention point: their throughput will then become a limiting factor for the entire system.\\r\\nNetwork bandwidth overprovisioning and throughput monitoring for proxies and load balancers\\r\\nare therefore very important.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Intermediaries also may terminate \\\"idle\\\" TCP connections\\r\\nwhen there's no activity on them for a certain period of\\r\\ntime. Most of the time it is not desirable. Such events will result in\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./logging#connection-lifecycle-events\",\n        children: \"abrupt connection closure log messages\"\n      }), \"\\r\\non the server end and I/O exceptions on the client end.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./heartbeats\",\n        children: \"heartbeats\"\n      }), \" are enabled on a connection, it results in\\r\\nperiodic light network traffic. Therefore heartbeats have a side effect\\r\\nof guarding client connections that can go idle for periods of\\r\\ntime against premature closure by proxies and load balancers.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Heartbeat timeouts from 10 to 30 seconds will produce periodic\\r\\nnetwork traffic often enough (roughly every 5 to 15 seconds)\\r\\nto satisfy defaults of most proxy tools and load balancers.\\r\\nValues that are too low will produce false positives.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"proxy-protocol\",\n      children: \"Proxy Protocol\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ supports \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://www.haproxy.org/download/3.1/doc/proxy-protocol.txt\",\n        children: \"Proxy protocol\"\n      }), \"\\r\\nversions 1 (text header format) and 2 (binary header format).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The protocol makes servers such as RabbitMQ aware of the actual client IP address\\r\\nwhen connections go over a proxy (e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://cbonte.github.io/haproxy-dconv/1.8/configuration.html#send-proxy\",\n        children: \"HAproxy\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#proxy-protocol\",\n        children: \"AWS ELB\"\n      }), \").\\r\\nThis makes it easier for the operator to inspect connection origins in the management UI\\r\\nor CLI tools.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The protocol spec dictates that either it must be applied to all connections or none of them for\\r\\nsecurity reasons, this feature is turned off by default and needs to be turned on\\r\\nfor individual protocols supported by RabbitMQ. To turn it on for AMQP 0-9-1 and AMQP 1.0 clients:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"proxy_protocol = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When proxy protocol is turned on, clients won't be able to connect to RabbitMQ directly unless\\r\\nthey themselves support the protocol.\\r\\nTherefore, when this option is turned on, all client connections must go through\\r\\na proxy that also supports the protocol and is configured to send a Proxy protocol header. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://www.haproxy.org/download/3.1/doc/proxy-protocol.txt\",\n        children: \"HAproxy\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#proxy-protocol\",\n        children: \"AWS ELB\"\n      }), \" documentation\\r\\nexplains how to do it.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When proxy protocol is turned on and connections go through a compatible proxy, no action\\r\\nor modifications are required from client libraries. The communication is entirely\\r\\ntransparent to them.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./stomp#proxy-protocol\",\n        children: \"STOMP\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./mqtt#proxy-protocol\",\n        children: \"MQTT\"\n      }), \",\\r\\nas well as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./web-stomp#proxy-protocol\",\n        children: \"Web STOMP\"\n      }), \" and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./web-mqtt#proxy-protocol\",\n        children: \"Web MQTT\"\n      }), \"\\r\\nhave their own settings that enable support for the proxy protocol.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"tls-support\",\n      children: \"TLS (SSL) Support\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to encrypt connections using TLS with RabbitMQ. Authentication\\r\\nusing peer certificates is also possible. Please refer to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl\",\n        children: \"TLS/SSL guide\"\n      }), \"\\r\\nfor more information.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"tuning-for-throughput\",\n      children: \"Tuning for Throughput\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n      id: \"tuning-for-throughput-intro\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Tuning for throughput is a common goal. Improvements can be achieved by\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"important\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"Starting with RabbitMQ 4.1, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://www.rabbitmq.com/blog/2025/04/08/4.1-performance-improvements\",\n          children: \"connections automatically adjust their TCP buffer size\"\n        }), \"\\r\\nbased on message rates and sizes.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Ensuring Nagle's algorithm is turned off\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Turning on optional TCP features and extensions\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Increase the (initial) connection TCP buffer size\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For the latter two, see the OS-level tuning section below.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that tuning for throughput will involve trade-offs. For example, increasing TCP buffer\\r\\nsizes will increase the amount of RAM used by every connection, which can be a significant\\r\\ntotal server RAM use increase.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tuning-for-throughput-tcp-buffers\",\n      children: \"TCP Buffer Size\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.admonition, {\n      type: \"important\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"Starting with RabbitMQ 4.1, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://www.rabbitmq.com/blog/2025/04/08/4.1-performance-improvements\",\n          children: \"connections automatically adjust their TCP buffer size\"\n        }), \"\\r\\nbased on message rates and sizes.\"]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"Manually adjusted TCP buffer size is therefore\\r\\nonly has an effect very early on in the connection's lifetime,\\r\\nand has become significantly less relevant than in earlier series.\"\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This is one of the key tunable parameters. Every TCP connection has buffers\\r\\nallocated for it. Generally speaking, the larger these buffers are, the more RAM\\r\\nis used per connection and better the throughput. On Linux, the OS will automatically\\r\\ntune TCP buffer size by default, typically settling on a value between 80 and 120 KB.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For maximum throughput, it is possible to increase buffer size using a group of config options:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"tcp_listen_options\"\n        }), \" for AMQP 0-9-1 and AMQP 1.0\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"mqtt.tcp_listen_options\"\n        }), \" for MQTT\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"stomp.tcp_listen_options\"\n        }), \" for STOMP\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that increasing TCP buffer size will increase how much \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./memory-use\",\n        children: \"RAM the node uses\"\n      }), \"\\r\\nfor every client connection.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The following example sets TCP buffers for AMQP 0-9-1 connections to 192 KiB:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"tcp_listen_options.backlog = 128\\r\\ntcp_listen_options.nodelay = true\\r\\ntcp_listen_options.linger.on      = true\\r\\ntcp_listen_options.linger.timeout = 0\\r\\n\\r\\n# Starting with RabbitMQ 4.1, connections automatically adjust their TCP buffer size\\r\\n# based on message rates and sizes.\\r\\n#\\r\\n# Manually adjusted TCP buffer size is therefore\\r\\n# only has an effect very early on in the connection's lifetime,\\r\\n# and has become significantly less relevant than in earlier series.\\r\\ntcp_listen_options.sndbuf = 196608\\r\\ntcp_listen_options.recbuf = 196608\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The same example for MQTT:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"mqtt.tcp_listen_options.backlog = 128\\r\\nmqtt.tcp_listen_options.nodelay = true\\r\\nmqtt.tcp_listen_options.linger.on      = true\\r\\nmqtt.tcp_listen_options.linger.timeout = 0\\r\\n\\r\\n# Starting with RabbitMQ 4.1, connections automatically adjust their TCP buffer size\\r\\n# based on message rates and sizes.\\r\\n#\\r\\n# Manually adjusted TCP buffer size is therefore\\r\\n# only has an effect very early on in the connection's lifetime,\\r\\n# and has become significantly less relevant than in earlier series.\\r\\nmqtt.tcp_listen_options.sndbuf = 196608\\r\\nmqtt.tcp_listen_options.recbuf = 196608\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"and STOMP:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"stomp.tcp_listen_options.backlog = 128\\r\\nstomp.tcp_listen_options.nodelay = true\\r\\nstomp.tcp_listen_options.linger.on      = true\\r\\nstomp.tcp_listen_options.linger.timeout = 0\\r\\n\\r\\n# Starting with RabbitMQ 4.1, connections automatically adjust their TCP buffer size\\r\\n# based on message rates and sizes.\\r\\n#\\r\\n# Manually adjusted TCP buffer size is therefore\\r\\n# only has an effect very early on in the connection's lifetime,\\r\\n# and has become significantly less relevant than in earlier series.\\r\\nstomp.tcp_listen_options.sndbuf = 196608\\r\\nstomp.tcp_listen_options.recbuf = 196608\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that setting send and receive buffer sizes to different values\\r\\ncan be dangerous and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"not recommended\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"tuning-for-large-number-of-connections\",\n      children: \"Tuning for a Large Number of Connections\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n      id: \"tuning-for-large-number-of-connections-intro\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.admonition, {\n      type: \"important\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"Starting with RabbitMQ 4.1, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://www.rabbitmq.com/blog/2025/04/08/4.1-performance-improvements\",\n          children: \"connections automatically adjust their TCP buffer size\"\n        }), \"\\r\\nbased on message rates and sizes.\"]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"Manually adjusted TCP buffer size is therefore\\r\\nonly has an effect very early on in the connection's lifetime,\\r\\nand has become significantly less relevant than in earlier series.\"\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Some workloads, often referred to as \\\"the Internet of\\r\\nThings\\\", assume a large number of client connections per\\r\\nnode, and a relatively low volume of traffic from each node.\\r\\nOne such workload is sensor networks: there can be hundreds\\r\\nof thousands or millions of sensors deployed, each emitting\\r\\ndata every several minutes. Optimising for the maximum\\r\\nnumber of concurrent clients can be more important than for\\r\\ntotal throughput.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n      id: \"tuning-for-large-number-of-connections-limitations\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Several factors can limit how many concurrent connections a single node can support:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Maximum number of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#open-file-handle-limit\",\n          children: \"open file handles\"\n        }), \" (including sockets) as well as other kernel-enforced resource limits\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Amount of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./memory-use\",\n          children: \"RAM used by each connection\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Amount of CPU resources used by each connection\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Maximum number of Erlang processes the VM is configured to allow.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"open-file-handle-limit\",\n      children: \"Open File Handle Limit\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"important\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"When overriding the max open file handle limit to\\r\\na higher value, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"ERL_MAX_PORTS\"\n        }), \" environment variable must be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./configure\",\n          children: \"overridden\"\n        }), \" accordingly.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Most operating systems limit the number of file handles that\\r\\ncan be opened at the same time. When an OS process (such as RabbitMQ's Erlang VM) reaches\\r\\nthe limit, it won't be able to open any new files or accept any more\\r\\nTCP connections. The limit will also affect how much memory the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./runtime\",\n        children: \"Erlang runtime\"\n      }), \"\\r\\nwill allocate upfront. This means that the limit on some modern distributions\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2022/08/30/high-initial-memory-consumption-of-rabbitmq-nodes-on-centos-stream-9\",\n        children: \"can be too high\"\n      }), \" and need\\r\\nlowering.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"how-to-override-the-limit\",\n      children: \"How to Override the Limit\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"How the limit is configured \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/basho/basho_docs/blob/master/content/riak/kv/2.2.3/using/performance/open-files-limit.md\",\n        children: \"varies from OS to OS\"\n      }), \" and distribution to distribution, e.g. depending on whether systemd is used.\\r\\nFor Linux, Controlling System Limits on Linux\\r\\nin our \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./install-debian#kernel-resource-limits\",\n        children: \"Debian\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./install-rpm#kernel-resource-limits\",\n        children: \"RPM\"\n      }), \"\\r\\ninstallation guides provides. Linux kernel limit management is covered by many resources on the Web,\\r\\nincluding the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://ro-che.info/articles/2017-03-26-increase-open-files-limit\",\n        children: \"open file handle limit\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"With Docker, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file\",\n        children: \"Docker daemon configuration file\"\n      }), \"\\r\\nin the host controls the limits.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"MacOS uses a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://superuser.com/questions/433746/is-there-a-fix-for-the-too-many-open-files-in-system-error-on-os-x-10-7-1\",\n        children: \"similar system\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"On Windows, the limit for the Erlang runtime is controlled exclusively using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ERL_MAX_PORTS\"\n      }), \" environment variable.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"erl-max-ports\",\n      children: \"The ERL_MAX_PORTS Environment Variable\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./runtime\",\n        children: \"runtime\"\n      }), \" has a related limit, controlled via the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ERL_MAX_PORTS\"\n      }), \" environment\\r\\nvariable.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"By default the limit is usually set to 65536. When overriding the max open file handle limit to\\r\\na higher value, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ERL_MAX_PORTS\"\n      }), \" must be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure\",\n        children: \"overridden\"\n      }), \" accordingly.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To find out the effective \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ERL_MAX_PORTS\"\n      }), \" value of a RabbitMQ node,\\r\\nuse the following command:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl eval 'erlang:system_info(port_limit).'\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"basic-estimates-of-the-necessary-limit\",\n      children: \"Basic Estimates of the Necessary Limit\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When optimising for the number of concurrent connections,\\r\\nmake sure your system has enough file descriptors to\\r\\nsupport not only client connections but also files the node\\r\\nmay use. To calculate a ballpark limit, multiply the number\\r\\nof connections per node by 1.5. For example, to support 100,000\\r\\nconnections, set the limit to 150,000.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Increasing the limit slightly increases the amount of\\r\\nRAM idle machine uses but this is a reasonable trade-off.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tuning-for-large-number-of-connections-tcp-buffer-size\",\n      children: \"Per Connection Memory Consumption: TCP Buffer Size\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"See the section above for an overview.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For maximum number of concurrent client connections, it is possible to decrease TCP buffer size\\r\\nusing a group of config options:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"tcp_listen_options\"\n        }), \" for AMQP 0-9-1 and AMQP 1.0\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"mqtt.tcp_listen_options\"\n        }), \" for MQTT\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"stomp.tcp_listen_options\"\n        }), \" for STOMP\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Decreasing TCP buffer size will decrease how much \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./memory-use\",\n        children: \"RAM the node uses\"\n      }), \"\\r\\nfor every client connection.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This is often necessary in environments where the number of concurrent connections\\r\\nsustained per node is more important than throughput.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The following example sets TCP buffers for AMQP 0-9-1 connections to 32 KiB:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"tcp_listen_options.backlog = 128\\r\\ntcp_listen_options.nodelay = true\\r\\ntcp_listen_options.linger.on      = true\\r\\ntcp_listen_options.linger.timeout = 0\\r\\ntcp_listen_options.sndbuf  = 32768\\r\\ntcp_listen_options.recbuf  = 32768\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The same example for MQTT:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"mqtt.tcp_listen_options.backlog = 128\\r\\nmqtt.tcp_listen_options.nodelay = true\\r\\nmqtt.tcp_listen_options.linger.on      = true\\r\\nmqtt.tcp_listen_options.linger.timeout = 0\\r\\nmqtt.tcp_listen_options.sndbuf  = 32768\\r\\nmqtt.tcp_listen_options.recbuf  = 32768\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"and for STOMP:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"stomp.tcp_listen_options.backlog = 128\\r\\nstomp.tcp_listen_options.nodelay = true\\r\\nstomp.tcp_listen_options.linger.on      = true\\r\\nstomp.tcp_listen_options.linger.timeout = 0\\r\\nstomp.tcp_listen_options.sndbuf  = 32768\\r\\nstomp.tcp_listen_options.recbuf  = 32768\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that lowering TCP buffer sizes will result in a proportional throughput drop,\\r\\nso an optimal value between throughput and per-connection RAM use needs to be\\r\\nfound for every workload.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Setting send and receive buffer sizes to different values is dangerous\\r\\nand is not recommended. Values lower than 8 KiB are not recommended.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tuning-for-large-number-of-connections-cpu-footprint\",\n      children: \"Reducing CPU Footprint of Stats Emission\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A large number of concurrent connections will generate a lot of metric (stats) emission events.\\r\\nThis increases CPU consumption even with mostly idle connections. To reduce this footprint,\\r\\nincrease the statistics collection interval using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"collect_statistics_interval\"\n      }), \" key:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# sets the interval to 60 seconds\\r\\ncollect_statistics_interval = 60000\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The default is 5 seconds (5000 milliseconds).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Increasing the interval value to 30-60s will reduce CPU footprint and peak memory consumption.\\r\\nThis comes with a downside: with the value in the example above, metrics of said entities\\r\\nwill refresh every 60 seconds.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This can be perfectly reasonable in an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./monitoring#monitoring-frequency\",\n        children: \"externally monitored\"\n      }), \" production system\\r\\nbut will make management UI less convenient to use for operators.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tuning-for-large-number-of-connections-channel-max\",\n      children: \"Limiting Number of Channels on a Connection\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Channels also consume RAM. By optimising how many channels applications use, that amount\\r\\ncan be decreased. It is possible to cap the max number of channels on a connection using\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"channel_max\"\n      }), \" configuration setting:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"channel_max = 16\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that some libraries and tools that build on top of RabbitMQ clients may implicitly require\\r\\na certain number of channels. Values above 200 are rarely necessary.\\r\\nFinding an optimal value is usually a matter of trial and error.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tuning-for-large-number-of-connections-nodelay\",\n      children: \"Nagle's Algorithm (\\\"nodelay\\\")\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Turning off \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        href: \"http://en.wikipedia.org/wiki/Nagle's_algorithm\",\n        children: \"Nagle's\\r\\nalgorithm\"\n      }), \" is primarily useful for reducing latency but\\r\\ncan also improve throughput.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"kernel.inet_default_connect_options\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"kernel.inet_default_listen_options\"\n      }), \" must\\r\\ninclude \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"{nodelay, true}\"\n      }), \" to turn off Nagle's algorithm for inter-node connections.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When configuring sockets that serve client connections,\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"tcp_listen_options\"\n      }), \" must include the same option. This is the default.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The following example demonstrates that. First, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq.conf\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"tcp_listen_options.backlog = 4096\\r\\ntcp_listen_options.nodelay = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"which should be used together with the following bits in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#advanced-config-file\",\n        children: \"advanced config file\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-erlang\",\n        children: \"[\\r\\n  {kernel, [\\r\\n    {inet_default_connect_options, [{nodelay, true}]},\\r\\n    {inet_default_listen_options,  [{nodelay, true}]}\\r\\n  ]}].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#erlang-term-config-file\",\n        children: \"classic config format\"\n      }), \",\\r\\neverything is configured in a single file:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-erlang\",\n        children: \"[\\r\\n  {kernel, [\\r\\n    {inet_default_connect_options, [{nodelay, true}]},\\r\\n    {inet_default_listen_options,  [{nodelay, true}]}\\r\\n  ]},\\r\\n  {rabbit, [\\r\\n    {tcp_listen_options, [\\r\\n                          {backlog,       4096},\\r\\n                          {nodelay,       true},\\r\\n                          {linger,        {true,0}},\\r\\n                          {exit_on_close, false}\\r\\n                         ]}\\r\\n  ]}\\r\\n].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tuning-for-large-number-of-connections-async-thread-pool\",\n      children: \"Erlang VM I/O Thread Pool Tuning\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Adequate Erlang VM I/O thread pool size is also important when tuning for a large number of\\r\\nconcurrent connections. See the section above.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tuning-for-large-number-of-connections-connection-backlog\",\n      children: \"Connection Backlog\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"With a low number of clients, new connection rate is very unevenly distributed\\r\\nbut is also small enough to not make much difference. When the number reaches tens of thousands\\r\\nor more, it is important to make sure that the server can accept inbound connections.\\r\\nUnaccepted TCP connections are put into a queue with bounded length. This length has to be\\r\\nsufficient to account for peak load hours and possible spikes, for instance, when many clients\\r\\ndisconnect due to a network interruption or choose to reconnect.\\r\\nThis is configured using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"tcp_listen_options.backlog\"\n      }), \"\\r\\noption:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"tcp_listen_options.backlog = 4096\\r\\ntcp_listen_options.nodelay = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#erlang-term-config-file\",\n        children: \"classic config format\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-erlang\",\n        children: \"[\\r\\n  {rabbit, [\\r\\n    {tcp_listen_options, [\\r\\n                          {backlog,       4096},\\r\\n                          {nodelay,       true},\\r\\n                          {linger,        {true, 0}},\\r\\n                          {exit_on_close, false}\\r\\n                         ]}\\r\\n  ]}\\r\\n].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Default value is 128. When pending connection queue length grows beyond this value,\\r\\nconnections will be rejected by the operating system. See also \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"net.core.somaxconn\"\n      }), \"\\r\\nin the kernel tuning section.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"dealing-with-high-connection-churn\",\n      children: \"Dealing with High Connection Churn\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dealing-with-high-connection-churn-overview\",\n      children: \"Why is High Connection Churn Problematic?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Workloads with high connection churn (a high rate of connections being opened and closed) will require\\r\\nTCP setting tuning to avoid exhaustion of certain resources: max number of file handles,\\r\\nErlang processes on RabbitMQ nodes, kernel's ephemeral port range (for hosts that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"open\"\n      }), \" a lot\\r\\nof connections, including \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./federation\",\n        children: \"Federation\"\n      }), \" links and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./shovel\",\n        children: \"Shovel\"\n      }), \" connections), and others.\\r\\nNodes that are exhausted of those resources \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"strong\", {\n        children: \"won't be able to accept new connections\"\n      }), \",\\r\\nwhich will negatively affect overall system availability.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Due to a combination of certain TCP features\\r\\nand defaults of most modern Linux distributions, closed connections can be detected after\\r\\na prolonged period of time. This is covered in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./heartbeats\",\n        children: \"heartbeats guide\"\n      }), \".\\r\\nThis can be one contributing factor to connection build-up. Another is the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"TIME_WAIT\"\n      }), \" TCP\\r\\nconnection state. The state primarily exists to make sure that retransmitted segments from closed\\r\\nconnections won't \\\"reappear\\\" on a different (newer) connection with the same client host and port.\\r\\nDepending on the OS and TCP stack configuration connections can spend minutes in this state,\\r\\nwhich on a busy system is guaranteed to lead to a connection build-up.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"See \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://vincent.bernat.im/en/blog/2014-tcp-time-wait-state-linux.html\",\n        children: \"Coping with the TCP TIME_WAIT connections on busy servers\"\n      }), \" for details.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"TCP stack configuration can reduce peak number of connection in closing states and\\r\\navoid resource exhaustion, in turn allowing nodes to accept new connections at all times.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"High connection churn can also mean developer mistakes or incorrect assumptions about how\\r\\nthe messaging protocols supported by RabbitMQ are meant to be used. All supported protocols\\r\\nassume long lived connections. Applications that open and almost immediately close connections\\r\\nunnecessarily waste resources (network bandwidth, CPU, RAM) and contribute to the problem\\r\\ndescribed in this section.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dealing-with-high-connection-churn-troubleshooting\",\n      children: \"Inspecting Connections and Gathering Evidence\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If a node fails to accept connections it is important to first gather data (metrics, evidence) to\\r\\ndetermine the state of the system and the limiting factor (exhausted resource).\\r\\nTools such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Netstat\",\n        children: \"netstat\"\n      }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://linux.die.net/man/8/ss\",\n        children: \"ss\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Lsof\",\n        children: \"lsof\"\n      }), \" can be used\\r\\nto inspect TCP connections of a node. See \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./troubleshooting-networking\",\n        children: \"Troubleshooting Networking\"\n      }), \" for examples.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dealing-with-high-connection-churn-tcp-keepalives\",\n      children: \"The Role of TCP Keepalives\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"While \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./heartbeats\",\n        children: \"heartbeats\"\n      }), \" are sufficient for detecting defunct connections,\\r\\nthey are not going to be sufficient in high connection churn scenarios. In those cases\\r\\nheartbeats should be combined with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#tcp-keepalives\",\n        children: \"TCP keepalives\"\n      }), \" to speed\\r\\nup disconnected client detection.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dealing-with-high-connection-churn-time-wait\",\n      children: \"Reducing Amount of Time Spent in TIME_WAIT\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"TCP stack tuning can also reduce the amount of time connections spend in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"TIME_WAIT\"\n      }), \" state.\\r\\nThe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"net.ipv4.tcp_fin_timeout\"\n      }), \" setting specifically can help here:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"net.ipv4.tcp_fin_timeout = 30\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that like other settings prefixed with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"net.ipv4.\"\n      }), \", this one applies to both IPv4 and IPv6\\r\\nconnections despite the name.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If inbound connections (from clients, plugins, CLI tools and so on) do not rely on NAT,\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"net.ipv4.tcp_tw_reuse\"\n      }), \" can be set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"1\"\n      }), \" (enabled) to allow the kernel\\r\\nto reuse sockets in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"TIME_WAIT\"\n      }), \" state for outgoing connections. This setting can\\r\\nbe applied on client hosts or intermediaries such as proxies and load balancers. Note that\\r\\nif NAT is used the setting is not safe and can lead to hard to track down issues.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The settings above generally should be combined with reduced \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#tcp-keepalives\",\n        children: \"TCP keepalive\"\n      }), \"\\r\\nvalues, for example:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"net.ipv4.tcp_fin_timeout = 30\\r\\n\\r\\nnet.ipv4.tcp_keepalive_time=30\\r\\nnet.ipv4.tcp_keepalive_intvl=10\\r\\nnet.ipv4.tcp_keepalive_probes=4\\r\\n\\r\\nnet.ipv4.tcp_tw_reuse = 1\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"os-tuning\",\n      children: \"OS Level Tuning\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Operating system settings can affect operation of RabbitMQ.\\r\\nSome are directly related to networking (e.g. TCP settings), others\\r\\naffect TCP sockets as well as other things (e.g. open file handles limit).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Understanding these limits is important, as they may change depending on\\r\\nthe workload.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"key-relevant-kernel-options\",\n      children: \"Key Relevant Kernel Options\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A few important configurable kernel options include (note that despite option names they\\r\\nare effective for both IPv4 and IPv6 connections):\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"table\", {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"thead\", {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"th\", {\n            children: \"Kernel setting\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"th\", {\n            children: \"Description\"\n          })]\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tbody\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"fs.file-max\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Max number of files the kernel will allocate. Limits and current value\\r\\ncan be inspected using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n                children: \"/proc/sys/fs/file-nr\"\n              }), \".\"]\n            })\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"net.ipv4.ip_local_port_range\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n              children: \"Local IP port range, define as a pair of values. The range must provide enough\\r\\nentries for the peak number of concurrent connections.\"\n            })\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"net.ipv4.tcp_tw_reuse\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"When enabled, allows the kernel to reuse sockets in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n                children: \"TIME_WAIT\"\n              }), \"\\r\\nstate when it's safe to do so. See \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n                href: \"#dealing-with-high-connection-churn\",\n                children: \"Dealing with High Connection Churn\"\n              }), \".\\r\\nThis option is dangerous when clients and peers connect using NAT.\"]\n            })\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"net.ipv4.tcp_fin_timeout\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Lowering this timeout to a value in the 15-30 second range reduces the amount of time closed connections\\r\\nwill stay in the TIME_WAIT state. See \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n                href: \"#dealing-with-high-connection-churn\",\n                children: \"Dealing with High Connection Churn\"\n              }), \".\"]\n            })\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"net.core.somaxconn\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n              children: \"Size of the listen queue (how many connections are in\\r\\nthe process of being established at the same time).\\r\\nDefault is 128. Increase to 4096 or higher to support\\r\\ninbound connection bursts, e.g. when clients reconnect\\r\\nen masse.\"\n            })\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"net.ipv4.tcp_max_syn_backlog\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n              children: \"Maximum number of remembered connection requests which\\r\\ndid not receive an acknowledgment yet from\\r\\nconnecting client. Default is 128, max value is 65535. 4096 and 8192 are\\r\\nrecommended starting values when optimising for throughput.\"\n            })\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"net.ipv4.tcp_keepalive_*\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"td\", {\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n                children: \"net.ipv4.tcp_keepalive_time\"\n              }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n                children: \"net.ipv4.tcp_keepalive_intvl\"\n              }), \",\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n                children: \"net.ipv4.tcp_keepalive_probes\"\n              }), \" configure TCP keepalive.\"]\n            }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"AMQP 0-9-1 and STOMP have \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n                href: \"./heartbeats\",\n                children: \"Heartbeats\"\n              }), \" which partially\\r\\nundo its effect, namely that it can take minutes to detect an unresponsive peer,\\r\\nfor example, in case of a hardware or power failure. MQTT also has its own keepalives\\r\\nmechanism which is the same idea under a different name.\"]\n            }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n              children: \"When enabling TCP keepalive with default settings, we\\r\\nrecommend setting heartbeat timeout to 8-20 seconds. Also see a note on TCP keepalives\\r\\nlater in this guide.\"\n            })]\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"net.ipv4.conf.default.rp_filter\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Activating or turning on reverse path filtering. If \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n                href: \"http://en.wikipedia.org/wiki/IP_address_spoofing\",\n                children: \"IP address spoofing\"\n              }), \"\\r\\nis not a concern for your system, deactivate it.\"]\n            })\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that default values for these vary between Linux kernel releases and distributions.\\r\\nUsing a recent kernel version (such as 6.x or later) is recommended.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"sysctl-based-configuration\",\n      children: \"sysctl-based Configuration\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Kernel parameter tuning differs from OS to OS. This guide focuses on Linux.\\r\\nTo configure a kernel parameter interactively, use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"sysctl -w\"\n      }), \" (requires superuser\\r\\nprivileges), for example:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"sysctl -w fs.file-max 200000\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To make the changes permanent (stick between reboots), they need to be added to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/etc/sysctl.conf\"\n      }), \". See \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://man7.org/linux/man-pages/man8/sysctl.8.html\",\n        children: \"sysctl(8)\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://man7.org/linux/man-pages/man5/sysctl.conf.5.html\",\n        children: \"sysctl.conf(5)\"\n      }), \"\\r\\nfor more details.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"TCP stack tuning is a broad topic that is covered in much detail elsewhere:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://psc.edu/index.php/services/networking/68-research/networking/641-tcp-tune\",\n          children: \"Enabling High Performance Data Transfers\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://fasterdata.es.net/network-tuning/\",\n          children: \"Network Tuning Guide\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"socket-gen-tcp-options\",\n      children: \"TCP Socket Options\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"socket-gen-tcp-options-common\",\n      children: \"Common Options\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"table\", {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"thead\", {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"th\", {\n            children: \"Kernel setting\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"th\", {\n            children: \"Description\"\n          })]\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tbody\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"tcp_listen_options.nodelay\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"When set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n                children: \"true\"\n              }), \", deactivates\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n                href: \"http://en.wikipedia.org/wiki/Nagle's_algorithm\",\n                children: \"Nagle's algorithm\"\n              }), \".\\r\\nDefault is true. Highly recommended for most users.\"]\n            })\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"tcp_listen_options.sndbuf\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n              children: \"See TCP buffers discussion earlier in this guide. Default value is\\r\\nautomatically tuned by the OS, typically in the 88 KiB to 128 KiB range on\\r\\nmodern Linux versions. Increasing buffer size improves consumer throughput\\r\\nand RAM use for every connection. Decreasing has the opposite effect.\"\n            })\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"tcp_listen_options.recbuf\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"See TCP buffers discussion earlier in this guide. Default value effects\\r\\nare similar to that of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n                children: \"tcp_listen_options.sndbuf\"\n              }), \" but\\r\\nfor publishers and protocol operations in general.\"]\n            })\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"tcp_listen_options.backlog\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n              children: \"Maximum size of the unaccepted TCP connections queue. When this size\\r\\nis reached, new connections will be rejected. Set to 4096 or higher for\\r\\nenvironments with thousands of concurrent connections and possible bulk client\\r\\nreconnections.\"\n            })\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"tcp_listen_options.keepalive\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"When set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n                children: \"true\"\n              }), \", enables TCP keepalives (see above).\\r\\nDefault is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n                children: \"false\"\n              }), \". Makes sense for environments where\\r\\nconnections can go idle for a long time (at least 10 minutes),\\r\\nalthough using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n                href: \"./heartbeats\",\n                children: \"heartbeats\"\n              }), \" is still recommended over\\r\\nthis option.\"]\n            })\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"socket-gen-tcp-options-defaults\",\n      children: \"Defaults\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Below is the default TCP socket option configuration used by RabbitMQ:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"TCP connection backlog is limited to 128 connections\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Nagle's algorithm is deactivated\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Server socket lingering is enabled with the timeout of 0\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"heartbeats\",\n      children: \"Heartbeats\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Some protocols supported by RabbitMQ, including AMQP 0-9-1, support \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"heartbeats\"\n      }), \", a way to detect dead\\r\\nTCP peers quicker. Please refer to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./heartbeats\",\n        children: \"Heartbeats guide\"\n      }), \"\\r\\nfor more information.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"nettick\",\n      children: \"Net Tick Time\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./heartbeats\",\n        children: \"Heartbeats\"\n      }), \" are used to detect peer or connection failure\\r\\nbetween clients and RabbitMQ nodes. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./nettick\",\n        children: \"net_ticktime\"\n      }), \" serves\\r\\nthe same purpose but for cluster node communication. Values lower than 5 (seconds)\\r\\nmay result in false positive and are not recommended.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"tcp-keepalives\",\n      children: \"TCP Keepalives\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"TCP contains a mechanism similar in purpose to the heartbeat\\r\\n(a.k.a. keepalive) one in messaging protocols and net tick\\r\\ntimeout covered above: TCP keepalives. Due to inadequate\\r\\ndefaults, TCP keepalives often don't work the way they are\\r\\nsupposed to: it takes a very long time (say, an hour or more)\\r\\nto detect a dead peer. However, with tuning they can serve\\r\\nthe same purpose as heartbeats and clean up stale TCP connections\\r\\ne.g. with clients that opted to not use heartbeats, intentionally or\\r\\nnot.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Below is an example sysctl configuration for TCP keepalives\\r\\nthat considers TCP connections dead or unreachable after 70\\r\\nseconds (4 attempts every 10 seconds after connection idle for 30 seconds):\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"net.ipv4.tcp_keepalive_time=30\\r\\nnet.ipv4.tcp_keepalive_intvl=10\\r\\nnet.ipv4.tcp_keepalive_probes=4\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"TCP keepalives can be a useful additional defense mechanism\\r\\nin environments where RabbitMQ operator has no control\\r\\nover application settings or client libraries used.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"handshake-timeout\",\n      children: \"Connection Handshake Timeout\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ has a timeout for connection handshake, 10 seconds by\\r\\ndefault. When clients run in heavily constrained environments,\\r\\nit may be necessary to increase the timeout. This can be done via\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit.handshake_timeout\"\n      }), \" (in milliseconds):\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"handshake_timeout = 20000\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It should be pointed out that this is only necessary with very constrained\\r\\nclients and networks. Handshake timeouts in other circumstances indicate\\r\\na problem elsewhere.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tls-handshake\",\n      children: \"TLS Handshake\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl\",\n        children: \"TLS is enabled\"\n      }), \", it may be necessary to increase also the TLS\\r\\nhandshake timeout. This can be done via\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit.ssl_handshake_timeout\"\n      }), \" (in milliseconds):\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"ssl_handshake_timeout = 10000\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"dns\",\n      children: \"Hostname Resolution and DNS\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In many cases, RabbitMQ relies on the Erlang runtime for inter-node communication (including\\r\\ntools such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-plugins\"\n      }), \", etc). Client libraries\\r\\nalso perform hostname resolution when connecting to RabbitMQ nodes. This section briefly\\r\\ncovers most common issues associated with that.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dns-resolution-by-clients\",\n      children: \"Performed by Client Libraries\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If a client library is configured to connect to a hostname, it performs\\r\\nhostname resolution. Depending on DNS and local resolver (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/etc/hosts\"\n      }), \"\\r\\nand similar) configuration, this can take some time. Incorrect configuration\\r\\nmay lead to resolution timeouts, e.g. when trying to resolve a local hostname\\r\\nsuch as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-dev-machine\"\n      }), \", over DNS. As a result, client connections\\r\\ncan take a long time (from tens of seconds to a few minutes).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dns-resolution-by-nodes\",\n      children: \"Short and Fully-qualified RabbitMQ Node Names\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ relies on the Erlang runtime for inter-node\\r\\ncommunication. Erlang nodes include a hostname, either short\\r\\n(\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rmq1\"\n      }), \") or fully-qualified\\r\\n(\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rmq1.dev.megacorp.local\"\n      }), \"). Mixing short and\\r\\nfully-qualified hostnames is not allowed by the\\r\\nruntime. Every node in a cluster must be able to resolve\\r\\nevery other node's hostname, short or fully-qualified.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"By default RabbitMQ will use short hostnames. Set the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_USE_LONGNAME\"\n      }), \" environment variable to\\r\\nmake RabbitMQ nodes use fully-qualified names,\\r\\ne.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rmq1.dev.megacorp.local\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dns-reverse-dns-lookups\",\n      children: \"Reverse DNS Lookups\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"reverse_dns_lookups\"\n      }), \" configuration option is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \",\\r\\nRabbitMQ will complete reverse DNS lookups for client IP addresses and list hostnames\\r\\nin connection information (e.g. in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./management\",\n        children: \"Management UI\"\n      }), \").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Reverse DNS lookups can potentially take a long time if node's hostname resolution is not\\r\\noptimally configured. This can increase latency when accepting client connections.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To explicitly activate or turn on reverse DNS lookups:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"reverse_dns_lookups = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To deactivate reverse DNS lookups:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"reverse_dns_lookups = false\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"the-inetrc-file\",\n      children: \"The inetrc File\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./runtime\",\n        children: \"Erlang runtime\"\n      }), \" allows for a number of hostname resolution-related settings to be tuned\\r\\nusing a file known as the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://erlang.org/doc/apps/erts/inet_cfg.html\",\n        children: \"inetrc file\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The path to the file can be specified by adding an extra runtime argument using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.a, {\n        href: \"./configure\",\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS\"\n        }), \" environment variable\"]\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"export RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\\\"-kernel inetrc '/path/to/inetrc.file'\\\"\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"$env:ERL_INETRC = \\\"-kernel inetrc 'c:\\\\path\\\\to\\\\inetrc.file'\\\"\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The file can be used to configure a number of settings related to hostname resolution on the node (not system-wide):\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Hostnames and host addresses (similarly to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Hosts_(file)\",\n          children: \"local host file\"\n        }), \")\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Local domain name\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Nameservers\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Preferred hostname lookup method (e.g. local host file vs. DNS)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Hostname caching interval\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Search domains\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Please consult the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://erlang.org/doc/apps/erts/inet_cfg.html\",\n        children: \"inetrc file documentation\"\n      }), \" to learn more.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dns-verify-resolution\",\n      children: \"Verify Hostname Resolution\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Since hostname resolution is a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering#hostname-resolution-requirement\",\n        children: \"prerequisite for successful inter-node communication\"\n      }), \",\\r\\nCLI tools provide two commands that help verify\\r\\nthat hostname resolution on a node works as expected. The commands are not meant to replace\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Dig_(command)\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"dig\"\n        })\n      }), \" and other specialised DNS tools but rather\\r\\nprovide a way to perform most basic checks while taking \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://erlang.org/doc/apps/erts/inet_cfg.html\",\n        children: \"Erlang runtime hostname resolver features\"\n      }), \"\\r\\ninto account.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The first command is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-diagnostics resolve_hostname\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# resolves node2.cluster.local.svc to IPv6 addresses on node rabbit@node1.cluster.local.svc\\r\\nrabbitmq-diagnostics resolve_hostname node2.cluster.local.svc --address-family IPv6 -n rabbit@node1.cluster.local.svc\\r\\n\\r\\n# makes local CLI tool resolve node2.cluster.local.svc to IPv4 addresses\\r\\nrabbitmq-diagnostics resolve_hostname node2.cluster.local.svc --address-family IPv4 --offline\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The second one is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-diagnostics resolver_info\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmq-diagnostics resolver_info\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It will report key resolver settings such as the lookup order (whether CLI tools should prefer the OS resolver,\\r\\ninetrc file, and so on) as well as inetrc hostname entries, if any:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Runtime Hostname Resolver (inetrc) Settings\\r\\n\\r\\nLookup order: native\\r\\nHosts file: /etc/hosts\\r\\nResolver conf file: /etc/resolv.conf\\r\\nCache size:\\r\\n\\r\\ninetrc File Host Entries\\r\\n\\r\\n(none)\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"logging\",\n      children: \"Connection Event Logging\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"See \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./logging#connection-lifecycle-events\",\n        children: \"Connection Lifecycle Events\"\n      }), \" in the logging guide.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"troubleshooting-where-to-start\",\n      children: \"Troubleshooting Network Connectivity\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A methodology for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./troubleshooting-networking\",\n        children: \"troubleshooting of networking-related issues\"\n      }), \"\\r\\nis covered in a separate guide.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"firewalls-mac-os\",\n      children: \"MacOS Application Firewall\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"On MacOS systems with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://support.apple.com/en-us/HT201642\",\n        children: \"Application Firewall\"\n      }), \" enabled,\\r\\nErlang runtime processes must be allowed to bind to ports and accept connections.\\r\\nWithout this, RabbitMQ nodes won't be able to bind to their \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#ports\",\n        children: \"ports\"\n      }), \" and will fail to start.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A list of blocked applications can be seen under \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Security and Privacy\"\n      }), \" => \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Firewall\"\n      }), \" in system settings.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To \\\"unblock\\\" a command line tool, use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"sudo /usr/libexec/ApplicationFirewall/socketfilterfw\"\n      }), \".\\r\\nThe examples below assume that Erlang is installed under \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/usr/local/Cellar/erlang/{version}\"\n      }), \",\\r\\nused by the Homebrew Erlang formula:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# allow CLI tools and shell to bind to ports and accept inbound connections\\r\\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/Cellar/erlang/{version}/lib/erlang/bin/erl\\r\\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /usr/local/Cellar/erlang/{version}/lib/erlang/bin/erl\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# allow server nodes (Erlang VM) to bind to ports and accept inbound connections\\r\\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/Cellar/erlang/{version}/lib/erlang/erts-{erts version}/bin/beam.smp\\r\\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /usr/local/Cellar/erlang/{version}/lib/erlang/erts-{erts version}/bin/beam.smp\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"socketfilterfw\"\n      }), \" command line arguments can vary between MacOS releases.\\r\\nTo see supports command line arguments, use\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"sudo /usr/libexec/ApplicationFirewall/socketfilterfw --help\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/networking.md\n");

/***/ })

}]);