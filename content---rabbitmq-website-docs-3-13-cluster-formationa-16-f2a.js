"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-docs-3-13-cluster-formationa-16-f2a"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-3-13-cluster-formation-md-a16.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"cluster-formation","title":"Cluster Formation and Peer Discovery","description":"<!--","source":"@site/versioned_docs/version-3.13/cluster-formation.md","sourceDirName":".","slug":"/cluster-formation","permalink":"/rabbitmq-website/docs/3.13/cluster-formation","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/versioned_docs/version-3.13/cluster-formation.md","tags":[],"version":"3.13","frontMatter":{"title":"Cluster Formation and Peer Discovery"},"sidebar":"docsSidebar","previous":{"title":"Clustering Guide","permalink":"/rabbitmq-website/docs/3.13/clustering"},"next":{"title":"Network Partitions","permalink":"/rabbitmq-website/docs/3.13/partitions"}}');

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./versioned_docs/version-3.13/cluster-formation.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_3_13_cluster_formation_md_a16_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_3_13_cluster_formation_md_a16_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-3-13-cluster-formation-md-a16.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Cluster Formation and Peer Discovery'\n};\nconst contentTitle = 'Cluster Formation and Peer Discovery';\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"What is Peer Discovery?\",\n  \"id\": \"peer-discovery\",\n  \"level\": 2\n}, {\n  \"value\": \"Available Discovery Mechanisms\",\n  \"id\": \"peer-discovery-plugins\",\n  \"level\": 3\n}, {\n  \"value\": \"Specifying the Peer Discovery Mechanism\",\n  \"id\": \"peer-discovery-configuring-mechanism\",\n  \"level\": 3\n}, {\n  \"value\": \"How Peer Discovery Works\",\n  \"id\": \"peer-discovery-how-does-it-work\",\n  \"level\": 3\n}, {\n  \"value\": \"Cluster Formation and Feature Availability\",\n  \"id\": \"formation-and-availability\",\n  \"level\": 2\n}, {\n  \"value\": \"Nodes Rejoining Their Existing Cluster\",\n  \"id\": \"rejoining\",\n  \"level\": 2\n}, {\n  \"value\": \"How to Configure Peer Discovery\",\n  \"id\": \"configuring\",\n  \"level\": 2\n}, {\n  \"value\": \"Config File Peer Discovery Backend\",\n  \"id\": \"peer-discovery-classic-config\",\n  \"level\": 2\n}, {\n  \"value\": \"Config File Peer Discovery Overview\",\n  \"id\": \"config-file-peer-discovery-overview\",\n  \"level\": 3\n}, {\n  \"value\": \"Configuration\",\n  \"id\": \"configuration\",\n  \"level\": 3\n}, {\n  \"value\": \"DNS Peer Discovery Backend\",\n  \"id\": \"peer-discovery-dns\",\n  \"level\": 2\n}, {\n  \"value\": \"DNS Peer Discovery Overview\",\n  \"id\": \"dns-peer-discovery-overview\",\n  \"level\": 3\n}, {\n  \"value\": \"Configuration\",\n  \"id\": \"configuration-1\",\n  \"level\": 3\n}, {\n  \"value\": \"Host File Modifications in Containerized Environments\",\n  \"id\": \"host-file-modifications-in-containerized-environments\",\n  \"level\": 3\n}, {\n  \"value\": \"Peer Discovery on AWS (EC2)\",\n  \"id\": \"peer-discovery-aws\",\n  \"level\": 2\n}, {\n  \"value\": \"AWS Peer Discovery Overview\",\n  \"id\": \"aws-peer-discovery-overview\",\n  \"level\": 3\n}, {\n  \"value\": \"Configuration and Credentials\",\n  \"id\": \"peer-discovery-aws-credentials\",\n  \"level\": 3\n}, {\n  \"value\": \"Using Autoscaling Group Membership\",\n  \"id\": \"peer-discovery-aws-autoscaling-group-membership\",\n  \"level\": 3\n}, {\n  \"value\": \"Using EC2 Instance Tags\",\n  \"id\": \"peer-discovery-aws-tags\",\n  \"level\": 3\n}, {\n  \"value\": \"Using Private EC2 Instance IPs\",\n  \"id\": \"peer-discovery-aws-other-settings\",\n  \"level\": 3\n}, {\n  \"value\": \"Peer Discovery on Kubernetes\",\n  \"id\": \"peer-discovery-k8s\",\n  \"level\": 2\n}, {\n  \"value\": \"Kubernetes Peer Discovery Overview\",\n  \"id\": \"kubernetes-peer-discovery-overview\",\n  \"level\": 3\n}, {\n  \"value\": \"Important: Prerequisites and Deployment Considerations\",\n  \"id\": \"important-prerequisites-and-deployment-considerations\",\n  \"level\": 3\n}, {\n  \"value\": \"Use a Stateful Set\",\n  \"id\": \"use-a-stateful-set\",\n  \"level\": 4\n}, {\n  \"value\": \"Use Persistent Volumes\",\n  \"id\": \"use-persistent-volumes\",\n  \"level\": 4\n}, {\n  \"value\": \"Make Sure <code>/etc/rabbitmq</code> is Mounted as Writeable\",\n  \"id\": \"make-sure-etcrabbitmq-is-mounted-as-writeable\",\n  \"level\": 4\n}, {\n  \"value\": \"Use Parallel podManagementPolicy\",\n  \"id\": \"use-parallel-podmanagementpolicy\",\n  \"level\": 4\n}, {\n  \"value\": \"Use Most Basic Health Checks for RabbitMQ Pod Readiness Probes\",\n  \"id\": \"use-most-basic-health-checks-for-rabbitmq-pod-readiness-probes\",\n  \"level\": 4\n}, {\n  \"value\": \"Examples\",\n  \"id\": \"examples\",\n  \"level\": 3\n}, {\n  \"value\": \"Configuration\",\n  \"id\": \"configuration-2\",\n  \"level\": 3\n}, {\n  \"value\": \"Kubernetes API Endpoint\",\n  \"id\": \"kubernetes-api-endpoint\",\n  \"level\": 4\n}, {\n  \"value\": \"Kubernetes API Access Token\",\n  \"id\": \"kubernetes-api-access-token\",\n  \"level\": 4\n}, {\n  \"value\": \"Kubernetes Namespace\",\n  \"id\": \"kubernetes-namespace\",\n  \"level\": 4\n}, {\n  \"value\": \"Kubernetes API CA Certificate Bundle\",\n  \"id\": \"kubernetes-api-ca-certificate-bundle\",\n  \"level\": 4\n}, {\n  \"value\": \"Peer Node Pods Can Use Hostnames or IP Addresses\",\n  \"id\": \"peer-node-pods-can-use-hostnames-or-ip-addresses\",\n  \"level\": 4\n}, {\n  \"value\": \"Peer Node Pod Name Suffix\",\n  \"id\": \"peer-node-pod-name-suffix\",\n  \"level\": 5\n}, {\n  \"value\": \"Peer Discovery Using Consul\",\n  \"id\": \"peer-discovery-consul\",\n  \"level\": 2\n}, {\n  \"value\": \"Consul Peer Discovery Overview\",\n  \"id\": \"consul-peer-discovery-overview\",\n  \"level\": 3\n}, {\n  \"value\": \"Configuration\",\n  \"id\": \"configuration-3\",\n  \"level\": 3\n}, {\n  \"value\": \"Consul Endpoint\",\n  \"id\": \"consul-endpoint\",\n  \"level\": 4\n}, {\n  \"value\": \"Consul ACL Token\",\n  \"id\": \"consul-acl-token\",\n  \"level\": 4\n}, {\n  \"value\": \"Service Address\",\n  \"id\": \"service-address\",\n  \"level\": 4\n}, {\n  \"value\": \"Service Port\",\n  \"id\": \"service-port\",\n  \"level\": 4\n}, {\n  \"value\": \"Service Tags and Metadata\",\n  \"id\": \"service-tags-and-metadata\",\n  \"level\": 4\n}, {\n  \"value\": \"Service Health Checks\",\n  \"id\": \"service-health-checks\",\n  \"level\": 4\n}, {\n  \"value\": \"Node Name Suffixes\",\n  \"id\": \"node-name-suffixes\",\n  \"level\": 4\n}, {\n  \"value\": \"Distributed Lock Acquisition\",\n  \"id\": \"distributed-lock-acquisition\",\n  \"level\": 4\n}, {\n  \"value\": \"Peer Discovery Using Etcd\",\n  \"id\": \"peer-discovery-etcd\",\n  \"level\": 2\n}, {\n  \"value\": \"Etcd Peer Discovery Overview\",\n  \"id\": \"etcd-peer-discovery-overview\",\n  \"level\": 3\n}, {\n  \"value\": \"Configuration\",\n  \"id\": \"configuration-4\",\n  \"level\": 3\n}, {\n  \"value\": \"etcd Endpoints and Authentication\",\n  \"id\": \"etcd-endpoints-and-authentication\",\n  \"level\": 4\n}, {\n  \"value\": \"Key Naming\",\n  \"id\": \"key-naming\",\n  \"level\": 4\n}, {\n  \"value\": \"Key Leases and TTL\",\n  \"id\": \"key-leases-and-ttl\",\n  \"level\": 4\n}, {\n  \"value\": \"Locks\",\n  \"id\": \"locks\",\n  \"level\": 4\n}, {\n  \"value\": \"Inspecting Keys\",\n  \"id\": \"inspecting-keys\",\n  \"level\": 4\n}, {\n  \"value\": \"TLS\",\n  \"id\": \"tls\",\n  \"level\": 4\n}, {\n  \"value\": \"Race Conditions During Initial Cluster Formation\",\n  \"id\": \"initial-formation-race-condition\",\n  \"level\": 2\n}, {\n  \"value\": \"Node Health Checks and Forced Removal\",\n  \"id\": \"node-health-checks-and-cleanup\",\n  \"level\": 2\n}, {\n  \"value\": \"Negative Side Effects of Automatic Removal\",\n  \"id\": \"negative-side-effects-of-automatic-removal\",\n  \"level\": 3\n}, {\n  \"value\": \"Peer Discovery Failures and Retries\",\n  \"id\": \"discovery-retries\",\n  \"level\": 2\n}, {\n  \"value\": \"HTTP Proxy Settings\",\n  \"id\": \"http-proxy-settings\",\n  \"level\": 2\n}, {\n  \"value\": \"Troubleshooting\",\n  \"id\": \"troubleshooting\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    h5: \"h5\",\n    header: \"header\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"cluster-formation-and-peer-discovery\",\n        children: \"Cluster Formation and Peer Discovery\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This guide covers various automation-oriented cluster formation and\\r\\npeer discovery features. For a general overview of RabbitMQ clustering,\\r\\nplease refer to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering\",\n        children: \"Clustering Guide\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This guide assumes general familiarity with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering\",\n        children: \"RabbitMQ clustering\"\n      }), \"\\r\\nand focuses on the peer discovery subsystem.\\r\\nFor example, it will not cover what \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./networking\",\n        children: \"ports must be open\"\n      }), \" for inter-node communication, how nodes authenticate to each other, and so on.\\r\\nBesides discovery mechanisms and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#configuring\",\n        children: \"their configuration\"\n      }), \",\\r\\nthis guide also covers closely related topics of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#formation-and-availability\",\n        children: \"feature availability during cluster formation\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#rejoining\",\n        children: \"rejoining nodes\"\n      }), \",\\r\\nthe problem of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#initial-formation-race-condition\",\n        children: \"initial cluster formation\"\n      }), \" with nodes booting in parallel as well as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#node-health-checks-and-cleanup\",\n        children: \"additional health checks\"\n      }), \" offered\\r\\nby some discovery implementations.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The guide also covers the basics of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#troubleshooting\",\n        children: \"peer discovery troubleshooting\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"peer-discovery\",\n      children: \"What is Peer Discovery?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To form a cluster, new (\\\"blank\\\") nodes need to be able to discover\\r\\ntheir peers. This can be done using a variety of mechanisms (backends).\\r\\nSome mechanisms assume all cluster members are known ahead of time (for example, listed\\r\\nin the config file), others are dynamic (nodes can come and go).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"All peer discovery mechanisms assume that newly joining nodes will be able to\\r\\ncontact their peers in the cluster and authenticate with them successfully.\\r\\nThe mechanisms that rely on an external service (e.g. DNS or Consul) or API (e.g. AWS or Kubernetes)\\r\\nrequire the service(s) or API(s) to be available and reachable on their standard ports.\\r\\nInability to reach the services will lead to node's inability to join the cluster.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"peer-discovery-plugins\",\n      children: \"Available Discovery Mechanisms\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The following mechanisms are built into the core and always available:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#peer-discovery-classic-config\",\n          children: \"Config file\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#peer-discovery-dns\",\n          children: \"Pre-configured DNS A/AAAA records\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Additional peer discovery mechanisms are available via plugins. The following\\r\\npeer discovery plugins ship with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/release-information\",\n        children: \"supported RabbitMQ versions\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#peer-discovery-aws\",\n          children: \"AWS (EC2)\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#peer-discovery-k8s\",\n          children: \"Kubernetes\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#peer-discovery-consul\",\n          children: \"Consul\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#peer-discovery-etcd\",\n          children: \"etcd\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The above plugins do not need to be installed but like all \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins\",\n        children: \"plugins\"\n      }), \" they must be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins#basics\",\n        children: \"enabled\"\n      }), \"\\r\\nor \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins#enabled-plugins-file\",\n        children: \"preconfigured\"\n      }), \" before they can be used.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For peer discovery plugins, which must be available on node boot, this means they must be enabled before first node boot.\\r\\nThe example below uses \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: \"rabbitmq-plugins\"\n      }), \"' \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"--offline\"\n      }), \" mode:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmq-plugins --offline enable <plugin name>\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A more specific example:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmq-plugins --offline enable rabbitmq_peer_discovery_k8s\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A node with configuration settings that belong a non-enabled peer discovery plugin will fail\\r\\nto start and report those settings as unknown.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"peer-discovery-configuring-mechanism\",\n      children: \"Specifying the Peer Discovery Mechanism\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The discovery mechanism to use is specified in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure\",\n        children: \"config file\"\n      }), \",\\r\\nas are various mechanism-specific settings, for example, discovery service hostnames, credentials, and so\\r\\non. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.peer_discovery_backend\"\n      }), \" is the key\\r\\nthat controls what discovery module (implementation) is used:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = classic_config\\r\\n\\r\\n# The backend can also be specified using its module name. Note that\\r\\n# module names do not necessarily match plugin names exactly.\\r\\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The module has to implement the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-common/blob/master/src/rabbit_peer_discovery_backend.erl\",\n        children: \"rabbit_peer_discovery_backend\"\n      }), \"\\r\\nbehaviour. Plugins therefore can introduce their own discovery\\r\\nmechanisms.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"peer-discovery-how-does-it-work\",\n      children: \"How Peer Discovery Works\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a node starts and detects it doesn't have a previously\\r\\ninitialised database, it will check if there's a peer\\r\\ndiscovery mechanism configured. If that's the case, it will\\r\\nthen perform the discovery and attempt to contact each\\r\\ndiscovered peer in order. Finally, it will attempt to join the\\r\\ncluster of the first reachable peer.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Depending on the backend (mechanism) used, the process of peer discovery may involve\\r\\ncontacting external services, for example, an AWS API endpoint, a Consul node or\\r\\nperforming a DNS query. Some backends require nodes to register (tell the backend that the\\r\\nnode is up and should be counted as a cluster member): for example, Consul and etcd both\\r\\nsupport registration. With other backends the list of nodes is configured ahead of\\r\\ntime (e.g. config file). Those backends are said to not support node registration.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In some cases node registration is implicit or managed by an external service.\\r\\nAWS autoscaling groups is a good example: AWS keeps track of group membership,\\r\\nso nodes don't have to (or cannot) explicitly register. However, the list of cluster members\\r\\nis not predefined. Such backends usually include a no-op registration step\\r\\nand apply one of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#initial-formation-race-condition\",\n        children: \"race condition mitigation mechanisms\"\n      }), \" described below.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When the configured backend supports registration, nodes unregister when they stop.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If peer discovery isn't configured, or it \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#discovery-retries\",\n        children: \"repeatedly fails\"\n      }), \",\\r\\nor no peers are reachable, a node that wasn't a cluster member in the past\\r\\nwill initialise from scratch and proceed as a standalone node.\\r\\nPeer discovery progress and outcomes will be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./logging\",\n        children: \"logged\"\n      }), \"\\r\\nby the node.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If a node previously was a cluster member, it will try to contact and rejoin\\r\\nits \\\"last seen\\\" peer for a period of time. In this case, no peer discovery\\r\\nwill be performed. This is true for all backends.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"formation-and-availability\",\n      children: \"Cluster Formation and Feature Availability\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As a general rule, a cluster that is only been partly formed, that is, only a subset of\\r\\nnodes has joined it \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"must be considered fully available\"\n      }), \" by clients.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Individual nodes will accept \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./connections\",\n        children: \"client connections\"\n      }), \" before the cluster is formed. In such cases,\\r\\nclients should be prepared to certain features not being available. For instance, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"quorum queues\"\n      }), \"\\r\\nwon't be available unless the number of cluster nodes matches or exceeds the quorum of configured replica count.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Features behind \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./feature-flags\",\n        children: \"feature flags\"\n      }), \" may also be unavailable until cluster formation completes.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"rejoining\",\n      children: \"Nodes Rejoining Their Existing Cluster\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A new node joining a cluster is just one possible case. Another common scenario\\r\\nis when an existing cluster member temporarily leaves and then rejoins the cluster.\\r\\nWhile the peer discovery subsystem does not affect the behavior described in this section,\\r\\nit's important to understand how nodes behave when they rejoin their cluster after a restart or failure.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Existing cluster members \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"strong\", {\n        children: \"will not perform peer discovery\"\n      }), \". Instead they will try to\\r\\ncontact their previously known peers.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If a node previously was a cluster member, when it boots it will try to contact\\r\\nits \\\"last seen\\\" peer for a period of time. If the peer is not booted (e.g. when\\r\\na full cluster restart or upgrade is performed) or cannot be reached, the node will\\r\\nretry the operation a number of times.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Default values are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"10\"\n      }), \" retries and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"30\"\n      }), \" seconds per attempt,\\r\\nrespectively, or 5 minutes total. In environments where nodes can take a long and/or uneven\\r\\ntime to start it is recommended that the number of retries is increased.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If a node is reset since losing contact with the cluster, it will behave \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-discovery-how-does-it-work\",\n        children: \"like a blank node\"\n      }), \".\\r\\nNote that other cluster members might still consider it to be a cluster member, in which case\\r\\nthe two sides will disagree and the node will fail to join. Such reset nodes must also be\\r\\nremoved from the cluster using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbitmqctl forget_cluster_node\"\n        })\n      }), \" executed against\\r\\nan existing cluster member.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If a node was explicitly removed from the cluster by the operator and then reset,\\r\\nit will be able to join the cluster as a new member. In this case it will behave exactly\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-discovery-how-does-it-work\",\n        children: \"like a blank node\"\n      }), \" would.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A node rejoining after a node name or host name change can start as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-discovery-how-does-it-work\",\n        children: \"a blank node\"\n      }), \"\\r\\nif its data directory path changes as a result. Such nodes will fail to rejoin the cluster.\\r\\nWhile the node is offline, its peers can be reset or started with a blank data directory.\\r\\nIn that case the recovering node will fail to rejoin its peer as well since internal data store cluster\\r\\nidentity would no longer match.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Consider the following scenario:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"ol\", {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children: \"A cluster of 3 nodes, A, B and C is formed\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children: \"Node A is shut down\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children: \"Node B is reset\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children: \"Node A is started\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children: \"Node A tries to rejoin B but B's cluster identity has changed\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children: \"Node B doesn't recognise A as a known cluster member because it's been reset\"\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"in this case node B will reject the clustering attempt from A with an appropriate error\\r\\nmessage in the log:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Node 'rabbit@node1.local' thinks it's clustered with node 'rabbit@node2.local', but 'rabbit@node2.local' disagrees\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In this case B can be reset again and then will be able to join A, or A\\r\\ncan be reset and will successfully join B.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"configuring\",\n      children: \"How to Configure Peer Discovery\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Peer discovery plugins are configured just like the core server and other\\r\\nplugins: using a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure\",\n        children: \"config file\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.peer_discovery_backend\"\n      }), \" is the key that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-discovery-configuring-mechanism\",\n        children: \"controls what peer discovery backend will be used\"\n      }), \".\\r\\nEach backend will also have a number of configuration settings specific to it.\\r\\nThe rest of the guide will cover configurable settings specific to a particular mechanism\\r\\nas well as provide examples for each one.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"peer-discovery-classic-config\",\n      children: \"Config File Peer Discovery Backend\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"config-file-peer-discovery-overview\",\n      children: \"Config File Peer Discovery Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The most basic way for a node to discover its cluster peers is to read a list\\r\\nof nodes from the config file. The set of cluster members is assumed to be known at deployment\\r\\ntime.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"configuration\",\n      children: \"Configuration\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The peer nodes are listed using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.classic_config.nodes\"\n      }), \" config setting:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = classic_config\\r\\n\\r\\n# the backend can also be specified using its module name\\r\\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\\r\\n\\r\\ncluster_formation.classic_config.nodes.1 = rabbit@hostname1.eng.example.local\\r\\ncluster_formation.classic_config.nodes.2 = rabbit@hostname2.eng.example.local\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"peer-discovery-dns\",\n      children: \"DNS Peer Discovery Backend\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.admonition, {\n      type: \"important\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"This peer discovery mechanism is sensitive to OS and RabbitMQ configuration that\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./networking#dns\",\n          children: \"affects hostname resolution\"\n        }), \".\"]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"For example, a deployment tool that modifies the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Hosts_(file)\",\n          children: \"local host file\"\n        }), \"\\r\\ncan affect (break) this peer discovery mechanism.\"]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dns-peer-discovery-overview\",\n      children: \"DNS Peer Discovery Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Another built-in peer discovery mechanism as of RabbitMQ 3.7.0 is DNS-based.\\r\\nIt relies on a pre-configured hostname (\\\"seed hostname\\\") with DNS A (or AAAA) records and reverse DNS lookups\\r\\nto perform peer discovery. More specifically, this mechanism will perform the following steps:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Query DNS A records of the seed hostname.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"For each returned DNS record's IP address, perform a reverse DNS lookup.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Append current node's prefix (e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbit\"\n        }), \" in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbit@hostname1.example.local\"\n        }), \")\\r\\nto each hostname and return the result.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For example, let's consider a seed hostname of\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"discovery.eng.example.local\"\n      }), \".  It has 2 DNS A\\r\\nrecords that return two IP addresses:\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"192.168.100.1\"\n      }), \" and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"192.168.100.2\"\n      }), \". Reverse DNS lookups for those IP\\r\\naddresses return \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"node1.eng.example.local\"\n      }), \" and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"node2.eng.example.local\"\n      }), \", respectively. Current node's name is not\\r\\nset and defaults to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@$(hostname)\"\n      }), \".\\r\\nThe final list of nodes discovered will contain two nodes: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@node1.eng.example.local\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@node2.eng.example.local\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"configuration-1\",\n      children: \"Configuration\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The seed hostname is set using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.dns.hostname\"\n      }), \" config setting:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = dns\\r\\n\\r\\n# the backend can also be specified using its module name\\r\\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_dns\\r\\n\\r\\ncluster_formation.dns.hostname = discovery.eng.example.local\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"host-file-modifications-in-containerized-environments\",\n      children: \"Host File Modifications in Containerized Environments\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"warning\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"In some containerized environments, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Hosts_(file)\",\n          children: \"local host file\"\n        }), \" is modified at container\\r\\nstartup time. This can affect hostname resolution on the host and make it impossible for this peer\\r\\ndiscovery mechanism to do its job.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In some containerized environments, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Hosts_(file)\",\n        children: \"local host file\"\n      }), \" is modified at container\\r\\nstartup time, for example, a configuration- or convention-based local hostname can be added to it.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This can affect hostname resolution on the host and make it impossible for this peer\\r\\ndiscovery mechanism to do its job.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Podman is one known example of a tool that can perform such host file modifications.\\r\\nIn order to avoid this, set its \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.a, {\n        href: \"https://github.com/containers/common/blob/main/docs/containers.conf.5.md\",\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"host_containers_internal_ip\"\n        }), \" setting\"]\n      }), \"\\r\\nmust be set to a blank string.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In environments where container-level settings cannot be tuned, the runtime\\r\\ncan be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./networking#the-inetrc-file\",\n        children: \"configured to ignore the standard local hosts file\"\n      }), \"\\r\\nand only use DNS or a pre-configured set of hostname-to-IP address mappings.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"peer-discovery-aws\",\n      children: \"Peer Discovery on AWS (EC2)\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"aws-peer-discovery-overview\",\n      children: \"AWS Peer Discovery Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"An \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/tree/main/deps/rabbitmq_peer_discovery_aws\",\n        children: \"AWS (EC2)-specific\"\n      }), \" discovery mechanism\\r\\nis available via a plugin.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As with any \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins\",\n        children: \"plugin\"\n      }), \", it must be enabled before it\\r\\ncan be used. For peer discovery plugins it means they must be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins#basics\",\n        children: \"enabled\"\n      }), \"\\r\\nor \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins#enabled-plugins-file\",\n        children: \"preconfigured\"\n      }), \" before first node boot:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmq-plugins --offline enable rabbitmq_peer_discovery_aws\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The plugin provides two ways for a node to discover its peers:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Using EC2 instance tags\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Using AWS autoscaling group membership\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Both methods rely on AWS-specific APIs (endpoints) and features and thus cannot work in\\r\\nother IaaS environments. Once a list of cluster member instances is retrieved,\\r\\nfinal node names are computed using instance hostnames or IP addresses.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"peer-discovery-aws-credentials\",\n      children: \"Configuration and Credentials\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Before a node can perform any operations on AWS, it needs to have a set of\\r\\nAWS account credentials configured. This can be done in a couple of ways:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Via \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./configure\",\n          children: \"config file\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Using environment variables \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"AWS_ACCESS_KEY_ID\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"AWS_SECRET_ACCESS_KEY\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\",\n        children: \"EC2 Instance Metadata service\"\n      }), \" for the region will also be consulted.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The following example snippet configures RabbitMQ to use the AWS peer discovery\\r\\nbackend and provides information about AWS region as well as a set of credentials:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = aws\\r\\n\\r\\n# the backend can also be specified using its module name\\r\\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_aws\\r\\n\\r\\ncluster_formation.aws.region = us-east-1\\r\\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\\r\\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If region is left unconfigured, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"us-east-1\"\n      }), \" will be used by default.\\r\\nSensitive values in configuration file can optionally \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#configuration-encryption\",\n        children: \"be encrypted\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-./ec2\",\n        children: \"IAM role is assigned to EC2 instances\"\n      }), \" running RabbitMQ nodes,\\r\\na policy has to be used to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\",\n        children: \"allow said instances use EC2 Instance Metadata Service\"\n      }), \".\\r\\nWhen the plugin is configured to use Autoscaling group members,\\r\\na policy has to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.aws.amazon.com/autoscaling/ec2/userguide/control-access-using-iam.html\",\n        children: \"grant access to describe autoscaling group members\"\n      }), \" (instances).\\r\\nBelow is an example of a policy that covers both use cases:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-json\",\n        children: \"{\\r\\n\\\"Version\\\": \\\"2012-10-17\\\",\\r\\n\\\"Statement\\\": [\\r\\n              {\\r\\n              \\\"Effect\\\": \\\"Allow\\\",\\r\\n              \\\"Action\\\": [\\r\\n                         \\\"autoscaling:DescribeAutoScalingInstances\\\",\\r\\n                         \\\"ec2:DescribeInstances\\\"\\r\\n                         ],\\r\\n              \\\"Resource\\\": [\\r\\n                           \\\"*\\\"\\r\\n                           ]\\r\\n              }\\r\\n              ]\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"peer-discovery-aws-autoscaling-group-membership\",\n      children: \"Using Autoscaling Group Membership\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When autoscaling-based peer discovery is used, current node's EC2 instance autoscaling\\r\\ngroup members will be listed and used to produce the list of discovered peers.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To use autoscaling group membership, set the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.aws.use_autoscaling_group\"\n      }), \" key\\r\\nto \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = aws\\r\\n\\r\\ncluster_formation.aws.region = us-east-1\\r\\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\\r\\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\\r\\n\\r\\ncluster_formation.aws.use_autoscaling_group = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"peer-discovery-aws-tags\",\n      children: \"Using EC2 Instance Tags\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When tags-based peer discovery is used, the plugin will list EC2 instances\\r\\nusing EC2 API and filter them by configured instance tags. Resulting instance set\\r\\nwill be used to produce the list of discovered peers.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Tags are configured using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.aws.instance_tags\"\n      }), \" key. The example\\r\\nbelow uses three tags: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"region\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"service\"\n      }), \", and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"environment\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = aws\\r\\n\\r\\ncluster_formation.aws.region = us-east-1\\r\\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\\r\\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\\r\\n\\r\\ncluster_formation.aws.instance_tags.region = us-east-1\\r\\ncluster_formation.aws.instance_tags.service = rabbitmq\\r\\ncluster_formation.aws.instance_tags.environment = staging\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"peer-discovery-aws-other-settings\",\n      children: \"Using Private EC2 Instance IPs\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"By default peer discovery will use private DNS hostnames to compute node names.\\r\\nThis option is most convenient and is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"highly recommended\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"However, it is possible to opt into using private IPs instead by setting\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.aws.use_private_ip\"\n      }), \" key to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \". For this setup to work,\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.a, {\n        href: \"./configure#customise-environment\",\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"RABBITMQ_NODENAME\"\n        }), \" must be set\"]\n      }), \" to the private IP address at node\\r\\ndeployment time.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_USE_LONGNAME\"\n      }), \" also has to be set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \" or an IP address won't be considered a valid\\r\\npart of node name.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = aws\\r\\n\\r\\ncluster_formation.aws.region = us-east-1\\r\\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\\r\\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\\r\\n\\r\\ncluster_formation.aws.use_autoscaling_group = true\\r\\ncluster_formation.aws.use_private_ip = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"peer-discovery-k8s\",\n      children: \"Peer Discovery on Kubernetes\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"kubernetes-peer-discovery-overview\",\n      children: \"Kubernetes Peer Discovery Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://kubernetes.io/\",\n        children: \"Kubernetes\"\n      }), \"-based discovery mechanism\\r\\nis available via \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/tree/main/deps/rabbitmq_peer_discovery_k8s\",\n        children: \"a plugin\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As with any \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins\",\n        children: \"plugin\"\n      }), \", it must be enabled before it\\r\\ncan be used. For peer discovery plugins it means they must be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins#basics\",\n        children: \"enabled\"\n      }), \"\\r\\nor \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins#enabled-plugins-file\",\n        children: \"preconfigured\"\n      }), \" before first node boot:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmq-plugins --offline enable rabbitmq_peer_discovery_k8s\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"important-prerequisites-and-deployment-considerations\",\n      children: \"Important: Prerequisites and Deployment Considerations\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.admonition, {\n      type: \"important\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"The recommended option for deploying RabbitMQ to Kubernetes is the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/kubernetes/operator/operator-overview\",\n          children: \"RabbitMQ Kubernetes Cluster Operator\"\n        }), \".\"]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"It follows the recommendations listed below.\"\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"With this mechanism, nodes fetch a list of their peers from\\r\\na Kubernetes API endpoint using a set of configured values:\\r\\na URI scheme, host, port, as well as the token and certificate paths.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If the recommended option of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/kubernetes/operator/operator-overview\",\n        children: \"RabbitMQ Kubernetes Cluster Operator\"\n      }), \" cannot be used,\\r\\nthere are several prerequisites and deployment choices that must be taken into\\r\\naccount when deploying RabbitMQ to Kubernetes, with this peer discovery mechanism\\r\\nand in general.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"use-a-stateful-set\",\n      children: \"Use a Stateful Set\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A RabbitMQ cluster deployed to Kubernetes will use a set of pods. The set must be a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://kubernetes.io/docs/tasks/run-application/run-replicated-stateful-application/#statefulset\",\n        children: \"stateful set\"\n      }), \".\\r\\nA \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#limitations\",\n        children: \"headless service\"\n      }), \" must be used to\\r\\ncontrol \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\",\n        children: \"network identity of the pods\"\n      }), \"\\r\\n(their hostnames), which in turn affect RabbitMQ node names.\\r\\nOn the headless service \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"spec\"\n      }), \", field \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"publishNotReadyAddresses\"\n      }), \" must be set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \" to propagate SRV DNS records for its Pods for the purpose of peer discovery.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In addition, since RabbitMQ nodes \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering#hostname-resolution-requirement\",\n        children: \"resolve their own and peer hostnames during boot\"\n      }), \",\\r\\nCoreDNS \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#stable-network-id\",\n        children: \"caching timeout may need to be decreased\"\n      }), \" from default 30 seconds\\r\\nto a value in the 5-10 second range.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"important\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"CoreDNS \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#stable-network-id\",\n          children: \"caching timeout may need to be decreased\"\n        }), \"\\r\\nfrom default 30 seconds to a value in the 5-10 second range\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If a stateless set is used recreated nodes will not have their persisted data and will start as blank nodes.\\r\\nThis can lead to data loss and higher network traffic volume due to more frequent\\r\\ndata synchronisation of both \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"quorum queues\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./streams\",\n        children: \"streams\"\n      }), \" on newly joining nodes.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"use-persistent-volumes\",\n      children: \"Use Persistent Volumes\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"How \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://kubernetes.io/docs/concepts/storage/persistent-volumes/\",\n        children: \"storage is configured\"\n      }), \"\\r\\nis generally orthogonal to peer discovery. However, it does not make sense to run a stateful\\r\\ndata service such as RabbitMQ with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./relocate\",\n        children: \"node data directory\"\n      }), \" stored on a transient volume.\\r\\nUse of transient volumes can lead nodes to not have their persisted data after a restart.\\r\\nThis has the same consequences as with stateless sets covered above.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.h4, {\n      id: \"make-sure-etcrabbitmq-is-mounted-as-writeable\",\n      children: [\"Make Sure \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/etc/rabbitmq\"\n      }), \" is Mounted as Writeable\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ nodes and images may need to update a file under \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/etc/rabbitmq\"\n      }), \", the default \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#config-location\",\n        children: \"configuration file location\"\n      }), \" on Linux. This may involve configuration file generation\\r\\nperformed by the image used, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins#enabled-plugins-file\",\n        children: \"enabled plugins file\"\n      }), \" updates,\\r\\nand so on.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is therefore highly recommended that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/etc/rabbitmq\"\n      }), \" is mounted as writeable and owned by\\r\\nRabbitMQ's effective user (typically \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq\"\n      }), \").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"use-parallel-podmanagementpolicy\",\n      children: \"Use Parallel podManagementPolicy\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"podManagementPolicy: \\\"Parallel\\\"\"\n      }), \" is the recommended option for RabbitMQ clusters.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Because of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering#restarting\",\n        children: \"how nodes rejoin their cluster\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"podManagementPolicy\"\n      }), \" set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"OrderedReady\"\n      }), \"\\r\\ncan lead to a deployment deadlock with certain readiness probes:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Kubernetes will expect the first node to pass a readiness probe\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The readiness probe may require a fully booted node\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The node will fully boot after it detects that its peers have come online\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Kubernetes will not start any more pods until the first one boots\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The deployment therefore is deadlocked\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"podManagementPolicy: \\\"Parallel\\\"\"\n      }), \" avoids this problem, and the Kubernetes peer discovery plugin\\r\\nthen deals with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#initial-formation-race-condition\",\n        children: \"natural race condition present during parallel cluster formation\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"use-most-basic-health-checks-for-rabbitmq-pod-readiness-probes\",\n      children: \"Use Most Basic Health Checks for RabbitMQ Pod Readiness Probes\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A readiness probe that expects the node to be fully booted and have rejoined its cluster peers\\r\\ncan deadlock a deployment that restarts all RabbitMQ pods and relies on the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"OrderedReady\"\n      }), \" pod management policy.\\r\\nDeployments that use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Parallel\"\n      }), \" pod management policy\\r\\nwill not be affected.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"One health check that does not expect a node to be fully booted and have schema tables synced is\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# a very basic check that will succeed for the nodes that are currently waiting for\\r\\n# a peer to sync schema from\\r\\nrabbitmq-diagnostics ping\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This basic check would allow the deployment to proceed and the nodes to eventually rejoin each other,\\r\\nassuming they are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./upgrade\",\n        children: \"compatible\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"See \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering#restarting-schema-sync\",\n        children: \"Schema Syncing from Online Peers\"\n      }), \" in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering\",\n        children: \"Clustering guide\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"examples\",\n      children: \"Examples\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A minimalistic \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/diy-kubernetes-examples\",\n        children: \"runnable example of Kubernetes peer discovery\"\n      }), \"\\r\\nmechanism can be found on GitHub.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The example can be run using either MiniKube or Kind.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"configuration-2\",\n      children: \"Configuration\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To use Kubernetes for peer discovery, set the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.peer_discovery_backend\"\n      }), \"\\r\\nto \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"k8s\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"kubernetes\"\n      }), \" or its module name, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit_peer_discovery_k8s\"\n      }), \"\\r\\n(note: the name of the module is slightly different from plugin name):\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = k8s\\r\\n\\r\\n# the backend can also be specified using its module name\\r\\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s\\r\\n\\r\\n# Kubernetes API hostname (or IP address). Default value is kubernetes.default.svc.cluster.local\\r\\ncluster_formation.k8s.host = kubernetes.default.example.local\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"kubernetes-api-endpoint\",\n      children: \"Kubernetes API Endpoint\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is possible to configure Kubernetes API port and URI scheme:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = k8s\\r\\n\\r\\ncluster_formation.k8s.host = kubernetes.default.example.local\\r\\n# 443 is used by default\\r\\ncluster_formation.k8s.port = 443\\r\\n# https is used by default\\r\\ncluster_formation.k8s.scheme = https\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"kubernetes-api-access-token\",\n      children: \"Kubernetes API Access Token\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Kubernetes token file path is configurable via \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.k8s.token_path\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = k8s\\r\\n\\r\\ncluster_formation.k8s.host = kubernetes.default.example.local\\r\\n# default value is /var/run/secrets/kubernetes.io/serviceaccount/token\\r\\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It must point to a local file that exists and is readable by RabbitMQ.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"kubernetes-namespace\",\n      children: \"Kubernetes Namespace\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.k8s.namespace_path\"\n      }), \" controls when the K8S namespace is loaded from:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = k8s\\r\\n\\r\\ncluster_formation.k8s.host = kubernetes.default.example.local\\r\\n\\r\\n# ...\\r\\n\\r\\n# Default value: /var/run/secrets/kubernetes.io/serviceaccount/namespace\\r\\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Just like with the token path key, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.k8s.namespace_path\"\n      }), \" must point to a local\\r\\nfile that exists and is readable by RabbitMQ.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"kubernetes-api-ca-certificate-bundle\",\n      children: \"Kubernetes API CA Certificate Bundle\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Kubernetes API \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl#certificates-and-keys\",\n        children: \"CA certificate bundle\"\n      }), \" file path is\\r\\nconfigured using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.k8s.cert_path\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = k8s\\r\\n\\r\\ncluster_formation.k8s.host = kubernetes.default.example.local\\r\\n\\r\\n# Where to load the K8S API access token from.\\r\\n# Default value: /var/run/secrets/kubernetes.io/serviceaccount/token\\r\\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\\r\\n\\r\\n# Where to load K8S API CA bundle file from. It will be used when issuing requests\\r\\n# to the K8S API using HTTPS.\\r\\n#\\r\\n# Default value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\\r\\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Just like with the token path key, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.k8s.cert_path\"\n      }), \" must point to a local\\r\\nfile that exists and is readable by RabbitMQ.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"peer-node-pods-can-use-hostnames-or-ip-addresses\",\n      children: \"Peer Node Pods Can Use Hostnames or IP Addresses\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When a list of peer nodes is computed from a list of pod containers returned by Kubernetes,\\r\\neither hostnames or IP addresses can be used. This is configurable using the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.k8s.address_type\"\n      }), \" key:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = k8s\\r\\n\\r\\ncluster_formation.k8s.host = kubernetes.default.example.local\\r\\n\\r\\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\\r\\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\\r\\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\\r\\n\\r\\n# should result set use hostnames or IP addresses\\r\\n# of Kubernetes API-reported containers?\\r\\n# supported values are \\\"hostname\\\" and \\\"ip\\\"\\r\\ncluster_formation.k8s.address_type = hostname\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Supported values are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ip\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"hostname\"\n      }), \". \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"hostname\"\n      }), \" is\\r\\nthe recommended option but has limitations: it can only be used with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://kubernetes.io/docs/tasks/run-application/run-replicated-stateful-application/#statefulset\",\n        children: \"stateful sets\"\n      }), \" (also highly recommended)\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://kubernetes.io/docs/concepts/services-networking/service/#headless-services\",\n        children: \"headless services\"\n      }), \".\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ip\"\n      }), \" is used by default for better compatibility.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h5, {\n      id: \"peer-node-pod-name-suffix\",\n      children: \"Peer Node Pod Name Suffix\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to append a suffix to peer hostnames returned by Kubernetes using\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.k8s.hostname_suffix\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = k8s\\r\\n\\r\\ncluster_formation.k8s.host = kubernetes.default.example.local\\r\\n\\r\\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\\r\\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\\r\\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\\r\\n\\r\\n# no suffix is appended by default\\r\\ncluster_formation.k8s.hostname_suffix = rmq.eng.example.local\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Service name is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq\"\n      }), \" by default but can be overridden using the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.k8s.service_name\"\n      }), \" key if needed:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = k8s\\r\\n\\r\\ncluster_formation.k8s.host = kubernetes.default.example.local\\r\\n\\r\\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\\r\\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\\r\\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\\r\\n\\r\\n# overrides Kubernetes service name. Default value is \\\"rabbitmq\\\".\\r\\ncluster_formation.k8s.service_name = rmq-qa\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"peer-discovery-consul\",\n      children: \"Peer Discovery Using Consul\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"consul-peer-discovery-overview\",\n      children: \"Consul Peer Discovery Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.consul.io\",\n        children: \"Consul\"\n      }), \"-based discovery mechanism\\r\\nis available via \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/tree/main/deps/rabbitmq_peer_discovery_consul\",\n        children: \"a plugin\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As with any \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins\",\n        children: \"plugin\"\n      }), \", it must be enabled before it\\r\\ncan be used. For peer discovery plugins it means they must be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins#basics\",\n        children: \"enabled\"\n      }), \"\\r\\nor \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins#enabled-plugins-file\",\n        children: \"preconfigured\"\n      }), \" before first node boot:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmq-plugins --offline enable rabbitmq_peer_discovery_consul\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The plugin supports Consul 0.8.0 and later versions.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Nodes register with Consul on boot and unregister when they\\r\\nleave. Prior to registration, nodes will attempt to acquire a\\r\\nlock in Consul to reduce the probability of a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#initial-formation-race-condition\",\n        children: \"race condition\\r\\nduring initial cluster formation\"\n      }), \".\\r\\nWhen a node registers with Consul, it will set up a periodic \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.consul.io/docs/agent/checks.html\",\n        children: \"health\\r\\ncheck\"\n      }), \" for itself (more on this below).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"configuration-3\",\n      children: \"Configuration\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To use Consul for peer discovery, set the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.peer_discovery_backend\"\n      }), \"\\r\\nto \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"consul\"\n      }), \" or its module name, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit_peer_discovery_consul\"\n      }), \" (note: the name of the module is\\r\\nslightly different from plugin name):\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\n# the backend can also be specified using its module name\\r\\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_consul\\r\\n\\r\\n# Consul host (hostname or IP address). Default value is localhost\\r\\ncluster_formation.consul.host = consul.eng.example.local\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"consul-endpoint\",\n      children: \"Consul Endpoint\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is possible to configure Consul port and URI scheme:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n# 8500 is used by default\\r\\ncluster_formation.consul.port = 8500\\r\\n# http is used by default\\r\\ncluster_formation.consul.scheme = http\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"consul-acl-token\",\n      children: \"Consul ACL Token\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To configure \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.consul.io/docs/guides/acl.html\",\n        children: \"Consul ACL\"\n      }), \" token,\\r\\nuse \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.consul.acl_token\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\ncluster_formation.consul.acl_token = acl-token-value\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Service name (as registered in Consul) defaults to \\\"rabbitmq\\\" but can be overridden:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n# rabbitmq is used by default\\r\\ncluster_formation.consul.svc = rabbitmq\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"service-address\",\n      children: \"Service Address\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Service hostname (address) as registered in Consul will be fetched by peers\\r\\nand therefore must resolve on all nodes.\\r\\nThe hostname can be computed by the plugin or specified by the user. When computed automatically,\\r\\na number of nodes and OS properties can be used:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Hostname (as returned by \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"gethostname(2)\"\n        }), \")\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Node name (without the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbit@\"\n        }), \" prefix)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"IP address of an NIC (network controller interface)\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.consul.svc_addr_auto\"\n      }), \" is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"false\"\n      }), \",\\r\\nservice name will be taken as is from \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.consul.svc_addr\"\n      }), \".\\r\\nWhen it is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \", other options explained below come into play.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In the following example, the service address reported to Consul is\\r\\nhardcoded to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"hostname1.rmq.eng.example.local\"\n      }), \" instead of being computed automatically\\r\\nfrom the environment:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n\\r\\ncluster_formation.consul.svc = rabbitmq\\r\\n# do not compute service address, it will be specified below\\r\\ncluster_formation.consul.svc_addr_auto = false\\r\\n# service address, will be communicated to other nodes\\r\\ncluster_formation.consul.svc_addr = hostname1.rmq.eng.example.local\\r\\n# use long RabbitMQ node names?\\r\\ncluster_formation.consul.use_longname = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In this example, the service address reported to Consul is\\r\\nparsed from node name (the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@\"\n      }), \" prefix will be dropped):\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n\\r\\ncluster_formation.consul.svc = rabbitmq\\r\\n# do compute service address\\r\\ncluster_formation.consul.svc_addr_auto = true\\r\\n# compute service address using node name\\r\\ncluster_formation.consul.svc_addr_use_nodename = true\\r\\n# use long RabbitMQ node names?\\r\\ncluster_formation.consul.use_longname = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.consul.svc_addr_use_nodename\"\n      }), \" is a boolean\\r\\nfield that instructs Consul peer discovery backend to compute service address\\r\\nusing RabbitMQ node name.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In the next example, the service address is\\r\\ncomputed using hostname as reported by the OS instead of node name:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n\\r\\ncluster_formation.consul.svc = rabbitmq\\r\\n# do compute service address\\r\\ncluster_formation.consul.svc_addr_auto = true\\r\\n# compute service address using host name and not node name\\r\\ncluster_formation.consul.svc_addr_use_nodename = false\\r\\n# use long RabbitMQ node names?\\r\\ncluster_formation.consul.use_longname = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In the example below, the service address is\\r\\ncomputed by taking the IP address of a provided NIC, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"en0\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n\\r\\ncluster_formation.consul.svc = rabbitmq\\r\\n# do compute service address\\r\\ncluster_formation.consul.svc_addr_auto = true\\r\\n# compute service address using the IP address of a NIC, en0\\r\\ncluster_formation.consul.svc_addr_nic = en0\\r\\ncluster_formation.consul.svc_addr_use_nodename = false\\r\\n# use long RabbitMQ node names?\\r\\ncluster_formation.consul.use_longname = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"service-port\",\n      children: \"Service Port\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Service port as registered in Consul can be overridden. This is only\\r\\nnecessary if RabbitMQ uses a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./networking\",\n        children: \"non-standard port\"\n      }), \"\\r\\nfor client (technically AMQP 0-9-1 and AMQP 1.0) connections since default value is 5672.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n# 5672 is used by default\\r\\ncluster_formation.consul.svc_port = 6674\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"service-tags-and-metadata\",\n      children: \"Service Tags and Metadata\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to provide \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.consul.io/docs/agent/./services\",\n        children: \"Consul service tags\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n# Define tags for the RabbitMQ service: \\\"qa\\\" and \\\"3.8\\\"\\r\\ncluster_formation.consul.svc_tags.1 = qa\\r\\ncluster_formation.consul.svc_tags.2 = 3.8\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to configure \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.consul.io/docs/agent/./services\",\n        children: \"Consul service metadata\"\n      }), \",\\r\\nwhich is a map of string keys to string values with certain restrictions\\r\\n(see Consul documentation to learn more):\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n\\r\\n# Define metadata for the RabbitMQ service. Both keys and values have a\\r\\n# maximum length limit enforced by Consul. This can be used to provide additional\\r\\n# context about the service (RabbitMQ cluster) for operators or other tools.\\r\\ncluster_formation.consul.svc_meta.owner = team-xyz\\r\\ncluster_formation.consul.svc_meta.service = service-one\\r\\ncluster_formation.consul.svc_meta.stats_url = https://service-one.eng.megacorp.local/stats/\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"service-health-checks\",\n      children: \"Service Health Checks\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When a node registers with Consul, it will set up a periodic \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.consul.io/docs/agent/checks.html\",\n        children: \"health check\"\n      }), \"\\r\\nfor itself. Online nodes will periodically send a health check update to Consul to indicate the service\\r\\nis available. This interval can be configured:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n# health check interval (node TTL) in seconds\\r\\n# default: 30\\r\\ncluster_formation.consul.svc_ttl = 40\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A node that failed its \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.consul.io/docs/agent/checks.html\",\n        children: \"health check\"\n      }), \" is considered\\r\\nto be in the warning state by Consul.\\r\\nSuch nodes can be automatically unregistered by Consul after a\\r\\nperiod of time (note: this is a separate interval value from\\r\\nthe TTL above). The period cannot be less than 60 seconds.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n# health check interval (node TTL) in seconds\\r\\ncluster_formation.consul.svc_ttl = 30\\r\\n# how soon should nodes that fail their health checks be unregistered by Consul?\\r\\n# this value is in seconds and must not be lower than 60 (a Consul requirement)\\r\\ncluster_formation.consul.deregister_after = 90\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Please see a section on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#node-health-checks-and-cleanup\",\n        children: \"automatic cleanup of nodes\"\n      }), \" below.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Nodes in the warning state are excluded from peer discovery results\\r\\nby default. It is possible to opt into including them by setting\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.consul.include_nodes_with_warnings\"\n      }), \" to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n# health check interval (node TTL) in seconds\\r\\ncluster_formation.consul.svc_ttl = 30\\r\\n# include node in the warning state into discovery result set\\r\\ncluster_formation.consul.include_nodes_with_warnings = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"node-name-suffixes\",\n      children: \"Node Name Suffixes\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If node name is computed and long node names are used, it is possible to\\r\\nappend a suffix to node names retrieved from Consul. The format is\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \".node.{domain_suffix}\"\n      }), \". This can be useful in environments with\\r\\nDNS conventions, e.g. when all service nodes\\r\\nare organised in a separate subdomain. Here's an example:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n\\r\\ncluster_formation.consul.svc = rabbitmq\\r\\n# do compute service address\\r\\ncluster_formation.consul.svc_addr_auto = true\\r\\n# compute service address using node name\\r\\ncluster_formation.consul.svc_addr_use_nodename = true\\r\\n# use long RabbitMQ node names?\\r\\ncluster_formation.consul.use_longname = true\\r\\n# append a suffix (node.rabbitmq.example.local) to node names retrieved from Consul\\r\\ncluster_formation.consul.domain_suffix = example.local\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"With this setup node names will be computed to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@192.168.100.1.node.example.local\"\n      }), \"\\r\\ninstead of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@192.168.100.1\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"distributed-lock-acquisition\",\n      children: \"Distributed Lock Acquisition\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a node tries to acquire a lock on boot and the lock is already taken,\\r\\nit will wait for the lock to become available for a limited amount of time. Default value is 300\\r\\nseconds but it can be configured:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\n# lock acquisition timeout in seconds\\r\\n# default: 300\\r\\n# cluster_formation.consul.lock_wait_time is an alias\\r\\ncluster_formation.consul.lock_timeout = 60\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Lock key prefix is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq\"\n      }), \" by default. It can also be overridden:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = consul\\r\\n\\r\\ncluster_formation.consul.host = consul.eng.example.local\\r\\ncluster_formation.consul.lock_timeout = 60\\r\\n# should the Consul key used for locking be prefixed with something\\r\\n# other than \\\"rabbitmq\\\"?\\r\\ncluster_formation.consul.lock_prefix = environments-qa\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"peer-discovery-etcd\",\n      children: \"Peer Discovery Using Etcd\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"etcd-peer-discovery-overview\",\n      children: \"Etcd Peer Discovery Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"An \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://etcd.io/\",\n        children: \"etcd\"\n      }), \"-based discovery mechanism\\r\\nis available via \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/tree/main/deps/rabbitmq_peer_discovery_etcd\",\n        children: \"a plugin\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As of RabbitMQ \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"3.8.4\"\n      }), \", the plugin uses a v3 API, gRPC-based etcd client and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"requires etcd 3.4 or a later version\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As with any \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins\",\n        children: \"plugin\"\n      }), \", it must be enabled before it\\r\\ncan be used. For peer discovery plugins it means they must be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins#basics\",\n        children: \"enabled\"\n      }), \"\\r\\nor \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./plugins#enabled-plugins-file\",\n        children: \"preconfigured\"\n      }), \" before first node boot:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmq-plugins --offline enable rabbitmq_peer_discovery_etcd\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Nodes register with etcd on boot by creating a key in a conventionally named directory. The keys have\\r\\na short (say, a minute) expiration period. The keys are deleted when nodes stop cleanly.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Prior to registration, nodes will attempt to acquire a\\r\\nlock in etcd to reduce the probability of a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#initial-formation-race-condition\",\n        children: \"race condition\\r\\nduring initial cluster formation\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Every node's key has an associated \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://etcd.io/docs/v3.4.0/dev-guide/interacting_v3/#grant-leases\",\n        children: \"lease\"\n      }), \"\\r\\nwith a configurable TTL. Nodes keep their key's leases alive.\\r\\nIf a node loses connectivity and cannot update its lease, its key will be cleaned up by etcd after TTL expires.\\r\\nSuch nodes won't be discovered by newly joining nodes.\\r\\nIf configured, such nodes can be forcefully removed from the cluster.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"configuration-4\",\n      children: \"Configuration\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"etcd-endpoints-and-authentication\",\n      children: \"etcd Endpoints and Authentication\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To use etcd for peer discovery, set the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.peer_discovery_backend\"\n      }), \"\\r\\nto \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"etcd\"\n      }), \" or its module name, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit_peer_discovery_etcd\"\n      }), \" (note: the name of the module\\r\\nis slightly different from plugin name).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The plugin requires a configured etcd endpoint for the plugin\\r\\nto connect to:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = etcd\\r\\n\\r\\n# the backend can also be specified using its module name\\r\\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_etcd\\r\\n\\r\\n# etcd endpoints. This property is required or peer discovery won't be performed.\\r\\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is possible to configure multiple etcd endpoints. The first randomly\\r\\nchosen one that the plugin can successfully connect to will be used.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = etcd\\r\\n\\r\\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\\r\\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\\r\\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://etcd.io/docs/v3.4.0/op-guide/authentication/\",\n        children: \"authentication is enabled for etcd\"\n      }), \", the plugin can be configured to use\\r\\na pair of credentials:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = etcd\\r\\n\\r\\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\\r\\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\\r\\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\\r\\n\\r\\ncluster_formation.etcd.username = rabbitmq\\r\\ncluster_formation.etcd.password = s3kR37\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#advanced-config-file\",\n        children: \"advanced.config\"\n      }), \" file to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#configuration-encryption\",\n        children: \"encrypt the password value\"\n      }), \"\\r\\nlisted in the config. In this case all plugin settings must be moved to the advanced config:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-erlang\",\n        children: \"%% advanced.config file\\r\\n[\\r\\n {rabbit,\\r\\n     [{cluster_formation,\\r\\n          [{peer_discovery_etcd, [\\r\\n                {endpoints, [\\r\\n                  \\\"one.etcd.eng.example.local:2379\\\",\\r\\n                  \\\"two.etcd.eng.example.local:2479\\\",\\r\\n                  \\\"three.etcd.eng.example.local:2579\\\"\\r\\n                ]},\\r\\n\\r\\n                {etcd_prefix,   \\\"rabbitmq\\\"},\\r\\n                {cluster_name,  \\\"default\\\"},\\r\\n\\r\\n                {etcd_username, \\\"etcd user\\\"},\\r\\n                {etcd_password, {encrypted, <<\\\"cPAymwqmMnbPXXRVqVzpxJdrS8mHEKuo2V+3vt1u/fymexD9oztQ2G/oJ4PAaSb2c5N/hRJ2aqP/X0VAfx8xOQ==\\\">>}\\r\\n                }]\\r\\n           }]\\r\\n      }]\\r\\n },\\r\\n\\r\\n  {config_entry_decoder, [\\r\\n             {passphrase, <<\\\"decryption key passphrase\\\">>}\\r\\n         ]}\\r\\n].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"key-naming\",\n      children: \"Key Naming\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Directories and keys used by the peer discovery mechanism follow a naming scheme.\\r\\nSince in etcd \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://etcd.io/docs/v3.4.0/rfc/v3api/\",\n        children: \"v3 API the key space is flat\"\n      }), \",\\r\\na hardcoded prefix is used. It allows the plugin to predictably perform key range queries\\r\\nusing a well-known prefix:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# for node presence keys\\r\\n/rabbitmq/discovery/{prefix}/clusters/{cluster name}/nodes/{node name}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# for registration lock keys\\r\\n/rabbitmq/locks/{prefix}/clusters/{cluster name}/registration\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Here's an example of a key that would be used by node \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit@hostname1\"\n      }), \"\\r\\nwith default user-provided key prefix and cluster name:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"/rabbitmq/discovery/rabbitmq/clusters/default/nodes/rabbit@hostname1\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Default key prefix is simply \\\"rabbitmq\\\". It rarely needs overriding but that's\\r\\nsupported:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = etcd\\r\\n\\r\\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\\r\\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\\r\\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\\r\\n\\r\\n# rabbitmq is used by default\\r\\ncluster_formation.etcd.key_prefix = rabbitmq_discovery\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If multiple RabbitMQ clusters share an etcd installation, each cluster must use\\r\\na unique name:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = etcd\\r\\n\\r\\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\\r\\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\\r\\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\\r\\n\\r\\n# default name: \\\"default\\\"\\r\\ncluster_formation.etcd.cluster_name = staging\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"key-leases-and-ttl\",\n      children: \"Key Leases and TTL\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Key used for node registration will have a lease with a TTL associated with them.\\r\\nOnline nodes will periodically keep the leases alive (refresh). The TTL value can be configured:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = etcd\\r\\n\\r\\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\\r\\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\\r\\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\\r\\n\\r\\n# node TTL in seconds\\r\\n# default: 30\\r\\ncluster_formation.etcd.node_ttl = 40\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Key leases are updated periodically while the node is running and the plugin\\r\\nremains enabled.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is possible to forcefully remove the nodes that fail to refresh their keys from the cluster.\\r\\nThis is covered later in this guide.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"locks\",\n      children: \"Locks\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a node tries to acquire a lock on boot and the lock is already taken,\\r\\nit will wait for the lock to become available for a limited amount of time. Default value is 300\\r\\nseconds but it can be configured:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = etcd\\r\\n\\r\\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\\r\\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\\r\\n\\r\\n# lock acquisition timeout in seconds\\r\\n# default: 300\\r\\n# cluster_formation.consul.lock_wait_time is an alias\\r\\ncluster_formation.etcd.lock_timeout = 60\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"inspecting-keys\",\n      children: \"Inspecting Keys\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In order to list all keys used by the etcd-based peer discovery mechanism, use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"etcdctl get\"\n      }), \" like so:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"etcdctl get --prefix=true \\\"/rabbitmq\\\"\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"tls\",\n      children: \"TLS\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to configure the plugin to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl\",\n        children: \"use TLS\"\n      }), \" when connecting to etcd.\\r\\nTLS will be enabled if any of the TLS options listed below are configured, otherwise\\r\\nconnections will use \\\"plain TCP\\\" without TLS.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The plugin acts as a TLS client. A \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl#peer-verification\",\n        children: \"trusted CA certificate\"\n      }), \" file must\\r\\nbe provided as well as a client certificate and private key pair:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = etcd\\r\\n\\r\\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\\r\\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\\r\\n\\r\\n# trusted CA certificate file path\\r\\ncluster_formation.etcd.ssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\n# client certificate (public key) file path\\r\\ncluster_formation.etcd.ssl_options.certfile   = /path/to/client_certificate.pem\\r\\n# client private key file path\\r\\ncluster_formation.etcd.ssl_options.keyfile    = /path/to/client_key.pem\\r\\n\\r\\n# use TLSv1.2 for connections\\r\\ncluster_formation.etcd.ssl_options.versions.1 = tlsv1.2\\r\\n\\r\\n# enables peer verification (the plugin will verify the certificate chain of the server)\\r\\ncluster_formation.etcd.ssl_options.verify               = verify_peer\\r\\ncluster_formation.etcd.ssl_options.fail_if_no_peer_cert = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"More \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl\",\n        children: \"TLS options\"\n      }), \" are supported such as cipher suites and\\r\\nclient-side session renegotiation options:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = etcd\\r\\n\\r\\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\\r\\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\\r\\n\\r\\n# trusted CA certificate file path\\r\\ncluster_formation.etcd.ssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\n# client certificate (public key) file path\\r\\ncluster_formation.etcd.ssl_options.certfile   = /path/to/client_certificate.pem\\r\\n# client private key file path\\r\\ncluster_formation.etcd.ssl_options.keyfile    = /path/to/client_key.pem\\r\\n\\r\\n# use TLSv1.2 for connections\\r\\ncluster_formation.etcd.ssl_options.versions.1 = tlsv1.2\\r\\n\\r\\n# enables peer verification (the plugin will verify the certificate chain of the server)\\r\\ncluster_formation.etcd.ssl_options.verify               = verify_peer\\r\\ncluster_formation.etcd.ssl_options.fail_if_no_peer_cert = true\\r\\n\\r\\n# use secure session renegotiation\\r\\ncluster_formation.etcd.ssl_options.secure_renegotiate   = true\\r\\n\\r\\n# Explicitly list enabled cipher suites. This can break connectivity\\r\\n# and is not necessary most of the time.\\r\\ncluster_formation.etcd.ssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384\\r\\ncluster_formation.etcd.ssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384\\r\\ncluster_formation.etcd.ssl_options.ciphers.3  = ECDH-ECDSA-AES256-GCM-SHA384\\r\\ncluster_formation.etcd.ssl_options.ciphers.4  = ECDH-RSA-AES256-GCM-SHA384\\r\\ncluster_formation.etcd.ssl_options.ciphers.5  = DHE-RSA-AES256-GCM-SHA384\\r\\ncluster_formation.etcd.ssl_options.ciphers.6  = DHE-DSS-AES256-GCM-SHA384\\r\\ncluster_formation.etcd.ssl_options.ciphers.7  = ECDHE-ECDSA-AES128-GCM-SHA256\\r\\ncluster_formation.etcd.ssl_options.ciphers.8  = ECDHE-RSA-AES128-GCM-SHA256\\r\\ncluster_formation.etcd.ssl_options.ciphers.9  = ECDH-ECDSA-AES128-GCM-SHA256\\r\\ncluster_formation.etcd.ssl_options.ciphers.10 = ECDH-RSA-AES128-GCM-SHA256\\r\\ncluster_formation.etcd.ssl_options.ciphers.11 = DHE-RSA-AES128-GCM-SHA256\\r\\ncluster_formation.etcd.ssl_options.ciphers.12 = DHE-DSS-AES128-GCM-SHA256\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"initial-formation-race-condition\",\n      children: \"Race Conditions During Initial Cluster Formation\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For successful cluster formation, only one node should form the cluster initially, that is,\\r\\nstart as a standalone node and initializing its database. If this was not the case, multiple\\r\\nclusters would be formed instead of just one, violating operator expectations.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Consider a deployment where the entire cluster is provisioned at once and all nodes start in parallel.\\r\\nIn this case, a natural race condition occurs between the starting nodes.\\r\\nTo prevent multiple nodes forming separate clusters, peer discovery backends try to acquire a lock when either\\r\\nforming the cluster (seeding) or joining a peer. What locks are used varies from backend to backend:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Classic config file, K8s, and AWS backends use a built-in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://erlang.org/doc/man/global.html#set_lock-3\",\n          children: \"locking library\"\n        }), \" provided by the runtime\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The Consul peer discovery backend sets a lock in Consul\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The etcd peer discovery backend sets a lock in etcd\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"node-health-checks-and-cleanup\",\n      children: \"Node Health Checks and Forced Removal\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Nodes in clusters formed using peer discovery can fail, become unavailable or be permanently\\r\\nremoved (decommissioned). Some operators may want such nodes to be automatically removed\\r\\nfrom the cluster after a period of time. Such automated forced removal also can produce\\r\\nunforeseen side effects, so RabbitMQ does not enforce this behavior. It \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"should be used\\r\\nwith great care\"\n      }), \" and only if the side effects are fully understood and considered.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For example, consider a cluster that uses the AWS backend configured to use autoscaling group membership.\\r\\nIf an EC2 instance in that group fails and is later re-created as a new node, its original \\\"incarnation\\\"\\r\\nwill be considered a separate, now permanently unavailable node in the same cluster.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"With peer discovery backends that offer dynamic node management (as opposed to, say, a fixed list of nodes\\r\\nin the configuration file), such unknown nodes can be logged or forcefully removed from the cluster.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"They are\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#peer-discovery-aws\",\n          children: \"AWS (EC2)\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#peer-discovery-k8s\",\n          children: \"Kubernetes\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#peer-discovery-consul\",\n          children: \"Consul\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#peer-discovery-etcd\",\n          children: \"etcd\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Forced node removal can be dangerous and should be carefully considered. For example,\\r\\na node that's temporarily unavailable but will be rejoining (or recreated with its\\r\\npersistent storage re-attached from its previous incarnation) can be kicked\\r\\nout of the cluster permanently by automatic cleanup, thus failing to rejoin.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Before enabling the configuration keys covered below make sure that a compatible\\r\\npeer discovery plugin is enabled. If that's not the case the node will report\\r\\nthe settings to be unknown and will fail to start.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To log warnings for the unknown nodes,\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.node_cleanup.only_log_warning\"\n      }), \" should be set to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# Don't remove cluster members unknown to the peer discovery backend but log\\r\\n# warnings.\\r\\n#\\r\\n# This setting can only be used if a compatible peer discovery plugin is enabled.\\r\\ncluster_formation.node_cleanup.only_log_warning = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This is the default behavior.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To forcefully delete the unknown nodes from the cluster,\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.node_cleanup.only_log_warning\"\n      }), \" should be set to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"false\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# Forcefully remove cluster members unknown to the peer discovery backend. Once removed,\\r\\n# the nodes won't be able to rejoin. Use this mode with great care!\\r\\n#\\r\\n# This setting can only be used if a compatible peer discovery plugin is enabled.\\r\\ncluster_formation.node_cleanup.only_log_warning = false\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that this option should be used with care, in particular\\r\\nwith discovery backends other than AWS.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The cleanup checks are performed periodically. The interval is 60 seconds\\r\\nby default and can be overridden:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# perform the check every 90 seconds\\r\\ncluster_formation.node_cleanup.interval = 90\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Some backends (Consul, etcd) support node health checks or TTL. These checks\\r\\nshould not to be confused with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./monitoring#health-checks\",\n        children: \"monitoring health checks\"\n      }), \".\\r\\nThey allow peer discovery services (such as etcd or Consul) keep track of what\\r\\nnodes are still around (have checked in recently).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"With service discovery health checks, nodes set a TTL on their keys and/or periodically\\r\\nnotify their respective discovery service that they are still present. If no notifications\\r\\nfrom a node come in after a period of time, the node's key will eventually expire (with\\r\\nConsul, such nodes will be considered to be in a warning state).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"With etcd, such nodes will no longer show up in discovery results. With Consul,\\r\\nthey can either be removed (deregistered) or their warning state can be\\r\\nreported. Please see documentation for those backends to learn more.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Automatic cleanup of absent nodes makes most sense in environments where failed/discontinued nodes\\r\\nwill be replaced with brand new ones (including cases when persistent storage won't be re-attached).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When automatic node cleanup is deactivated (switched to the warning mode), operators have to\\r\\nexplicitly remove absent cluster nodes using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbitmqctl forget_cluster_node\"\n        })\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"negative-side-effects-of-automatic-removal\",\n      children: \"Negative Side Effects of Automatic Removal\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Automatic node removal has a number of negative side effects operators should be aware of.\\r\\nA node that's temporarily unreachable, for example, because it's lost connectivity\\r\\nto the rest of the network or its VM was temporarily suspended, will be removed and will\\r\\nthen come back. Such node won't be able to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#rejoining\",\n        children: \"rejoin its cluster\"\n      }), \" and will\\r\\nlog a similar message:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Node 'rabbit@node1.local' thinks it's clustered with node 'rabbit@node2.local', but 'rabbit@node2.local' disagrees\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In addition, such nodes can begin to fail their \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./monitoring#health-checks\",\n        children: \"monitoring health checks\"\n      }), \",\\r\\nas they would be in a permanent \\\"partitioned off\\\" state. Even though such nodes might have been\\r\\nreplaced with a new one and the cluster would be operating as expected, such automatically removed\\r\\nand replaced nodes can produce monitoring false positives.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The list of side effects is not limited to those two scenarios but they all have the same\\r\\nroot cause: an automatically removed node can come back without realising that it's been kicked out\\r\\nof its cluster. Monitoring systems and operators won't be immediately aware of that event either.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"discovery-retries\",\n      children: \"Peer Discovery Failures and Retries\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In latest releases if a peer discovery attempt fail, it will be retried up to a certain number\\r\\nof times with a delay between each attempt. This is similar to the peer sync retries nodes\\r\\nperform \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering#restarting\",\n        children: \"when they come online after a restart\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For example, with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#peer-discovery-k8s\",\n        children: \"Kubernetes peer discovery mechanism\"\n      }), \" this means that\\r\\nKubernetes API requests that list pods will be retried should they fail. With the AWS mechanism,\\r\\nEC2 API requests are retried, and so on.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Such retries by no means handle every possible failure scenario but they improve the resilience\\r\\nof peer discovery and thus cluster and node deployments in practice. However, if clustered\\r\\nnodes \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering#erlang-cookie\",\n        children: \"fail to authenticate\"\n      }), \" with each other, retries\\r\\nwill simply merely the inevitable failure of cluster formation.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Nodes that fail to perform peer discovery will \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./logging\",\n        children: \"log\"\n      }), \" their remaining recovery attempts:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"2020-06-27 06:35:36.426 [error] <0.277.0> Trying to join discovered peers failed. Will retry after a delay of 500 ms, 4 retries left...\\r\\n2020-06-27 06:35:36.928 [warning] <0.277.0> Could not auto-cluster with node rabbit@hostname2: {badrpc,nodedown}\\r\\n2020-06-27 06:35:36.930 [warning] <0.277.0> Could not auto-cluster with node rabbit@hostname3: {badrpc,nodedown}\\r\\n2020-06-27 06:35:36.930 [error] <0.277.0> Trying to join discovered peers failed. Will retry after a delay of 500 ms, 3 retries left...\\r\\n2020-06-27 06:35:37.432 [warning] <0.277.0> Could not auto-cluster with node rabbit@hostname2: {badrpc,nodedown}\\r\\n2020-06-27 06:35:37.434 [warning] <0.277.0> Could not auto-cluster with node rabbit@hostname3: {badrpc,nodedown}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If a node fails to perform peer discovery and exhausts all retries, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./logging#debug-logging\",\n        children: \"enable debug logging\"\n      }), \" is highly recommended for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#troubleshooting\",\n        children: \"troubleshooting\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The number of retries and the delay can be configured:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# These are the default values\\r\\n\\r\\n# Retry peer discovery operations up to ten times\\r\\ncluster_formation.discovery_retry_limit = 10\\r\\n\\r\\n# 500 milliseconds\\r\\ncluster_formation.discovery_retry_interval = 500\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The defaults cover five seconds of unavailability of services, API endpoints or nodes\\r\\ninvolved in peer discovery. These values are sufficient to cover sporadic failures.\\r\\nThey will require increasing in environments where dependent services (DNS, etcd, Consul, etc)\\r\\nmay be provisioned concurrently with RabbitMQ cluster deployment and thus can become\\r\\navailable only after a period of time.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"http-proxy-settings\",\n      children: \"HTTP Proxy Settings\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Peer discovery mechanisms that use HTTP to interact with its dependencies (e.g. AWS, Consul\\r\\nand etcd ones) can proxy their requests using an HTTP proxy.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"There are separate proxy settings for HTTP and HTTPS:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# example HTTP and HTTPS proxy servers, values in your environment\\r\\n# will vary\\r\\ncluster_formation.proxy.http_proxy = 192.168.0.98\\r\\ncluster_formation.proxy.https_proxy = 192.168.0.98\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Some hosts can be excluded from proxying, e.g. the link-local AWS instance metadata\\r\\nIP address:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# example HTTP and HTTPS proxy servers, values in your environment\\r\\n# will vary\\r\\ncluster_formation.proxy.http_proxy = 192.168.0.98\\r\\ncluster_formation.proxy.https_proxy = 192.168.0.98\\r\\n\\r\\n# requests to these hosts won't go via proxy\\r\\ncluster_formation.proxy.proxy_exclusions.1 = 169.254.169.254\\r\\ncluster_formation.proxy.proxy_exclusions.2 = excluded.example.local\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"troubleshooting\",\n      children: \"Troubleshooting\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The peer discovery subsystem and individual mechanism implementations log important\\r\\ndiscovery procedure steps at the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"info\"\n      }), \" log level. More extensive logging\\r\\nis available at the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"debug\"\n      }), \" level. Mechanisms that depend on external services\\r\\naccessible over HTTP will log all outgoing HTTP requests and response codes at \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"debug\"\n      }), \" level.\\r\\nSee the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./logging\",\n        children: \"logging guide\"\n      }), \" for more information about logging configuration.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If the log does not contain any entries that demonstrate peer discovery progress, for example, the list\\r\\nof nodes retrieved by the mechanism or clustering attempts, it may mean that the node already has\\r\\nan initialised data directory or is already a member of the cluster. In those cases peer discovery\\r\\nwon't be performed.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Peer discovery relies on inter-node network connectivity and successful authentication via a shared\\r\\nsecret. Verifying that nodes can communicate with one another and use the expected Erlang cookie value (that's also identical across all cluster nodes).\\r\\nSee the main \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering\",\n        children: \"Clustering guide\"\n      }), \" for more information.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A methodology for network connectivity troubleshooting as well as commonly used\\r\\ntools are covered in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./troubleshooting-networking\",\n        children: \"Troubleshooting Network Connectivity\"\n      }), \" guide.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./versioned_docs/version-3.13/cluster-formation.md\n");

/***/ })

}]);