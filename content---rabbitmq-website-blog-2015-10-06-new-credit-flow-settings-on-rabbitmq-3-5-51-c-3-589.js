"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-blog-2015-10-06-new-credit-flow-settings-on-rabbitmq-3-5-51-c-3-589"],{

/***/ "./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2015-10-06-new-credit-flow-settings-on-rabbitmq-3-5-5-index-md-1c3.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"permalink":"/rabbitmq-website/blog/2015/10/06/new-credit-flow-settings-on-rabbitmq-3-5-5","editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/blog/2015-10-06-new-credit-flow-settings-on-rabbitmq-3-5-5/index.md","source":"@site/blog/2015-10-06-new-credit-flow-settings-on-rabbitmq-3-5-5/index.md","title":"New Credit Flow Settings on RabbitMQ 3.5.5","description":"This blog post was written for RabbitMQ 3.5, released in 2015. While some parts still","date":"2015-10-06T00:00:00.000Z","tags":[{"inline":true,"label":"Performance","permalink":"/rabbitmq-website/blog/tags/performance"}],"readingTime":14.58,"hasTruncateMarker":true,"authors":[{"name":"Álvaro Videla","key":"alvaro","page":null}],"frontMatter":{"title":"New Credit Flow Settings on RabbitMQ 3.5.5","tags":["Performance"],"authors":["alvaro"]},"unlisted":false,"prevItem":{"title":"What\'s new in RabbitMQ 3.6.0","permalink":"/rabbitmq-website/blog/2015/12/28/whats-new-in-rabbitmq-3-6-0"},"nextItem":{"title":"Scheduling Messages with RabbitMQ","permalink":"/rabbitmq-website/blog/2015/04/16/scheduling-messages-with-rabbitmq"}}');

/***/ }),

/***/ "./blog/2015-10-06-new-credit-flow-settings-on-rabbitmq-3-5-5/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2015_10_06_new_credit_flow_settings_on_rabbitmq_3_5_5_index_md_1c3_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2015_10_06_new_credit_flow_settings_on_rabbitmq_3_5_5_index_md_1c3_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2015-10-06-new-credit-flow-settings-on-rabbitmq-3-5-5-index-md-1c3.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'New Credit Flow Settings on RabbitMQ 3.5.5',\n\ttags: [\n\t\t'Performance'\n\t],\n\tauthors: [\n\t\t'alvaro'\n\t]\n};\nconst contentTitle = undefined;\n\nconst assets = {\n\"authorsImageUrls\": [undefined],\n};\n\n\n\nconst toc = [{\n  \"value\": \"Message Publishing\",\n  \"id\": \"message-publishing\",\n  \"level\": 2\n}, {\n  \"value\": \"Message Paging\",\n  \"id\": \"message-paging\",\n  \"level\": 2\n}, {\n  \"value\": \"Queue Mirroring\",\n  \"id\": \"queue-mirroring\",\n  \"level\": 2\n}, {\n  \"value\": \"Conclusion\",\n  \"id\": \"conclusion\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    em: \"em\",\n    h2: \"h2\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    section: \"section\",\n    strong: \"strong\",\n    sup: \"sup\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"warning\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"This blog post was written for RabbitMQ 3.5, released in 2015. While some parts still\\r\\napply, there's a lot of outdated information. For example, RabbitMQ 4.0\\r\\ndoesn't support queue mirroring anymore and \\\"paging messages to disk\\\" is\\r\\nno longer something that RabbitMQ has to do, since messages are almost\\r\\nalways persisted to disk right away.\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In order to prevent fast publishers from overflowing the broker with\\r\\nmore messages than it can handle at any particular moment, RabbitMQ\\r\\nimplements an internal mechanism called \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"credit flow\"\n      }), \" that will be\\r\\nused by the various systems inside RabbitMQ to throttle down\\r\\npublishers, while allowing the message consumers to catch up. In this\\r\\nblog post we are going to see how \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"credit flow\"\n      }), \" works, and what we can\\r\\ndo to tune its configuration for an optimal behaviour.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/releases/tag/rabbitmq_v3_5_5\",\n        children: \"latest\"\n      }), \" version of RabbitMQ includes a couple of new configuration\\r\\nvalues that let users fiddle with the internal credit flow\\r\\nsettings. Understanding how these work according to your particular\\r\\nworkload can help you get the most out of RabbitMQ in terms of\\r\\nperformance, but beware, increasing these values \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"just to see what\\r\\nhappens\"\n      }), \" can have adverse effects on how RabbitMQ is able to respond\\r\\nto message bursts, affecting the internal strategies that RabbitMQ has\\r\\nin order to deal with memory pressure. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"Handle with care\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To understand the new credit flow settings first we need to understand\\r\\nhow the internals of RabbitMQ work with regards to message publishing\\r\\nand paging messages to disk. Let's see first how message publishing\\r\\nworks in RabbitMQ.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"message-publishing\",\n      children: \"Message Publishing\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To see how \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"credit_flow\"\n      }), \" and its settings affect publishing, let's see\\r\\nhow internal messages flow in RabbitMQ. Keep in mind that RabbitMQ is\\r\\nimplemented in Erlang, where processes communicate by sending messages\\r\\nto each other.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Whenever a RabbitMQ instance is running, there are probably hundreds\\r\\nof Erlang processes exchanging messages to communicate with each\\r\\nother. We have for example a reader process that reads AMQP frames\\r\\nfrom the network. Those frames are transformed into AMQP commands that\\r\\nare forwarded to the AMQP channel process. If this channel is handling\\r\\na publish, it needs to ask a particular exchange for the list of\\r\\nqueues where this message should end up going, which means the channel\\r\\nwill deliver the message to each of those queues. Finally if the AMQP\\r\\nmessage needs to be persisted, the msg_store process will receive it\\r\\nand write it to disk. So whenever we publish an AMQP message to\\r\\nRabbitMQ we have the following erlang message flow\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.sup, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#user-content-fn-1-77b397\",\n          id: \"user-content-fnref-1-77b397\",\n          \"data-footnote-ref\": true,\n          \"aria-describedby\": \"footnote-label\",\n          children: \"1\"\n        })\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"reader -> channel -> queue process -> message store.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In order to prevent any of those processes from overflowing the next\\r\\none down the chain, we have a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"credit flow\"\n      }), \" mechanism in place. Each\\r\\nprocess initially grants certain amount of credits to the process that\\r\\nit's sending them messages. Once a process is able to handle N of\\r\\nthose messages, it will grant more credit to the process that sent\\r\\nthem. Under default \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"credit flow\"\n      }), \" settings\\r\\n(\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"credit_flow_default_credit\"\n      }), \" under \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq.config\"\n      }), \") these values\\r\\nare 200 messages of initial credit, and after 50 messages processed by\\r\\nthe receiving process, the process that sent the messages will be\\r\\ngranted 50 more credits.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Say we are publishing messages to RabbitMQ, this means the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"reader\"\n      }), \"\\r\\nwill be sending one erlang message to the channel process per AMQP\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.publish\"\n      }), \" received. Each of those messages will consume one of\\r\\nthese credits from the channel. Once the channel is able to process 50\\r\\nof those messages, it will grant more credit to the reader. So far so\\r\\ngood.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In turn the channel will send the message to the queue process that\\r\\nmatched the message routing rules. This will consume one credit from\\r\\nthe credit granted by the queue process to the channel. After the\\r\\nqueue process manages to handle 50 deliveries, it will grant 50 more\\r\\ncredits to the channel.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Finally if a message is deemed to be persistent (it's persistent and\\r\\npublished to a durable queue), it will be sent to the message store,\\r\\nwhich in this case will also consume credits from the ones granted by\\r\\nthe message store to the queue process. In this case the initial\\r\\nvalues are different and handled by the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"msg_store_credit_disc_bound\"\n      }), \"\\r\\nsetting: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"2000\"\n      }), \" messages of initial credit and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"500\"\n      }), \" more credits\\r\\nafter 500 messages are processed by the message store.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"So we know how internal messages flow inside RabbitMQ and when credit\\r\\nis granted to a process that's above in the msg stream. The tricky\\r\\npart comes when credit is granted between processes. Under normal\\r\\nconditions a channel will process 50 messages from the reader, and\\r\\nthen grant the reader 50 more credits, but keep in mind that a channel\\r\\nis not just handling publishes, it's also sending messages to\\r\\nconsumers, routing messages to queues and so on.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"What happens if the reader is sending messages to the channel at a\\r\\nhigher speed of what the channel is able to process? If we reach this\\r\\nsituation, then the channel will block the reader process, which will\\r\\nresult in producers being throttled down by RabbitMQ. Under default\\r\\nsettings, the reader will be blocked once it sends 200 messages to the\\r\\nchannel, but the channel is not able to process at least 50 of them,\\r\\nin order to grant credit back to the reader.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Again, under normal conditions, once the channel manages to go through\\r\\nthe message backlog, it will grant more credit to the reader, but\\r\\nthere's a catch. What if the channel process is being blocked by the\\r\\nqueue process, due to similar reasons? Then the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"new credit\"\n      }), \" that\\r\\nwas supposed to go to the reader process \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"will be deferred\"\n      }), \". The\\r\\nreader process \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"will remain blocked\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Once the queue process manages to go through the deliveries backlog\\r\\nfrom the channel, it will grant more credit to the channel, unblocking\\r\\nit, which will result in the channel granting more credit to the\\r\\nreader, unblocking it. Once again, that's under normal conditions,\\r\\nbut, you guessed it, what if the message store is blocking the queue\\r\\nprocess? Then credit to the channel will be deferred, which will\\r\\nremain blocked, deferring credit to the reader, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"leaving the reader\\r\\nblocked\"\n      }), \". At some point, the message store will grant messages to the\\r\\nqueue process, which will grant messages back to the channel, and then\\r\\nthe channel will finally grant messages to the reader and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"unblock\\r\\nthe reader\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"reader <--[grant]-- channel <--[grant]-- queue process <--[grant]-- message store.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Having one channel and one queue process makes things easier to\\r\\nundertand but it might not reflect reality. It's common for RabbitMQ\\r\\nusers to have more than one channel publishing messages on the same\\r\\nconnection. Even more common is to have one message being routed to\\r\\nmore than one queue. What happens with the credit flow scheme we've\\r\\njust explained is that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"if one of those queues blocks the channel\"\n      }), \",\\r\\nthen \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"the reader will be blocked as well\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The problem is that from a reader standpoint, when we read a frame\\r\\nfrom the network, we don't even know to which channel it belongs\\r\\nto. Keep in mind that channels are a logical concept on top of AMQP\\r\\nconnections. So even if a new AMQP command will end up in a channel\\r\\nthat is not blocking the reader, the reader has no way of knowing\\r\\nit. Note that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"we only block publishing\"\n      }), \" connections, consumers\\r\\nconnections are unaffected since we want consumers to drain messages\\r\\nfrom queues. This is a good reason why it might be better to have\\r\\nconnections dedicated to publishing messages, and connections\\r\\ndedicated for consumers only.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"On a similar fashion, whenever a channel is processing message\\r\\npublishes, it doesn't know where messages will end up going, until it\\r\\nperforms routing. So a channel might be receiving a message that\\r\\nshould end up in a queue that is not blocking the channel. Since at\\r\\ningress time we don't know any of this, then the credit flow strategy\\r\\nin place is to block the reader until processes down the chain are\\r\\nable to handle new messages.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"One of the new settings introduced in RabbitMQ 3.5.5 is the ability to\\r\\nmodify the values for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"credit_flow_default_credit\"\n      }), \". This setting takes\\r\\na tuple of the form \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"{InitialCredit, MoreCreditAfter}\"\n      }), \". InitialCredit\\r\\nis set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"200\"\n      }), \" by default, and MoreCreditAfter is set to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"50\"\n      }), \". Depending on your particular workflow, you need to decide if\\r\\nit's worth bumping those values. Let's see the message flow scheme\\r\\nagain:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"reader -> channel -> queue process -> message store.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Bumping the values for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"{InitialCredit, MoreCreditAfter}\"\n      }), \" will mean\\r\\nthat at any point in that chain we could end up with more messages\\r\\nthan those that can be handled by the broker at that particular point\\r\\nin time. More messages means more RAM usage. The same can be said\\r\\nabout \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"msg_store_credit_disc_bound\"\n      }), \", but keep in mind that there's\\r\\nonly one message store\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.sup, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#user-content-fn-2-77b397\",\n          id: \"user-content-fnref-2-77b397\",\n          \"data-footnote-ref\": true,\n          \"aria-describedby\": \"footnote-label\",\n          children: \"2\"\n        })\n      }), \" per RabbitMQ instance, and there\\r\\ncan be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"many channels\"\n      }), \" sending messages to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"same queue\\r\\nprocess\"\n      }), \". So while a queue process has a value of 2000 as\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"InitialCredit\"\n      }), \" from the message store, that queue can be ingesting\\r\\nmany times that value from different channel/connection sources. So\\r\\n200 credits as initial \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"credit_flow_default_credit\"\n      }), \" value could be\\r\\nseen as too conservative, but you need to understand if according to\\r\\nyour workflow that's still good enough or not.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"message-paging\",\n      children: \"Message Paging\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Let's take a look at how RabbitMQ queues store messages. When a\\r\\nmessage enters the queue, the queue needs to determine if the message\\r\\nshould be persisted or not. If the message has to be persisted, then\\r\\nRabbitMQ will do so right away\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.sup, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#user-content-fn-3-77b397\",\n          id: \"user-content-fnref-3-77b397\",\n          \"data-footnote-ref\": true,\n          \"aria-describedby\": \"footnote-label\",\n          children: \"3\"\n        })\n      }), \". Now even if a message was\\r\\npersisted to disk, this doesn't mean the message got removed from RAM,\\r\\nsince RabbitMQ keeps a cache of messages in RAM for fast access when\\r\\ndelivering messages to consumers. Whenever we are talking about\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"paging messages out to disk\"\n      }), \", we are talking about what RabbitMQ does\\r\\nwhen it has to send messages from this cache to the file system.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When RabbitMQ decides it needs to page messages to disk it will call\\r\\nthe function \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"reduce_memory_use\"\n      }), \" on the internal queue implementation\\r\\nin order to send messages to the file system. Messages are going to be\\r\\npaged out in batches; how big are those batches depends on the current\\r\\nmemory pressure status. It basically works like this:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The function \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"reduce_memory_use\"\n      }), \" will receive a number called \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"target ram count\"\n      }), \" which tells RabbitMQ that it should try to page out\\r\\nmessages until only that many remain in RAM. Keep in mind that whether\\r\\nmessages are persistent or not, they are still kept in RAM for fast\\r\\ndelivery to consumers. Only when memory pressure kicks in, is when\\r\\nmessages in memory are paged out to disk. Quoting from our code\\r\\ncomments: The question of whether a message is in RAM and whether it\\r\\nis persistent are orthogonal.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The number of messages that are accounted for during this chunk\\r\\ncalculation are those messages that are in RAM (in the aforementioned\\r\\ncache), plus the number of pending acks that are kept in RAM (i.e.:\\r\\nmessages that were delivered to consumers and are pending\\r\\nacknowledgment). If we have 20000 messages in RAM (cache + pending\\r\\nacks) and then \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"target ram count\"\n      }), \" is set to 8000, we will have to page\\r\\nout 12000 messages. This means paging will receive a quota of 12000\\r\\nmessages. Each message paged out to disk will consume one unit from\\r\\nthat quota, whether it's a pending ack, or an actual message from the\\r\\ncache.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Once we know how many messages need to be paged out, we need to decide\\r\\nfrom where we should page them first: pending acks, or the message\\r\\ncache. If pending acks is growing faster than messages the cache, ie:\\r\\nmore messages are being delivered to consumers than those being\\r\\ningested, this means the algorithm will try to page out pending acks\\r\\nfirst, and then try to push messages from the cache to the file\\r\\nsystem. If the cache is growing faster than pending acks, then\\r\\nmessages from the cache will be pushed out first.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The catch here is that paging messages from pending acks (or the cache\\r\\nif that comes first) might result in the first part of the process\\r\\nconsuming all the quota of messages that need to be pushed to disk. So\\r\\nif pending acks pushes 12000 acks to disk as in our example, this\\r\\nmeans we won't page out messages from the cache, and vice versa.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This first part of the paging process sent to disk certain amount of\\r\\nmessages (between acks + messages paged from the cache). The messages\\r\\nthat were paged out just had their contents paged out, but their\\r\\nposition in the queue is still in RAM. Now the queue needs to decide\\r\\nif this extra information that's kept in RAM needs to be paged out as\\r\\nwell, to further reduce memory usage. Here is were finally\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"msg_store_io_batch_size\"\n      }), \" enters into play (coupled with\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"msg_store_credit_disc_bound\"\n      }), \" as well). Let's try to understand how\\r\\nthey work.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The settings for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"msg_store_credit_disc_bound\"\n      }), \" affect how internal\\r\\ncredit flow is handled when sending message to disk. The\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq_msg_store\"\n      }), \" module implements a database that takes care of\\r\\npersisting messages to disk. Some details about the why's of this\\r\\nimplementation can be found here:\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2011/01/20/rabbitmq-backing-stores-databases-and-disks\",\n        children: \"RabbitMQ, backing stores, databases and disks\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The message store has a credit system for each of the clients that\\r\\nsend writes to it. Every RabbitMQ queue would be a read/write client\\r\\nfor this store. The message store has a credits mechanism to prevent a\\r\\nparticular writer to overflow its inbox it with messages. Assuming\\r\\ncurrent default values, when a writer starts talking to the message\\r\\nstore, it receives an initial credit of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"2000\"\n      }), \" messages, and it will\\r\\nreceive more credit once \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"500\"\n      }), \" messages are processed. When is this\\r\\ncredit consumed then? Credit is consumed whenever we write to the\\r\\nmessage store, but that doesn't happen for every message. The plot\\r\\nthickens.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Since version 3.5.0 it's possible to embed small messages into the\\r\\nqueue index, instead of having to reach the message store for\\r\\nthat. Messages that are smaller than a configurable setting (currently\\r\\n4096 bytes) will go to the queue index when persisted, so those\\r\\nmessages won't consume this credit. Now, let's see what happens with\\r\\nmessages that do need to go to the message store.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Whenever we publish a message that's determined to be persistent\\r\\n(persistent messages published to a durable queue), then that message\\r\\nwill consume one of these credits. If a message has to paged out to\\r\\ndisk from the cache mentioned above, it will also consume one\\r\\ncredit. So if during message paging we consume more credits than those\\r\\ncurrently available for our queue, the first half of the paging\\r\\nprocess might stop, since there's no point in sending writes to the\\r\\nmessage store when it won't accept them. This means that from the\\r\\ninitial quota of 12000 that we would have had to page out, we only\\r\\nmanaged to process 2000 of them (assuming all of them need to go to\\r\\nthe message store).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"So we managed to page out 2000 messages, but we still keep their\\r\\nposition in the queue in RAM. Now the paging process will determine if\\r\\nit needs to also page out any of these messages positions to disk as\\r\\nwell. RabbitMQ will calculate how many of them can stay in RAM, and\\r\\nthen it will try to page out the remaining of them to disk. For this\\r\\nsecond paging to happen, the amount of messages that has to be paged\\r\\nto disk must be greater than \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"msg_store_io_batch_size\"\n      }), \". The bigger\\r\\nthis number is, the more message positions RabbitMQ will keep in RAM,\\r\\nso again, depending on your particular workload, you need to tune this\\r\\nparameter as well.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Another thing we improved significantly in 3.5.5 is the performance of\\r\\npaging queue index contents to disk. If your messages are generally\\r\\nsmaller than \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"queue_index_embed_msgs_below\"\n      }), \", then you'll see the\\r\\nbenefit of these changes. These changes also affect how message\\r\\npositions are paged out to disk, so you should see improvements in\\r\\nthis area as well. So while having a low \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"msg_store_io_batch_size\"\n      }), \"\\r\\nmight mean the queue index will have more work paging to disk, keep in\\r\\nmind this process has been optimized.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"queue-mirroring\",\n      children: \"Queue Mirroring\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To keep the descriptions above a bit simpler, we avoided bringing queue\\r\\nmirroring into the picture. Credit flows also affects mirroring from a\\r\\nchannel point of view. When a channel delivers AMQP messages to\\r\\nqueues, it sends the message to each mirror, consuming one credit from\\r\\neach mirror process. If any of the mirrors is slow processing the\\r\\nmessage then that particular mirror might be responsible for the\\r\\nchannel being blocked. If the channel is being blocked by a mirror,\\r\\nand that queue mirror gets partitioned from the network, then the\\r\\nchannel will be unblocked only after RabbitMQ detects the mirror\\r\\ndeath.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Credit flow also takes part when synchronising mirrored queues, but\\r\\nthis is something you shouldn't care too much about, mostly because\\r\\nthere's nothing you could do about it, since mirror synchronisation is\\r\\nhandled entirely by RabbitMQ.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"conclusion\",\n      children: \"Conclusion\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In any case, we hope this blog post has been informative and helps you\\r\\nwith your RabbitMQ tuning. If you have comments or questions about the\\r\\nnew credit flow settings, don't hesitate to contact us at the RabbitMQ\\r\\nmailing list:\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://groups.google.com/forum/#!forum/rabbitmq-users\",\n        children: \"rabbitmq-users\"\n      }), \".\"]\n    }), \"\\n\", \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.section, {\n      \"data-footnotes\": true,\n      className: \"footnotes\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        className: \"sr-only\",\n        id: \"footnote-label\",\n        children: \"Footnotes\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n          id: \"user-content-fn-1-77b397\",\n          children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [\"A message can be delivered to more than one queue process. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n              href: \"#user-content-fnref-1-77b397\",\n              \"data-footnote-backref\": \"\",\n              \"aria-label\": \"Back to reference 1\",\n              className: \"data-footnote-backref\",\n              children: \"↩\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n          id: \"user-content-fn-2-77b397\",\n          children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [\"There are two message stores, one for transient messages and one for persistent messages. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n              href: \"#user-content-fnref-2-77b397\",\n              \"data-footnote-backref\": \"\",\n              \"aria-label\": \"Back to reference 2\",\n              className: \"data-footnote-backref\",\n              children: \"↩\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n          id: \"user-content-fn-3-77b397\",\n          children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [\"RabbitMQ will call fsync every 200 ms. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n              href: \"#user-content-fnref-3-77b397\",\n              \"data-footnote-backref\": \"\",\n              \"aria-label\": \"Back to reference 3\",\n              className: \"data-footnote-backref\",\n              children: \"↩\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./blog/2015-10-06-new-credit-flow-settings-on-rabbitmq-3-5-5/index.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);