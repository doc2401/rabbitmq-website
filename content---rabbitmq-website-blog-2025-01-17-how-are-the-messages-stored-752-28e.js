"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-blog-2025-01-17-how-are-the-messages-stored-752-28e"],{

/***/ "./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2025-01-17-how-are-the-messages-stored-index-md-752.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"permalink":"/rabbitmq-website/blog/2025/01/17/how-are-the-messages-stored","editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/blog/2025-01-17-how-are-the-messages-stored/index.md","source":"@site/blog/2025-01-17-how-are-the-messages-stored/index.md","title":"How Are The Messages Stored? Not in Memory!","description":"It\'s time to retire the myth that RabbitMQ stores messages in memory. While it was true in the early days of RabbitMQ,","date":"2025-01-17T00:00:00.000Z","tags":[{"inline":true,"label":"Classic Queues","permalink":"/rabbitmq-website/blog/tags/classic-queues"},{"inline":true,"label":"Quorum Queues","permalink":"/rabbitmq-website/blog/tags/quorum-queues"},{"inline":true,"label":"Streams","permalink":"/rabbitmq-website/blog/tags/streams"}],"readingTime":13.415,"hasTruncateMarker":true,"authors":[{"name":"MichaÅ‚ Kuratczyk","url":"https://github.com/mkuratczyk","socials":{"github":"https://github.com/mkuratczyk","linkedin":"https://www.linkedin.com/in/mkuratczyk/","mastodon":"https://fosstodon.org/@kura","bluesky":"https://bsky.app/profile/mkuratczyk.bsky.social"},"imageURL":"https://github.com/mkuratczyk.png","key":"kura","page":null}],"frontMatter":{"title":"How Are The Messages Stored? Not in Memory!","tags":["Classic Queues","Quorum Queues","Streams"],"authors":["kura"],"image":"./classic-queues.png"},"unlisted":false,"prevItem":{"title":"RabbitMQ 3.13.8 is released","permalink":"/rabbitmq-website/blog/2025/02/07/rabbitmq-3.13.8-is-released"},"nextItem":{"title":"Security Best Practices: epmd","permalink":"/rabbitmq-website/blog/2024/12/18/epmd-public-exposure"}}');

/***/ }),

/***/ "./blog/2025-01-17-how-are-the-messages-stored/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2025_01_17_how_are_the_messages_stored_index_md_752_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2025_01_17_how_are_the_messages_stored_index_md_752_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2025-01-17-how-are-the-messages-stored-index-md-752.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'How Are The Messages Stored? Not in Memory!',\n\ttags: [\n\t\t'Classic Queues',\n\t\t'Quorum Queues',\n\t\t'Streams'\n\t],\n\tauthors: [\n\t\t'kura'\n\t],\n\timage: './classic-queues.png'\n};\nconst contentTitle = undefined;\n\nconst assets = {\n\"image\": (__webpack_require__(\"./node_modules/file-loader/dist/cjs.js?name=assets/images/[name]-[contenthash].[ext]!./blog/2025-01-17-how-are-the-messages-stored/classic-queues.png\")[\"default\"]),\n\"authorsImageUrls\": [undefined],\n};\n\n\n\nconst toc = [{\n  \"value\": \"Classic Queues\",\n  \"id\": \"classic-queues\",\n  \"level\": 2\n}, {\n  \"value\": \"But I See No Disk Activity When I Use a Classic Queue!\",\n  \"id\": \"but-i-see-no-disk-activity-when-i-use-a-classic-queue\",\n  \"level\": 3\n}, {\n  \"value\": \"Surely, Transient Messages Are Stored in Memory?\",\n  \"id\": \"surely-transient-messages-are-stored-in-memory\",\n  \"level\": 3\n}, {\n  \"value\": \"What About fsync?\",\n  \"id\": \"what-about-fsync\",\n  \"level\": 3\n}, {\n  \"value\": \"Quorum Queues\",\n  \"id\": \"quorum-queues\",\n  \"level\": 2\n}, {\n  \"value\": \"Streams\",\n  \"id\": \"streams\",\n  \"level\": 2\n}, {\n  \"value\": \"MQTT QoS 0 Queues\",\n  \"id\": \"mqtt-qos-0-queues\",\n  \"level\": 2\n}, {\n  \"value\": \"Message Metadata\",\n  \"id\": \"message-metadata\",\n  \"level\": 2\n}, {\n  \"value\": \"Summary\",\n  \"id\": \"summary\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    figcaption: \"figcaption\",\n    figure: \"figure\",\n    h2: \"h2\",\n    h3: \"h3\",\n    img: \"img\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    strong: \"strong\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It's time to retire the myth that RabbitMQ stores messages in memory. While it was true in the early days of RabbitMQ,\\r\\nand an option for the last 10 years, modern RabbitMQ versions almost always write messages\\r\\nto disk right away. In this blog post we review how different queue types store messages but the short answer is: not in memory!\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Let's start by clarifying what we mean by storing messages in memory, since it is not a precise statement.\\r\\nIf interpreted as \\\"RabbitMQ uses memory to process messages\\\", this phrase is certainly true.\\r\\nWhen client applications send data to RabbitMQ, that data appears in memory buffers first (that's true for all\\r\\nnetwork-based software). It is also true, that RabbitMQ might cache some messages in memory,\\r\\nfor example to improve performance (again, true for virtually all software that needs to serve data).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"However, I keep hearing this phrase used to express concerns about message durability - if you power off the server,\\r\\nyour messages will be lost! In this context, modern RabbitMQ versions almost never store messages in memory.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"important\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"There is no configuration in which publishing 1GB of messages to RabbitMQ with no connected consumers,\\r\\nwould lead to 1GB of memory being used to store these messages. Some subset of messages can be cached in memory,\\r\\nbut messages are stored on disk.\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"We'll go through different queue types and discuss how the messages are processed, stored and when they are confirmed\\r\\nto the publishers. Publisher confirmations are critical here - RabbitMQ doesn't offer guarantees for messages that\\r\\nwere not confirmed. If you haven't received the confirmation, you can't even know whether the message reached\\r\\nRabbitMQ (the network connection could have failed for example). With that in mind, let's go through the different queue types.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"classic-queues\",\n      children: \"Classic Queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.rabbitmq.com/docs/classic-queues\",\n        children: \"Classic queues\"\n      }), \" is the oldest kind of queues in RabbitMQ and the main source of \\\"RabbitMQ stores messages in memory\\\" misconception.\\r\\nRabbitMQ was first released in 2007. Disks were significantly slower back then and therefore classic queues were designed\\r\\nto try to avoid writing messages to disk. There was a whole bunch of settings to configure when RabbitMQ should\\r\\nwrite messages to disk (a process called \\\"paging\\\") so it would not keep messages in memory indefinitely but indeed,\\r\\nyou could say RabbitMQ stored messages in memory back then. However, that was a long time ago.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In RabbitMQ 3.6, released in 2015, the \\\"lazy mode\\\" was introduced. A queue configured to be lazy, always\\r\\nstored messages on disk and didn't keep them in memory at all. This means that \\\"RabbitMQ stores messages in memory\\\"\\r\\nwas not true 10 years ago. It'd still do this by default, but it was completely optional.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Lazy mode was removed in RabbitMQ in 3.12, released in 2023, but the default (and the only available) behaviour\\r\\nchanged and is similar to the lazy mode, although not exactly the same. Therefore, for over a year now, classic queues don't store\\r\\nmessages in memory and can't even be configured to do so. The myth is almost entirely false at this point.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Almost entirely? So here's how classic queues work right now: they accumulate incoming messages in a small in-memory buffer\\r\\nand write them to disk as a batch, as soon as the in-memory buffer is full. Since we don't know if more messages will come,\\r\\nthere are additional triggers that flush that buffer, including a flush after a certain number of batched messages\\r\\n(even if they are too small to use the whole buffer) and after\\r\\na certain number of operations on that batch is performed. Additionally, the queue monitors how quickly messages are consumed\\r\\nand makes decisions based on that (if there are fast consumers, more messages will be cached in memory). Finally, there's the\\r\\nlast-resort trigger which will flush the buffer every 200ms. So the absolute maximum of how long a message can be stored in\\r\\nmemory is 200ms but in practice, I've never seen this happen. Publishers usually receive confirms within a few milliseconds\\r\\nand they are sent only after the message was written to disk.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"but-i-see-no-disk-activity-when-i-use-a-classic-queue\",\n      children: \"But I See No Disk Activity When I Use a Classic Queue!\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Indeed, it's entirely possible to publish messages to classic queues and see virtually no disk writes nor disk reads.\\r\\nHow is that possible? It's an optimisation for a very specific, but relatively common case. As explained above, messages\\r\\ncan be briefly kept in memory but if there are active consumers that are waiting for messages (their prefetch buffer is not full),\\r\\nmessages that reach the queue are dispatched to the consumers immediately, without waiting for their batch to be written to disk.\\r\\nA message that gets acknowledged by the consumer before this message's batch is written to disk, will not be written to disk at all,\\r\\nbecause it simply doesn't need to be. Queues don't store acknowledged messages, so if the message is acknowledged before it is written,\\r\\nit doesn't get written. If it's acknowledged after it was written, it's deleted from the queue (the actual removal from disk\\r\\nwill happen later, asynchronously, but it is considered deleted immediately).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It's worth mentioning that classic queues have \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.rabbitmq.com/blog/2024/01/11/3.13-release#classic-queues-storage-primer\",\n        children: \"two separate storage mechanisms\"\n      }), \".\\r\\nMessages below 4kb (configurable through \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"queue_index_embed_msgs_below\"\n      }), \") are stored in a per-queue message store and messages above that threshold\\r\\nare stored in a per-vhost message store. The optimisation mentioned above only works for messages that would be stored in the per-queue message store.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"So here it is, in modern RabbitMQ versions, classic queues store messages in memory for a very short period of time (milliseconds)\\r\\nand no more than 200ms for sure. They may not write messages to disk at all, if the messages are small,\\r\\nand consumed quickly enough, but this is just a performance optimisation. I'll leave it up to you to decide if that\\r\\nqualifies as \\\"RabbitMQ stores messages in memory\\\", but I think a more accurate statement would be \\\"when a message is delivered to\\r\\na classic queue, RabbitMQ writes messages to disk with a short delay\\\". But yes, that means that for a brief moment, they are only in memory.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"surely-transient-messages-are-stored-in-memory\",\n      children: \"Surely, Transient Messages Are Stored in Memory?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"No. Again, things were different in the past but as of RabbitMQ 4.0, the only difference between persistent and transient messages\\r\\nis when RabbitMQ sends back the publisher confirm. The messages are stored the same way as described above.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For persistent messages, the confirm is sent when either of these two events takes place:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The message is written to disk\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The message is delivered and acknowledged by a consumer (if that happens before it's written to disk)\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For transient messages, the confirm is sent as soon as the message reaches the queue and enters the in-memory buffer.\\r\\nSince the message is transient, the guarantees are lax: the queue received the message, the publisher can move on.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"what-about-fsync\",\n      children: \"What About fsync?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"fsync\"\n      }), \" is a low-level file system operation that should ensure that messages are really written to disk.\\r\\nThere are multiple layers of I/O buffers between a user-space process such as RabbitMQ and actual hardware, including operating\\r\\nsystem buffers and internal disk buffers. Performing a write without performing \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"fsync\"\n      }), \" doesn't guarantee that the data\\r\\nwill survive a sudden power loss. Unfortunately, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"fsync\"\n      }), \" is a relatively slow operation, so any I/O intensive software has to\\r\\ndecide if, and when, to call it. While classic queues call \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"fsync\"\n      }), \" in some cases (for example, when RabbitMQ stops gracefully),\\r\\nfsync is not performed before publisher confirms are sent. Therefore, even durable messages that a publisher received a confirmation for,\\r\\ncan technically be lost if the server crashes. If you need stronger guarantees, you can use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/quorum-queues\",\n        children: \"quorum queues\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"quorum-queues\",\n      children: \"Quorum Queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"From the initial release in RabbitMQ 3.8 (released in 2019), \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.rabbitmq.com/docs/quorum-queues\",\n        children: \"quorum queues\"\n      }), \" always stored\\r\\nmessages on disk. While the initial versions had an additional in-memory \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"cache\"\n      }), \" for messages, it was removed in RabbitMQ 3.10.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The situation is therefore simple: if the publisher received a confirmation, this means the message had already been\\r\\nwritten to disk and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"fsync\"\n      }), \"-ed on the quorum of nodes (in the most common scenario of a 3-node cluster, that means\\r\\nit was written and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"fsync\"\n      }), \"-ed on at least 2 nodes).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Since RabbitMQ doesn't offer any guarantees for messages that have not been confirmed to publishers, we could pretty much stop here.\\r\\nHowever, for the sake of completeness, I'll mention that some messages are technically in memory:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The queue process has a mailbox (an Erlang/OTP concept) where requests to the queue process (such as enqueue/dequeue operations)\\r\\narrive for processing. The quorum queue process receives messages from the mailbox and processes them as a batch. When there's\\r\\na lot of requests, these operations may accumulate in the mailbox and therefore, assuming there are enqueue operations there, at this\\r\\npoint, some messages are only in-memory. However, this generally means RabbitMQ is at least briefly overloaded and\\r\\neither way, these operations are usually processed within a few milliseconds. Plus, these messages are not confirmed yet.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Quorum queues rely on the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://raft.github.io/\",\n          children: \"Raft protocol\"\n        }), \" and our \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://github.com/rabbitmq/ra/\",\n          children: \"Raft implementations\"\n        }), \"\\r\\nstores the most recent Raft operations in memory. For enqueue operations this means that the message is in memory as well. However,\\r\\nat this point the message is already written to disk and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"fsync\"\n        }), \"-ed or it hasn't been confirmed yet.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"streams\",\n      children: \"Streams\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"With \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.rabbitmq.com/docs/streams\",\n        children: \"Streams\"\n      }), \", the situation is even simpler than with quorum queues: Streams never supported keeping messages in memory, period.\\r\\nThe main difference between queues and stream in general, is that streams can be read multiple times and therefore consuming\\r\\na message doesn't remove that message from a stream. There's no point in storing messages only in memory, if we need to be able\\r\\nto deliver them to consumers multiple times, potentially long after they were published.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Streams do not perform \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"fsync\"\n      }), \", since they were optimised for high message throughput.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For completeness, just like quorum queues (and any other Erlang process), the stream process has a mailbox where requests to the stream\\r\\nprocess arrive. There's therefore a moment where the messages are stored in memory for a short time. Once again though,\\r\\nthese are messages that have not been confirmed yet and they rarely stay in memory for more than a few milliseconds.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"mqtt-qos-0-queues\",\n      children: \"MQTT QoS 0 Queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ 3.12 introduced \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2023/03/21/native-mqtt\",\n        children: \"Native MQTT support\"\n      }), \", and as part of that work, a new queue type was introduced,\\r\\nspecifically for MQTT QoS 0 consumers (you can't explicitly declare a queue of this type, you have to create an MQTT QoS 0 subscription).\\r\\nSince QoS 0 basically means best-effort but no guarantees, QoS 0 messages are not written to disk at all and are delivered directly to the\\r\\nconsumers that are present. Effectively, there's no queue at all (beyond the Erlang mailbox). Messages received from the publisher are\\r\\nimmediately delivered to the consumers and removed from memory.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Does this qualify as storing messages in memory? I'd say it doesn't - the messages are in memory initially, simply because\\r\\nthat's how computers work, and are removed from memory as soon as they are delivered to the consumers. We don't really store\\r\\nthem in memory - we just process them and never write them to disk in this case. You can disagree and say that this is exactly\\r\\nwhat \\\"storing messages in memory means\\\" but even then - this only applies to MQTT QoS 0 usage and the messages will generally stay\\r\\nin memory for no more than a fraction of second.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"message-metadata\",\n      children: \"Message Metadata\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"So far I focused on message bodies, since that's what people usually mean when talking about storing messages in memory. However,\\r\\nRabbitMQ also needs to keep track of the messages that are currently present in the queues. For example, when a queues has a defined\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.a, {\n        href: \"https://www.rabbitmq.com/docs/maxlength\",\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-max-length\"\n        }), \" limit\"]\n      }), \", RabbitMQ needs to keep track of the total size of all the messages in the queue,\\r\\nso when it delivers a message, it keeps the message size (but not the message body itself) in memory, to just subtract it quickly\\r\\nfrom the total size of the queue, once the consumer acknowledges the messages.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This kind of metadata is stored differently by different queue type, but even when stored in memory, it will consume\\r\\nsignificantly less memory than the message bodies would and doesn't change any guarantees about the message durability.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Here's how we store the metadata for different queue types:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Classic queues\", \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n            children: \"for messages stored in the per-queue message store, no data is stored in memory\"\n          }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n            children: \"for messages stored in the per-vhost message store, there's some metadata in memory\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Quorum queues\", \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [\"metadata is stored in memory (at least 32 bytes per message, sometimes a bit more, for example when \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n              href: \"https://www.rabbitmq.com/docs/ttl\",\n              children: \"message TTL\"\n            }), \" is used)\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Streams\", \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n            children: \"no message metadata is stored in memory\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This basically means that for messages under 4KB stored in classic queues, as well as for streams, regardless of how many messages\\r\\nthere are in the queue/stream, the memory usage is constant. You will run out disk before you run out of memory (you should\\r\\nconfigure \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.rabbitmq.com/docs/streams#retention\",\n        children: \"retention\"\n      }), \"/\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.rabbitmq.com/docs/maxlength\",\n        children: \"length\"\n      }), \" limits\\r\\nto avoid running out disk, but that's a different story).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Here's an illustration highlighting the difference between the two classic queue storage mechanisms. In this test,\\r\\nI first published 1 million messages of 4000 bytes each, then deleted the queue and published 1 million messages of 4100 bytes\\r\\neach. As you can see, the memory usage was stable in the first phase (small fluctuations notwithstanding), but when publishing\\r\\nlarger messages, we can see the memory usage grows as well. This is because 4100 bytes is above the threshold, so these\\r\\nmessages are stored in the per-vhost message store and the per-vhost message store keeps some metadata in memory. A million 4KB\\r\\nmessages would have taken up 4GB of memory to store, while the actual usage is still below 400MB.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Classic Queues: memory usage when publishing small and large messages\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2025-01-17-how-are-the-messages-stored/classic-queues.png\")[\"default\"]) + \"\",\n          width: \"2556\",\n          height: \"938\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"Classic Queues: memory usage when publishing small and large messages\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"summary\",\n      children: \"Summary\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Here's the summary of the key points.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.table, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.thead, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.th, {\n            children: \"Type\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.th, {\n            children: \"When are the messages written to disk?\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.th, {\n            children: \"fsync?\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.th, {\n            children: \"When is the publisher confirm sent?\"\n          })]\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tbody, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"Classic\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"After a few milliseconds or as soon as the in-memory buffer is full (whichever happens first)\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"No\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.td, {\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n              children: \"Durable messages\"\n            }), \": when the message is written to disk or consumed & acknowledged \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"br\", {}), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n              children: \"Transient messages\"\n            }), \": as soon as batched in memory\"]\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"Quorum\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"Immediately (except for unconfirmed messages waiting in the mailbox, see above for details)\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"Yes\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"When written to disk and fsynced by the quorum of nodes (most commonly 2 out of 3 nodes)\"\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"Streams\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"Immediately (except for unconfirmed messages waiting in the mailbox, see above for details)\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"No\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"When written to disk by the quorum of nodes (most commonly 2 out of 3 nodes)\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The flexibility provided by RabbitMQ, with support for multiple protocols, queue types and other configurations (eg. single node,\\r\\nvs a cluster with queue replication), combined with 18 years of history and evolution, means that almost any \\\"RabbitMQ does/doesn't do X\\\"\\r\\nstatement is incorrect or at least imprecise. They should almost always be quantified with a specific version and configuration.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Going back to the title of this post, I think it's fair to say that \\\"RabbitMQ doesn't store messages in memory\\\" is much\\r\\ncloser to the truth, than the opposite claim, which still circulates in discussions involving RabbitMQ. Regardless of the queue type,\\r\\nthere is no configuration in which publishing, say, 1GB of messages to RabbitMQ with no connected consumers, would lead to 1GB of memory being\\r\\nused to store these messages. Most importantly, if you want high data safety guarantees, quorum queues are available and store data safely\\r\\nby default. If you publish a message to a quorum queue and receive the confirmation, it'd take a disastrous event for RabbitMQ to lose it\\r\\n(and if you want to protect messages from disastrous events, you might be interested in the commercial\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://techdocs.broadcom.com/us/en/vmware-tanzu/data-solutions/tanzu-rabbitmq-on-kubernetes/4-0/tanzu-rabbitmq-kubernetes/standby-replication.html\",\n        children: \"Warm Standby Replication plugin\"\n      }), \").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If you don't need such data safety guarantees, you don't have to pay the intrinsic overhead of data safety. Just use the right tool for the job.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./blog/2025-01-17-how-are-the-messages-stored/index.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./node_modules/file-loader/dist/cjs.js?name=assets/images/[name]-[contenthash].[ext]!./blog/2025-01-17-how-are-the-messages-stored/classic-queues.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/classic-queues-899b1a1caebc83614d77525cf6f9d800.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmlsZS1sb2FkZXIvZGlzdC9janMuanM/bmFtZT1hc3NldHMvaW1hZ2VzL1tuYW1lXS1bY29udGVudGhhc2hdLltleHRdIS4vYmxvZy8yMDI1LTAxLTE3LWhvdy1hcmUtdGhlLW1lc3NhZ2VzLXN0b3JlZC9jbGFzc2ljLXF1ZXVlcy5wbmciLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL2Jsb2cvMjAyNS0wMS0xNy1ob3ctYXJlLXRoZS1tZXNzYWdlcy1zdG9yZWQvY2xhc3NpYy1xdWV1ZXMucG5nPzYxOWIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvY2xhc3NpYy1xdWV1ZXMtODk5YjFhMWNhZWJjODM2MTRkNzc1MjVjZjZmOWQ4MDAucG5nXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/file-loader/dist/cjs.js?name=assets/images/[name]-[contenthash].[ext]!./blog/2025-01-17-how-are-the-messages-stored/classic-queues.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2025-01-17-how-are-the-messages-stored/classic-queues.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/classic-queues-899b1a1caebc83614d77525cf6f9d800.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDI1LTAxLTE3LWhvdy1hcmUtdGhlLW1lc3NhZ2VzLXN0b3JlZC9jbGFzc2ljLXF1ZXVlcy5wbmciLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL2Jsb2cvMjAyNS0wMS0xNy1ob3ctYXJlLXRoZS1tZXNzYWdlcy1zdG9yZWQvY2xhc3NpYy1xdWV1ZXMucG5nPzcxZWYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvY2xhc3NpYy1xdWV1ZXMtODk5YjFhMWNhZWJjODM2MTRkNzc1MjVjZjZmOWQ4MDAucG5nXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2025-01-17-how-are-the-messages-stored/classic-queues.png\n");

/***/ })

}]);