"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-docs-3-13-confirms-6-dc-007"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-3-13-confirms-md-6dc.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"confirms","title":"Consumer Acknowledgements and Publisher Confirms","description":"<!--","source":"@site/versioned_docs/version-3.13/confirms.md","sourceDirName":".","slug":"/confirms","permalink":"/rabbitmq-website/docs/3.13/confirms","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/versioned_docs/version-3.13/confirms.md","tags":[],"version":"3.13","frontMatter":{"title":"Consumer Acknowledgements and Publisher Confirms"},"sidebar":"docsSidebar","previous":{"title":"Reliability and Data Safety","permalink":"/rabbitmq-website/docs/3.13/reliability"},"next":{"title":"Network Distribution","permalink":"/rabbitmq-website/docs/3.13/distributed"}}');

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./versioned_docs/version-3.13/confirms.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_3_13_confirms_md_6dc_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_3_13_confirms_md_6dc_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-3-13-confirms-md-6dc.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Consumer Acknowledgements and Publisher Confirms'\n};\nconst contentTitle = 'Consumer Acknowledgements and Publisher Confirms';\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"The Basics\",\n  \"id\": \"basics\",\n  \"level\": 2\n}, {\n  \"value\": \"Are Publisher Confirms Related to Consumer Delivery Acknowledgements?\",\n  \"id\": \"relation\",\n  \"level\": 3\n}, {\n  \"value\": \"(Consumer) Delivery Acknowledgements\",\n  \"id\": \"consumer-acknowledgements\",\n  \"level\": 2\n}, {\n  \"value\": \"Delivery Identifiers: Delivery Tags\",\n  \"id\": \"consumer-acks-delivery-tags\",\n  \"level\": 3\n}, {\n  \"value\": \"Consumer Acknowledgement Modes and Data Safety Considerations\",\n  \"id\": \"acknowledgement-modes\",\n  \"level\": 3\n}, {\n  \"value\": \"Positively Acknowledging Deliveries\",\n  \"id\": \"consumer-acks-api-elements\",\n  \"level\": 3\n}, {\n  \"value\": \"Acknowledging Multiple Deliveries at Once\",\n  \"id\": \"consumer-acks-multiple-parameter\",\n  \"level\": 3\n}, {\n  \"value\": \"Negative Acknowledgement and Requeuing of Deliveries\",\n  \"id\": \"consumer-nacks-requeue\",\n  \"level\": 3\n}, {\n  \"value\": \"Channel Prefetch Setting (QoS)\",\n  \"id\": \"channel-qos-prefetch\",\n  \"level\": 3\n}, {\n  \"value\": \"Per-channel, Per-consumer and Global Prefetch\",\n  \"id\": \"per-channel-per-consumer-and-global-prefetch\",\n  \"level\": 4\n}, {\n  \"value\": \"Prefetch and Polling Consumers\",\n  \"id\": \"prefetch-and-polling-consumers\",\n  \"level\": 4\n}, {\n  \"value\": \"Consumer Acknowledgement Modes, Prefetch and Throughput\",\n  \"id\": \"channel-qos-prefetch-throughput\",\n  \"level\": 3\n}, {\n  \"value\": \"When Consumers Fail or Lose Connection: Automatic Requeueing\",\n  \"id\": \"automatic-requeueing\",\n  \"level\": 3\n}, {\n  \"value\": \"Client Errors: Double Acking and Unknown Tags\",\n  \"id\": \"consumer-acks-double-acking\",\n  \"level\": 3\n}, {\n  \"value\": \"Publisher Confirms\",\n  \"id\": \"publisher-confirms\",\n  \"level\": 2\n}, {\n  \"value\": \"Negative Acknowledgments for Publishes\",\n  \"id\": \"server-sent-nacks\",\n  \"level\": 3\n}, {\n  \"value\": \"When Will Published Messages Be Confirmed by the Broker?\",\n  \"id\": \"when-publishes-are-confirmed\",\n  \"level\": 3\n}, {\n  \"value\": \"Ack Latency for Persistent Messages\",\n  \"id\": \"publisher-confirms-latency\",\n  \"level\": 3\n}, {\n  \"value\": \"Ordering Considerations for Publisher Confirms\",\n  \"id\": \"publisher-confirms-ordering\",\n  \"level\": 3\n}, {\n  \"value\": \"Publisher Confirms and Guaranteed Delivery\",\n  \"id\": \"publisher-confirms-and-guaranteed-delivery\",\n  \"level\": 3\n}, {\n  \"value\": \"Limitations\",\n  \"id\": \"limitations\",\n  \"level\": 2\n}, {\n  \"value\": \"Maximum Delivery Tag\",\n  \"id\": \"publisher-confirms-and-guaranteed-delivery\",\n  \"level\": 3\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    header: \"header\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"consumer-acknowledgements-and-publisher-confirms\",\n        children: \"Consumer Acknowledgements and Publisher Confirms\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This guide covers two related features related to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./reliability\",\n        children: \"data safety\"\n      }), \", consumer Acknowledgements\\r\\nand publisher confirms:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#basics\",\n          children: \"Why acknowledgements exist\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#acknowledgement-modes\",\n          children: \"Manual and automatic\"\n        }), \" acknowledgement modes\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#consumer-acks-api-elements\",\n          children: \"Acknowledgement API\"\n        }), \", including \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#consumer-acks-multiple-parameter\",\n          children: \"multi-acks\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#consumer-nacks-requeue\",\n          children: \"requeueing\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#automatic-requeueing\",\n          children: \"Automatic requeueing\"\n        }), \" on connection loss or channel closure\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#channel-qos-prefetch\",\n          children: \"Channel prefetch\"\n        }), \" and its \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#channel-qos-prefetch-throughput\",\n          children: \"effects on throughput\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Most common \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#consumer-acks-double-acking\",\n          children: \"client errors\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#publisher-confirms\",\n          children: \"Publisher confirms\"\n        }), \" and related publisher data safety topics\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"and more. Acknowledgements on both consumer and publisher side are important for\\r\\ndata safety in applications that use messaging.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"More related topics are covered in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./publishers\",\n        children: \"Publisher\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./consumers\",\n        children: \"Consumer\"\n      }), \" guides.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"basics\",\n      children: \"The Basics\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Systems that use a messaging broker such as RabbitMQ are by\\r\\ndefinition distributed. Since protocol methods (messages) sent\\r\\nare not guaranteed to reach the peer or be successfully processed\\r\\nby it, both publishers and consumers need a mechanism for\\r\\ndelivery and processing confirmation. Several messaging\\r\\nprotocols supported by RabbitMQ provide such features.\\r\\nThis guide covers the features in AMQP 0-9-1 but the idea\\r\\nis largely the same in other supported protocols.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Delivery processing acknowledgements from \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./consumers\",\n        children: \"consumers\"\n      }), \" to RabbitMQ\\r\\nare known as acknowledgements in messaging protocols; broker\\r\\nacknowledgements to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./publishers\",\n        children: \"publishers\"\n      }), \" are a protocol extension called\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#publisher-confirms\",\n        children: \"publisher confirms\"\n      }), \".\\r\\nBoth features build on the same idea and are inspired by TCP.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"They are essential for reliable delivery both from publishers\\r\\nto RabbitMQ nodes and from RabbitMQ nodes to consumers. In other words,\\r\\nthey are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"strong\", {\n        children: \"essential for data safety\"\n      }), \", for which applications are\\r\\nresponsible as much as RabbitMQ nodes are.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"relation\",\n      children: \"Are Publisher Confirms Related to Consumer Delivery Acknowledgements?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#publisher-confirms\",\n        children: \"Publisher confirms\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#consumer-acknowledgements\",\n        children: \"consumer delivery acknowledgements\"\n      }), \"\\r\\nare very similar features that solve similar problems in different contexts:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Consumer acknowledgements, as the name suggests, cover RabbitMQ communication with consumers\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Publisher confirms cover publisher communication with RabbitMQ\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The two features, however, are entirely orthogonal and unaware of each other.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"Publisher confirms are not aware of consumers\"\n      }), \": they only cover publisher's interactions\\r\\nwith node it is connected to, and the queue (or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./streams\",\n        children: \"stream\"\n      }), \") leader replica.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"Consumer acknowledgements are not aware of publishers\"\n      }), \": their goal is to confirm\\r\\nto a RabbitMQ node that a given delivery was successfully received and processed successfully,\\r\\nso the delivered message can be marked for future deletion.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Sometimes publishing and consuming applications need to communicate via requests and responses\\r\\nthat need an explicit acknowledgement from the peer. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/tutorials\",\n        children: \"RabbitMQ tutorial #6\"\n      }), \"\\r\\ndemonstrates the basics of how that's done, and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./direct-reply-to\",\n        children: \"Direct Reply-to\"\n      }), \" provides\\r\\na way to do it without declaring a lot of short-lived temporary response queues.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This type of communication, however, is not covered in this guide, and is mentioned only to\\r\\ncontrast it with the much more focussed messaging protocol features described in this guide.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"consumer-acknowledgements\",\n      children: \"(Consumer) Delivery Acknowledgements\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When RabbitMQ delivers a message to a consumer, it needs to know\\r\\nwhen to consider the message to be successfully sent. What kind of logic is\\r\\noptimal depends on the system. It is therefore primarily an application\\r\\ndecision. In AMQP 0-9-1 it is made when a consumer is registered using\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.consume\"\n      }), \" method or a message is fetched on demand\\r\\nwith the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If you prefer a more example-oriented and step-by-step material, consumer acknowledgements are\\r\\nalso covered in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/tutorials\",\n        children: \"RabbitMQ tutorial #2\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"consumer-acks-delivery-tags\",\n      children: \"Delivery Identifiers: Delivery Tags\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Before we proceed to discuss other topics it is important to\\r\\nexplain how deliveries are identified (and acknowledgements\\r\\nindicate their respective deliveries).  When a consumer\\r\\n(subscription) is registered, messages will be delivered\\r\\n(pushed) by RabbitMQ using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.deliver\"\n      }), \"\\r\\nmethod.  The method carries a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"delivery tag\"\n      }), \", which\\r\\nuniquely identifies the delivery on a channel. Delivery tags are\\r\\ntherefore scoped per channel.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Delivery tags are monotonically growing positive\\r\\nintegers and are presented as such by client libraries.\\r\\nClient library methods that acknowledge deliveries take a delivery tag\\r\\nas an argument.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Because delivery tags are scoped per channel, deliveries must be\\r\\nacknowledged on the same channel they were received on. Acknowledging\\r\\non a different channel will result in an \\\"unknown delivery tag\\\" protocol\\r\\nexception and close the channel.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"acknowledgement-modes\",\n      children: \"Consumer Acknowledgement Modes and Data Safety Considerations\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a node delivers a message to a consumer, it has to decide whether the\\r\\nmessage should be considered handled (or at least received) by the consumer. Since\\r\\nmultiple things (client connections, consumer apps, and so on) can fail,\\r\\nthis decision is a data safety concern. Messaging protocols usually provide\\r\\na confirmation mechanism that allows consumers to acknowledge deliveries\\r\\nto the node they are connected to. Whether the mechanism is used is decided\\r\\nat the time consumer subscribes.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Depending on the acknowledgement mode used, RabbitMQ can consider a message to be\\r\\nsuccessfully delivered either immediately after it is sent out (written to a TCP socket)\\r\\nor when an explicit (\\\"manual\\\") client acknowledgement is received. Manually sent\\r\\nacknowledgements can be positive or negative and use one of the following protocol methods:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"basic.ack\"\n        }), \" is used for positive acknowledgements\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"basic.nack\"\n        }), \" is used for negative acknowledgements (note: this is a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./nack\",\n          children: \"RabbitMQ extension to AMQP 0-9-1\"\n        }), \")\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"basic.reject\"\n        }), \" is used for negative acknowledgements but has one limitation compared to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"basic.nack\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"How these methods are exposed in client library APIs will be discussed below.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Positive acknowledgements simply instruct RabbitMQ to record a message as delivered and can be discarded.\\r\\nNegative acknowledgements with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.reject\"\n      }), \" have the same effect. The difference\\r\\nis primarily in the semantics: positive acknowledgements assume\\r\\na message was successfully processed while their negative counterpart\\r\\nsuggests that a delivery wasn't processed but still should be deleted.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In automatic acknowledgement mode, a message is considered\\r\\nto be successfully delivered immediately after it is\\r\\nsent. This mode trades off higher throughput (as long as the\\r\\nconsumers can keep up) for reduced safety of delivery and\\r\\nconsumer processing. This mode is often referred to as\\r\\n\\\"fire-and-forget\\\".  Unlike with manual acknowledgement\\r\\nmodel, if consumers's TCP connection or channel is closed\\r\\nbefore successful delivery, the message sent by the server will be lost.\\r\\nTherefore, automatic message acknowledgement \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"strong\", {\n        children: \"should be considered unsafe\"\n      }), \"\\r\\nand not suitable for all workloads.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Another thing that's important to consider when using\\r\\nautomatic acknowledgement mode is consumer overload.\\r\\nManual acknowledgement mode is typically used with a bounded\\r\\nchannel prefetch which limits the number of outstanding (\\\"in progress\\\")\\r\\ndeliveries on a channel. With automatic acknowledgements, however, there is\\r\\nno such limit by definition. Consumers therefore can be overwhelmed by\\r\\nthe rate of deliveries, potentially accumulating a backlog in memory\\r\\nand running out of heap or getting their process terminated by the OS.\\r\\nSome client libraries will apply TCP back pressure (stop reading from the socket\\r\\nuntil the backlog of unprocessed deliveries drops beyond a certain limit).\\r\\nAutomatic acknowledgement mode is therefore only recommended for consumers\\r\\nthat can process deliveries efficiently and at a steady rate.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"consumer-acks-api-elements\",\n      children: \"Positively Acknowledging Deliveries\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"API methods used for delivery acknowledgement are usually exposed as operations on a channel in client libraries.\\r\\nJava client users will use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#basicAck\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#basicNack\"\n      }), \"\\r\\nto perform a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.ack\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.nack\"\n      }), \", respectively. Here's a Java\\r\\nclient examples that demonstrates a positive acknowledgement:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"// this example assumes an existing channel instance\\r\\n\\r\\nboolean autoAck = false;\\r\\nchannel.basicConsume(queueName, autoAck, \\\"a-consumer-tag\\\",\\r\\n     new DefaultConsumer(channel) {\\r\\n         @Override\\r\\n         public void handleDelivery(String consumerTag,\\r\\n                                    Envelope envelope,\\r\\n                                    AMQP.BasicProperties properties,\\r\\n                                    byte[] body)\\r\\n             throws IOException\\r\\n         {\\r\\n             long deliveryTag = envelope.getDeliveryTag();\\r\\n             // positively acknowledge a single delivery, the message will\\r\\n             // be discarded\\r\\n             channel.basicAck(deliveryTag, false);\\r\\n         }\\r\\n     });\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In .NET client the methods are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"IModel#BasicAck\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"IModel#BasicNack\"\n      }), \", respectively.\\r\\nHere's an example that demonstrates a positive acknowledgement with that client:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        children: \"// this example assumes an existing channel (IModel) instance\\r\\n\\r\\nvar consumer = new EventingBasicConsumer(channel);\\r\\nconsumer.Received += (ch, ea) =>\\r\\n                {\\r\\n                    var body = ea.Body.ToArray();\\r\\n                    // positively acknowledge a single delivery, the message will\\r\\n                    // be discarded\\r\\n                    channel.BasicAck(ea.DeliveryTag, false);\\r\\n                };\\r\\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"consumer-acks-multiple-parameter\",\n      children: \"Acknowledging Multiple Deliveries at Once\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Manual acknowledgements can be batched to reduce network traffic.\\r\\nThis is done by setting the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"multiple\"\n      }), \" field of acknowledgement\\r\\nmethods (see above) to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \". Note that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.reject\"\n      }), \" doesn't\\r\\nhistorically have the field and that's why \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.nack\"\n      }), \" was introduced\\r\\nby RabbitMQ as a protocol extension.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"multiple\"\n      }), \" field is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \", RabbitMQ will acknowledge\\r\\nall outstanding delivery tags up to and including the tag specified in the\\r\\nacknowledgement. Like everything else related to acknowledgements, this is scoped per channel.\\r\\nFor example, given that there are delivery tags 5, 6, 7, and 8 unacknowledged on channel \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Ch\"\n      }), \",\\r\\nwhen an acknowledgement frame arrives on that channel with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"delivery_tag\"\n      }), \" set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"8\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"multiple\"\n      }), \" set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \", all tags from 5 to 8 will be acknowledged.\\r\\nIf \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"multiple\"\n      }), \" was set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"false\"\n      }), \", deliveries 5, 6, and 7 would still\\r\\nbe unacknowledged.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To acknowledge multiple deliveries with RabbitMQ Java client, pass \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \" for the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"multiple\"\n      }), \" parameter to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#basicAck\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"// this example assumes an existing channel instance\\r\\n\\r\\nboolean autoAck = false;\\r\\nchannel.basicConsume(queueName, autoAck, \\\"a-consumer-tag\\\",\\r\\n     new DefaultConsumer(channel) {\\r\\n         @Override\\r\\n         public void handleDelivery(String consumerTag,\\r\\n                                    Envelope envelope,\\r\\n                                    AMQP.BasicProperties properties,\\r\\n                                    byte[] body)\\r\\n             throws IOException\\r\\n         {\\r\\n             long deliveryTag = envelope.getDeliveryTag();\\r\\n             // positively acknowledge all deliveries up to\\r\\n             // this delivery tag\\r\\n             channel.basicAck(deliveryTag, true);\\r\\n         }\\r\\n     });\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The idea is very much the same with the .NET client:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        children: \"// this example assumes an existing channel (IModel) instance\\r\\n\\r\\nvar consumer = new EventingBasicConsumer(channel);\\r\\nconsumer.Received += (ch, ea) =>\\r\\n                {\\r\\n                    var body = ea.Body.ToArray();\\r\\n                    // positively acknowledge all deliveries up to\\r\\n                    // this delivery tag\\r\\n                    channel.BasicAck(ea.DeliveryTag, true);\\r\\n                };\\r\\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"consumer-nacks-requeue\",\n      children: \"Negative Acknowledgement and Requeuing of Deliveries\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Sometimes a consumer cannot process a delivery immediately but other instances might\\r\\nbe able to. In this case it may be desired to requeue it and let another consumer receive\\r\\nand handle it. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.reject\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.nack\"\n      }), \" are two protocol\\r\\nmethods that are used for that.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The methods are generally used to negatively acknowledge a delivery. Such deliveries can\\r\\nbe discarded or dead-lettered or requeued by the broker. This behaviour is controlled by the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"requeue\"\n      }), \" field.\\r\\nWhen the field is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \", the broker will requeue the delivery (or multiple\\r\\ndeliveries, as will be explained shortly) with the specified delivery tag.\\r\\nAlternatively, when this field is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"false\"\n      }), \", the message will be routed to a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./dlx\",\n        children: \"Dead Letter Exchange\"\n      }), \" if it\\r\\nis configured, otherwise it will be discarded.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Both methods are usually exposed as operations on a channel in client libraries. Java\\r\\nclient users will use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#basicReject\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#basicNack\"\n      }), \"\\r\\nto perform a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.reject\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.nack\"\n      }), \", respectively:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"// this example assumes an existing channel instance\\r\\n\\r\\nboolean autoAck = false;\\r\\nchannel.basicConsume(queueName, autoAck, \\\"a-consumer-tag\\\",\\r\\n     new DefaultConsumer(channel) {\\r\\n         @Override\\r\\n         public void handleDelivery(String consumerTag,\\r\\n                                    Envelope envelope,\\r\\n                                    AMQP.BasicProperties properties,\\r\\n                                    byte[] body)\\r\\n             throws IOException\\r\\n         {\\r\\n             long deliveryTag = envelope.getDeliveryTag();\\r\\n             // negatively acknowledge, the message will\\r\\n             // be discarded\\r\\n             channel.basicReject(deliveryTag, false);\\r\\n         }\\r\\n     });\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"// this example assumes an existing channel instance\\r\\n\\r\\nboolean autoAck = false;\\r\\nchannel.basicConsume(queueName, autoAck, \\\"a-consumer-tag\\\",\\r\\n     new DefaultConsumer(channel) {\\r\\n         @Override\\r\\n         public void handleDelivery(String consumerTag,\\r\\n                                    Envelope envelope,\\r\\n                                    AMQP.BasicProperties properties,\\r\\n                                    byte[] body)\\r\\n             throws IOException\\r\\n         {\\r\\n             long deliveryTag = envelope.getDeliveryTag();\\r\\n             // requeue the delivery\\r\\n             channel.basicReject(deliveryTag, true);\\r\\n         }\\r\\n     });\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In .NET client the methods are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"IModel#BasicReject\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"IModel#BasicNack\"\n      }), \",\\r\\nrespectively:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        children: \"// this example assumes an existing channel (IModel) instance\\r\\n\\r\\nvar consumer = new EventingBasicConsumer(channel);\\r\\nconsumer.Received += (ch, ea) =>\\r\\n                {\\r\\n                    var body = ea.Body.ToArray();\\r\\n                    // negatively acknowledge, the message will\\r\\n                    // be discarded\\r\\n                    channel.BasicReject(ea.DeliveryTag, false);\\r\\n                };\\r\\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        children: \"// this example assumes an existing channel (IModel) instance\\r\\n\\r\\nvar consumer = new EventingBasicConsumer(channel);\\r\\nconsumer.Received += (ch, ea) =>\\r\\n                {\\r\\n                    var body = ea.Body.ToArray();\\r\\n                    // requeue the delivery\\r\\n                    channel.BasicReject(ea.DeliveryTag, true);\\r\\n                };\\r\\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a message is requeued, it will be placed to its original\\r\\nposition in its queue, if possible. If not (due to concurrent\\r\\ndeliveries and acknowledgements from other consumers when\\r\\nmultiple consumers share a queue), the message will be requeued\\r\\nto a position closer to queue head.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Requeued messages may be immediately ready for redelivery depending\\r\\non their position in the queue and the prefetch value used by the channels\\r\\nwith active consumers. This means that if all consumers requeue because\\r\\nthey cannot process a delivery due to a transient condition, they will\\r\\ncreate a requeue/redelivery loop. Such loops can be costly in terms of\\r\\nnetwork bandwidth and CPU resources. Consumer implementations can track\\r\\nthe number of redeliveries and reject messages for good (discard them)\\r\\nor schedule requeueing after a delay.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to reject or requeue multiple messages at once using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.nack\"\n      }), \"\\r\\nmethod. This is what differentiates it from \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.reject\"\n      }), \". It accepts an additional\\r\\nparameter, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"multiple\"\n      }), \". Here's a Java client example:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"// this example assumes an existing channel instance\\r\\n\\r\\nboolean autoAck = false;\\r\\nchannel.basicConsume(queueName, autoAck, \\\"a-consumer-tag\\\",\\r\\n     new DefaultConsumer(channel) {\\r\\n         @Override\\r\\n         public void handleDelivery(String consumerTag,\\r\\n                                    Envelope envelope,\\r\\n                                    AMQP.BasicProperties properties,\\r\\n                                    byte[] body)\\r\\n             throws IOException\\r\\n         {\\r\\n             long deliveryTag = envelope.getDeliveryTag();\\r\\n             // requeue all unacknowledged deliveries up to\\r\\n             // this delivery tag\\r\\n             channel.basicNack(deliveryTag, true, true);\\r\\n         }\\r\\n     });\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Things work very similarly with .NET client:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        children: \"// this example assumes an existing channel (IModel) instance\\r\\n\\r\\nvar consumer = new EventingBasicConsumer(channel);\\r\\nconsumer.Received += (ch, ea) =>\\r\\n                {\\r\\n                    var body = ea.Body.ToArray();\\r\\n                    // requeue all unacknowledged deliveries up to\\r\\n                    // this delivery tag\\r\\n                    channel.BasicNack(ea.DeliveryTag, true, true);\\r\\n                };\\r\\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"channel-qos-prefetch\",\n      children: \"Channel Prefetch Setting (QoS)\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Messages are delivered (sent) to clients\\r\\nasynchronously, and there can be more than one message \\\"in\\r\\nflight\\\" on a channel at any given moment. Manual acknowledgements\\r\\nfrom clients are also inherently asynchronous in nature but\\r\\nflow in the opposite direction.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This means a sliding window of deliveries that are unacknowledged.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For most consumers, it makes sense to limit the size of this window to avoid the\\r\\nunbounded buffer (heap) growth problem on the consumer end.\\r\\nThis is done by setting a \\\"prefetch count\\\" value using the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.qos\"\n      }), \" method. The value defines the max\\r\\nnumber of unacknowledged deliveries that are permitted on a\\r\\nchannel. When the number reaches the configured count,\\r\\nRabbitMQ will stop delivering more messages on the channel\\r\\nuntil at least one of the outstanding ones is acknowledged.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A value of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"0\"\n      }), \" means \\\"no limit\\\", allowing any number\\r\\nof unacknowledged messages.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For example, given that there are four deliveries with delivery tags 5, 6, 7, and\\r\\n8 unacknowledged on channel \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Ch\"\n      }), \" and channel\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Ch\"\n      }), \"'s prefetch count is set to 4, RabbitMQ will\\r\\nnot push any more deliveries on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Ch\"\n      }), \" unless at\\r\\nleast one of the outstanding deliveries is acknowledged.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When an acknowledgement frame arrives on that channel with\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"delivery_tag\"\n      }), \" set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"5\"\n      }), \" (or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"6\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"7\"\n      }), \", or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"8\"\n      }), \"),\\r\\nRabbitMQ will notice and deliver one more message.\\r\\nAcknowledging \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#consumer-acks-multiple-parameter\",\n        children: \"multiple messages at once\"\n      }), \"\\r\\nwill make more than one message available for delivery.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It's worth reiterating that the flow of deliveries and\\r\\nmanual client acknowledgements is entirely\\r\\nasynchronous. Therefore if the prefetch value is changed while\\r\\nthere already are deliveries in flight, a natural race\\r\\ncondition arises and there can temporarily be more than\\r\\nprefetch count unacknowledged messages on a channel.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"per-channel-per-consumer-and-global-prefetch\",\n      children: \"Per-channel, Per-consumer and Global Prefetch\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The QoS setting can be configured for a specific channel or a specific consumer.\\r\\nThe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./consumer-prefetch\",\n        children: \"Consumer Prefetch\"\n      }), \" guide explains\\r\\nthe effects of this scoping.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"prefetch-and-polling-consumers\",\n      children: \"Prefetch and Polling Consumers\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The QoS prefetch setting has no effect on messages fetched using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.get\"\n      }), \"\\r\\n(\\\"pull API\\\"), even in manual confirmation mode.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"channel-qos-prefetch-throughput\",\n      children: \"Consumer Acknowledgement Modes, Prefetch and Throughput\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Acknowledgement mode and QoS prefetch value have significant\\r\\neffect on consumer throughput. In general, increasing\\r\\nprefetch will improve the rate of message delivery to\\r\\nconsumers. Automatic acknowledgement mode yields best\\r\\npossible rate of delivery. However, in both cases the number\\r\\nof delivered but not-yet-processed messages will also\\r\\nincrease, thus increasing consumer RAM consumption.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Automatic acknowledgement mode or manual acknowledgement mode with unlimited prefetch should be used with care.\\r\\nConsumers that consume a lot of messages without acknowledging will lead\\r\\nto memory consumption growth on the node they are connected to. Finding\\r\\na suitable prefetch value is a matter of trial and error and will vary from\\r\\nworkload to workload. Values in the 100 through 300 range usually offer\\r\\noptimal throughput and do not run significant risk of overwhelming consumers.\\r\\nHigher values often \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2014/04/14/finding-bottlenecks-with-rabbitmq-3-3\",\n        children: \"run into the law of diminishing returns\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Prefetch value of 1 is the most conservative. It will\\r\\nsignificantly reduce throughput, in particular in\\r\\nenvironments where consumer connection latency is high. For\\r\\nmany applications, a higher value would be appropriate and\\r\\noptimal.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"automatic-requeueing\",\n      children: \"When Consumers Fail or Lose Connection: Automatic Requeueing\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When manual acknowledgements are used, any delivery\\r\\n(message) that was not acked is automatically requeued when\\r\\nthe channel (or connection) on which the delivery happened\\r\\nis closed. This includes TCP connection loss by clients,\\r\\nconsumer application (process) failures, and channel-level\\r\\nprotocol exceptions (covered below).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that it takes a period of time to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./heartbeats\",\n        children: \"detect an unavailable client\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Due to this behavior, consumers must be prepared to handle redeliveries and otherwise\\r\\nbe implemented with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Idempotence\",\n        children: \"idempotence\"\n      }), \" in mind.\\r\\nRedeliveries will have a special boolean property, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"redeliver\"\n      }), \", set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \"\\r\\nby RabbitMQ. For first time deliveries it will be set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"false\"\n      }), \". Note that\\r\\na consumer can receive a message that was previously delivered to another consumer.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"consumer-acks-double-acking\",\n      children: \"Client Errors: Double Acking and Unknown Tags\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Should a client acknowledge the same delivery tag more than once,\\r\\nRabbitMQ will result a channel error such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"PRECONDITION_FAILED - unknown delivery tag 100\"\n      }), \".\\r\\nThe same channel exception will be thrown if an unknown delivery tag is used.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Another scenario in which the broker will complain about an \\\"unknown delivery tag\\\" is when\\r\\nan acknowledgement, whether positive or negative, is attempted on a channel different from\\r\\nthat on which the delivery was received on. Deliveries must be acknowledged on the same\\r\\nchannel.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"publisher-confirms\",\n      children: \"Publisher Confirms\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Networks can fail in less-than-obvious ways and detecting some failures \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./heartbeats\",\n        children: \"takes time\"\n      }), \".\\r\\nTherefore a client that's written a protocol frame or a set of frames (e.g. a published message) to\\r\\nits socket cannot assume that the message has reached the server and was successfully processed.\\r\\nIt could have been lost along the way or its delivery can be significantly delayed.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Using standard AMQP 0-9-1, the only way to guarantee that a\\r\\nmessage isn't lost is by using transactions -- make the\\r\\nchannel transactional then for each message or set of messages publish, commit.\\r\\nIn this case, transactions are unnecessarily heavyweight and\\r\\ndecrease throughput by a factor of 250.  To remedy this,\\r\\na confirmation mechanism was introduced. It mimics the consumer\\r\\nacknowledgements mechanism already present in the protocol.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To enable confirms, a client sends the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"confirm.select\"\n      }), \" method.  Depending on whether\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"no-wait\"\n      }), \" was set or not, the broker may respond\\r\\nwith a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"confirm.select-ok\"\n      }), \".  Once the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"confirm.select\"\n      }), \" method is used on a channel, it\\r\\nis said to be in confirm mode.  A transactional channel\\r\\ncannot be put into confirm mode and once a channel is in\\r\\nconfirm mode, it cannot be made transactional.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Once a channel is in confirm mode, both the broker and the\\r\\nclient count messages (counting starts at 1 on the first\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"confirm.select\"\n      }), \").  The broker then confirms\\r\\nmessages as it handles them by sending a\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.ack\"\n      }), \" on the same channel. The\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"delivery-tag\"\n      }), \" field contains the sequence number\\r\\nof the confirmed message.  The broker may also set the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"multiple\"\n      }), \" field in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.ack\"\n      }), \" to\\r\\nindicate that all messages up to and including the one with\\r\\nthe sequence number have been handled.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"server-sent-nacks\",\n      children: \"Negative Acknowledgments for Publishes\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In exceptional cases when the broker is unable to handle\\r\\nmessages successfully, instead of a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.ack\"\n      }), \",\\r\\nthe broker will send a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.nack\"\n      }), \".  In this\\r\\ncontext, fields of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.nack\"\n      }), \" have the same\\r\\nmeaning as the corresponding ones in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.ack\"\n      }), \"\\r\\nand the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"requeue\"\n      }), \" field should be ignored.  By\\r\\nnack'ing one or more messages, the broker indicates that it\\r\\nwas unable to process the messages and refuses responsibility\\r\\nfor them; at that point, the client may choose to re-publish\\r\\nthe messages.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"After a channel is put into confirm mode, all subsequently\\r\\npublished messages will be confirmed or nack'd once.  No\\r\\nguarantees are made as to how soon a message is confirmed.\\r\\nNo message will be both confirmed and nack'd.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.nack\"\n      }), \" will only be delivered if an internal\\r\\nerror occurs in the Erlang process responsible for a queue.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"when-publishes-are-confirmed\",\n      children: \"When Will Published Messages Be Confirmed by the Broker?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For unroutable messages, the broker will issue a confirm\\r\\nonce the exchange verifies a message won't route to any queue\\r\\n(returns an empty list of queues). If the message is also\\r\\npublished as mandatory, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.return\"\n      }), \" is sent\\r\\nto the client before \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.ack\"\n      }), \". The same\\r\\nis true for negative acknowledgements (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.nack\"\n      }), \").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For routable messages, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.ack\"\n      }), \" is sent when a\\r\\nmessage has been accepted by all the queues. For persistent\\r\\nmessages routed to durable queues, this \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"strong\", {\n        children: \"means persisting\\r\\nto disk\"\n      }), \". For \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"quorum queues\"\n      }), \",\\r\\nthis means that a quorum replicas have accepted and confirmed\\r\\nthe message to the elected leader.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"publisher-confirms-latency\",\n      children: \"Ack Latency for Persistent Messages\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.ack\"\n      }), \" for a persistent message routed to a\\r\\ndurable queue will be sent after persisting the message to\\r\\ndisk. The RabbitMQ message store persists messages to disk in\\r\\nbatches after an interval (a few hundred milliseconds) to\\r\\nminimise the number of fsync(2) calls, or when a queue is idle.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This means that under a constant load, latency for\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.ack\"\n      }), \" can reach a few hundred milliseconds. To\\r\\nimprove throughput, applications are strongly advised to\\r\\nprocess acknowledgements asynchronously (as a stream) or publish\\r\\nbatches of messages and wait for outstanding confirms. The exact\\r\\nAPI for this varies between client libraries.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"publisher-confirms-ordering\",\n      children: \"Ordering Considerations for Publisher Confirms\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In most cases, RabbitMQ will acknowledge messages to\\r\\npublishers in the same order they were published (this\\r\\napplies for messages published on a single\\r\\nchannel). However, publisher acknowledgements are emitted\\r\\nasynchronously and can confirm a single message or a group\\r\\nof messages. The exact moment when a confirm is emitted\\r\\ndepends on the delivery mode of a message (persistent\\r\\nvs. transient) and the properties of the queue(s) the\\r\\nmessage was routed to (see above). Which is to say that\\r\\ndifferent messages can be considered ready for\\r\\nacknowledgement at different times. This means that\\r\\nacknowledgements can arrive in a different order compared to\\r\\ntheir respective messages. Applications should not depend on\\r\\nthe order of acknowledgements when possible.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"publisher-confirms-and-guaranteed-delivery\",\n      children: \"Publisher Confirms and Guaranteed Delivery\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A RabbitMQ node can lose persistent messages if it fails before\\r\\nsaid messages are written to disk. For instance, consider this scenario:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"a client publishes a persistent message to a durable queue\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"a client consumes the message from the queue (noting that the message is persistent and the queue durable), but confirms are not active,\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"the broker node fails and is restarted, and\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"the client reconnects and starts consuming messages\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"At this point, the client could reasonably assume that the\\r\\nmessage will be delivered again.  This is not the case: the\\r\\nrestart has caused the broker to lose the message.  In order to\\r\\nguarantee persistence, a client should use confirms.  If the\\r\\npublisher's channel had been in confirm mode, the publisher\\r\\nwould \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"not\"\n      }), \" have received an ack for the lost message\\r\\n(since the message hadn't been written to disk yet).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"limitations\",\n      children: \"Limitations\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"publisher-confirms-and-guaranteed-delivery\",\n      children: \"Maximum Delivery Tag\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Delivery tag is a 64 bit long value, and thus its maximum value\\r\\nis \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"9223372036854775807\"\n      }), \". Since delivery tags are scoped per channel,\\r\\nit is very unlikely that a publisher or consumer will run over this\\r\\nvalue in practice.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi92ZXJzaW9uZWRfZG9jcy92ZXJzaW9uLTMuMTMvY29uZmlybXMubWQiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWJiaXRtcS13ZWJzaXRlLy4vdmVyc2lvbmVkX2RvY3MvdmVyc2lvbi0zLjEzL2NvbmZpcm1zLm1kP2E5ZWYiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmV4cG9ydCBjb25zdCBmcm9udE1hdHRlciA9IHtcblx0dGl0bGU6ICdDb25zdW1lciBBY2tub3dsZWRnZW1lbnRzIGFuZCBQdWJsaXNoZXIgQ29uZmlybXMnXG59O1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRUaXRsZSA9ICdDb25zdW1lciBBY2tub3dsZWRnZW1lbnRzIGFuZCBQdWJsaXNoZXIgQ29uZmlybXMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIG1ldGFkYXRhfSBmcm9tICdAc2l0ZS8uZG9jdXNhdXJ1cy9kb2N1c2F1cnVzLXBsdWdpbi1jb250ZW50LWRvY3MvZGVmYXVsdC9zaXRlLXZlcnNpb25lZC1kb2NzLXZlcnNpb24tMy0xMy1jb25maXJtcy1tZC02ZGMuanNvbidcbmV4cG9ydCBjb25zdCBhc3NldHMgPSB7XG5cbn07XG5cbmltcG9ydCB7RnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4c30gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQge3VzZU1EWENvbXBvbmVudHMgYXMgX3Byb3ZpZGVDb21wb25lbnRzfSBmcm9tIFwiQG1keC1qcy9yZWFjdFwiO1xuZXhwb3J0IGNvbnN0IHRvYyA9IFt7XG4gIFwidmFsdWVcIjogXCJPdmVydmlld1wiLFxuICBcImlkXCI6IFwib3ZlcnZpZXdcIixcbiAgXCJsZXZlbFwiOiAyXG59LCB7XG4gIFwidmFsdWVcIjogXCJUaGUgQmFzaWNzXCIsXG4gIFwiaWRcIjogXCJiYXNpY3NcIixcbiAgXCJsZXZlbFwiOiAyXG59LCB7XG4gIFwidmFsdWVcIjogXCJBcmUgUHVibGlzaGVyIENvbmZpcm1zIFJlbGF0ZWQgdG8gQ29uc3VtZXIgRGVsaXZlcnkgQWNrbm93bGVkZ2VtZW50cz9cIixcbiAgXCJpZFwiOiBcInJlbGF0aW9uXCIsXG4gIFwibGV2ZWxcIjogM1xufSwge1xuICBcInZhbHVlXCI6IFwiKENvbnN1bWVyKSBEZWxpdmVyeSBBY2tub3dsZWRnZW1lbnRzXCIsXG4gIFwiaWRcIjogXCJjb25zdW1lci1hY2tub3dsZWRnZW1lbnRzXCIsXG4gIFwibGV2ZWxcIjogMlxufSwge1xuICBcInZhbHVlXCI6IFwiRGVsaXZlcnkgSWRlbnRpZmllcnM6IERlbGl2ZXJ5IFRhZ3NcIixcbiAgXCJpZFwiOiBcImNvbnN1bWVyLWFja3MtZGVsaXZlcnktdGFnc1wiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIkNvbnN1bWVyIEFja25vd2xlZGdlbWVudCBNb2RlcyBhbmQgRGF0YSBTYWZldHkgQ29uc2lkZXJhdGlvbnNcIixcbiAgXCJpZFwiOiBcImFja25vd2xlZGdlbWVudC1tb2Rlc1wiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlBvc2l0aXZlbHkgQWNrbm93bGVkZ2luZyBEZWxpdmVyaWVzXCIsXG4gIFwiaWRcIjogXCJjb25zdW1lci1hY2tzLWFwaS1lbGVtZW50c1wiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIkFja25vd2xlZGdpbmcgTXVsdGlwbGUgRGVsaXZlcmllcyBhdCBPbmNlXCIsXG4gIFwiaWRcIjogXCJjb25zdW1lci1hY2tzLW11bHRpcGxlLXBhcmFtZXRlclwiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIk5lZ2F0aXZlIEFja25vd2xlZGdlbWVudCBhbmQgUmVxdWV1aW5nIG9mIERlbGl2ZXJpZXNcIixcbiAgXCJpZFwiOiBcImNvbnN1bWVyLW5hY2tzLXJlcXVldWVcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJDaGFubmVsIFByZWZldGNoIFNldHRpbmcgKFFvUylcIixcbiAgXCJpZFwiOiBcImNoYW5uZWwtcW9zLXByZWZldGNoXCIsXG4gIFwibGV2ZWxcIjogM1xufSwge1xuICBcInZhbHVlXCI6IFwiUGVyLWNoYW5uZWwsIFBlci1jb25zdW1lciBhbmQgR2xvYmFsIFByZWZldGNoXCIsXG4gIFwiaWRcIjogXCJwZXItY2hhbm5lbC1wZXItY29uc3VtZXItYW5kLWdsb2JhbC1wcmVmZXRjaFwiLFxuICBcImxldmVsXCI6IDRcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlByZWZldGNoIGFuZCBQb2xsaW5nIENvbnN1bWVyc1wiLFxuICBcImlkXCI6IFwicHJlZmV0Y2gtYW5kLXBvbGxpbmctY29uc3VtZXJzXCIsXG4gIFwibGV2ZWxcIjogNFxufSwge1xuICBcInZhbHVlXCI6IFwiQ29uc3VtZXIgQWNrbm93bGVkZ2VtZW50IE1vZGVzLCBQcmVmZXRjaCBhbmQgVGhyb3VnaHB1dFwiLFxuICBcImlkXCI6IFwiY2hhbm5lbC1xb3MtcHJlZmV0Y2gtdGhyb3VnaHB1dFwiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIldoZW4gQ29uc3VtZXJzIEZhaWwgb3IgTG9zZSBDb25uZWN0aW9uOiBBdXRvbWF0aWMgUmVxdWV1ZWluZ1wiLFxuICBcImlkXCI6IFwiYXV0b21hdGljLXJlcXVldWVpbmdcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJDbGllbnQgRXJyb3JzOiBEb3VibGUgQWNraW5nIGFuZCBVbmtub3duIFRhZ3NcIixcbiAgXCJpZFwiOiBcImNvbnN1bWVyLWFja3MtZG91YmxlLWFja2luZ1wiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlB1Ymxpc2hlciBDb25maXJtc1wiLFxuICBcImlkXCI6IFwicHVibGlzaGVyLWNvbmZpcm1zXCIsXG4gIFwibGV2ZWxcIjogMlxufSwge1xuICBcInZhbHVlXCI6IFwiTmVnYXRpdmUgQWNrbm93bGVkZ21lbnRzIGZvciBQdWJsaXNoZXNcIixcbiAgXCJpZFwiOiBcInNlcnZlci1zZW50LW5hY2tzXCIsXG4gIFwibGV2ZWxcIjogM1xufSwge1xuICBcInZhbHVlXCI6IFwiV2hlbiBXaWxsIFB1Ymxpc2hlZCBNZXNzYWdlcyBCZSBDb25maXJtZWQgYnkgdGhlIEJyb2tlcj9cIixcbiAgXCJpZFwiOiBcIndoZW4tcHVibGlzaGVzLWFyZS1jb25maXJtZWRcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJBY2sgTGF0ZW5jeSBmb3IgUGVyc2lzdGVudCBNZXNzYWdlc1wiLFxuICBcImlkXCI6IFwicHVibGlzaGVyLWNvbmZpcm1zLWxhdGVuY3lcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJPcmRlcmluZyBDb25zaWRlcmF0aW9ucyBmb3IgUHVibGlzaGVyIENvbmZpcm1zXCIsXG4gIFwiaWRcIjogXCJwdWJsaXNoZXItY29uZmlybXMtb3JkZXJpbmdcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJQdWJsaXNoZXIgQ29uZmlybXMgYW5kIEd1YXJhbnRlZWQgRGVsaXZlcnlcIixcbiAgXCJpZFwiOiBcInB1Ymxpc2hlci1jb25maXJtcy1hbmQtZ3VhcmFudGVlZC1kZWxpdmVyeVwiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIkxpbWl0YXRpb25zXCIsXG4gIFwiaWRcIjogXCJsaW1pdGF0aW9uc1wiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIk1heGltdW0gRGVsaXZlcnkgVGFnXCIsXG4gIFwiaWRcIjogXCJwdWJsaXNoZXItY29uZmlybXMtYW5kLWd1YXJhbnRlZWQtZGVsaXZlcnlcIixcbiAgXCJsZXZlbFwiOiAzXG59XTtcbmZ1bmN0aW9uIF9jcmVhdGVNZHhDb250ZW50KHByb3BzKSB7XG4gIGNvbnN0IF9jb21wb25lbnRzID0ge1xuICAgIGE6IFwiYVwiLFxuICAgIGNvZGU6IFwiY29kZVwiLFxuICAgIGgxOiBcImgxXCIsXG4gICAgaDI6IFwiaDJcIixcbiAgICBoMzogXCJoM1wiLFxuICAgIGg0OiBcImg0XCIsXG4gICAgaGVhZGVyOiBcImhlYWRlclwiLFxuICAgIGxpOiBcImxpXCIsXG4gICAgb2w6IFwib2xcIixcbiAgICBwOiBcInBcIixcbiAgICBwcmU6IFwicHJlXCIsXG4gICAgc3Ryb25nOiBcInN0cm9uZ1wiLFxuICAgIHVsOiBcInVsXCIsXG4gICAgLi4uX3Byb3ZpZGVDb21wb25lbnRzKCksXG4gICAgLi4ucHJvcHMuY29tcG9uZW50c1xuICB9O1xuICByZXR1cm4gX2pzeHMoX0ZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmhlYWRlciwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuaDEsIHtcbiAgICAgICAgaWQ6IFwiY29uc3VtZXItYWNrbm93bGVkZ2VtZW50cy1hbmQtcHVibGlzaGVyLWNvbmZpcm1zXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIkNvbnN1bWVyIEFja25vd2xlZGdlbWVudHMgYW5kIFB1Ymxpc2hlciBDb25maXJtc1wiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJvdmVydmlld1wiLFxuICAgICAgY2hpbGRyZW46IFwiT3ZlcnZpZXdcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhpcyBndWlkZSBjb3ZlcnMgdHdvIHJlbGF0ZWQgZmVhdHVyZXMgcmVsYXRlZCB0byBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9yZWxpYWJpbGl0eVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJkYXRhIHNhZmV0eVwiXG4gICAgICB9KSwgXCIsIGNvbnN1bWVyIEFja25vd2xlZGdlbWVudHNcXHJcXG5hbmQgcHVibGlzaGVyIGNvbmZpcm1zOlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy51bCwge1xuICAgICAgY2hpbGRyZW46IFtcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIiNiYXNpY3NcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJXaHkgYWNrbm93bGVkZ2VtZW50cyBleGlzdFwiXG4gICAgICAgIH0pXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIiNhY2tub3dsZWRnZW1lbnQtbW9kZXNcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJNYW51YWwgYW5kIGF1dG9tYXRpY1wiXG4gICAgICAgIH0pLCBcIiBhY2tub3dsZWRnZW1lbnQgbW9kZXNcIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiI2NvbnN1bWVyLWFja3MtYXBpLWVsZW1lbnRzXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiQWNrbm93bGVkZ2VtZW50IEFQSVwiXG4gICAgICAgIH0pLCBcIiwgaW5jbHVkaW5nIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIiNjb25zdW1lci1hY2tzLW11bHRpcGxlLXBhcmFtZXRlclwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIm11bHRpLWFja3NcIlxuICAgICAgICB9KSwgXCIgYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIiNjb25zdW1lci1uYWNrcy1yZXF1ZXVlXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwicmVxdWV1ZWluZ1wiXG4gICAgICAgIH0pXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCIjYXV0b21hdGljLXJlcXVldWVpbmdcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJBdXRvbWF0aWMgcmVxdWV1ZWluZ1wiXG4gICAgICAgIH0pLCBcIiBvbiBjb25uZWN0aW9uIGxvc3Mgb3IgY2hhbm5lbCBjbG9zdXJlXCJdXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIiNjaGFubmVsLXFvcy1wcmVmZXRjaFwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIkNoYW5uZWwgcHJlZmV0Y2hcIlxuICAgICAgICB9KSwgXCIgYW5kIGl0cyBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCIjY2hhbm5lbC1xb3MtcHJlZmV0Y2gtdGhyb3VnaHB1dFwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcImVmZmVjdHMgb24gdGhyb3VnaHB1dFwiXG4gICAgICAgIH0pXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbXCJNb3N0IGNvbW1vbiBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCIjY29uc3VtZXItYWNrcy1kb3VibGUtYWNraW5nXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiY2xpZW50IGVycm9yc1wiXG4gICAgICAgIH0pXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCIjcHVibGlzaGVyLWNvbmZpcm1zXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiUHVibGlzaGVyIGNvbmZpcm1zXCJcbiAgICAgICAgfSksIFwiIGFuZCByZWxhdGVkIHB1Ymxpc2hlciBkYXRhIHNhZmV0eSB0b3BpY3NcIl1cbiAgICAgIH0pLCBcIlxcblwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcImFuZCBtb3JlLiBBY2tub3dsZWRnZW1lbnRzIG9uIGJvdGggY29uc3VtZXIgYW5kIHB1Ymxpc2hlciBzaWRlIGFyZSBpbXBvcnRhbnQgZm9yXFxyXFxuZGF0YSBzYWZldHkgaW4gYXBwbGljYXRpb25zIHRoYXQgdXNlIG1lc3NhZ2luZy5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiTW9yZSByZWxhdGVkIHRvcGljcyBhcmUgY292ZXJlZCBpbiB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vcHVibGlzaGVyc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJQdWJsaXNoZXJcIlxuICAgICAgfSksIFwiIGFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9jb25zdW1lcnNcIixcbiAgICAgICAgY2hpbGRyZW46IFwiQ29uc3VtZXJcIlxuICAgICAgfSksIFwiIGd1aWRlcy5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwiYmFzaWNzXCIsXG4gICAgICBjaGlsZHJlbjogXCJUaGUgQmFzaWNzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJTeXN0ZW1zIHRoYXQgdXNlIGEgbWVzc2FnaW5nIGJyb2tlciBzdWNoIGFzIFJhYmJpdE1RIGFyZSBieVxcclxcbmRlZmluaXRpb24gZGlzdHJpYnV0ZWQuIFNpbmNlIHByb3RvY29sIG1ldGhvZHMgKG1lc3NhZ2VzKSBzZW50XFxyXFxuYXJlIG5vdCBndWFyYW50ZWVkIHRvIHJlYWNoIHRoZSBwZWVyIG9yIGJlIHN1Y2Nlc3NmdWxseSBwcm9jZXNzZWRcXHJcXG5ieSBpdCwgYm90aCBwdWJsaXNoZXJzIGFuZCBjb25zdW1lcnMgbmVlZCBhIG1lY2hhbmlzbSBmb3JcXHJcXG5kZWxpdmVyeSBhbmQgcHJvY2Vzc2luZyBjb25maXJtYXRpb24uIFNldmVyYWwgbWVzc2FnaW5nXFxyXFxucHJvdG9jb2xzIHN1cHBvcnRlZCBieSBSYWJiaXRNUSBwcm92aWRlIHN1Y2ggZmVhdHVyZXMuXFxyXFxuVGhpcyBndWlkZSBjb3ZlcnMgdGhlIGZlYXR1cmVzIGluIEFNUVAgMC05LTEgYnV0IHRoZSBpZGVhXFxyXFxuaXMgbGFyZ2VseSB0aGUgc2FtZSBpbiBvdGhlciBzdXBwb3J0ZWQgcHJvdG9jb2xzLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJEZWxpdmVyeSBwcm9jZXNzaW5nIGFja25vd2xlZGdlbWVudHMgZnJvbSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9jb25zdW1lcnNcIixcbiAgICAgICAgY2hpbGRyZW46IFwiY29uc3VtZXJzXCJcbiAgICAgIH0pLCBcIiB0byBSYWJiaXRNUVxcclxcbmFyZSBrbm93biBhcyBhY2tub3dsZWRnZW1lbnRzIGluIG1lc3NhZ2luZyBwcm90b2NvbHM7IGJyb2tlclxcclxcbmFja25vd2xlZGdlbWVudHMgdG8gXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vcHVibGlzaGVyc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJwdWJsaXNoZXJzXCJcbiAgICAgIH0pLCBcIiBhcmUgYSBwcm90b2NvbCBleHRlbnNpb24gY2FsbGVkXFxyXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIiNwdWJsaXNoZXItY29uZmlybXNcIixcbiAgICAgICAgY2hpbGRyZW46IFwicHVibGlzaGVyIGNvbmZpcm1zXCJcbiAgICAgIH0pLCBcIi5cXHJcXG5Cb3RoIGZlYXR1cmVzIGJ1aWxkIG9uIHRoZSBzYW1lIGlkZWEgYW5kIGFyZSBpbnNwaXJlZCBieSBUQ1AuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGV5IGFyZSBlc3NlbnRpYWwgZm9yIHJlbGlhYmxlIGRlbGl2ZXJ5IGJvdGggZnJvbSBwdWJsaXNoZXJzXFxyXFxudG8gUmFiYml0TVEgbm9kZXMgYW5kIGZyb20gUmFiYml0TVEgbm9kZXMgdG8gY29uc3VtZXJzLiBJbiBvdGhlciB3b3JkcyxcXHJcXG50aGV5IGFyZSBcIiwgX2pzeChcInN0cm9uZ1wiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImVzc2VudGlhbCBmb3IgZGF0YSBzYWZldHlcIlxuICAgICAgfSksIFwiLCBmb3Igd2hpY2ggYXBwbGljYXRpb25zIGFyZVxcclxcbnJlc3BvbnNpYmxlIGFzIG11Y2ggYXMgUmFiYml0TVEgbm9kZXMgYXJlLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJyZWxhdGlvblwiLFxuICAgICAgY2hpbGRyZW46IFwiQXJlIFB1Ymxpc2hlciBDb25maXJtcyBSZWxhdGVkIHRvIENvbnN1bWVyIERlbGl2ZXJ5IEFja25vd2xlZGdlbWVudHM/XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIjcHVibGlzaGVyLWNvbmZpcm1zXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIlB1Ymxpc2hlciBjb25maXJtc1wiXG4gICAgICB9KSwgXCIgYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIjY29uc3VtZXItYWNrbm93bGVkZ2VtZW50c1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJjb25zdW1lciBkZWxpdmVyeSBhY2tub3dsZWRnZW1lbnRzXCJcbiAgICAgIH0pLCBcIlxcclxcbmFyZSB2ZXJ5IHNpbWlsYXIgZmVhdHVyZXMgdGhhdCBzb2x2ZSBzaW1pbGFyIHByb2JsZW1zIGluIGRpZmZlcmVudCBjb250ZXh0czpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMub2wsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogXCJDb25zdW1lciBhY2tub3dsZWRnZW1lbnRzLCBhcyB0aGUgbmFtZSBzdWdnZXN0cywgY292ZXIgUmFiYml0TVEgY29tbXVuaWNhdGlvbiB3aXRoIGNvbnN1bWVyc1wiXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogXCJQdWJsaXNoZXIgY29uZmlybXMgY292ZXIgcHVibGlzaGVyIGNvbW11bmljYXRpb24gd2l0aCBSYWJiaXRNUVwiXG4gICAgICB9KSwgXCJcXG5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJUaGUgdHdvIGZlYXR1cmVzLCBob3dldmVyLCBhcmUgZW50aXJlbHkgb3J0aG9nb25hbCBhbmQgdW5hd2FyZSBvZiBlYWNoIG90aGVyLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5zdHJvbmcsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiUHVibGlzaGVyIGNvbmZpcm1zIGFyZSBub3QgYXdhcmUgb2YgY29uc3VtZXJzXCJcbiAgICAgIH0pLCBcIjogdGhleSBvbmx5IGNvdmVyIHB1Ymxpc2hlcidzIGludGVyYWN0aW9uc1xcclxcbndpdGggbm9kZSBpdCBpcyBjb25uZWN0ZWQgdG8sIGFuZCB0aGUgcXVldWUgKG9yIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL3N0cmVhbXNcIixcbiAgICAgICAgY2hpbGRyZW46IFwic3RyZWFtXCJcbiAgICAgIH0pLCBcIikgbGVhZGVyIHJlcGxpY2EuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5zdHJvbmcsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiQ29uc3VtZXIgYWNrbm93bGVkZ2VtZW50cyBhcmUgbm90IGF3YXJlIG9mIHB1Ymxpc2hlcnNcIlxuICAgICAgfSksIFwiOiB0aGVpciBnb2FsIGlzIHRvIGNvbmZpcm1cXHJcXG50byBhIFJhYmJpdE1RIG5vZGUgdGhhdCBhIGdpdmVuIGRlbGl2ZXJ5IHdhcyBzdWNjZXNzZnVsbHkgcmVjZWl2ZWQgYW5kIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHksXFxyXFxuc28gdGhlIGRlbGl2ZXJlZCBtZXNzYWdlIGNhbiBiZSBtYXJrZWQgZm9yIGZ1dHVyZSBkZWxldGlvbi5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlNvbWV0aW1lcyBwdWJsaXNoaW5nIGFuZCBjb25zdW1pbmcgYXBwbGljYXRpb25zIG5lZWQgdG8gY29tbXVuaWNhdGUgdmlhIHJlcXVlc3RzIGFuZCByZXNwb25zZXNcXHJcXG50aGF0IG5lZWQgYW4gZXhwbGljaXQgYWNrbm93bGVkZ2VtZW50IGZyb20gdGhlIHBlZXIuIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIvdHV0b3JpYWxzXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIlJhYmJpdE1RIHR1dG9yaWFsICM2XCJcbiAgICAgIH0pLCBcIlxcclxcbmRlbW9uc3RyYXRlcyB0aGUgYmFzaWNzIG9mIGhvdyB0aGF0J3MgZG9uZSwgYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL2RpcmVjdC1yZXBseS10b1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJEaXJlY3QgUmVwbHktdG9cIlxuICAgICAgfSksIFwiIHByb3ZpZGVzXFxyXFxuYSB3YXkgdG8gZG8gaXQgd2l0aG91dCBkZWNsYXJpbmcgYSBsb3Qgb2Ygc2hvcnQtbGl2ZWQgdGVtcG9yYXJ5IHJlc3BvbnNlIHF1ZXVlcy5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJUaGlzIHR5cGUgb2YgY29tbXVuaWNhdGlvbiwgaG93ZXZlciwgaXMgbm90IGNvdmVyZWQgaW4gdGhpcyBndWlkZSwgYW5kIGlzIG1lbnRpb25lZCBvbmx5IHRvXFxyXFxuY29udHJhc3QgaXQgd2l0aCB0aGUgbXVjaCBtb3JlIGZvY3Vzc2VkIG1lc3NhZ2luZyBwcm90b2NvbCBmZWF0dXJlcyBkZXNjcmliZWQgaW4gdGhpcyBndWlkZS5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJjb25zdW1lci1hY2tub3dsZWRnZW1lbnRzXCIsXG4gICAgICBjaGlsZHJlbjogXCIoQ29uc3VtZXIpIERlbGl2ZXJ5IEFja25vd2xlZGdlbWVudHNcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiV2hlbiBSYWJiaXRNUSBkZWxpdmVycyBhIG1lc3NhZ2UgdG8gYSBjb25zdW1lciwgaXQgbmVlZHMgdG8ga25vd1xcclxcbndoZW4gdG8gY29uc2lkZXIgdGhlIG1lc3NhZ2UgdG8gYmUgc3VjY2Vzc2Z1bGx5IHNlbnQuIFdoYXQga2luZCBvZiBsb2dpYyBpc1xcclxcbm9wdGltYWwgZGVwZW5kcyBvbiB0aGUgc3lzdGVtLiBJdCBpcyB0aGVyZWZvcmUgcHJpbWFyaWx5IGFuIGFwcGxpY2F0aW9uXFxyXFxuZGVjaXNpb24uIEluIEFNUVAgMC05LTEgaXQgaXMgbWFkZSB3aGVuIGEgY29uc3VtZXIgaXMgcmVnaXN0ZXJlZCB1c2luZ1xcclxcbnRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImJhc2ljLmNvbnN1bWVcIlxuICAgICAgfSksIFwiIG1ldGhvZCBvciBhIG1lc3NhZ2UgaXMgZmV0Y2hlZCBvbiBkZW1hbmRcXHJcXG53aXRoIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImJhc2ljLmdldFwiXG4gICAgICB9KSwgXCIgbWV0aG9kLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiSWYgeW91IHByZWZlciBhIG1vcmUgZXhhbXBsZS1vcmllbnRlZCBhbmQgc3RlcC1ieS1zdGVwIG1hdGVyaWFsLCBjb25zdW1lciBhY2tub3dsZWRnZW1lbnRzIGFyZVxcclxcbmFsc28gY292ZXJlZCBpbiBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiL3R1dG9yaWFsc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJSYWJiaXRNUSB0dXRvcmlhbCAjMlwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcImNvbnN1bWVyLWFja3MtZGVsaXZlcnktdGFnc1wiLFxuICAgICAgY2hpbGRyZW46IFwiRGVsaXZlcnkgSWRlbnRpZmllcnM6IERlbGl2ZXJ5IFRhZ3NcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiQmVmb3JlIHdlIHByb2NlZWQgdG8gZGlzY3VzcyBvdGhlciB0b3BpY3MgaXQgaXMgaW1wb3J0YW50IHRvXFxyXFxuZXhwbGFpbiBob3cgZGVsaXZlcmllcyBhcmUgaWRlbnRpZmllZCAoYW5kIGFja25vd2xlZGdlbWVudHNcXHJcXG5pbmRpY2F0ZSB0aGVpciByZXNwZWN0aXZlIGRlbGl2ZXJpZXMpLiAgV2hlbiBhIGNvbnN1bWVyXFxyXFxuKHN1YnNjcmlwdGlvbikgaXMgcmVnaXN0ZXJlZCwgbWVzc2FnZXMgd2lsbCBiZSBkZWxpdmVyZWRcXHJcXG4ocHVzaGVkKSBieSBSYWJiaXRNUSB1c2luZyB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJiYXNpYy5kZWxpdmVyXCJcbiAgICAgIH0pLCBcIlxcclxcbm1ldGhvZC4gIFRoZSBtZXRob2QgY2FycmllcyBhIFwiLCBfanN4KFwiZW1cIiwge1xuICAgICAgICBjaGlsZHJlbjogXCJkZWxpdmVyeSB0YWdcIlxuICAgICAgfSksIFwiLCB3aGljaFxcclxcbnVuaXF1ZWx5IGlkZW50aWZpZXMgdGhlIGRlbGl2ZXJ5IG9uIGEgY2hhbm5lbC4gRGVsaXZlcnkgdGFncyBhcmVcXHJcXG50aGVyZWZvcmUgc2NvcGVkIHBlciBjaGFubmVsLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkRlbGl2ZXJ5IHRhZ3MgYXJlIG1vbm90b25pY2FsbHkgZ3Jvd2luZyBwb3NpdGl2ZVxcclxcbmludGVnZXJzIGFuZCBhcmUgcHJlc2VudGVkIGFzIHN1Y2ggYnkgY2xpZW50IGxpYnJhcmllcy5cXHJcXG5DbGllbnQgbGlicmFyeSBtZXRob2RzIHRoYXQgYWNrbm93bGVkZ2UgZGVsaXZlcmllcyB0YWtlIGEgZGVsaXZlcnkgdGFnXFxyXFxuYXMgYW4gYXJndW1lbnQuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJCZWNhdXNlIGRlbGl2ZXJ5IHRhZ3MgYXJlIHNjb3BlZCBwZXIgY2hhbm5lbCwgZGVsaXZlcmllcyBtdXN0IGJlXFxyXFxuYWNrbm93bGVkZ2VkIG9uIHRoZSBzYW1lIGNoYW5uZWwgdGhleSB3ZXJlIHJlY2VpdmVkIG9uLiBBY2tub3dsZWRnaW5nXFxyXFxub24gYSBkaWZmZXJlbnQgY2hhbm5lbCB3aWxsIHJlc3VsdCBpbiBhbiBcXFwidW5rbm93biBkZWxpdmVyeSB0YWdcXFwiIHByb3RvY29sXFxyXFxuZXhjZXB0aW9uIGFuZCBjbG9zZSB0aGUgY2hhbm5lbC5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJhY2tub3dsZWRnZW1lbnQtbW9kZXNcIixcbiAgICAgIGNoaWxkcmVuOiBcIkNvbnN1bWVyIEFja25vd2xlZGdlbWVudCBNb2RlcyBhbmQgRGF0YSBTYWZldHkgQ29uc2lkZXJhdGlvbnNcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIldoZW4gYSBub2RlIGRlbGl2ZXJzIGEgbWVzc2FnZSB0byBhIGNvbnN1bWVyLCBpdCBoYXMgdG8gZGVjaWRlIHdoZXRoZXIgdGhlXFxyXFxubWVzc2FnZSBzaG91bGQgYmUgY29uc2lkZXJlZCBoYW5kbGVkIChvciBhdCBsZWFzdCByZWNlaXZlZCkgYnkgdGhlIGNvbnN1bWVyLiBTaW5jZVxcclxcbm11bHRpcGxlIHRoaW5ncyAoY2xpZW50IGNvbm5lY3Rpb25zLCBjb25zdW1lciBhcHBzLCBhbmQgc28gb24pIGNhbiBmYWlsLFxcclxcbnRoaXMgZGVjaXNpb24gaXMgYSBkYXRhIHNhZmV0eSBjb25jZXJuLiBNZXNzYWdpbmcgcHJvdG9jb2xzIHVzdWFsbHkgcHJvdmlkZVxcclxcbmEgY29uZmlybWF0aW9uIG1lY2hhbmlzbSB0aGF0IGFsbG93cyBjb25zdW1lcnMgdG8gYWNrbm93bGVkZ2UgZGVsaXZlcmllc1xcclxcbnRvIHRoZSBub2RlIHRoZXkgYXJlIGNvbm5lY3RlZCB0by4gV2hldGhlciB0aGUgbWVjaGFuaXNtIGlzIHVzZWQgaXMgZGVjaWRlZFxcclxcbmF0IHRoZSB0aW1lIGNvbnN1bWVyIHN1YnNjcmliZXMuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJEZXBlbmRpbmcgb24gdGhlIGFja25vd2xlZGdlbWVudCBtb2RlIHVzZWQsIFJhYmJpdE1RIGNhbiBjb25zaWRlciBhIG1lc3NhZ2UgdG8gYmVcXHJcXG5zdWNjZXNzZnVsbHkgZGVsaXZlcmVkIGVpdGhlciBpbW1lZGlhdGVseSBhZnRlciBpdCBpcyBzZW50IG91dCAod3JpdHRlbiB0byBhIFRDUCBzb2NrZXQpXFxyXFxub3Igd2hlbiBhbiBleHBsaWNpdCAoXFxcIm1hbnVhbFxcXCIpIGNsaWVudCBhY2tub3dsZWRnZW1lbnQgaXMgcmVjZWl2ZWQuIE1hbnVhbGx5IHNlbnRcXHJcXG5hY2tub3dsZWRnZW1lbnRzIGNhbiBiZSBwb3NpdGl2ZSBvciBuZWdhdGl2ZSBhbmQgdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHByb3RvY29sIG1ldGhvZHM6XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMudWwsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJiYXNpYy5hY2tcIlxuICAgICAgICB9KSwgXCIgaXMgdXNlZCBmb3IgcG9zaXRpdmUgYWNrbm93bGVkZ2VtZW50c1wiXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiYmFzaWMubmFja1wiXG4gICAgICAgIH0pLCBcIiBpcyB1c2VkIGZvciBuZWdhdGl2ZSBhY2tub3dsZWRnZW1lbnRzIChub3RlOiB0aGlzIGlzIGEgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiLi9uYWNrXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiUmFiYml0TVEgZXh0ZW5zaW9uIHRvIEFNUVAgMC05LTFcIlxuICAgICAgICB9KSwgXCIpXCJdXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJiYXNpYy5yZWplY3RcIlxuICAgICAgICB9KSwgXCIgaXMgdXNlZCBmb3IgbmVnYXRpdmUgYWNrbm93bGVkZ2VtZW50cyBidXQgaGFzIG9uZSBsaW1pdGF0aW9uIGNvbXBhcmVkIHRvIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJiYXNpYy5uYWNrXCJcbiAgICAgICAgfSldXG4gICAgICB9KSwgXCJcXG5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJIb3cgdGhlc2UgbWV0aG9kcyBhcmUgZXhwb3NlZCBpbiBjbGllbnQgbGlicmFyeSBBUElzIHdpbGwgYmUgZGlzY3Vzc2VkIGJlbG93LlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJQb3NpdGl2ZSBhY2tub3dsZWRnZW1lbnRzIHNpbXBseSBpbnN0cnVjdCBSYWJiaXRNUSB0byByZWNvcmQgYSBtZXNzYWdlIGFzIGRlbGl2ZXJlZCBhbmQgY2FuIGJlIGRpc2NhcmRlZC5cXHJcXG5OZWdhdGl2ZSBhY2tub3dsZWRnZW1lbnRzIHdpdGggXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJiYXNpYy5yZWplY3RcIlxuICAgICAgfSksIFwiIGhhdmUgdGhlIHNhbWUgZWZmZWN0LiBUaGUgZGlmZmVyZW5jZVxcclxcbmlzIHByaW1hcmlseSBpbiB0aGUgc2VtYW50aWNzOiBwb3NpdGl2ZSBhY2tub3dsZWRnZW1lbnRzIGFzc3VtZVxcclxcbmEgbWVzc2FnZSB3YXMgc3VjY2Vzc2Z1bGx5IHByb2Nlc3NlZCB3aGlsZSB0aGVpciBuZWdhdGl2ZSBjb3VudGVycGFydFxcclxcbnN1Z2dlc3RzIHRoYXQgYSBkZWxpdmVyeSB3YXNuJ3QgcHJvY2Vzc2VkIGJ1dCBzdGlsbCBzaG91bGQgYmUgZGVsZXRlZC5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkluIGF1dG9tYXRpYyBhY2tub3dsZWRnZW1lbnQgbW9kZSwgYSBtZXNzYWdlIGlzIGNvbnNpZGVyZWRcXHJcXG50byBiZSBzdWNjZXNzZnVsbHkgZGVsaXZlcmVkIGltbWVkaWF0ZWx5IGFmdGVyIGl0IGlzXFxyXFxuc2VudC4gVGhpcyBtb2RlIHRyYWRlcyBvZmYgaGlnaGVyIHRocm91Z2hwdXQgKGFzIGxvbmcgYXMgdGhlXFxyXFxuY29uc3VtZXJzIGNhbiBrZWVwIHVwKSBmb3IgcmVkdWNlZCBzYWZldHkgb2YgZGVsaXZlcnkgYW5kXFxyXFxuY29uc3VtZXIgcHJvY2Vzc2luZy4gVGhpcyBtb2RlIGlzIG9mdGVuIHJlZmVycmVkIHRvIGFzXFxyXFxuXFxcImZpcmUtYW5kLWZvcmdldFxcXCIuICBVbmxpa2Ugd2l0aCBtYW51YWwgYWNrbm93bGVkZ2VtZW50XFxyXFxubW9kZWwsIGlmIGNvbnN1bWVycydzIFRDUCBjb25uZWN0aW9uIG9yIGNoYW5uZWwgaXMgY2xvc2VkXFxyXFxuYmVmb3JlIHN1Y2Nlc3NmdWwgZGVsaXZlcnksIHRoZSBtZXNzYWdlIHNlbnQgYnkgdGhlIHNlcnZlciB3aWxsIGJlIGxvc3QuXFxyXFxuVGhlcmVmb3JlLCBhdXRvbWF0aWMgbWVzc2FnZSBhY2tub3dsZWRnZW1lbnQgXCIsIF9qc3goXCJzdHJvbmdcIiwge1xuICAgICAgICBjaGlsZHJlbjogXCJzaG91bGQgYmUgY29uc2lkZXJlZCB1bnNhZmVcIlxuICAgICAgfSksIFwiXFxyXFxuYW5kIG5vdCBzdWl0YWJsZSBmb3IgYWxsIHdvcmtsb2Fkcy5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJBbm90aGVyIHRoaW5nIHRoYXQncyBpbXBvcnRhbnQgdG8gY29uc2lkZXIgd2hlbiB1c2luZ1xcclxcbmF1dG9tYXRpYyBhY2tub3dsZWRnZW1lbnQgbW9kZSBpcyBjb25zdW1lciBvdmVybG9hZC5cXHJcXG5NYW51YWwgYWNrbm93bGVkZ2VtZW50IG1vZGUgaXMgdHlwaWNhbGx5IHVzZWQgd2l0aCBhIGJvdW5kZWRcXHJcXG5jaGFubmVsIHByZWZldGNoIHdoaWNoIGxpbWl0cyB0aGUgbnVtYmVyIG9mIG91dHN0YW5kaW5nIChcXFwiaW4gcHJvZ3Jlc3NcXFwiKVxcclxcbmRlbGl2ZXJpZXMgb24gYSBjaGFubmVsLiBXaXRoIGF1dG9tYXRpYyBhY2tub3dsZWRnZW1lbnRzLCBob3dldmVyLCB0aGVyZSBpc1xcclxcbm5vIHN1Y2ggbGltaXQgYnkgZGVmaW5pdGlvbi4gQ29uc3VtZXJzIHRoZXJlZm9yZSBjYW4gYmUgb3ZlcndoZWxtZWQgYnlcXHJcXG50aGUgcmF0ZSBvZiBkZWxpdmVyaWVzLCBwb3RlbnRpYWxseSBhY2N1bXVsYXRpbmcgYSBiYWNrbG9nIGluIG1lbW9yeVxcclxcbmFuZCBydW5uaW5nIG91dCBvZiBoZWFwIG9yIGdldHRpbmcgdGhlaXIgcHJvY2VzcyB0ZXJtaW5hdGVkIGJ5IHRoZSBPUy5cXHJcXG5Tb21lIGNsaWVudCBsaWJyYXJpZXMgd2lsbCBhcHBseSBUQ1AgYmFjayBwcmVzc3VyZSAoc3RvcCByZWFkaW5nIGZyb20gdGhlIHNvY2tldFxcclxcbnVudGlsIHRoZSBiYWNrbG9nIG9mIHVucHJvY2Vzc2VkIGRlbGl2ZXJpZXMgZHJvcHMgYmV5b25kIGEgY2VydGFpbiBsaW1pdCkuXFxyXFxuQXV0b21hdGljIGFja25vd2xlZGdlbWVudCBtb2RlIGlzIHRoZXJlZm9yZSBvbmx5IHJlY29tbWVuZGVkIGZvciBjb25zdW1lcnNcXHJcXG50aGF0IGNhbiBwcm9jZXNzIGRlbGl2ZXJpZXMgZWZmaWNpZW50bHkgYW5kIGF0IGEgc3RlYWR5IHJhdGUuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwiY29uc3VtZXItYWNrcy1hcGktZWxlbWVudHNcIixcbiAgICAgIGNoaWxkcmVuOiBcIlBvc2l0aXZlbHkgQWNrbm93bGVkZ2luZyBEZWxpdmVyaWVzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkFQSSBtZXRob2RzIHVzZWQgZm9yIGRlbGl2ZXJ5IGFja25vd2xlZGdlbWVudCBhcmUgdXN1YWxseSBleHBvc2VkIGFzIG9wZXJhdGlvbnMgb24gYSBjaGFubmVsIGluIGNsaWVudCBsaWJyYXJpZXMuXFxyXFxuSmF2YSBjbGllbnQgdXNlcnMgd2lsbCB1c2UgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJDaGFubmVsI2Jhc2ljQWNrXCJcbiAgICAgIH0pLCBcIiBhbmQgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJDaGFubmVsI2Jhc2ljTmFja1wiXG4gICAgICB9KSwgXCJcXHJcXG50byBwZXJmb3JtIGEgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJiYXNpYy5hY2tcIlxuICAgICAgfSksIFwiIGFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImJhc2ljLm5hY2tcIlxuICAgICAgfSksIFwiLCByZXNwZWN0aXZlbHkuIEhlcmUncyBhIEphdmFcXHJcXG5jbGllbnQgZXhhbXBsZXMgdGhhdCBkZW1vbnN0cmF0ZXMgYSBwb3NpdGl2ZSBhY2tub3dsZWRnZW1lbnQ6XCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1qYXZhXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIi8vIHRoaXMgZXhhbXBsZSBhc3N1bWVzIGFuIGV4aXN0aW5nIGNoYW5uZWwgaW5zdGFuY2VcXHJcXG5cXHJcXG5ib29sZWFuIGF1dG9BY2sgPSBmYWxzZTtcXHJcXG5jaGFubmVsLmJhc2ljQ29uc3VtZShxdWV1ZU5hbWUsIGF1dG9BY2ssIFxcXCJhLWNvbnN1bWVyLXRhZ1xcXCIsXFxyXFxuICAgICBuZXcgRGVmYXVsdENvbnN1bWVyKGNoYW5uZWwpIHtcXHJcXG4gICAgICAgICBAT3ZlcnJpZGVcXHJcXG4gICAgICAgICBwdWJsaWMgdm9pZCBoYW5kbGVEZWxpdmVyeShTdHJpbmcgY29uc3VtZXJUYWcsXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRW52ZWxvcGUgZW52ZWxvcGUsXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQU1RUC5CYXNpY1Byb3BlcnRpZXMgcHJvcGVydGllcyxcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlW10gYm9keSlcXHJcXG4gICAgICAgICAgICAgdGhyb3dzIElPRXhjZXB0aW9uXFxyXFxuICAgICAgICAge1xcclxcbiAgICAgICAgICAgICBsb25nIGRlbGl2ZXJ5VGFnID0gZW52ZWxvcGUuZ2V0RGVsaXZlcnlUYWcoKTtcXHJcXG4gICAgICAgICAgICAgLy8gcG9zaXRpdmVseSBhY2tub3dsZWRnZSBhIHNpbmdsZSBkZWxpdmVyeSwgdGhlIG1lc3NhZ2Ugd2lsbFxcclxcbiAgICAgICAgICAgICAvLyBiZSBkaXNjYXJkZWRcXHJcXG4gICAgICAgICAgICAgY2hhbm5lbC5iYXNpY0FjayhkZWxpdmVyeVRhZywgZmFsc2UpO1xcclxcbiAgICAgICAgIH1cXHJcXG4gICAgIH0pO1xcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiSW4gLk5FVCBjbGllbnQgdGhlIG1ldGhvZHMgYXJlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiSU1vZGVsI0Jhc2ljQWNrXCJcbiAgICAgIH0pLCBcIiBhbmQgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJJTW9kZWwjQmFzaWNOYWNrXCJcbiAgICAgIH0pLCBcIiwgcmVzcGVjdGl2ZWx5LlxcclxcbkhlcmUncyBhbiBleGFtcGxlIHRoYXQgZGVtb25zdHJhdGVzIGEgcG9zaXRpdmUgYWNrbm93bGVkZ2VtZW50IHdpdGggdGhhdCBjbGllbnQ6XCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1jc2hhcnBcIixcbiAgICAgICAgY2hpbGRyZW46IFwiLy8gdGhpcyBleGFtcGxlIGFzc3VtZXMgYW4gZXhpc3RpbmcgY2hhbm5lbCAoSU1vZGVsKSBpbnN0YW5jZVxcclxcblxcclxcbnZhciBjb25zdW1lciA9IG5ldyBFdmVudGluZ0Jhc2ljQ29uc3VtZXIoY2hhbm5lbCk7XFxyXFxuY29uc3VtZXIuUmVjZWl2ZWQgKz0gKGNoLCBlYSkgPT5cXHJcXG4gICAgICAgICAgICAgICAge1xcclxcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBlYS5Cb2R5LlRvQXJyYXkoKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIC8vIHBvc2l0aXZlbHkgYWNrbm93bGVkZ2UgYSBzaW5nbGUgZGVsaXZlcnksIHRoZSBtZXNzYWdlIHdpbGxcXHJcXG4gICAgICAgICAgICAgICAgICAgIC8vIGJlIGRpc2NhcmRlZFxcclxcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbC5CYXNpY0FjayhlYS5EZWxpdmVyeVRhZywgZmFsc2UpO1xcclxcbiAgICAgICAgICAgICAgICB9O1xcclxcblN0cmluZyBjb25zdW1lclRhZyA9IGNoYW5uZWwuQmFzaWNDb25zdW1lKHF1ZXVlTmFtZSwgZmFsc2UsIGNvbnN1bWVyKTtcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwiY29uc3VtZXItYWNrcy1tdWx0aXBsZS1wYXJhbWV0ZXJcIixcbiAgICAgIGNoaWxkcmVuOiBcIkFja25vd2xlZGdpbmcgTXVsdGlwbGUgRGVsaXZlcmllcyBhdCBPbmNlXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIk1hbnVhbCBhY2tub3dsZWRnZW1lbnRzIGNhbiBiZSBiYXRjaGVkIHRvIHJlZHVjZSBuZXR3b3JrIHRyYWZmaWMuXFxyXFxuVGhpcyBpcyBkb25lIGJ5IHNldHRpbmcgdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXVsdGlwbGVcIlxuICAgICAgfSksIFwiIGZpZWxkIG9mIGFja25vd2xlZGdlbWVudFxcclxcbm1ldGhvZHMgKHNlZSBhYm92ZSkgdG8gXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJ0cnVlXCJcbiAgICAgIH0pLCBcIi4gTm90ZSB0aGF0IFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiYmFzaWMucmVqZWN0XCJcbiAgICAgIH0pLCBcIiBkb2Vzbid0XFxyXFxuaGlzdG9yaWNhbGx5IGhhdmUgdGhlIGZpZWxkIGFuZCB0aGF0J3Mgd2h5IFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiYmFzaWMubmFja1wiXG4gICAgICB9KSwgXCIgd2FzIGludHJvZHVjZWRcXHJcXG5ieSBSYWJiaXRNUSBhcyBhIHByb3RvY29sIGV4dGVuc2lvbi5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIldoZW4gdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXVsdGlwbGVcIlxuICAgICAgfSksIFwiIGZpZWxkIGlzIHNldCB0byBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInRydWVcIlxuICAgICAgfSksIFwiLCBSYWJiaXRNUSB3aWxsIGFja25vd2xlZGdlXFxyXFxuYWxsIG91dHN0YW5kaW5nIGRlbGl2ZXJ5IHRhZ3MgdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgdGFnIHNwZWNpZmllZCBpbiB0aGVcXHJcXG5hY2tub3dsZWRnZW1lbnQuIExpa2UgZXZlcnl0aGluZyBlbHNlIHJlbGF0ZWQgdG8gYWNrbm93bGVkZ2VtZW50cywgdGhpcyBpcyBzY29wZWQgcGVyIGNoYW5uZWwuXFxyXFxuRm9yIGV4YW1wbGUsIGdpdmVuIHRoYXQgdGhlcmUgYXJlIGRlbGl2ZXJ5IHRhZ3MgNSwgNiwgNywgYW5kIDggdW5hY2tub3dsZWRnZWQgb24gY2hhbm5lbCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIkNoXCJcbiAgICAgIH0pLCBcIixcXHJcXG53aGVuIGFuIGFja25vd2xlZGdlbWVudCBmcmFtZSBhcnJpdmVzIG9uIHRoYXQgY2hhbm5lbCB3aXRoIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiZGVsaXZlcnlfdGFnXCJcbiAgICAgIH0pLCBcIiBzZXQgdG8gXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCI4XCJcbiAgICAgIH0pLCBcIlxcclxcbmFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm11bHRpcGxlXCJcbiAgICAgIH0pLCBcIiBzZXQgdG8gXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJ0cnVlXCJcbiAgICAgIH0pLCBcIiwgYWxsIHRhZ3MgZnJvbSA1IHRvIDggd2lsbCBiZSBhY2tub3dsZWRnZWQuXFxyXFxuSWYgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJtdWx0aXBsZVwiXG4gICAgICB9KSwgXCIgd2FzIHNldCB0byBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImZhbHNlXCJcbiAgICAgIH0pLCBcIiwgZGVsaXZlcmllcyA1LCA2LCBhbmQgNyB3b3VsZCBzdGlsbFxcclxcbmJlIHVuYWNrbm93bGVkZ2VkLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVG8gYWNrbm93bGVkZ2UgbXVsdGlwbGUgZGVsaXZlcmllcyB3aXRoIFJhYmJpdE1RIEphdmEgY2xpZW50LCBwYXNzIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwidHJ1ZVwiXG4gICAgICB9KSwgXCIgZm9yIHRoZVxcclxcblwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXVsdGlwbGVcIlxuICAgICAgfSksIFwiIHBhcmFtZXRlciB0byBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIkNoYW5uZWwjYmFzaWNBY2tcIlxuICAgICAgfSksIFwiOlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtamF2YVwiLFxuICAgICAgICBjaGlsZHJlbjogXCIvLyB0aGlzIGV4YW1wbGUgYXNzdW1lcyBhbiBleGlzdGluZyBjaGFubmVsIGluc3RhbmNlXFxyXFxuXFxyXFxuYm9vbGVhbiBhdXRvQWNrID0gZmFsc2U7XFxyXFxuY2hhbm5lbC5iYXNpY0NvbnN1bWUocXVldWVOYW1lLCBhdXRvQWNrLCBcXFwiYS1jb25zdW1lci10YWdcXFwiLFxcclxcbiAgICAgbmV3IERlZmF1bHRDb25zdW1lcihjaGFubmVsKSB7XFxyXFxuICAgICAgICAgQE92ZXJyaWRlXFxyXFxuICAgICAgICAgcHVibGljIHZvaWQgaGFuZGxlRGVsaXZlcnkoU3RyaW5nIGNvbnN1bWVyVGFnLFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVudmVsb3BlIGVudmVsb3BlLFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFNUVAuQmFzaWNQcm9wZXJ0aWVzIHByb3BlcnRpZXMsXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZVtdIGJvZHkpXFxyXFxuICAgICAgICAgICAgIHRocm93cyBJT0V4Y2VwdGlvblxcclxcbiAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICAgbG9uZyBkZWxpdmVyeVRhZyA9IGVudmVsb3BlLmdldERlbGl2ZXJ5VGFnKCk7XFxyXFxuICAgICAgICAgICAgIC8vIHBvc2l0aXZlbHkgYWNrbm93bGVkZ2UgYWxsIGRlbGl2ZXJpZXMgdXAgdG9cXHJcXG4gICAgICAgICAgICAgLy8gdGhpcyBkZWxpdmVyeSB0YWdcXHJcXG4gICAgICAgICAgICAgY2hhbm5lbC5iYXNpY0FjayhkZWxpdmVyeVRhZywgdHJ1ZSk7XFxyXFxuICAgICAgICAgfVxcclxcbiAgICAgfSk7XFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiVGhlIGlkZWEgaXMgdmVyeSBtdWNoIHRoZSBzYW1lIHdpdGggdGhlIC5ORVQgY2xpZW50OlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1jc2hhcnBcIixcbiAgICAgICAgY2hpbGRyZW46IFwiLy8gdGhpcyBleGFtcGxlIGFzc3VtZXMgYW4gZXhpc3RpbmcgY2hhbm5lbCAoSU1vZGVsKSBpbnN0YW5jZVxcclxcblxcclxcbnZhciBjb25zdW1lciA9IG5ldyBFdmVudGluZ0Jhc2ljQ29uc3VtZXIoY2hhbm5lbCk7XFxyXFxuY29uc3VtZXIuUmVjZWl2ZWQgKz0gKGNoLCBlYSkgPT5cXHJcXG4gICAgICAgICAgICAgICAge1xcclxcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBlYS5Cb2R5LlRvQXJyYXkoKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIC8vIHBvc2l0aXZlbHkgYWNrbm93bGVkZ2UgYWxsIGRlbGl2ZXJpZXMgdXAgdG9cXHJcXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgZGVsaXZlcnkgdGFnXFxyXFxuICAgICAgICAgICAgICAgICAgICBjaGFubmVsLkJhc2ljQWNrKGVhLkRlbGl2ZXJ5VGFnLCB0cnVlKTtcXHJcXG4gICAgICAgICAgICAgICAgfTtcXHJcXG5TdHJpbmcgY29uc3VtZXJUYWcgPSBjaGFubmVsLkJhc2ljQ29uc3VtZShxdWV1ZU5hbWUsIGZhbHNlLCBjb25zdW1lcik7XFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcImNvbnN1bWVyLW5hY2tzLXJlcXVldWVcIixcbiAgICAgIGNoaWxkcmVuOiBcIk5lZ2F0aXZlIEFja25vd2xlZGdlbWVudCBhbmQgUmVxdWV1aW5nIG9mIERlbGl2ZXJpZXNcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiU29tZXRpbWVzIGEgY29uc3VtZXIgY2Fubm90IHByb2Nlc3MgYSBkZWxpdmVyeSBpbW1lZGlhdGVseSBidXQgb3RoZXIgaW5zdGFuY2VzIG1pZ2h0XFxyXFxuYmUgYWJsZSB0by4gSW4gdGhpcyBjYXNlIGl0IG1heSBiZSBkZXNpcmVkIHRvIHJlcXVldWUgaXQgYW5kIGxldCBhbm90aGVyIGNvbnN1bWVyIHJlY2VpdmVcXHJcXG5hbmQgaGFuZGxlIGl0LiBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImJhc2ljLnJlamVjdFwiXG4gICAgICB9KSwgXCIgYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiYmFzaWMubmFja1wiXG4gICAgICB9KSwgXCIgYXJlIHR3byBwcm90b2NvbFxcclxcbm1ldGhvZHMgdGhhdCBhcmUgdXNlZCBmb3IgdGhhdC5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlRoZSBtZXRob2RzIGFyZSBnZW5lcmFsbHkgdXNlZCB0byBuZWdhdGl2ZWx5IGFja25vd2xlZGdlIGEgZGVsaXZlcnkuIFN1Y2ggZGVsaXZlcmllcyBjYW5cXHJcXG5iZSBkaXNjYXJkZWQgb3IgZGVhZC1sZXR0ZXJlZCBvciByZXF1ZXVlZCBieSB0aGUgYnJva2VyLiBUaGlzIGJlaGF2aW91ciBpcyBjb250cm9sbGVkIGJ5IHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInJlcXVldWVcIlxuICAgICAgfSksIFwiIGZpZWxkLlxcclxcbldoZW4gdGhlIGZpZWxkIGlzIHNldCB0byBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInRydWVcIlxuICAgICAgfSksIFwiLCB0aGUgYnJva2VyIHdpbGwgcmVxdWV1ZSB0aGUgZGVsaXZlcnkgKG9yIG11bHRpcGxlXFxyXFxuZGVsaXZlcmllcywgYXMgd2lsbCBiZSBleHBsYWluZWQgc2hvcnRseSkgd2l0aCB0aGUgc3BlY2lmaWVkIGRlbGl2ZXJ5IHRhZy5cXHJcXG5BbHRlcm5hdGl2ZWx5LCB3aGVuIHRoaXMgZmllbGQgaXMgc2V0IHRvIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiZmFsc2VcIlxuICAgICAgfSksIFwiLCB0aGUgbWVzc2FnZSB3aWxsIGJlIHJvdXRlZCB0byBhIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL2RseFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJEZWFkIExldHRlciBFeGNoYW5nZVwiXG4gICAgICB9KSwgXCIgaWYgaXRcXHJcXG5pcyBjb25maWd1cmVkLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBkaXNjYXJkZWQuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJCb3RoIG1ldGhvZHMgYXJlIHVzdWFsbHkgZXhwb3NlZCBhcyBvcGVyYXRpb25zIG9uIGEgY2hhbm5lbCBpbiBjbGllbnQgbGlicmFyaWVzLiBKYXZhXFxyXFxuY2xpZW50IHVzZXJzIHdpbGwgdXNlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiQ2hhbm5lbCNiYXNpY1JlamVjdFwiXG4gICAgICB9KSwgXCIgYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiQ2hhbm5lbCNiYXNpY05hY2tcIlxuICAgICAgfSksIFwiXFxyXFxudG8gcGVyZm9ybSBhIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiYmFzaWMucmVqZWN0XCJcbiAgICAgIH0pLCBcIiBhbmQgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJiYXNpYy5uYWNrXCJcbiAgICAgIH0pLCBcIiwgcmVzcGVjdGl2ZWx5OlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtamF2YVwiLFxuICAgICAgICBjaGlsZHJlbjogXCIvLyB0aGlzIGV4YW1wbGUgYXNzdW1lcyBhbiBleGlzdGluZyBjaGFubmVsIGluc3RhbmNlXFxyXFxuXFxyXFxuYm9vbGVhbiBhdXRvQWNrID0gZmFsc2U7XFxyXFxuY2hhbm5lbC5iYXNpY0NvbnN1bWUocXVldWVOYW1lLCBhdXRvQWNrLCBcXFwiYS1jb25zdW1lci10YWdcXFwiLFxcclxcbiAgICAgbmV3IERlZmF1bHRDb25zdW1lcihjaGFubmVsKSB7XFxyXFxuICAgICAgICAgQE92ZXJyaWRlXFxyXFxuICAgICAgICAgcHVibGljIHZvaWQgaGFuZGxlRGVsaXZlcnkoU3RyaW5nIGNvbnN1bWVyVGFnLFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVudmVsb3BlIGVudmVsb3BlLFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFNUVAuQmFzaWNQcm9wZXJ0aWVzIHByb3BlcnRpZXMsXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZVtdIGJvZHkpXFxyXFxuICAgICAgICAgICAgIHRocm93cyBJT0V4Y2VwdGlvblxcclxcbiAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICAgbG9uZyBkZWxpdmVyeVRhZyA9IGVudmVsb3BlLmdldERlbGl2ZXJ5VGFnKCk7XFxyXFxuICAgICAgICAgICAgIC8vIG5lZ2F0aXZlbHkgYWNrbm93bGVkZ2UsIHRoZSBtZXNzYWdlIHdpbGxcXHJcXG4gICAgICAgICAgICAgLy8gYmUgZGlzY2FyZGVkXFxyXFxuICAgICAgICAgICAgIGNoYW5uZWwuYmFzaWNSZWplY3QoZGVsaXZlcnlUYWcsIGZhbHNlKTtcXHJcXG4gICAgICAgICB9XFxyXFxuICAgICB9KTtcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWphdmFcIixcbiAgICAgICAgY2hpbGRyZW46IFwiLy8gdGhpcyBleGFtcGxlIGFzc3VtZXMgYW4gZXhpc3RpbmcgY2hhbm5lbCBpbnN0YW5jZVxcclxcblxcclxcbmJvb2xlYW4gYXV0b0FjayA9IGZhbHNlO1xcclxcbmNoYW5uZWwuYmFzaWNDb25zdW1lKHF1ZXVlTmFtZSwgYXV0b0FjaywgXFxcImEtY29uc3VtZXItdGFnXFxcIixcXHJcXG4gICAgIG5ldyBEZWZhdWx0Q29uc3VtZXIoY2hhbm5lbCkge1xcclxcbiAgICAgICAgIEBPdmVycmlkZVxcclxcbiAgICAgICAgIHB1YmxpYyB2b2lkIGhhbmRsZURlbGl2ZXJ5KFN0cmluZyBjb25zdW1lclRhZyxcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbnZlbG9wZSBlbnZlbG9wZSxcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBTVFQLkJhc2ljUHJvcGVydGllcyBwcm9wZXJ0aWVzLFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVbXSBib2R5KVxcclxcbiAgICAgICAgICAgICB0aHJvd3MgSU9FeGNlcHRpb25cXHJcXG4gICAgICAgICB7XFxyXFxuICAgICAgICAgICAgIGxvbmcgZGVsaXZlcnlUYWcgPSBlbnZlbG9wZS5nZXREZWxpdmVyeVRhZygpO1xcclxcbiAgICAgICAgICAgICAvLyByZXF1ZXVlIHRoZSBkZWxpdmVyeVxcclxcbiAgICAgICAgICAgICBjaGFubmVsLmJhc2ljUmVqZWN0KGRlbGl2ZXJ5VGFnLCB0cnVlKTtcXHJcXG4gICAgICAgICB9XFxyXFxuICAgICB9KTtcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkluIC5ORVQgY2xpZW50IHRoZSBtZXRob2RzIGFyZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIklNb2RlbCNCYXNpY1JlamVjdFwiXG4gICAgICB9KSwgXCIgYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiSU1vZGVsI0Jhc2ljTmFja1wiXG4gICAgICB9KSwgXCIsXFxyXFxucmVzcGVjdGl2ZWx5OlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtY3NoYXJwXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIi8vIHRoaXMgZXhhbXBsZSBhc3N1bWVzIGFuIGV4aXN0aW5nIGNoYW5uZWwgKElNb2RlbCkgaW5zdGFuY2VcXHJcXG5cXHJcXG52YXIgY29uc3VtZXIgPSBuZXcgRXZlbnRpbmdCYXNpY0NvbnN1bWVyKGNoYW5uZWwpO1xcclxcbmNvbnN1bWVyLlJlY2VpdmVkICs9IChjaCwgZWEpID0+XFxyXFxuICAgICAgICAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHZhciBib2R5ID0gZWEuQm9keS5Ub0FycmF5KCk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAvLyBuZWdhdGl2ZWx5IGFja25vd2xlZGdlLCB0aGUgbWVzc2FnZSB3aWxsXFxyXFxuICAgICAgICAgICAgICAgICAgICAvLyBiZSBkaXNjYXJkZWRcXHJcXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWwuQmFzaWNSZWplY3QoZWEuRGVsaXZlcnlUYWcsIGZhbHNlKTtcXHJcXG4gICAgICAgICAgICAgICAgfTtcXHJcXG5TdHJpbmcgY29uc3VtZXJUYWcgPSBjaGFubmVsLkJhc2ljQ29uc3VtZShxdWV1ZU5hbWUsIGZhbHNlLCBjb25zdW1lcik7XFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1jc2hhcnBcIixcbiAgICAgICAgY2hpbGRyZW46IFwiLy8gdGhpcyBleGFtcGxlIGFzc3VtZXMgYW4gZXhpc3RpbmcgY2hhbm5lbCAoSU1vZGVsKSBpbnN0YW5jZVxcclxcblxcclxcbnZhciBjb25zdW1lciA9IG5ldyBFdmVudGluZ0Jhc2ljQ29uc3VtZXIoY2hhbm5lbCk7XFxyXFxuY29uc3VtZXIuUmVjZWl2ZWQgKz0gKGNoLCBlYSkgPT5cXHJcXG4gICAgICAgICAgICAgICAge1xcclxcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBlYS5Cb2R5LlRvQXJyYXkoKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlcXVldWUgdGhlIGRlbGl2ZXJ5XFxyXFxuICAgICAgICAgICAgICAgICAgICBjaGFubmVsLkJhc2ljUmVqZWN0KGVhLkRlbGl2ZXJ5VGFnLCB0cnVlKTtcXHJcXG4gICAgICAgICAgICAgICAgfTtcXHJcXG5TdHJpbmcgY29uc3VtZXJUYWcgPSBjaGFubmVsLkJhc2ljQ29uc3VtZShxdWV1ZU5hbWUsIGZhbHNlLCBjb25zdW1lcik7XFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiV2hlbiBhIG1lc3NhZ2UgaXMgcmVxdWV1ZWQsIGl0IHdpbGwgYmUgcGxhY2VkIHRvIGl0cyBvcmlnaW5hbFxcclxcbnBvc2l0aW9uIGluIGl0cyBxdWV1ZSwgaWYgcG9zc2libGUuIElmIG5vdCAoZHVlIHRvIGNvbmN1cnJlbnRcXHJcXG5kZWxpdmVyaWVzIGFuZCBhY2tub3dsZWRnZW1lbnRzIGZyb20gb3RoZXIgY29uc3VtZXJzIHdoZW5cXHJcXG5tdWx0aXBsZSBjb25zdW1lcnMgc2hhcmUgYSBxdWV1ZSksIHRoZSBtZXNzYWdlIHdpbGwgYmUgcmVxdWV1ZWRcXHJcXG50byBhIHBvc2l0aW9uIGNsb3NlciB0byBxdWV1ZSBoZWFkLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiUmVxdWV1ZWQgbWVzc2FnZXMgbWF5IGJlIGltbWVkaWF0ZWx5IHJlYWR5IGZvciByZWRlbGl2ZXJ5IGRlcGVuZGluZ1xcclxcbm9uIHRoZWlyIHBvc2l0aW9uIGluIHRoZSBxdWV1ZSBhbmQgdGhlIHByZWZldGNoIHZhbHVlIHVzZWQgYnkgdGhlIGNoYW5uZWxzXFxyXFxud2l0aCBhY3RpdmUgY29uc3VtZXJzLiBUaGlzIG1lYW5zIHRoYXQgaWYgYWxsIGNvbnN1bWVycyByZXF1ZXVlIGJlY2F1c2VcXHJcXG50aGV5IGNhbm5vdCBwcm9jZXNzIGEgZGVsaXZlcnkgZHVlIHRvIGEgdHJhbnNpZW50IGNvbmRpdGlvbiwgdGhleSB3aWxsXFxyXFxuY3JlYXRlIGEgcmVxdWV1ZS9yZWRlbGl2ZXJ5IGxvb3AuIFN1Y2ggbG9vcHMgY2FuIGJlIGNvc3RseSBpbiB0ZXJtcyBvZlxcclxcbm5ldHdvcmsgYmFuZHdpZHRoIGFuZCBDUFUgcmVzb3VyY2VzLiBDb25zdW1lciBpbXBsZW1lbnRhdGlvbnMgY2FuIHRyYWNrXFxyXFxudGhlIG51bWJlciBvZiByZWRlbGl2ZXJpZXMgYW5kIHJlamVjdCBtZXNzYWdlcyBmb3IgZ29vZCAoZGlzY2FyZCB0aGVtKVxcclxcbm9yIHNjaGVkdWxlIHJlcXVldWVpbmcgYWZ0ZXIgYSBkZWxheS5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiSXQgaXMgcG9zc2libGUgdG8gcmVqZWN0IG9yIHJlcXVldWUgbXVsdGlwbGUgbWVzc2FnZXMgYXQgb25jZSB1c2luZyB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJiYXNpYy5uYWNrXCJcbiAgICAgIH0pLCBcIlxcclxcbm1ldGhvZC4gVGhpcyBpcyB3aGF0IGRpZmZlcmVudGlhdGVzIGl0IGZyb20gXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJiYXNpYy5yZWplY3RcIlxuICAgICAgfSksIFwiLiBJdCBhY2NlcHRzIGFuIGFkZGl0aW9uYWxcXHJcXG5wYXJhbWV0ZXIsIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXVsdGlwbGVcIlxuICAgICAgfSksIFwiLiBIZXJlJ3MgYSBKYXZhIGNsaWVudCBleGFtcGxlOlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtamF2YVwiLFxuICAgICAgICBjaGlsZHJlbjogXCIvLyB0aGlzIGV4YW1wbGUgYXNzdW1lcyBhbiBleGlzdGluZyBjaGFubmVsIGluc3RhbmNlXFxyXFxuXFxyXFxuYm9vbGVhbiBhdXRvQWNrID0gZmFsc2U7XFxyXFxuY2hhbm5lbC5iYXNpY0NvbnN1bWUocXVldWVOYW1lLCBhdXRvQWNrLCBcXFwiYS1jb25zdW1lci10YWdcXFwiLFxcclxcbiAgICAgbmV3IERlZmF1bHRDb25zdW1lcihjaGFubmVsKSB7XFxyXFxuICAgICAgICAgQE92ZXJyaWRlXFxyXFxuICAgICAgICAgcHVibGljIHZvaWQgaGFuZGxlRGVsaXZlcnkoU3RyaW5nIGNvbnN1bWVyVGFnLFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVudmVsb3BlIGVudmVsb3BlLFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFNUVAuQmFzaWNQcm9wZXJ0aWVzIHByb3BlcnRpZXMsXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZVtdIGJvZHkpXFxyXFxuICAgICAgICAgICAgIHRocm93cyBJT0V4Y2VwdGlvblxcclxcbiAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICAgbG9uZyBkZWxpdmVyeVRhZyA9IGVudmVsb3BlLmdldERlbGl2ZXJ5VGFnKCk7XFxyXFxuICAgICAgICAgICAgIC8vIHJlcXVldWUgYWxsIHVuYWNrbm93bGVkZ2VkIGRlbGl2ZXJpZXMgdXAgdG9cXHJcXG4gICAgICAgICAgICAgLy8gdGhpcyBkZWxpdmVyeSB0YWdcXHJcXG4gICAgICAgICAgICAgY2hhbm5lbC5iYXNpY05hY2soZGVsaXZlcnlUYWcsIHRydWUsIHRydWUpO1xcclxcbiAgICAgICAgIH1cXHJcXG4gICAgIH0pO1xcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlRoaW5ncyB3b3JrIHZlcnkgc2ltaWxhcmx5IHdpdGggLk5FVCBjbGllbnQ6XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWNzaGFycFwiLFxuICAgICAgICBjaGlsZHJlbjogXCIvLyB0aGlzIGV4YW1wbGUgYXNzdW1lcyBhbiBleGlzdGluZyBjaGFubmVsIChJTW9kZWwpIGluc3RhbmNlXFxyXFxuXFxyXFxudmFyIGNvbnN1bWVyID0gbmV3IEV2ZW50aW5nQmFzaWNDb25zdW1lcihjaGFubmVsKTtcXHJcXG5jb25zdW1lci5SZWNlaXZlZCArPSAoY2gsIGVhKSA9PlxcclxcbiAgICAgICAgICAgICAgICB7XFxyXFxuICAgICAgICAgICAgICAgICAgICB2YXIgYm9keSA9IGVhLkJvZHkuVG9BcnJheSgpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVxdWV1ZSBhbGwgdW5hY2tub3dsZWRnZWQgZGVsaXZlcmllcyB1cCB0b1xcclxcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBkZWxpdmVyeSB0YWdcXHJcXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWwuQmFzaWNOYWNrKGVhLkRlbGl2ZXJ5VGFnLCB0cnVlLCB0cnVlKTtcXHJcXG4gICAgICAgICAgICAgICAgfTtcXHJcXG5TdHJpbmcgY29uc3VtZXJUYWcgPSBjaGFubmVsLkJhc2ljQ29uc3VtZShxdWV1ZU5hbWUsIGZhbHNlLCBjb25zdW1lcik7XFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcImNoYW5uZWwtcW9zLXByZWZldGNoXCIsXG4gICAgICBjaGlsZHJlbjogXCJDaGFubmVsIFByZWZldGNoIFNldHRpbmcgKFFvUylcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIk1lc3NhZ2VzIGFyZSBkZWxpdmVyZWQgKHNlbnQpIHRvIGNsaWVudHNcXHJcXG5hc3luY2hyb25vdXNseSwgYW5kIHRoZXJlIGNhbiBiZSBtb3JlIHRoYW4gb25lIG1lc3NhZ2UgXFxcImluXFxyXFxuZmxpZ2h0XFxcIiBvbiBhIGNoYW5uZWwgYXQgYW55IGdpdmVuIG1vbWVudC4gTWFudWFsIGFja25vd2xlZGdlbWVudHNcXHJcXG5mcm9tIGNsaWVudHMgYXJlIGFsc28gaW5oZXJlbnRseSBhc3luY2hyb25vdXMgaW4gbmF0dXJlIGJ1dFxcclxcbmZsb3cgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbi5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlRoaXMgbWVhbnMgYSBzbGlkaW5nIHdpbmRvdyBvZiBkZWxpdmVyaWVzIHRoYXQgYXJlIHVuYWNrbm93bGVkZ2VkLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJGb3IgbW9zdCBjb25zdW1lcnMsIGl0IG1ha2VzIHNlbnNlIHRvIGxpbWl0IHRoZSBzaXplIG9mIHRoaXMgd2luZG93IHRvIGF2b2lkIHRoZVxcclxcbnVuYm91bmRlZCBidWZmZXIgKGhlYXApIGdyb3d0aCBwcm9ibGVtIG9uIHRoZSBjb25zdW1lciBlbmQuXFxyXFxuVGhpcyBpcyBkb25lIGJ5IHNldHRpbmcgYSBcXFwicHJlZmV0Y2ggY291bnRcXFwiIHZhbHVlIHVzaW5nIHRoZVxcclxcblwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiYmFzaWMucW9zXCJcbiAgICAgIH0pLCBcIiBtZXRob2QuIFRoZSB2YWx1ZSBkZWZpbmVzIHRoZSBtYXhcXHJcXG5udW1iZXIgb2YgdW5hY2tub3dsZWRnZWQgZGVsaXZlcmllcyB0aGF0IGFyZSBwZXJtaXR0ZWQgb24gYVxcclxcbmNoYW5uZWwuIFdoZW4gdGhlIG51bWJlciByZWFjaGVzIHRoZSBjb25maWd1cmVkIGNvdW50LFxcclxcblJhYmJpdE1RIHdpbGwgc3RvcCBkZWxpdmVyaW5nIG1vcmUgbWVzc2FnZXMgb24gdGhlIGNoYW5uZWxcXHJcXG51bnRpbCBhdCBsZWFzdCBvbmUgb2YgdGhlIG91dHN0YW5kaW5nIG9uZXMgaXMgYWNrbm93bGVkZ2VkLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiQSB2YWx1ZSBvZiBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIjBcIlxuICAgICAgfSksIFwiIG1lYW5zIFxcXCJubyBsaW1pdFxcXCIsIGFsbG93aW5nIGFueSBudW1iZXJcXHJcXG5vZiB1bmFja25vd2xlZGdlZCBtZXNzYWdlcy5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkZvciBleGFtcGxlLCBnaXZlbiB0aGF0IHRoZXJlIGFyZSBmb3VyIGRlbGl2ZXJpZXMgd2l0aCBkZWxpdmVyeSB0YWdzIDUsIDYsIDcsIGFuZFxcclxcbjggdW5hY2tub3dsZWRnZWQgb24gY2hhbm5lbCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIkNoXCJcbiAgICAgIH0pLCBcIiBhbmQgY2hhbm5lbFxcclxcblwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiQ2hcIlxuICAgICAgfSksIFwiJ3MgcHJlZmV0Y2ggY291bnQgaXMgc2V0IHRvIDQsIFJhYmJpdE1RIHdpbGxcXHJcXG5ub3QgcHVzaCBhbnkgbW9yZSBkZWxpdmVyaWVzIG9uIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiQ2hcIlxuICAgICAgfSksIFwiIHVubGVzcyBhdFxcclxcbmxlYXN0IG9uZSBvZiB0aGUgb3V0c3RhbmRpbmcgZGVsaXZlcmllcyBpcyBhY2tub3dsZWRnZWQuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJXaGVuIGFuIGFja25vd2xlZGdlbWVudCBmcmFtZSBhcnJpdmVzIG9uIHRoYXQgY2hhbm5lbCB3aXRoXFxyXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJkZWxpdmVyeV90YWdcIlxuICAgICAgfSksIFwiIHNldCB0byBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIjVcIlxuICAgICAgfSksIFwiIChvciBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIjZcIlxuICAgICAgfSksIFwiLCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIjdcIlxuICAgICAgfSksIFwiLCBvciBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIjhcIlxuICAgICAgfSksIFwiKSxcXHJcXG5SYWJiaXRNUSB3aWxsIG5vdGljZSBhbmQgZGVsaXZlciBvbmUgbW9yZSBtZXNzYWdlLlxcclxcbkFja25vd2xlZGdpbmcgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIiNjb25zdW1lci1hY2tzLW11bHRpcGxlLXBhcmFtZXRlclwiLFxuICAgICAgICBjaGlsZHJlbjogXCJtdWx0aXBsZSBtZXNzYWdlcyBhdCBvbmNlXCJcbiAgICAgIH0pLCBcIlxcclxcbndpbGwgbWFrZSBtb3JlIHRoYW4gb25lIG1lc3NhZ2UgYXZhaWxhYmxlIGZvciBkZWxpdmVyeS5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJJdCdzIHdvcnRoIHJlaXRlcmF0aW5nIHRoYXQgdGhlIGZsb3cgb2YgZGVsaXZlcmllcyBhbmRcXHJcXG5tYW51YWwgY2xpZW50IGFja25vd2xlZGdlbWVudHMgaXMgZW50aXJlbHlcXHJcXG5hc3luY2hyb25vdXMuIFRoZXJlZm9yZSBpZiB0aGUgcHJlZmV0Y2ggdmFsdWUgaXMgY2hhbmdlZCB3aGlsZVxcclxcbnRoZXJlIGFscmVhZHkgYXJlIGRlbGl2ZXJpZXMgaW4gZmxpZ2h0LCBhIG5hdHVyYWwgcmFjZVxcclxcbmNvbmRpdGlvbiBhcmlzZXMgYW5kIHRoZXJlIGNhbiB0ZW1wb3JhcmlseSBiZSBtb3JlIHRoYW5cXHJcXG5wcmVmZXRjaCBjb3VudCB1bmFja25vd2xlZGdlZCBtZXNzYWdlcyBvbiBhIGNoYW5uZWwuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oNCwge1xuICAgICAgaWQ6IFwicGVyLWNoYW5uZWwtcGVyLWNvbnN1bWVyLWFuZC1nbG9iYWwtcHJlZmV0Y2hcIixcbiAgICAgIGNoaWxkcmVuOiBcIlBlci1jaGFubmVsLCBQZXItY29uc3VtZXIgYW5kIEdsb2JhbCBQcmVmZXRjaFwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGUgUW9TIHNldHRpbmcgY2FuIGJlIGNvbmZpZ3VyZWQgZm9yIGEgc3BlY2lmaWMgY2hhbm5lbCBvciBhIHNwZWNpZmljIGNvbnN1bWVyLlxcclxcblRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9jb25zdW1lci1wcmVmZXRjaFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJDb25zdW1lciBQcmVmZXRjaFwiXG4gICAgICB9KSwgXCIgZ3VpZGUgZXhwbGFpbnNcXHJcXG50aGUgZWZmZWN0cyBvZiB0aGlzIHNjb3BpbmcuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDQsIHtcbiAgICAgIGlkOiBcInByZWZldGNoLWFuZC1wb2xsaW5nLWNvbnN1bWVyc1wiLFxuICAgICAgY2hpbGRyZW46IFwiUHJlZmV0Y2ggYW5kIFBvbGxpbmcgQ29uc3VtZXJzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlRoZSBRb1MgcHJlZmV0Y2ggc2V0dGluZyBoYXMgbm8gZWZmZWN0IG9uIG1lc3NhZ2VzIGZldGNoZWQgdXNpbmcgdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiYmFzaWMuZ2V0XCJcbiAgICAgIH0pLCBcIlxcclxcbihcXFwicHVsbCBBUElcXFwiKSwgZXZlbiBpbiBtYW51YWwgY29uZmlybWF0aW9uIG1vZGUuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcImNoYW5uZWwtcW9zLXByZWZldGNoLXRocm91Z2hwdXRcIixcbiAgICAgIGNoaWxkcmVuOiBcIkNvbnN1bWVyIEFja25vd2xlZGdlbWVudCBNb2RlcywgUHJlZmV0Y2ggYW5kIFRocm91Z2hwdXRcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkFja25vd2xlZGdlbWVudCBtb2RlIGFuZCBRb1MgcHJlZmV0Y2ggdmFsdWUgaGF2ZSBzaWduaWZpY2FudFxcclxcbmVmZmVjdCBvbiBjb25zdW1lciB0aHJvdWdocHV0LiBJbiBnZW5lcmFsLCBpbmNyZWFzaW5nXFxyXFxucHJlZmV0Y2ggd2lsbCBpbXByb3ZlIHRoZSByYXRlIG9mIG1lc3NhZ2UgZGVsaXZlcnkgdG9cXHJcXG5jb25zdW1lcnMuIEF1dG9tYXRpYyBhY2tub3dsZWRnZW1lbnQgbW9kZSB5aWVsZHMgYmVzdFxcclxcbnBvc3NpYmxlIHJhdGUgb2YgZGVsaXZlcnkuIEhvd2V2ZXIsIGluIGJvdGggY2FzZXMgdGhlIG51bWJlclxcclxcbm9mIGRlbGl2ZXJlZCBidXQgbm90LXlldC1wcm9jZXNzZWQgbWVzc2FnZXMgd2lsbCBhbHNvXFxyXFxuaW5jcmVhc2UsIHRodXMgaW5jcmVhc2luZyBjb25zdW1lciBSQU0gY29uc3VtcHRpb24uXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkF1dG9tYXRpYyBhY2tub3dsZWRnZW1lbnQgbW9kZSBvciBtYW51YWwgYWNrbm93bGVkZ2VtZW50IG1vZGUgd2l0aCB1bmxpbWl0ZWQgcHJlZmV0Y2ggc2hvdWxkIGJlIHVzZWQgd2l0aCBjYXJlLlxcclxcbkNvbnN1bWVycyB0aGF0IGNvbnN1bWUgYSBsb3Qgb2YgbWVzc2FnZXMgd2l0aG91dCBhY2tub3dsZWRnaW5nIHdpbGwgbGVhZFxcclxcbnRvIG1lbW9yeSBjb25zdW1wdGlvbiBncm93dGggb24gdGhlIG5vZGUgdGhleSBhcmUgY29ubmVjdGVkIHRvLiBGaW5kaW5nXFxyXFxuYSBzdWl0YWJsZSBwcmVmZXRjaCB2YWx1ZSBpcyBhIG1hdHRlciBvZiB0cmlhbCBhbmQgZXJyb3IgYW5kIHdpbGwgdmFyeSBmcm9tXFxyXFxud29ya2xvYWQgdG8gd29ya2xvYWQuIFZhbHVlcyBpbiB0aGUgMTAwIHRocm91Z2ggMzAwIHJhbmdlIHVzdWFsbHkgb2ZmZXJcXHJcXG5vcHRpbWFsIHRocm91Z2hwdXQgYW5kIGRvIG5vdCBydW4gc2lnbmlmaWNhbnQgcmlzayBvZiBvdmVyd2hlbG1pbmcgY29uc3VtZXJzLlxcclxcbkhpZ2hlciB2YWx1ZXMgb2Z0ZW4gXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi9ibG9nLzIwMTQvMDQvMTQvZmluZGluZy1ib3R0bGVuZWNrcy13aXRoLXJhYmJpdG1xLTMtM1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJydW4gaW50byB0aGUgbGF3IG9mIGRpbWluaXNoaW5nIHJldHVybnNcIlxuICAgICAgfSksIFwiLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlByZWZldGNoIHZhbHVlIG9mIDEgaXMgdGhlIG1vc3QgY29uc2VydmF0aXZlLiBJdCB3aWxsXFxyXFxuc2lnbmlmaWNhbnRseSByZWR1Y2UgdGhyb3VnaHB1dCwgaW4gcGFydGljdWxhciBpblxcclxcbmVudmlyb25tZW50cyB3aGVyZSBjb25zdW1lciBjb25uZWN0aW9uIGxhdGVuY3kgaXMgaGlnaC4gRm9yXFxyXFxubWFueSBhcHBsaWNhdGlvbnMsIGEgaGlnaGVyIHZhbHVlIHdvdWxkIGJlIGFwcHJvcHJpYXRlIGFuZFxcclxcbm9wdGltYWwuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwiYXV0b21hdGljLXJlcXVldWVpbmdcIixcbiAgICAgIGNoaWxkcmVuOiBcIldoZW4gQ29uc3VtZXJzIEZhaWwgb3IgTG9zZSBDb25uZWN0aW9uOiBBdXRvbWF0aWMgUmVxdWV1ZWluZ1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiV2hlbiBtYW51YWwgYWNrbm93bGVkZ2VtZW50cyBhcmUgdXNlZCwgYW55IGRlbGl2ZXJ5XFxyXFxuKG1lc3NhZ2UpIHRoYXQgd2FzIG5vdCBhY2tlZCBpcyBhdXRvbWF0aWNhbGx5IHJlcXVldWVkIHdoZW5cXHJcXG50aGUgY2hhbm5lbCAob3IgY29ubmVjdGlvbikgb24gd2hpY2ggdGhlIGRlbGl2ZXJ5IGhhcHBlbmVkXFxyXFxuaXMgY2xvc2VkLiBUaGlzIGluY2x1ZGVzIFRDUCBjb25uZWN0aW9uIGxvc3MgYnkgY2xpZW50cyxcXHJcXG5jb25zdW1lciBhcHBsaWNhdGlvbiAocHJvY2VzcykgZmFpbHVyZXMsIGFuZCBjaGFubmVsLWxldmVsXFxyXFxucHJvdG9jb2wgZXhjZXB0aW9ucyAoY292ZXJlZCBiZWxvdykuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIk5vdGUgdGhhdCBpdCB0YWtlcyBhIHBlcmlvZCBvZiB0aW1lIHRvIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL2hlYXJ0YmVhdHNcIixcbiAgICAgICAgY2hpbGRyZW46IFwiZGV0ZWN0IGFuIHVuYXZhaWxhYmxlIGNsaWVudFwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJEdWUgdG8gdGhpcyBiZWhhdmlvciwgY29uc3VtZXJzIG11c3QgYmUgcHJlcGFyZWQgdG8gaGFuZGxlIHJlZGVsaXZlcmllcyBhbmQgb3RoZXJ3aXNlXFxyXFxuYmUgaW1wbGVtZW50ZWQgd2l0aCBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSWRlbXBvdGVuY2VcIixcbiAgICAgICAgY2hpbGRyZW46IFwiaWRlbXBvdGVuY2VcIlxuICAgICAgfSksIFwiIGluIG1pbmQuXFxyXFxuUmVkZWxpdmVyaWVzIHdpbGwgaGF2ZSBhIHNwZWNpYWwgYm9vbGVhbiBwcm9wZXJ0eSwgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJyZWRlbGl2ZXJcIlxuICAgICAgfSksIFwiLCBzZXQgdG8gXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJ0cnVlXCJcbiAgICAgIH0pLCBcIlxcclxcbmJ5IFJhYmJpdE1RLiBGb3IgZmlyc3QgdGltZSBkZWxpdmVyaWVzIGl0IHdpbGwgYmUgc2V0IHRvIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiZmFsc2VcIlxuICAgICAgfSksIFwiLiBOb3RlIHRoYXRcXHJcXG5hIGNvbnN1bWVyIGNhbiByZWNlaXZlIGEgbWVzc2FnZSB0aGF0IHdhcyBwcmV2aW91c2x5IGRlbGl2ZXJlZCB0byBhbm90aGVyIGNvbnN1bWVyLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJjb25zdW1lci1hY2tzLWRvdWJsZS1hY2tpbmdcIixcbiAgICAgIGNoaWxkcmVuOiBcIkNsaWVudCBFcnJvcnM6IERvdWJsZSBBY2tpbmcgYW5kIFVua25vd24gVGFnc1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJTaG91bGQgYSBjbGllbnQgYWNrbm93bGVkZ2UgdGhlIHNhbWUgZGVsaXZlcnkgdGFnIG1vcmUgdGhhbiBvbmNlLFxcclxcblJhYmJpdE1RIHdpbGwgcmVzdWx0IGEgY2hhbm5lbCBlcnJvciBzdWNoIGFzIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiUFJFQ09ORElUSU9OX0ZBSUxFRCAtIHVua25vd24gZGVsaXZlcnkgdGFnIDEwMFwiXG4gICAgICB9KSwgXCIuXFxyXFxuVGhlIHNhbWUgY2hhbm5lbCBleGNlcHRpb24gd2lsbCBiZSB0aHJvd24gaWYgYW4gdW5rbm93biBkZWxpdmVyeSB0YWcgaXMgdXNlZC5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJBbm90aGVyIHNjZW5hcmlvIGluIHdoaWNoIHRoZSBicm9rZXIgd2lsbCBjb21wbGFpbiBhYm91dCBhbiBcXFwidW5rbm93biBkZWxpdmVyeSB0YWdcXFwiIGlzIHdoZW5cXHJcXG5hbiBhY2tub3dsZWRnZW1lbnQsIHdoZXRoZXIgcG9zaXRpdmUgb3IgbmVnYXRpdmUsIGlzIGF0dGVtcHRlZCBvbiBhIGNoYW5uZWwgZGlmZmVyZW50IGZyb21cXHJcXG50aGF0IG9uIHdoaWNoIHRoZSBkZWxpdmVyeSB3YXMgcmVjZWl2ZWQgb24uIERlbGl2ZXJpZXMgbXVzdCBiZSBhY2tub3dsZWRnZWQgb24gdGhlIHNhbWVcXHJcXG5jaGFubmVsLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDIsIHtcbiAgICAgIGlkOiBcInB1Ymxpc2hlci1jb25maXJtc1wiLFxuICAgICAgY2hpbGRyZW46IFwiUHVibGlzaGVyIENvbmZpcm1zXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIk5ldHdvcmtzIGNhbiBmYWlsIGluIGxlc3MtdGhhbi1vYnZpb3VzIHdheXMgYW5kIGRldGVjdGluZyBzb21lIGZhaWx1cmVzIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL2hlYXJ0YmVhdHNcIixcbiAgICAgICAgY2hpbGRyZW46IFwidGFrZXMgdGltZVwiXG4gICAgICB9KSwgXCIuXFxyXFxuVGhlcmVmb3JlIGEgY2xpZW50IHRoYXQncyB3cml0dGVuIGEgcHJvdG9jb2wgZnJhbWUgb3IgYSBzZXQgb2YgZnJhbWVzIChlLmcuIGEgcHVibGlzaGVkIG1lc3NhZ2UpIHRvXFxyXFxuaXRzIHNvY2tldCBjYW5ub3QgYXNzdW1lIHRoYXQgdGhlIG1lc3NhZ2UgaGFzIHJlYWNoZWQgdGhlIHNlcnZlciBhbmQgd2FzIHN1Y2Nlc3NmdWxseSBwcm9jZXNzZWQuXFxyXFxuSXQgY291bGQgaGF2ZSBiZWVuIGxvc3QgYWxvbmcgdGhlIHdheSBvciBpdHMgZGVsaXZlcnkgY2FuIGJlIHNpZ25pZmljYW50bHkgZGVsYXllZC5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJVc2luZyBzdGFuZGFyZCBBTVFQIDAtOS0xLCB0aGUgb25seSB3YXkgdG8gZ3VhcmFudGVlIHRoYXQgYVxcclxcbm1lc3NhZ2UgaXNuJ3QgbG9zdCBpcyBieSB1c2luZyB0cmFuc2FjdGlvbnMgLS0gbWFrZSB0aGVcXHJcXG5jaGFubmVsIHRyYW5zYWN0aW9uYWwgdGhlbiBmb3IgZWFjaCBtZXNzYWdlIG9yIHNldCBvZiBtZXNzYWdlcyBwdWJsaXNoLCBjb21taXQuXFxyXFxuSW4gdGhpcyBjYXNlLCB0cmFuc2FjdGlvbnMgYXJlIHVubmVjZXNzYXJpbHkgaGVhdnl3ZWlnaHQgYW5kXFxyXFxuZGVjcmVhc2UgdGhyb3VnaHB1dCBieSBhIGZhY3RvciBvZiAyNTAuICBUbyByZW1lZHkgdGhpcyxcXHJcXG5hIGNvbmZpcm1hdGlvbiBtZWNoYW5pc20gd2FzIGludHJvZHVjZWQuIEl0IG1pbWljcyB0aGUgY29uc3VtZXJcXHJcXG5hY2tub3dsZWRnZW1lbnRzIG1lY2hhbmlzbSBhbHJlYWR5IHByZXNlbnQgaW4gdGhlIHByb3RvY29sLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUbyBlbmFibGUgY29uZmlybXMsIGEgY2xpZW50IHNlbmRzIHRoZVxcclxcblwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiY29uZmlybS5zZWxlY3RcIlxuICAgICAgfSksIFwiIG1ldGhvZC4gIERlcGVuZGluZyBvbiB3aGV0aGVyXFxyXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJuby13YWl0XCJcbiAgICAgIH0pLCBcIiB3YXMgc2V0IG9yIG5vdCwgdGhlIGJyb2tlciBtYXkgcmVzcG9uZFxcclxcbndpdGggYSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImNvbmZpcm0uc2VsZWN0LW9rXCJcbiAgICAgIH0pLCBcIi4gIE9uY2UgdGhlXFxyXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJjb25maXJtLnNlbGVjdFwiXG4gICAgICB9KSwgXCIgbWV0aG9kIGlzIHVzZWQgb24gYSBjaGFubmVsLCBpdFxcclxcbmlzIHNhaWQgdG8gYmUgaW4gY29uZmlybSBtb2RlLiAgQSB0cmFuc2FjdGlvbmFsIGNoYW5uZWxcXHJcXG5jYW5ub3QgYmUgcHV0IGludG8gY29uZmlybSBtb2RlIGFuZCBvbmNlIGEgY2hhbm5lbCBpcyBpblxcclxcbmNvbmZpcm0gbW9kZSwgaXQgY2Fubm90IGJlIG1hZGUgdHJhbnNhY3Rpb25hbC5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIk9uY2UgYSBjaGFubmVsIGlzIGluIGNvbmZpcm0gbW9kZSwgYm90aCB0aGUgYnJva2VyIGFuZCB0aGVcXHJcXG5jbGllbnQgY291bnQgbWVzc2FnZXMgKGNvdW50aW5nIHN0YXJ0cyBhdCAxIG9uIHRoZSBmaXJzdFxcclxcblwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiY29uZmlybS5zZWxlY3RcIlxuICAgICAgfSksIFwiKS4gIFRoZSBicm9rZXIgdGhlbiBjb25maXJtc1xcclxcbm1lc3NhZ2VzIGFzIGl0IGhhbmRsZXMgdGhlbSBieSBzZW5kaW5nIGFcXHJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImJhc2ljLmFja1wiXG4gICAgICB9KSwgXCIgb24gdGhlIHNhbWUgY2hhbm5lbC4gVGhlXFxyXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJkZWxpdmVyeS10YWdcIlxuICAgICAgfSksIFwiIGZpZWxkIGNvbnRhaW5zIHRoZSBzZXF1ZW5jZSBudW1iZXJcXHJcXG5vZiB0aGUgY29uZmlybWVkIG1lc3NhZ2UuICBUaGUgYnJva2VyIG1heSBhbHNvIHNldCB0aGVcXHJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm11bHRpcGxlXCJcbiAgICAgIH0pLCBcIiBmaWVsZCBpbiBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImJhc2ljLmFja1wiXG4gICAgICB9KSwgXCIgdG9cXHJcXG5pbmRpY2F0ZSB0aGF0IGFsbCBtZXNzYWdlcyB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBvbmUgd2l0aFxcclxcbnRoZSBzZXF1ZW5jZSBudW1iZXIgaGF2ZSBiZWVuIGhhbmRsZWQuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcInNlcnZlci1zZW50LW5hY2tzXCIsXG4gICAgICBjaGlsZHJlbjogXCJOZWdhdGl2ZSBBY2tub3dsZWRnbWVudHMgZm9yIFB1Ymxpc2hlc1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJJbiBleGNlcHRpb25hbCBjYXNlcyB3aGVuIHRoZSBicm9rZXIgaXMgdW5hYmxlIHRvIGhhbmRsZVxcclxcbm1lc3NhZ2VzIHN1Y2Nlc3NmdWxseSwgaW5zdGVhZCBvZiBhIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiYmFzaWMuYWNrXCJcbiAgICAgIH0pLCBcIixcXHJcXG50aGUgYnJva2VyIHdpbGwgc2VuZCBhIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiYmFzaWMubmFja1wiXG4gICAgICB9KSwgXCIuICBJbiB0aGlzXFxyXFxuY29udGV4dCwgZmllbGRzIG9mIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImJhc2ljLm5hY2tcIlxuICAgICAgfSksIFwiIGhhdmUgdGhlIHNhbWVcXHJcXG5tZWFuaW5nIGFzIHRoZSBjb3JyZXNwb25kaW5nIG9uZXMgaW4gXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJiYXNpYy5hY2tcIlxuICAgICAgfSksIFwiXFxyXFxuYW5kIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInJlcXVldWVcIlxuICAgICAgfSksIFwiIGZpZWxkIHNob3VsZCBiZSBpZ25vcmVkLiAgQnlcXHJcXG5uYWNrJ2luZyBvbmUgb3IgbW9yZSBtZXNzYWdlcywgdGhlIGJyb2tlciBpbmRpY2F0ZXMgdGhhdCBpdFxcclxcbndhcyB1bmFibGUgdG8gcHJvY2VzcyB0aGUgbWVzc2FnZXMgYW5kIHJlZnVzZXMgcmVzcG9uc2liaWxpdHlcXHJcXG5mb3IgdGhlbTsgYXQgdGhhdCBwb2ludCwgdGhlIGNsaWVudCBtYXkgY2hvb3NlIHRvIHJlLXB1Ymxpc2hcXHJcXG50aGUgbWVzc2FnZXMuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiQWZ0ZXIgYSBjaGFubmVsIGlzIHB1dCBpbnRvIGNvbmZpcm0gbW9kZSwgYWxsIHN1YnNlcXVlbnRseVxcclxcbnB1Ymxpc2hlZCBtZXNzYWdlcyB3aWxsIGJlIGNvbmZpcm1lZCBvciBuYWNrJ2Qgb25jZS4gIE5vXFxyXFxuZ3VhcmFudGVlcyBhcmUgbWFkZSBhcyB0byBob3cgc29vbiBhIG1lc3NhZ2UgaXMgY29uZmlybWVkLlxcclxcbk5vIG1lc3NhZ2Ugd2lsbCBiZSBib3RoIGNvbmZpcm1lZCBhbmQgbmFjaydkLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImJhc2ljLm5hY2tcIlxuICAgICAgfSksIFwiIHdpbGwgb25seSBiZSBkZWxpdmVyZWQgaWYgYW4gaW50ZXJuYWxcXHJcXG5lcnJvciBvY2N1cnMgaW4gdGhlIEVybGFuZyBwcm9jZXNzIHJlc3BvbnNpYmxlIGZvciBhIHF1ZXVlLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJ3aGVuLXB1Ymxpc2hlcy1hcmUtY29uZmlybWVkXCIsXG4gICAgICBjaGlsZHJlbjogXCJXaGVuIFdpbGwgUHVibGlzaGVkIE1lc3NhZ2VzIEJlIENvbmZpcm1lZCBieSB0aGUgQnJva2VyP1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJGb3IgdW5yb3V0YWJsZSBtZXNzYWdlcywgdGhlIGJyb2tlciB3aWxsIGlzc3VlIGEgY29uZmlybVxcclxcbm9uY2UgdGhlIGV4Y2hhbmdlIHZlcmlmaWVzIGEgbWVzc2FnZSB3b24ndCByb3V0ZSB0byBhbnkgcXVldWVcXHJcXG4ocmV0dXJucyBhbiBlbXB0eSBsaXN0IG9mIHF1ZXVlcykuIElmIHRoZSBtZXNzYWdlIGlzIGFsc29cXHJcXG5wdWJsaXNoZWQgYXMgbWFuZGF0b3J5LCB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJiYXNpYy5yZXR1cm5cIlxuICAgICAgfSksIFwiIGlzIHNlbnRcXHJcXG50byB0aGUgY2xpZW50IGJlZm9yZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImJhc2ljLmFja1wiXG4gICAgICB9KSwgXCIuIFRoZSBzYW1lXFxyXFxuaXMgdHJ1ZSBmb3IgbmVnYXRpdmUgYWNrbm93bGVkZ2VtZW50cyAoXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJiYXNpYy5uYWNrXCJcbiAgICAgIH0pLCBcIikuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJGb3Igcm91dGFibGUgbWVzc2FnZXMsIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImJhc2ljLmFja1wiXG4gICAgICB9KSwgXCIgaXMgc2VudCB3aGVuIGFcXHJcXG5tZXNzYWdlIGhhcyBiZWVuIGFjY2VwdGVkIGJ5IGFsbCB0aGUgcXVldWVzLiBGb3IgcGVyc2lzdGVudFxcclxcbm1lc3NhZ2VzIHJvdXRlZCB0byBkdXJhYmxlIHF1ZXVlcywgdGhpcyBcIiwgX2pzeChcInN0cm9uZ1wiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm1lYW5zIHBlcnNpc3RpbmdcXHJcXG50byBkaXNrXCJcbiAgICAgIH0pLCBcIi4gRm9yIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL3F1b3J1bS1xdWV1ZXNcIixcbiAgICAgICAgY2hpbGRyZW46IFwicXVvcnVtIHF1ZXVlc1wiXG4gICAgICB9KSwgXCIsXFxyXFxudGhpcyBtZWFucyB0aGF0IGEgcXVvcnVtIHJlcGxpY2FzIGhhdmUgYWNjZXB0ZWQgYW5kIGNvbmZpcm1lZFxcclxcbnRoZSBtZXNzYWdlIHRvIHRoZSBlbGVjdGVkIGxlYWRlci5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwicHVibGlzaGVyLWNvbmZpcm1zLWxhdGVuY3lcIixcbiAgICAgIGNoaWxkcmVuOiBcIkFjayBMYXRlbmN5IGZvciBQZXJzaXN0ZW50IE1lc3NhZ2VzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiYmFzaWMuYWNrXCJcbiAgICAgIH0pLCBcIiBmb3IgYSBwZXJzaXN0ZW50IG1lc3NhZ2Ugcm91dGVkIHRvIGFcXHJcXG5kdXJhYmxlIHF1ZXVlIHdpbGwgYmUgc2VudCBhZnRlciBwZXJzaXN0aW5nIHRoZSBtZXNzYWdlIHRvXFxyXFxuZGlzay4gVGhlIFJhYmJpdE1RIG1lc3NhZ2Ugc3RvcmUgcGVyc2lzdHMgbWVzc2FnZXMgdG8gZGlzayBpblxcclxcbmJhdGNoZXMgYWZ0ZXIgYW4gaW50ZXJ2YWwgKGEgZmV3IGh1bmRyZWQgbWlsbGlzZWNvbmRzKSB0b1xcclxcbm1pbmltaXNlIHRoZSBudW1iZXIgb2YgZnN5bmMoMikgY2FsbHMsIG9yIHdoZW4gYSBxdWV1ZSBpcyBpZGxlLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhpcyBtZWFucyB0aGF0IHVuZGVyIGEgY29uc3RhbnQgbG9hZCwgbGF0ZW5jeSBmb3JcXHJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImJhc2ljLmFja1wiXG4gICAgICB9KSwgXCIgY2FuIHJlYWNoIGEgZmV3IGh1bmRyZWQgbWlsbGlzZWNvbmRzLiBUb1xcclxcbmltcHJvdmUgdGhyb3VnaHB1dCwgYXBwbGljYXRpb25zIGFyZSBzdHJvbmdseSBhZHZpc2VkIHRvXFxyXFxucHJvY2VzcyBhY2tub3dsZWRnZW1lbnRzIGFzeW5jaHJvbm91c2x5IChhcyBhIHN0cmVhbSkgb3IgcHVibGlzaFxcclxcbmJhdGNoZXMgb2YgbWVzc2FnZXMgYW5kIHdhaXQgZm9yIG91dHN0YW5kaW5nIGNvbmZpcm1zLiBUaGUgZXhhY3RcXHJcXG5BUEkgZm9yIHRoaXMgdmFyaWVzIGJldHdlZW4gY2xpZW50IGxpYnJhcmllcy5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwicHVibGlzaGVyLWNvbmZpcm1zLW9yZGVyaW5nXCIsXG4gICAgICBjaGlsZHJlbjogXCJPcmRlcmluZyBDb25zaWRlcmF0aW9ucyBmb3IgUHVibGlzaGVyIENvbmZpcm1zXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJJbiBtb3N0IGNhc2VzLCBSYWJiaXRNUSB3aWxsIGFja25vd2xlZGdlIG1lc3NhZ2VzIHRvXFxyXFxucHVibGlzaGVycyBpbiB0aGUgc2FtZSBvcmRlciB0aGV5IHdlcmUgcHVibGlzaGVkICh0aGlzXFxyXFxuYXBwbGllcyBmb3IgbWVzc2FnZXMgcHVibGlzaGVkIG9uIGEgc2luZ2xlXFxyXFxuY2hhbm5lbCkuIEhvd2V2ZXIsIHB1Ymxpc2hlciBhY2tub3dsZWRnZW1lbnRzIGFyZSBlbWl0dGVkXFxyXFxuYXN5bmNocm9ub3VzbHkgYW5kIGNhbiBjb25maXJtIGEgc2luZ2xlIG1lc3NhZ2Ugb3IgYSBncm91cFxcclxcbm9mIG1lc3NhZ2VzLiBUaGUgZXhhY3QgbW9tZW50IHdoZW4gYSBjb25maXJtIGlzIGVtaXR0ZWRcXHJcXG5kZXBlbmRzIG9uIHRoZSBkZWxpdmVyeSBtb2RlIG9mIGEgbWVzc2FnZSAocGVyc2lzdGVudFxcclxcbnZzLiB0cmFuc2llbnQpIGFuZCB0aGUgcHJvcGVydGllcyBvZiB0aGUgcXVldWUocykgdGhlXFxyXFxubWVzc2FnZSB3YXMgcm91dGVkIHRvIChzZWUgYWJvdmUpLiBXaGljaCBpcyB0byBzYXkgdGhhdFxcclxcbmRpZmZlcmVudCBtZXNzYWdlcyBjYW4gYmUgY29uc2lkZXJlZCByZWFkeSBmb3JcXHJcXG5hY2tub3dsZWRnZW1lbnQgYXQgZGlmZmVyZW50IHRpbWVzLiBUaGlzIG1lYW5zIHRoYXRcXHJcXG5hY2tub3dsZWRnZW1lbnRzIGNhbiBhcnJpdmUgaW4gYSBkaWZmZXJlbnQgb3JkZXIgY29tcGFyZWQgdG9cXHJcXG50aGVpciByZXNwZWN0aXZlIG1lc3NhZ2VzLiBBcHBsaWNhdGlvbnMgc2hvdWxkIG5vdCBkZXBlbmQgb25cXHJcXG50aGUgb3JkZXIgb2YgYWNrbm93bGVkZ2VtZW50cyB3aGVuIHBvc3NpYmxlLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcInB1Ymxpc2hlci1jb25maXJtcy1hbmQtZ3VhcmFudGVlZC1kZWxpdmVyeVwiLFxuICAgICAgY2hpbGRyZW46IFwiUHVibGlzaGVyIENvbmZpcm1zIGFuZCBHdWFyYW50ZWVkIERlbGl2ZXJ5XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJBIFJhYmJpdE1RIG5vZGUgY2FuIGxvc2UgcGVyc2lzdGVudCBtZXNzYWdlcyBpZiBpdCBmYWlscyBiZWZvcmVcXHJcXG5zYWlkIG1lc3NhZ2VzIGFyZSB3cml0dGVuIHRvIGRpc2suIEZvciBpbnN0YW5jZSwgY29uc2lkZXIgdGhpcyBzY2VuYXJpbzpcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5vbCwge1xuICAgICAgY2hpbGRyZW46IFtcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImEgY2xpZW50IHB1Ymxpc2hlcyBhIHBlcnNpc3RlbnQgbWVzc2FnZSB0byBhIGR1cmFibGUgcXVldWVcIlxuICAgICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFwiYSBjbGllbnQgY29uc3VtZXMgdGhlIG1lc3NhZ2UgZnJvbSB0aGUgcXVldWUgKG5vdGluZyB0aGF0IHRoZSBtZXNzYWdlIGlzIHBlcnNpc3RlbnQgYW5kIHRoZSBxdWV1ZSBkdXJhYmxlKSwgYnV0IGNvbmZpcm1zIGFyZSBub3QgYWN0aXZlLFwiXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogXCJ0aGUgYnJva2VyIG5vZGUgZmFpbHMgYW5kIGlzIHJlc3RhcnRlZCwgYW5kXCJcbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInRoZSBjbGllbnQgcmVjb25uZWN0cyBhbmQgc3RhcnRzIGNvbnN1bWluZyBtZXNzYWdlc1wiXG4gICAgICB9KSwgXCJcXG5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkF0IHRoaXMgcG9pbnQsIHRoZSBjbGllbnQgY291bGQgcmVhc29uYWJseSBhc3N1bWUgdGhhdCB0aGVcXHJcXG5tZXNzYWdlIHdpbGwgYmUgZGVsaXZlcmVkIGFnYWluLiAgVGhpcyBpcyBub3QgdGhlIGNhc2U6IHRoZVxcclxcbnJlc3RhcnQgaGFzIGNhdXNlZCB0aGUgYnJva2VyIHRvIGxvc2UgdGhlIG1lc3NhZ2UuICBJbiBvcmRlciB0b1xcclxcbmd1YXJhbnRlZSBwZXJzaXN0ZW5jZSwgYSBjbGllbnQgc2hvdWxkIHVzZSBjb25maXJtcy4gIElmIHRoZVxcclxcbnB1Ymxpc2hlcidzIGNoYW5uZWwgaGFkIGJlZW4gaW4gY29uZmlybSBtb2RlLCB0aGUgcHVibGlzaGVyXFxyXFxud291bGQgXCIsIF9qc3goXCJlbVwiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm5vdFwiXG4gICAgICB9KSwgXCIgaGF2ZSByZWNlaXZlZCBhbiBhY2sgZm9yIHRoZSBsb3N0IG1lc3NhZ2VcXHJcXG4oc2luY2UgdGhlIG1lc3NhZ2UgaGFkbid0IGJlZW4gd3JpdHRlbiB0byBkaXNrIHlldCkuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDIsIHtcbiAgICAgIGlkOiBcImxpbWl0YXRpb25zXCIsXG4gICAgICBjaGlsZHJlbjogXCJMaW1pdGF0aW9uc1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcInB1Ymxpc2hlci1jb25maXJtcy1hbmQtZ3VhcmFudGVlZC1kZWxpdmVyeVwiLFxuICAgICAgY2hpbGRyZW46IFwiTWF4aW11bSBEZWxpdmVyeSBUYWdcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiRGVsaXZlcnkgdGFnIGlzIGEgNjQgYml0IGxvbmcgdmFsdWUsIGFuZCB0aHVzIGl0cyBtYXhpbXVtIHZhbHVlXFxyXFxuaXMgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCI5MjIzMzcyMDM2ODU0Nzc1ODA3XCJcbiAgICAgIH0pLCBcIi4gU2luY2UgZGVsaXZlcnkgdGFncyBhcmUgc2NvcGVkIHBlciBjaGFubmVsLFxcclxcbml0IGlzIHZlcnkgdW5saWtlbHkgdGhhdCBhIHB1Ymxpc2hlciBvciBjb25zdW1lciB3aWxsIHJ1biBvdmVyIHRoaXNcXHJcXG52YWx1ZSBpbiBwcmFjdGljZS5cIl1cbiAgICB9KV1cbiAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHByb3BzID0ge30pIHtcbiAgY29uc3Qge3dyYXBwZXI6IE1EWExheW91dH0gPSB7XG4gICAgLi4uX3Byb3ZpZGVDb21wb25lbnRzKCksXG4gICAgLi4ucHJvcHMuY29tcG9uZW50c1xuICB9O1xuICByZXR1cm4gTURYTGF5b3V0ID8gX2pzeChNRFhMYXlvdXQsIHtcbiAgICAuLi5wcm9wcyxcbiAgICBjaGlsZHJlbjogX2pzeChfY3JlYXRlTWR4Q29udGVudCwge1xuICAgICAgLi4ucHJvcHNcbiAgICB9KVxuICB9KSA6IF9jcmVhdGVNZHhDb250ZW50KHByb3BzKTtcbn1cblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./versioned_docs/version-3.13/confirms.md\n");

/***/ })

}]);