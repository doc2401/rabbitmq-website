"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-tutorials-tutorial-seven-dotnetd-87-42b"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/tutorials/site-tutorials-tutorial-seven-dotnet-md-d87.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"tutorial-seven-dotnet","title":"RabbitMQ tutorial - Reliable Publishing with Publisher Confirms","description":"<!--","source":"@site/tutorials/tutorial-seven-dotnet.md","sourceDirName":".","slug":"/tutorial-seven-dotnet","permalink":"/rabbitmq-website/tutorials/tutorial-seven-dotnet","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/tutorials/tutorial-seven-dotnet.md","tags":[],"version":"current","frontMatter":{"title":"RabbitMQ tutorial - Reliable Publishing with Publisher Confirms"},"sidebar":"tutorialsSidebar","previous":{"title":"RPC","permalink":"/rabbitmq-website/tutorials/tutorial-six-dotnet"},"next":{"title":"Hello World","permalink":"/rabbitmq-website/tutorials/tutorial-one-javascript"}}');

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./src/components/Tutorials/TutorialsHelp.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [{\n  \"value\": \"Prerequisites\",\n  \"id\": \"prerequisites\",\n  \"level\": 3\n}, {\n  \"value\": \"Where to get help\",\n  \"id\": \"where-to-get-help\",\n  \"level\": 3\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    h3: \"h3\",\n    p: \"p\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_components.admonition, {\n    type: \"info\",\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.h3, {\n      id: \"prerequisites\",\n      children: \"Prerequisites\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_components.p, {\n      children: [\"This tutorial assumes RabbitMQ is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.a, {\n        href: \"/docs/download\",\n        children: \"installed\"\n      }), \" and running on\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.code, {\n        children: \"localhost\"\n      }), \" on the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.a, {\n        href: \"/docs/networking#ports\",\n        children: \"standard port\"\n      }), \" (5672). In case you\\r\\nuse a different host, port or credentials, connections settings would require\\r\\nadjusting.\"]\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.h3, {\n      id: \"where-to-get-help\",\n      children: \"Where to get help\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_components.p, {\n      children: [\"If you're having trouble going through this tutorial you can contact us\\r\\nthrough \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/discussions\",\n        children: \"GitHub Discussions\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components.a, {\n        href: \"https://www.rabbitmq.com/discord\",\n        children: \"RabbitMQ community Discord\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9UdXRvcmlhbHMvVHV0b3JpYWxzSGVscC5tZCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9zcmMvY29tcG9uZW50cy9UdXRvcmlhbHMvVHV0b3JpYWxzSGVscC5tZD9lMTQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlxuXG5leHBvcnQgY29uc3QgZnJvbnRNYXR0ZXIgPSB7fTtcbmV4cG9ydCBjb25zdCBjb250ZW50VGl0bGUgPSB1bmRlZmluZWQ7XG5cblxuXG5pbXBvcnQge2pzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7dXNlTURYQ29tcG9uZW50cyBhcyBfcHJvdmlkZUNvbXBvbmVudHN9IGZyb20gXCJAbWR4LWpzL3JlYWN0XCI7XG5leHBvcnQgY29uc3QgdG9jID0gW3tcbiAgXCJ2YWx1ZVwiOiBcIlByZXJlcXVpc2l0ZXNcIixcbiAgXCJpZFwiOiBcInByZXJlcXVpc2l0ZXNcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJXaGVyZSB0byBnZXQgaGVscFwiLFxuICBcImlkXCI6IFwid2hlcmUtdG8tZ2V0LWhlbHBcIixcbiAgXCJsZXZlbFwiOiAzXG59XTtcbmZ1bmN0aW9uIF9jcmVhdGVNZHhDb250ZW50KHByb3BzKSB7XG4gIGNvbnN0IF9jb21wb25lbnRzID0ge1xuICAgIGE6IFwiYVwiLFxuICAgIGFkbW9uaXRpb246IFwiYWRtb25pdGlvblwiLFxuICAgIGNvZGU6IFwiY29kZVwiLFxuICAgIGgzOiBcImgzXCIsXG4gICAgcDogXCJwXCIsXG4gICAgLi4uX3Byb3ZpZGVDb21wb25lbnRzKCksXG4gICAgLi4ucHJvcHMuY29tcG9uZW50c1xuICB9O1xuICByZXR1cm4gX2pzeHMoX2NvbXBvbmVudHMuYWRtb25pdGlvbiwge1xuICAgIHR5cGU6IFwiaW5mb1wiLFxuICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwicHJlcmVxdWlzaXRlc1wiLFxuICAgICAgY2hpbGRyZW46IFwiUHJlcmVxdWlzaXRlc1wiXG4gICAgfSksIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGlzIHR1dG9yaWFsIGFzc3VtZXMgUmFiYml0TVEgaXMgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi9kb2NzL2Rvd25sb2FkXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImluc3RhbGxlZFwiXG4gICAgICB9KSwgXCIgYW5kIHJ1bm5pbmcgb25cXHJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImxvY2FsaG9zdFwiXG4gICAgICB9KSwgXCIgb24gdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIvZG9jcy9uZXR3b3JraW5nI3BvcnRzXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcInN0YW5kYXJkIHBvcnRcIlxuICAgICAgfSksIFwiICg1NjcyKS4gSW4gY2FzZSB5b3VcXHJcXG51c2UgYSBkaWZmZXJlbnQgaG9zdCwgcG9ydCBvciBjcmVkZW50aWFscywgY29ubmVjdGlvbnMgc2V0dGluZ3Mgd291bGQgcmVxdWlyZVxcclxcbmFkanVzdGluZy5cIl1cbiAgICB9KSwgX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwid2hlcmUtdG8tZ2V0LWhlbHBcIixcbiAgICAgIGNoaWxkcmVuOiBcIldoZXJlIHRvIGdldCBoZWxwXCJcbiAgICB9KSwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIklmIHlvdSdyZSBoYXZpbmcgdHJvdWJsZSBnb2luZyB0aHJvdWdoIHRoaXMgdHV0b3JpYWwgeW91IGNhbiBjb250YWN0IHVzXFxyXFxudGhyb3VnaCBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9naXRodWIuY29tL3JhYmJpdG1xL3JhYmJpdG1xLXNlcnZlci9kaXNjdXNzaW9uc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJHaXRIdWIgRGlzY3Vzc2lvbnNcIlxuICAgICAgfSksIFwiIG9yIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCJodHRwczovL3d3dy5yYWJiaXRtcS5jb20vZGlzY29yZFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJSYWJiaXRNUSBjb21tdW5pdHkgRGlzY29yZFwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSldXG4gIH0pO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChwcm9wcyA9IHt9KSB7XG4gIGNvbnN0IHt3cmFwcGVyOiBNRFhMYXlvdXR9ID0ge1xuICAgIC4uLl9wcm92aWRlQ29tcG9uZW50cygpLFxuICAgIC4uLnByb3BzLmNvbXBvbmVudHNcbiAgfTtcbiAgcmV0dXJuIE1EWExheW91dCA/IF9qc3goTURYTGF5b3V0LCB7XG4gICAgLi4ucHJvcHMsXG4gICAgY2hpbGRyZW46IF9qc3goX2NyZWF0ZU1keENvbnRlbnQsIHtcbiAgICAgIC4uLnByb3BzXG4gICAgfSlcbiAgfSkgOiBfY3JlYXRlTWR4Q29udGVudChwcm9wcyk7XG59XG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/Tutorials/TutorialsHelp.md\n");

/***/ }),

/***/ "./tutorials/tutorial-seven-dotnet.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_tutorials_site_tutorials_tutorial_seven_dotnet_md_d87_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_tutorials_site_tutorials_tutorial_seven_dotnet_md_d87_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/tutorials/site-tutorials-tutorial-seven-dotnet-md-d87.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n/* harmony import */ var _site_src_components_Tutorials_TutorialsHelp_md__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/components/Tutorials/TutorialsHelp.md\");\n\n\nconst frontMatter = {\n\ttitle: 'RabbitMQ tutorial - Reliable Publishing with Publisher Confirms'\n};\nconst contentTitle = 'RabbitMQ tutorial - Reliable Publishing with Publisher Confirms';\n\nconst assets = {\n\n};\n\n\n\n\nconst toc = [{\n  \"value\": \"Publisher Confirms\",\n  \"id\": \"publisher-confirms\",\n  \"level\": 2\n}, ..._site_src_components_Tutorials_TutorialsHelp_md__WEBPACK_IMPORTED_MODULE_2__.toc, {\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 3\n}, {\n  \"value\": \"Enabling Publisher Confirms on a Channel\",\n  \"id\": \"enabling-publisher-confirms-on-a-channel\",\n  \"level\": 3\n}, {\n  \"value\": \"Strategy #1: Publishing Messages Individually\",\n  \"id\": \"strategy-1-publishing-messages-individually\",\n  \"level\": 3\n}, {\n  \"value\": \"Strategy #2: Publishing Messages in Batches\",\n  \"id\": \"strategy-2-publishing-messages-in-batches\",\n  \"level\": 3\n}, {\n  \"value\": \"Strategy #3: Handling Publisher Confirms in the Application\",\n  \"id\": \"strategy-3-handling-publisher-confirms-in-the-application\",\n  \"level\": 3\n}, {\n  \"value\": \"Re-publishing nack-ed Messages?\",\n  \"id\": \"re-publishing-nack-ed-messages\",\n  \"level\": 4\n}, {\n  \"value\": \"Summary\",\n  \"id\": \"summary\",\n  \"level\": 3\n}, {\n  \"value\": \"Putting It All Together\",\n  \"id\": \"putting-it-all-together\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"rabbitmq-tutorial---reliable-publishing-with-publisher-confirms\",\n        children: \"RabbitMQ tutorial - Reliable Publishing with Publisher Confirms\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"publisher-confirms\",\n      children: \"Publisher Confirms\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_site_src_components_Tutorials_TutorialsHelp_md__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {}), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/confirms#publisher-confirms\",\n        children: \"Publisher confirms\"\n      }), \" are a RabbitMQ\\r\\nextension to implement reliable publishing. When publisher confirms are enabled\\r\\non a channel, messages the client publishes are confirmed asynchronously by the\\r\\nbroker, meaning they have been taken care of on the server side.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In this tutorial we're going to use publisher confirms to make sure published\\r\\nmessages have safely reached the broker. We will cover several strategies to\\r\\nusing publisher confirms and explain their pros and cons.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"enabling-publisher-confirms-on-a-channel\",\n      children: \"Enabling Publisher Confirms on a Channel\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Publisher confirms are a RabbitMQ extension to the AMQP 0.9.1 protocol, so they\\r\\nare not enabled by default. Publisher confirms are enabled at the channel level\\r\\nvia the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"CreateChannelOptions\"\n      }), \" class:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        metastring: \"reference\",\n        children: \"https://github.com/rabbitmq/rabbitmq-tutorials/blob/main/dotnet/PublisherConfirms/PublisherConfirms.cs#L11-L15\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"These options must be passed to every channel that you expect to use publisher\\r\\nconfirms.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"strategy-1-publishing-messages-individually\",\n      children: \"Strategy #1: Publishing Messages Individually\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Let's start with the simplest approach to publishing with confirms, that is,\\r\\npublishing a message and awaiting its confirmation:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        metastring: \"reference\",\n        children: \"https://github.com/rabbitmq/rabbitmq-tutorials/blob/main/dotnet/PublisherConfirms/PublisherConfirms.cs#L57-L68\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In the previous example we publish a message as usual and wait for its\\r\\nconfirmation by \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"await\"\n      }), \"-ing the task returned by \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"BasicPublishAsync\"\n      }), \". The\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"await\"\n      }), \" returns as soon as the message has been confirmed. If the message is is\\r\\nnack-ed or returned (meaning the broker could not take care of it for some\\r\\nreason), the method will throw an exception. The handling of the exception\\r\\nusually consists in logging an error message and/or retrying to send the\\r\\nmessage.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"strategy-2-publishing-messages-in-batches\",\n      children: \"Strategy #2: Publishing Messages in Batches\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To improve upon our previous example, we can publish a batch of messages and\\r\\nwait for this whole batch to be confirmed. The following example uses a batch\\r\\nsize equal to one-half of the allowed count of outstanding confirmations:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        metastring: \"reference\",\n        children: \"https://github.com/rabbitmq/rabbitmq-tutorials/blob/main/dotnet/PublisherConfirms/PublisherConfirms.cs#L90-L102\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This method is responsible for awaiting the publisher confirmations for  a given batch of messages:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        metastring: \"reference\",\n        children: \"https://github.com/rabbitmq/rabbitmq-tutorials/blob/main/dotnet/PublisherConfirms/PublisherConfirms.cs#L108-L125\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"strategy-3-handling-publisher-confirms-in-the-application\",\n      children: \"Strategy #3: Handling Publisher Confirms in the Application\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The broker confirms published messages asynchronously, one just needs to\\r\\nregister a callback on the client to be notified of these confirms:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        metastring: \"reference\",\n        children: \"https://github.com/rabbitmq/rabbitmq-tutorials/blob/main/dotnet/PublisherConfirms/PublisherConfirms.cs#L193-L216\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"There are 3 callbacks: one for confirmed messages, one for nack-ed messages,\\r\\nand one for returned messages. All callbacks have a corresponding \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"EventArgs\"\n      }), \"\\r\\nparameter (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ea\"\n      }), \"). For ack and nack, this contains:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"delivery tag: the sequence number identifying the confirmed or nack-ed\\r\\nmessage. We will see shortly how to correlate it with the published message.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"multiple: this is a boolean value. If false, only one message is\\r\\nconfirmed/nack-ed, if true, all messages with a lower or equal sequence number\\r\\nare confirmed/nack-ed.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The sequence number can be obtained with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"IChannel#GetNextPublishSequenceNumberAsync\"\n      }), \" before\\r\\npublishing:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        children: \"var sequenceNumber = await channel.GetNextPublishSequenceNumberAsync();\\r\\nawait channel.BasicPublishAsync(exchange, queue, properties, body);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A performant way to correlate messages with sequence number consists in using a\\r\\nlinked list. Let's assume we want to publish strings because they are easy to\\r\\nturn into an array of bytes for publishing.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The publishing code now tracks outbound messages with a linked list. We need to\\r\\nclean this list when confirms arrive and do something like logging a warning\\r\\nwhen messages are nack-ed:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        metastring: \"reference\",\n        children: \"https://github.com/rabbitmq/rabbitmq-tutorials/blob/main/dotnet/PublisherConfirms/PublisherConfirms.cs#L144-L191\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The previous sample contains a callback that cleans the linked list when\\r\\nconfirms, nacks or returns arrive. Note this callback handles both single and\\r\\nmultiple confirms. The callback for nack-ed or returns messages issues a\\r\\nwarning. It then re-uses the previous callback to clean the linked list of\\r\\noutstanding confirms.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To sum up, handling publisher confirms asynchronously usually requires the\\r\\nfollowing steps:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"provide a way to correlate the publishing sequence number with a message.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"register confirm listeners on the channel to be notified when\\r\\npublisher acks/nacks arrive to perform the appropriate actions, like\\r\\nlogging or re-publishing a nack-ed message. The sequence-number-to-message\\r\\ncorrelation mechanism may also require some cleaning during this step.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"track the publishing sequence number before publishing a message.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.blockquote, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n        id: \"re-publishing-nack-ed-messages\",\n        children: \"Re-publishing nack-ed Messages?\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"It can be tempting to re-publish a nack-ed message from the corresponding\\r\\ncallback but this should be avoided, as confirm callbacks are\\r\\ndispatched in an I/O thread where channels are not supposed\\r\\nto do operations. A better solution consists in enqueuing the message in an in-memory\\r\\nqueue which is polled by a publishing thread. A class like \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"ConcurrentQueue\"\n        }), \"\\r\\nwould be a good candidate to transmit messages between the confirm callbacks\\r\\nand a publishing thread.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"summary\",\n      children: \"Summary\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Making sure published messages made it to the broker can be essential in some\\r\\napplications. Publisher confirms are a RabbitMQ feature that helps to meet this\\r\\nrequirement. Publisher confirms are asynchronous in nature but it is also\\r\\npossible to handle them synchronously. There is no definitive way to implement\\r\\npublisher confirms, this usually comes down to the constraints in the\\r\\napplication and in the overall system. Typical techniques are:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"publishing messages individually, waiting for the confirmation via\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"await\"\n        }), \": simple.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"publishing messages in batch, waiting for the confirmation for\\r\\na batch: simple, reasonable throughput, but hard to reason about when something\\r\\ngoes wrong.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"asynchronous handling: best performance and use of resources, good control in\\r\\ncase of error, but can be involved to implement correctly.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"putting-it-all-together\",\n      children: \"Putting It All Together\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-tutorials/blob/main/dotnet/PublisherConfirms/PublisherConfirms.cs\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"PublisherConfirms.cs\"\n        })\n      }), \"\\r\\nclass contains code for the techniques we covered. We can compile it, execute it as-is and\\r\\nsee how they each perform:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-shell\",\n        children: \"dotnet run\\r\\n# => 11/6/2024 10:36:22 AM [INFO] publishing 50,000 messages and handling confirms per-message\\r\\n# => 11/6/2024 10:36:28 AM [INFO] published 50,000 messages individually in 5,699 ms\\r\\n# => 11/6/2024 10:36:28 AM [INFO] publishing 50,000 messages and handling confirms in batches\\r\\n# => 11/6/2024 10:36:29 AM [INFO] published 50,000 messages in batch in 1,085 ms\\r\\n# => 11/6/2024 10:36:29 AM [INFO] publishing 50,000 messages and handling confirms asynchronously\\r\\n# => 11/6/2024 10:36:29 AM [WARNING] message sequence number 50000 has been basic.return-ed\\r\\n# => 11/6/2024 10:36:29 AM [WARNING] message sequence number 50000 has been basic.return-ed\\r\\n# => 11/6/2024 10:36:29 AM [WARNING] message sequence number 50000 has been basic.return-ed\\r\\n# => ...\\r\\n# => ...\\r\\n# => ...\\r\\n# => 11/6/2024 10:36:30 AM [WARNING] message sequence number 50000 has been basic.return-ed\\r\\n# => 11/6/2024 10:36:30 AM [INFO] published 50,000 messages and handled confirm asynchronously 878 ms\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The output on your computer should look similar if the client and the server\\r\\nsit on the same machine.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Publisher confirms are very network-dependent, so we're better off trying with\\r\\na remote node, which is more realistic as clients and servers are usually not\\r\\non the same machine in production. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"PublisherConfirms.cs\"\n      }), \" can easily be changed\\r\\nto use a non-local node:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-csharp\",\n        children: \"private static Task<IConnection> CreateConnection()\\r\\n{\\r\\n    var factory = new ConnectionFactory\\r\\n    {\\r\\n        HostName = \\\"remote-host\\\",\\r\\n        UserName = \\\"remote-host\\\",\\r\\n        Password = \\\"remote-password\\\"\\r\\n    };\\r\\n\\r\\n    return factory.CreateConnectionAsync();\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Remember that batch publishing is simple to implement, but does not make it\\r\\neasy to know which message(s) could not make it to the broker in case of\\r\\nnegative publisher acknowledgment. Handling publisher confirms asynchronously\\r\\nis more involved to implement but provide better granularity and better control\\r\\nover actions to perform when published messages are nack-ed.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./tutorials/tutorial-seven-dotnet.md\n");

/***/ })

}]);