"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-blog-2022-03-29-at-least-once-dead-lettering-73-c-685"],{

/***/ "./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2022-03-29-at-least-once-dead-lettering-index-md-73c.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"permalink":"/rabbitmq-website/blog/2022/03/29/at-least-once-dead-lettering","editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/blog/2022-03-29-at-least-once-dead-lettering/index.md","source":"@site/blog/2022-03-29-at-least-once-dead-lettering/index.md","title":"At-Least-Once Dead Lettering","description":"Quorum queues in RabbitMQ 3.10 provide a safer form of dead lettering that uses at-least-once guarantees for the message transfer between queues.","date":"2022-03-29T00:00:00.000Z","tags":[{"inline":true,"label":"Resiliency","permalink":"/rabbitmq-website/blog/tags/resiliency"},{"inline":true,"label":"New Features","permalink":"/rabbitmq-website/blog/tags/new-features"}],"readingTime":19.925,"hasTruncateMarker":true,"authors":[{"name":"David Ansari","url":"https://github.com/ansd","socials":{"github":"https://github.com/ansd","linkedin":"https://www.linkedin.com/in/ansd/","mastodon":"https://m.ansd.xyz/@ansd","bluesky":"https://bsky.app/profile/ansd.xyz"},"imageURL":"https://github.com/ansd.png","key":"dansari","page":null},{"name":"Karl Nilsson","url":"https://github.com/kjnilsson","socials":{"github":"https://github.com/kjnilsson","linkedin":"https://www.linkedin.com/in/kjnils/","bluesky":"https://bsky.app/profile/kjnilsson.bsky.social"},"imageURL":"https://github.com/kjnilsson.png","key":"nkarl","page":null}],"frontMatter":{"title":"At-Least-Once Dead Lettering","tags":["Resiliency","New Features"],"authors":["dansari","nkarl"]},"unlisted":false,"prevItem":{"title":"CentOS 7 Support is Discontinued from May, 2022","permalink":"/rabbitmq-website/blog/2022/04/26/centos-7-support-discontinued"},"nextItem":{"title":"RabbitMQ 3.10.0 release calendar","permalink":"/rabbitmq-website/blog/2022/03/24/rabbitmq-3.10.0-release-calendar"}}');

/***/ }),

/***/ "./blog/2022-03-29-at-least-once-dead-lettering/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2022_03_29_at_least_once_dead_lettering_index_md_73c_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2022_03_29_at_least_once_dead_lettering_index_md_73c_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2022-03-29-at-least-once-dead-lettering-index-md-73c.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'At-Least-Once Dead Lettering',\n\ttags: [\n\t\t'Resiliency',\n\t\t'New Features'\n\t],\n\tauthors: [\n\t\t'dansari',\n\t\t'nkarl'\n\t]\n};\nconst contentTitle = undefined;\n\nconst assets = {\n\"authorsImageUrls\": [undefined, undefined],\n};\n\n\n\nconst toc = [{\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"Usage\",\n  \"id\": \"usage\",\n  \"level\": 2\n}, {\n  \"value\": \"Example\",\n  \"id\": \"example\",\n  \"level\": 2\n}, {\n  \"value\": \"Prometheus metrics\",\n  \"id\": \"prometheus-metrics\",\n  \"level\": 3\n}, {\n  \"value\": \"Caveats\",\n  \"id\": \"caveats\",\n  \"level\": 2\n}, {\n  \"value\": \"Caveat 1 - Message buildup in the source quorum queue\",\n  \"id\": \"caveat-1---message-buildup-in-the-source-quorum-queue\",\n  \"level\": 3\n}, {\n  \"value\": \"Caveat 2 - Dead letter throughput\",\n  \"id\": \"caveat-2---dead-letter-throughput\",\n  \"level\": 3\n}, {\n  \"value\": \"Caveat 3 - Increased resource usage\",\n  \"id\": \"caveat-3---increased-resource-usage\",\n  \"level\": 3\n}, {\n  \"value\": \"Caveat 4 - Overflow drop-head\",\n  \"id\": \"caveat-4---overflow-drop-head\",\n  \"level\": 3\n}, {\n  \"value\": \"Caveat 5 - Switching dead letter strategy\",\n  \"id\": \"caveat-5---switching-dead-letter-strategy\",\n  \"level\": 3\n}, {\n  \"value\": \"Best Practices\",\n  \"id\": \"best-practices\",\n  \"level\": 2\n}, {\n  \"value\": \"Best Practice 1\",\n  \"id\": \"best-practice-1\",\n  \"level\": 3\n}, {\n  \"value\": \"Best Practice 2\",\n  \"id\": \"best-practice-2\",\n  \"level\": 3\n}, {\n  \"value\": \"Best Practice 3\",\n  \"id\": \"best-practice-3\",\n  \"level\": 3\n}, {\n  \"value\": \"Wrapping Up\",\n  \"id\": \"wrapping-up\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    figcaption: \"figcaption\",\n    figure: \"figure\",\n    h2: \"h2\",\n    h3: \"h3\",\n    img: \"img\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Quorum queues in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.10.0\",\n        children: \"RabbitMQ 3.10\"\n      }), \" provide a safer form of dead lettering that uses at-least-once guarantees for the message transfer between queues.\\r\\nThis blog post explains everything you need to know to start using at-least-once dead lettering.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This post also introduces two other \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.10.0\",\n        children: \"RabbitMQ 3.10\"\n      }), \" features: message Time-To-Live (TTL) for quorum queues and Prometheus metrics for dead lettered messages.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Some messages stored in RabbitMQ queues will expire or be negatively acknowledged by consumers.\\r\\nInstead of silently dropping them, RabbitMQ can be configured to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/dlx#overview\",\n        children: \"\\\"dead letter\\\"\"\n      }), \" them instead,\\r\\nthat is to republish those messages to a special-purpose exchange.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Prior to RabbitMQ 3.10 dead lettering has not been \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/dlx#safety\",\n        children: \"safe\"\n      }), \".\\r\\nMessages that get dead lettered from a queue (the \\\"source queue\\\") are not guaranteed to be delivered to the queues routed to by the\\r\\nexchange configured in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"dead-letter-exchange\"\n      }), \" policy (henceforth the \\\"target queues\\\").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This is because messages are dead lettered without publisher confirms turned on internally.\\r\\nWe call it the \\\"at-most-once\\\" dead letter strategy.\\r\\nDead lettered messages may arrive at the target queues.\\r\\nThey may also get lost for a variety of reasons:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The target queue is unavailable. For example, a classic queue's host node is down or being upgraded or a quorum queue loses a majority of its nodes temporarily.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The target queue's \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/docs/maxlength\",\n          children: \"length limit\"\n        }), \" is reached while its \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/docs/maxlength#overflow-behaviour\",\n          children: \"overflow behaviour\"\n        }), \"\\r\\nis set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"reject-publish\"\n        }), \" rejecting any incoming messages.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"A network partition prevents communication between source queue and target queue.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The dead letter routing topology is not configured correctly. For example, the configured \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"dead-letter-exchange\"\n        }), \" does not exist or no target queue is bound\\r\\nto the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"dead-letter-exchange\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ 3.10 introduces a new feature called \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/quorum-queues#dead-lettering\",\n        children: \"\\\"at-least-once\\\" dead lettering\"\n      }), \".\\r\\nIt is an opt-in feature available for source queues being quorum queues.\\r\\nThis new feature ensures that all messages dead lettered in the source quorum queue will arrive at the target queues (classic queue, quorum queue, or stream) eventually\\r\\neven in the scenarios described above where messages would have been lost with the \\\"at-most-once\\\" strategy.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This blog post covers instructions how to enable at-least-once dead lettering, provides a detailed example, and describes caveats and best practices of this new feature.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"usage\",\n      children: \"Usage\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To enable \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-least-once\"\n      }), \" dead-lettering for a source quorum queue, we need to apply the following policies\\r\\n(or their equivalent queue arguments starting with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-\"\n      }), \"):\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"dead-letter-strategy\"\n        }), \" is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"at-least-once\"\n        }), \". The default is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"at-most-once\"\n        }), \".\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"overflow\"\n        }), \" is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"reject-publish\"\n        }), \". The default is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"drop-head\"\n        }), \".\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"dead-letter-exchange\"\n        }), \" is configured.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Furthermore, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/feature-flags\",\n        children: \"feature flag\"\n      }), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"stream_queue\"\n      }), \" must be enabled. By default that feature flag is enabled for RabbitMQ clusters created since 3.9.\\r\\nEven though streams are not used in at-least-once dead lettering (unless a target queue happens to be a stream) the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"stream_queue\"\n      }), \" feature flag is required because\\r\\nat-least-once dead lettering relies on some implementation details that come with that feature flag.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"example\",\n      children: \"Example\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Following this example requires \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://kubernetes.io/docs/tasks/tools/#kubectl\",\n        children: \"kubectl\"\n      }), \" client to be installed and pointing against any running Kubernetes cluster v1.19 or newer.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If you do not have a Kubernetes cluster available, the quickest way is to install \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://kubernetes.io/docs/tasks/tools/#kind\",\n        children: \"kind\"\n      }), \" to start a local Kubernetes cluster in Docker:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kind create cluster\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Install the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/cluster-operator\",\n        children: \"rabbitmq/cluster-operator\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl apply -f https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Deploy a 3-node RabbitMQ cluster:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> cat <<EOF | kubectl apply -f -\\r\\n---\\r\\napiVersion: rabbitmq.com/v1beta1\\r\\nkind: RabbitmqCluster\\r\\nmetadata:\\r\\n  name: my-rabbit\\r\\nspec:\\r\\n  replicas: 3\\r\\n  image: rabbitmq:3.10.0-management\\r\\nEOF\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Once all 3 pods are ready (which takes less than 1 minute), we create a source queue and a target queue:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqadmin declare queue name=my-source-queue \\\\\\r\\n    durable=true queue_type=quorum arguments='{\\\"x-dead-letter-exchange\\\" : \\\"\\\",\\r\\n    \\\"x-dead-letter-routing-key\\\" : \\\"my-target-queue\\\" , \\\"x-overflow\\\" : \\\"reject-publish\\\"}'\\r\\n\\r\\n> kubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqadmin declare queue name=my-target-queue \\\\\\r\\n    durable=true queue_type=classic\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The last two commands declare a queue by executing the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqadmin\"\n      }), \" command in the RabbitMQ container of pod \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-rabbit-server-0\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqadmin\"\n      }), \" command is a Python script that talks against the RabbitMQ Management API.\\r\\nThe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqadmin\"\n      }), \" command is not the recommended way to declare queues and to send messages.\\r\\nWe use it in this blog post since it is the simplest way for you to follow the examples.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The rabbitmq/cluster-operator creates pod names in the format \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"<rabbitmq-cluster-name>-server-<index>\"\n      }), \".\\r\\nIn the YAML above, we defined \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"<rabbitmq-cluster-name>\"\n      }), \" to be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-rabbit\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The first command creates the source queue. For at-least-once dead lettering to work it must be of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"queue_type=quorum\"\n      }), \".\\r\\nFor the source queue, we define further queue arguments (starting with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-\"\n      }), \") encoded in JSON format:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-dead-letter-exchange\"\n        }), \" set to the empty string (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"\\\"\\\"\"\n        }), \") means that messages dead lettered by the source queue are published to the default exchange.\\r\\n(While we could have created a new dead letter exchange, dead-lettering to the default exchange keeps this example simpler.)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-dead-letter-routing-key\"\n        }), \" set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"my-target-queue\"\n        }), \" means that dead lettered messages will be published with routing\\r\\nkey \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"my-target-queue\"\n        }), \". Since this routing key matches the queue name of the target queue (created by the 2nd command), dead letter messages\\r\\nwill be routed by the default exchange to the target queue without the need to create any further bindings.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"As stated above \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-overflow\"\n        }), \" must be set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"reject-publish\"\n        }), \" as a prerequisite for at-least-once dead lettering.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The second command creates the target queue. It can be of any queue type. In this example we choose a classic queue.\\r\\nNote that compared to the source quorum queue having 3 replicas on all 3 nodes, the target classic queue is not highly available\\r\\nand resides on a single node.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Let us publish our first message \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"msg1\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqadmin publish exchange=amq.default routing_key=my-source-queue \\\\\\r\\n    payload=msg1 properties='{\\\"expiration\\\" : \\\"1000\\\", \\\"delivery_mode\\\" : 2}'\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This command demonstrates another new feature of RabbitMQ 3.10: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/ttl\",\n        children: \"Message TTL\"\n      }), \" is supported for quorum queues.\\r\\nThe following figure illustrates how the message flows:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"We publish one message to the default exchange.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"It gets routed to the source quorum queue where it expires after 1 second (1000 milliseconds).\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The expiration causes the message to be dead lettered to the default exchange.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"It gets routed to the target classic queue.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Figure 1: Dead letter routing topology (at-most-once)\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2022-03-29-at-least-once-dead-lettering/at-least-once-dead-lettering.svg\")[\"default\"]) + \"\",\n          width: \"1134\",\n          height: \"473\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"Figure 1: Dead letter routing topology (at-most-once)\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that we set the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"delivery_mode\"\n      }), \" to the integer \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"2\"\n      }), \" which denotes that the message is persisted.\\r\\nThat flag does not matter when publishing the message to the source quorum queue initially because all messages in quorum queues\\r\\nare written to disk anyway. However, that persistence flag becomes important once the message will be dead lettered\\r\\nto a target queue (which may not be a quorum queue).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"We can validate that the message arrived in the target queue:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqctl list_queues --formatter=pretty_table --quiet \\\\\\r\\n    name type messages messages_ready messages_unacknowledged\\r\\n\\r\\n┌─────────────────┬─────────┬──────────┬────────────────┬─────────────────────────┐\\r\\n│ name            │ type    │ messages │ messages_ready │ messages_unacknowledged │\\r\\n├─────────────────┼─────────┼──────────┼────────────────┼─────────────────────────┤\\r\\n│ my-target-queue │ classic │ 1        │ 1              │ 0                       │\\r\\n├─────────────────┼─────────┼──────────┼────────────────┼─────────────────────────┤\\r\\n│ my-source-queue │ quorum  │ 0        │ 0              │ 0                       │\\r\\n└─────────────────┴─────────┴──────────┴────────────────┴─────────────────────────┘\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Next, let us try out what happens when the target queue becomes unavailable.\\r\\nOne way to determine the host node of the target classic queue is listing the queue's process identifier (PID):\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqctl list_queues --quiet name pid\\r\\n\\r\\nname\\tpid\\r\\nmy-target-queue\\t<rabbit@my-rabbit-server-0.my-rabbit-nodes.default.1646297039.856.0>\\r\\nmy-source-queue\\t<rabbit@my-rabbit-server-0.my-rabbit-nodes.default.1646297039.821.0>\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The PID shows that both the target classic queue process and the source quorum queue leader process\\r\\nreside in pod \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-rabbit-server-0\"\n      }), \".\\r\\nLet us stop that RabbitMQ server:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqctl stop_app\\r\\n\\r\\nStopping rabbit application on node rabbit@my-rabbit-server-0.my-rabbit-nodes.default ...\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The source quorum queue will still be available because a majority of nodes (2 out of 3) are available and another node becomes the new leader.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As before we again send a message to the source queue and let it expire after 1 second.\\r\\nSince the RabbitMQ node in pod \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-rabbit-server-0\"\n      }), \" is down, we execute the following commands\\r\\nin \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-rabbit-server-1\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl exec my-rabbit-server-1 -c rabbitmq -- rabbitmqadmin publish exchange=amq.default routing_key=my-source-queue \\\\\\r\\n    payload=msg2 properties='{\\\"expiration\\\" : \\\"1000\\\", \\\"delivery_mode\\\" : 2}'\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Since the target queue is down, it will not report its statistics:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \">  kubectl exec my-rabbit-server-1 -c rabbitmq -- rabbitmqctl list_queues --formatter=pretty_table --quiet \\\\\\r\\n    name type messages messages_ready messages_unacknowledged state\\r\\n\\r\\n┌─────────────────┬──────────────────────┬──────────┬────────────────┬─────────────────────────┬─────────┐\\r\\n│ name            │ type                 │ messages │ messages_ready │ messages_unacknowledged │ state   │\\r\\n├─────────────────┼──────────────────────┼──────────┼────────────────┼─────────────────────────┼─────────┤\\r\\n│ my-target-queue │ rabbit_classic_queue │          │                │                         │ down    │\\r\\n├─────────────────┼──────────────────────┼──────────┼────────────────┼─────────────────────────┼─────────┤\\r\\n│ my-source-queue │ quorum               │ 0        │ 0              │ 0                       │ running │\\r\\n└─────────────────┴──────────────────────┴──────────┴────────────────┴─────────────────────────┴─────────┘\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"However, because the target queue is down and because the source queue does not contain any messages we know that the second message\\r\\ngot lost while it was dead lettered!\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Since we did not yet define \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"dead-letter-strategy\"\n      }), \" to be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-least-once\"\n      }), \" when declaring the source queue above,\\r\\nthe source queue uses the default strategy \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-most-once\"\n      }), \".\\r\\nWe can do better. In this example, we switch the dead letter strategy dynamically to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-least-once\"\n      }), \" by applying a policy:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl exec my-rabbit-server-1 -c rabbitmq -- rabbitmqctl set_policy --apply-to queues \\\\\\r\\n    my-policy my-source-queue '{\\\"dead-letter-strategy\\\" : \\\"at-least-once\\\"}'\\r\\n\\r\\nSetting policy \\\"my-policy\\\" for pattern \\\"my-source-queue\\\" to \\\"{\\\"dead-letter-strategy\\\" : \\\"at-least-once\\\"}\\\"\\r\\nwith priority \\\"0\\\" for vhost \\\"/\\\" ...\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Let us send a third message:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl exec my-rabbit-server-1 -c rabbitmq -- rabbitmqadmin publish exchange=amq.default routing_key=my-source-queue \\\\\\r\\n    payload=msg3 properties='{\\\"expiration\\\" : \\\"1000\\\", \\\"delivery_mode\\\" : 2}'\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"With the new \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-least-once\"\n      }), \" strategy when the 3rd message expires and gets dead lettered, it will be stored\\r\\nby the source queue since the target queue is not available:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl exec my-rabbit-server-1 -c rabbitmq -- rabbitmqctl list_queues --formatter=pretty_table --quiet \\\\\\r\\n    name type messages messages_ready messages_unacknowledged state\\r\\n\\r\\n┌─────────────────┬──────────────────────┬──────────┬────────────────┬─────────────────────────┬─────────┐\\r\\n│ name            │ type                 │ messages │ messages_ready │ messages_unacknowledged │ state   │\\r\\n├─────────────────┼──────────────────────┼──────────┼────────────────┼─────────────────────────┼─────────┤\\r\\n│ my-target-queue │ rabbit_classic_queue │          │                │                         │ down    │\\r\\n├─────────────────┼──────────────────────┼──────────┼────────────────┼─────────────────────────┼─────────┤\\r\\n│ my-source-queue │ quorum               │ 1        │ 0              │ 0                       │ running │\\r\\n└─────────────────┴──────────────────────┴──────────┴────────────────┴─────────────────────────┴─────────┘\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The message is neither \\\"ready\\\" (i.e. available for normal queue consumers) nor \\\"unacknowledged\\\" (i.e. consumed by normal queue consumers but not yet acknowledged).\\r\\nHowever, the message is kept safely in the source quorum queue in a separate data structure that is only available for consumption\\r\\nby a special RabbitMQ internal dead letter consumer process.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Let us output the logs of that dead letter consumer process.\\r\\nThe dead letter consumer process is co-located on the quorum queue leader node.\\r\\nWe first need figure out which node became the new leader:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl exec my-rabbit-server-1 -c rabbitmq -- rabbitmqctl list_queues --formatter=pretty_table --quiet name leader\\r\\n┌─────────────────┬───────────────────────────────────────────────────┐\\r\\n│ name            │ leader                                            │\\r\\n├─────────────────┼───────────────────────────────────────────────────┤\\r\\n│ my-target-queue │                                                   │\\r\\n├─────────────────┼───────────────────────────────────────────────────┤\\r\\n│ my-source-queue │ rabbit@my-rabbit-server-1.my-rabbit-nodes.default │\\r\\n└─────────────────┴───────────────────────────────────────────────────┘\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In our example the new leader happens to be on pod \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-rabbit-server-1\"\n      }), \".\\r\\nWhen you run this example, it could also be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-rabbit-server-2\"\n      }), \" in which case you will need replace \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"1\"\n      }), \" with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"2\"\n      }), \" in below commands.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The log displays a descriptive warning message:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"> kubectl logs my-rabbit-server-1 -c rabbitmq | grep dead-letter\\r\\n\\r\\n[warn] <0.4156.0> Cannot forward any dead-letter messages from source quorum queue 'my-source-queue'\\r\\nin vhost '/' with configured dead-letter-exchange exchange '' in vhost '/' and configured\\r\\ndead-letter-routing-key 'my-target-queue'. This can happen either if the dead-letter routing topology is misconfigured\\r\\n(for example no queue bound to dead-letter-exchange or wrong dead-letter-routing-key configured)\\r\\nor if non-mirrored classic queues are bound whose host node is down.\\r\\nFix this issue to prevent dead-lettered messages from piling up in the source quorum queue.\\r\\nThis message will not be logged again.\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"We fix this issue by restarting the target classic queue's host node:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqctl start_app\\r\\n\\r\\nStarting node rabbit@my-rabbit-server-0.my-rabbit-nodes.default ...\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The internal dead letter consumer process retries to send the message periodically.\\r\\nThe current default retry interval is 3 minutes.\\r\\nAfter no later than 3 minutes the 3rd message should have made it to the target queue:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqctl list_queues --formatter=pretty_table --quiet \\\\\\r\\n    name type messages messages_ready messages_unacknowledged state\\r\\n\\r\\n┌─────────────────┬─────────┬──────────┬────────────────┬─────────────────────────┬─────────┐\\r\\n│ name            │ type    │ messages │ messages_ready │ messages_unacknowledged │ state   │\\r\\n├─────────────────┼─────────┼──────────┼────────────────┼─────────────────────────┼─────────┤\\r\\n│ my-source-queue │ quorum  │ 0        │ 0              │ 0                       │ running │\\r\\n├─────────────────┼─────────┼──────────┼────────────────┼─────────────────────────┼─────────┤\\r\\n│ my-target-queue │ classic │ 2        │ 2              │ 0                       │ running │\\r\\n└─────────────────┴─────────┴──────────┴────────────────┴─────────────────────────┴─────────┘\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Our understanding is that the 1st and 3rd message are in the target queue but that the 2nd message got lost\\r\\nbecause it used \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-most-once\"\n      }), \" dead lettering while the target queue was down:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqadmin get queue=my-target-queue count=2\\r\\n+-----------------+----------+---------------+---------+---------------+------------------+-------------+\\r\\n|   routing_key   | exchange | message_count | payload | payload_bytes | payload_encoding | redelivered |\\r\\n+-----------------+----------+---------------+---------+---------------+------------------+-------------+\\r\\n| my-target-queue |          | 1             | msg1    | 4             | string           | False       |\\r\\n| my-target-queue |          | 0             | msg3    | 4             | string           | False       |\\r\\n+-----------------+----------+---------------+---------+---------------+------------------+-------------+\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"payload\"\n      }), \" column validates that our understanding is correct and that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-least-once\"\n      }), \" dead lettering works as expected.\\r\\nEven though the target queue was unavailable, the dead letter message made it to the target queue once it became available again.\\r\\nThe 1st message is still stored in the target queue because we published to the source quorum queue setting the persistence flag.\\r\\nIf we did not set the persistence flag, the 1st message would have been lost as well.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The following figure summarises the flow of the 3rd message.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Figure 2: Dead letter routing topology (at-least-once)\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2022-03-29-at-least-once-dead-lettering/at-least-once-dead-lettering-worker.svg\")[\"default\"]) + \"\",\n          width: \"1134\",\n          height: \"473\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"Figure 2: Dead letter routing topology (at-least-once)\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The message is published to the default exchange.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The message is routed to the source quorum queue. A quorum queue is a replicated state machine in the Raft consensus algorithm.\\r\\nA quorum queue's state consists of more than a queue data structure where messages from publishers are enqueued:\\r\\nThe state also includes data about publishers, consumers as well as messages sent to (but not yet acknowledged by) consumers, and some other statistics.\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"At-least-once\"\n        }), \" dead lettering adds yet another queue data structure to the quorum queue's state: a queue that contains only dead lettered messages.\\r\\nSo when the message expires after 1 second it is moved from the \\\"normal\\\" message queue to the dead letter message queue.\\r\\nThe message remains safely stored there until it gets acknowledged by step 7.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"There is one (RabbitMQ internal) dead letter consumer process co-located on the node of the quorum queue leader.\\r\\nIts job is to consume messages from a single source quorum queue's dead letter message queue, forward them to all target queues,\\r\\nwaiting until \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n          children: \"all\"\n        }), \" publisher confirmations are received (step 6) and finally acknowledge the dead lettered message\\r\\nback to the source quorum queue (step 7).\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The dead letter consumer routes dead lettered messages via the configured \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"dead-letter-exchange\"\n        }), \". In our example, we configured the default exchange\\r\\nto be the dead letter exchange. If a route does not exist, the dead letter consumer will try to route again after some time.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"If a route exists the message is sent to the target queue.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The target queue sends a publisher confirmation back to the dead letter consumer.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The dead letter consumer sends a consumer acknowledgement back to the source quorum queue where the dead lettered message will be deleted.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"prometheus-metrics\",\n      children: \"Prometheus metrics\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ 3.10 comes with another new feature: Prometheus metrics for dead lettered messages.\\r\\nNode-global counters will return the number of messages that get dead lettered broken down by the following dimensions:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n          children: \"dead letter reason:\"\n        }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"expired\"\n            }), \": Message TTL exceeded (as in our example).\"]\n          }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"rejected\"\n            }), \": Consumer sent \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"basic.reject\"\n            }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"basic.nack\"\n            }), \" without requeue option.\"]\n          }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"maxlen\"\n            }), \": Queue length exceeded with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"overflow\"\n            }), \" set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"drop-head\"\n            }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"reject-publish-dlx\"\n            }), \". (The latter setting applies only to classic queues.)\"]\n          }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"delivery_limit\"\n            }), \": Delivery limit exceeded. (Applies only to quorum queues). Message got requeued too often,\\r\\nfor example because consumer sent \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"basic.reject\"\n            }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"basic.nack\"\n            }), \" with requeue option or consumer got disconnected from the quorum queue leader.\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n          children: [\"source queue type. i.e. queue type where messages were dead lettered \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n            children: \"from\"\n          }), \":\"]\n        }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"rabbit_classic_queue\"\n            })\n          }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"rabbit_quorum_queue\"\n            })\n          }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n            children: \"(Streams do not dead letter messages because they are append-only logs where messages get truncated according to retention policies.)\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n          children: \"dead letter strategy:\"\n        }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"disabled\"\n            }), \": Queue has no \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"dead-letter-exchange\"\n            }), \" configured or configured \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"dead-letter-exchange\"\n            }), \" does not exist implying messages get dropped.\"]\n          }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"at_most_once\"\n            }), \": Queue's configured dead-lettered-exchange exists.\"]\n          }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"at_least_once\"\n            }), \": Queue type is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"rabbit_quorum_queue\"\n            }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"dead-letter-exchange\"\n            }), \" is configured, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"dead-letter-strategy\"\n            }), \" is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"at-least-once\"\n            }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"overflow\"\n            }), \" is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"reject-publish\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Following our example let us output these metrics.\\r\\nIn a shell window port-forward RabbitMQ's Prometheus port \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"15692\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> kubectl port-forward pod/my-rabbit-server-1 15692\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In another shell window scrape the Prometheus endpoint:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"> curl --silent localhost:15692/metrics/ | grep rabbitmq_global_messages_dead_lettered\\r\\n\\r\\n# TYPE rabbitmq_global_messages_dead_lettered_confirmed_total counter\\r\\n# HELP rabbitmq_global_messages_dead_lettered_confirmed_total Total number of messages dead-lettered and confirmed by target queues\\r\\nrabbitmq_global_messages_dead_lettered_confirmed_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"at_least_once\\\"} 1\\r\\n\\r\\n# TYPE rabbitmq_global_messages_dead_lettered_delivery_limit_total counter\\r\\n# HELP rabbitmq_global_messages_dead_lettered_delivery_limit_total Total number of messages dead-lettered due to\\r\\n# delivery-limit exceeded\\r\\nrabbitmq_global_messages_dead_lettered_delivery_limit_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"at_least_once\\\"} 0\\r\\nrabbitmq_global_messages_dead_lettered_delivery_limit_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"at_most_once\\\"} 0\\r\\nrabbitmq_global_messages_dead_lettered_delivery_limit_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"disabled\\\"} 0\\r\\n\\r\\n# TYPE rabbitmq_global_messages_dead_lettered_expired_total counter\\r\\n# HELP rabbitmq_global_messages_dead_lettered_expired_total Total number of messages dead-lettered due to message TTL exceeded\\r\\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\\\"rabbit_classic_queue\\\",dead_letter_strategy=\\\"at_most_once\\\"} 0\\r\\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\\\"rabbit_classic_queue\\\",dead_letter_strategy=\\\"disabled\\\"} 0\\r\\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"at_least_once\\\"} 1\\r\\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"at_most_once\\\"} 1\\r\\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"disabled\\\"} 0\\r\\n\\r\\n# TYPE rabbitmq_global_messages_dead_lettered_maxlen_total counter\\r\\n# HELP rabbitmq_global_messages_dead_lettered_maxlen_total Total number of messages dead-lettered due to overflow drop-head\\r\\n# or reject-publish-dlx\\r\\nrabbitmq_global_messages_dead_lettered_maxlen_total{queue_type=\\\"rabbit_classic_queue\\\",dead_letter_strategy=\\\"at_most_once\\\"} 0\\r\\nrabbitmq_global_messages_dead_lettered_maxlen_total{queue_type=\\\"rabbit_classic_queue\\\",dead_letter_strategy=\\\"disabled\\\"} 0\\r\\nrabbitmq_global_messages_dead_lettered_maxlen_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"at_most_once\\\"} 0\\r\\nrabbitmq_global_messages_dead_lettered_maxlen_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"disabled\\\"} 0\\r\\n\\r\\n# TYPE rabbitmq_global_messages_dead_lettered_rejected_total counter\\r\\n# HELP rabbitmq_global_messages_dead_lettered_rejected_total Total number of messages dead-lettered due to basic.reject or basic.nack\\r\\nrabbitmq_global_messages_dead_lettered_rejected_total{queue_type=\\\"rabbit_classic_queue\\\",dead_letter_strategy=\\\"at_most_once\\\"} 0\\r\\nrabbitmq_global_messages_dead_lettered_rejected_total{queue_type=\\\"rabbit_classic_queue\\\",dead_letter_strategy=\\\"disabled\\\"} 0\\r\\nrabbitmq_global_messages_dead_lettered_rejected_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"at_least_once\\\"} 0\\r\\nrabbitmq_global_messages_dead_lettered_rejected_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"at_most_once\\\"} 0\\r\\nrabbitmq_global_messages_dead_lettered_rejected_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"disabled\\\"} 0\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"We scraped only the Prometheus metrics of pod \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-rabbit-server-1\"\n      }), \".\\r\\nSince these counters are \\\"node-global\\\", it means above list shows only the metrics as observed by node \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-rabbit-server-1\"\n      }), \" (but global\\r\\nacross all queues on that node).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The very 1st message we sent went to pod \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-rabbit-server-0\"\n      }), \" before we stopped that node.\\r\\nThereafter the quorum queue leader changed in our example from \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-rabbit-server-0\"\n      }), \" to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-rabbit-server-1\"\n      }), \".\\r\\nWe then sent the 2nd message using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-most-once\"\n      }), \" dead letter strategy and the 3rd message using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-least-once\"\n      }), \" dead letter strategy.\\r\\nThe 3rd message that got dead lettered was eventually acknowledged by the dead letter consumer (or in other words, confirmed by the target queues).\\r\\nThis is why the following counters have the value \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"1\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-zsh\",\n        children: \"rabbitmq_global_messages_dead_lettered_confirmed_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"at_least_once\\\"} 1\\r\\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"at_least_once\\\"} 1\\r\\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\\\"rabbit_quorum_queue\\\",dead_letter_strategy=\\\"at_most_once\\\"} 1\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If you are curious you can scrape the Prometheus metrics for pod \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"my-rabbit-server-0\"\n      }), \".\\r\\nWhat would you expect to see? Does the output match your expectations?\\r\\nHint: \\\"A Prometheus counter is a cumulative metric that represents a single monotonically increasing counter whose value can only increase or be reset to zero on restart.\\\"\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"caveats\",\n      children: \"Caveats\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"We saw how messages being dead lettered make it from the dead letter source queue to the dead letter target queue eventually even when the target queue is temporarily unavailable.\\r\\nSo why is at-least-once dead lettering not the new default dead letter strategy?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"There are some caveats to be aware of when enabling at-least-once dead lettering:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"caveat-1---message-buildup-in-the-source-quorum-queue\",\n      children: \"Caveat 1 - Message buildup in the source quorum queue\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"At-least-once dead lettering does a great job ensuring messages are not lost when target queues are temporarily unavailable or when the routing topology is not configured correctly.\\r\\nHowever, if the dead letter consumer process does not obtain publisher confirmations from \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"all\"\n      }), \" target queues for a long time while more and more messages keep getting dead lettered\\r\\nin the source queue, it can cause excessive message buildup in the source queue.\\r\\nIn the worst case, the source quorum queue will contain only of dead lettered messages.\\r\\nTo prevent excessive message buildup, set a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/maxlength\",\n        children: \"queue length limit\"\n      }), \" for the source queue (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"max-length\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"max-length-bytes\"\n      }), \").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"caveat-2---dead-letter-throughput\",\n      children: \"Caveat 2 - Dead letter throughput\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The dead letter consumer has a configurable setting called \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"dead_letter_worker_consumer_prefetch\"\n      }), \" whose current default value is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"32\"\n      }), \".\\r\\nThis means that the dead letter consumer process will prefetch and buffer at most 32 messages while waiting for publisher confirmations from target queues.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Since RabbitMQ 3.10 quorum queues store all message bodies / payloads always on disk.\\r\\nThere is still a very small per message memory overhead for each message in the quorum queue because the quorum queue holds some metadata for each message in memory (for example the Raft index and\\r\\nthe message payload size).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The dead letter consumer process on the other hand keeps message bodies in memory.\\r\\nTo protect against the worst case where hundreds of quorum queues have at-least-once dead lettering enabled and publisher confirmations are not received, this prefetch value is set\\r\\nto a moderate default value of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"32\"\n      }), \" to not cause high memory usage by the dead letter consumers.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A low prefetch value however will cause lower throughput.\\r\\nIf you have a scenario where sustained dead lettering throughput of thousands of messages per second is required (for example thousands of messages expire or are getting rejected every second)\\r\\nyou can increase the prefetch setting in the advanced config file.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Here is an example how to increase the prefetch in Kubernetes:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-yaml\",\n        children: \"---\\r\\napiVersion: rabbitmq.com/v1beta1\\r\\nkind: RabbitmqCluster\\r\\nmetadata:\\r\\n  name: my-rabbit\\r\\nspec:\\r\\n  replicas: 3\\r\\n  rabbitmq:\\r\\n    advancedConfig: |\\r\\n      [\\r\\n          {rabbit, [\\r\\n              {dead_letter_worker_consumer_prefetch, 512}\\r\\n          ]}\\r\\n      ].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"caveat-3---increased-resource-usage\",\n      children: \"Caveat 3 - Increased resource usage\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Enabling at-least-once dead lettering for every quorum queue will increase resource usage.\\r\\nMore memory and more CPU will be consumed.\\r\\nComparing figure 1 (at-most-once dead lettering) with figure 2 (at-least-once dead lettering), we observe that at-least-once dead lettering will require\\r\\nsending more messages (including acknowledgements).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"caveat-4---overflow-drop-head\",\n      children: \"Caveat 4 - Overflow drop-head\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As explained in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#usage\",\n        children: \"Usage\"\n      }), \" section, enabling \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-least-once\"\n      }), \" dead lettering requires setting \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"overflow\"\n      }), \" to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"reject-publish\"\n      }), \".\\r\\nSetting \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"overflow\"\n      }), \" to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"drop-head\"\n      }), \" will make dead letter strategy fall back to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-most-once\"\n      }), \".\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"drop-head\"\n      }), \" is not supported because dropping dead lettered messages from the source quorum queue would violate \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-least-once\"\n      }), \" semantics.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"caveat-5---switching-dead-letter-strategy\",\n      children: \"Caveat 5 - Switching dead letter strategy\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For a quorum queue, it is possible to switch the dead-letter strategy via a policy from \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-most-once\"\n      }), \"\\r\\nto \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-least-once\"\n      }), \" and vice versa. If the dead-letter strategy is changed either directly\\r\\nfrom \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-least-once\"\n      }), \" to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"at-most-once\"\n      }), \" or indirectly, for example by changing overflow from \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"reject-publish\"\n      }), \"\\r\\nto \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"drop-head\"\n      }), \" or by unsetting \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"dead-letter-exchange\"\n      }), \", any dead-lettered messages that have not yet been confirmed by all target queues will be permanently deleted\\r\\nin the source quorum queue.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best Practices\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Based on what we have learnt above, at-least-once dead lettering best practices include:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"best-practice-1\",\n      children: \"Best Practice 1\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Set \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"max-length\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"max-length-bytes\"\n      }), \" in the source quorum queue to guard against excessive message buildup.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"best-practice-2\",\n      children: \"Best Practice 2\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Bind a target quorum queue or stream to the dead letter exchange.\\r\\nThis provides higher availability than a target classic queue.\\r\\nRedelivery of dead letter messages will also be faster for target quorum queues or target streams than for target classic queues.\\r\\nThis is because quorum queues and streams have their own clients, delivery protocols and retry mechanisms.\\r\\nRemember that classic mirrored queues are deprecated.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"best-practice-3\",\n      children: \"Best Practice 3\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Set the persistence flag on all messages published to the source quorum queue.\\r\\nIf the persistence flag is not set, dead lettered messages will not have it set either.\\r\\nThis becomes relevant when dead lettered messages are routed to a target classic queue.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"wrapping-up\",\n      children: \"Wrapping Up\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Prior to RabbitMQ 3.10 dead lettering in RabbitMQ has not been safe.\\r\\nMessages being dead lettered could get lost for a variety of reasons - especially in multi-node RabbitMQ clusters.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"At-least-once dead lettering ensures dead lettered messages arrive at the target queue eventually even in the presence of rolling upgrades and\\r\\ntemporary failures such as network partitions or routing topology misconfigurations.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Besides at-least-once dead lettering for quorum queues, we also learnt about two other new features in RabbitMQ 3.10:\\r\\nMessage TTL in quorum queues and Prometheus metrics for dead letter messages.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Since at-least-once dead lettering comes with increased resource usage, it should only be enabled if dead lettered messages are not \\\"dead\\\" in the\\r\\noriginal sense but rather \\\"alive\\\" and crucial for your business logic.\\r\\nIf in your use case dead lettered messages are only of informational nature, at-most-once dead lettering should be used.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The at-least-once dead lettering feature for quorum queues paves the way for new use cases where you know that you\\r\\nhave messages that might be negatively acknowledged but still needs to be processed or where you cannot lose messages with an expiring TTL.\\r\\nSuch scenarios were previously unsafe or hard to achieve with RabbitMQ.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./blog/2022-03-29-at-least-once-dead-lettering/index.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2022-03-29-at-least-once-dead-lettering/at-least-once-dead-lettering-worker.svg":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/at-least-once-dead-lettering-worker-e555a518e5752708681be6117bb1b4b0.svg\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDIyLTAzLTI5LWF0LWxlYXN0LW9uY2UtZGVhZC1sZXR0ZXJpbmcvYXQtbGVhc3Qtb25jZS1kZWFkLWxldHRlcmluZy13b3JrZXIuc3ZnIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ibG9nLzIwMjItMDMtMjktYXQtbGVhc3Qtb25jZS1kZWFkLWxldHRlcmluZy9hdC1sZWFzdC1vbmNlLWRlYWQtbGV0dGVyaW5nLXdvcmtlci5zdmc/YWQ0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2ltYWdlcy9hdC1sZWFzdC1vbmNlLWRlYWQtbGV0dGVyaW5nLXdvcmtlci1lNTU1YTUxOGU1NzUyNzA4NjgxYmU2MTE3YmIxYjRiMC5zdmdcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2022-03-29-at-least-once-dead-lettering/at-least-once-dead-lettering-worker.svg\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2022-03-29-at-least-once-dead-lettering/at-least-once-dead-lettering.svg":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/at-least-once-dead-lettering-42376b1538cf6aadc848541304dd7db1.svg\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDIyLTAzLTI5LWF0LWxlYXN0LW9uY2UtZGVhZC1sZXR0ZXJpbmcvYXQtbGVhc3Qtb25jZS1kZWFkLWxldHRlcmluZy5zdmciLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL2Jsb2cvMjAyMi0wMy0yOS1hdC1sZWFzdC1vbmNlLWRlYWQtbGV0dGVyaW5nL2F0LWxlYXN0LW9uY2UtZGVhZC1sZXR0ZXJpbmcuc3ZnPzdmZTIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvYXQtbGVhc3Qtb25jZS1kZWFkLWxldHRlcmluZy00MjM3NmIxNTM4Y2Y2YWFkYzg0ODU0MTMwNGRkN2RiMS5zdmdcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2022-03-29-at-least-once-dead-lettering/at-least-once-dead-lettering.svg\n");

/***/ })

}]);