"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-docs-4-0-federated-queues-0-cf-55f"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-4-0-federated-queues-index-md-0cf.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"federated-queues/index","title":"Federated Queues","description":"<!--","source":"@site/versioned_docs/version-4.0/federated-queues/index.md","sourceDirName":"federated-queues","slug":"/federated-queues/","permalink":"/rabbitmq-website/docs/4.0/federated-queues/","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/versioned_docs/version-4.0/federated-queues/index.md","tags":[],"version":"4.0","frontMatter":{"title":"Federated Queues"},"sidebar":"docsSidebar","previous":{"title":"Federated Exchanges","permalink":"/rabbitmq-website/docs/4.0/federated-exchanges/"},"next":{"title":"Federation Reference","permalink":"/rabbitmq-website/docs/4.0/federation-reference"}}');

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-4.0/federated-queues/federated_queues00.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/federated_queues00-7038497e441a68ba58be726345b569dc.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmVyc2lvbmVkX2RvY3MvdmVyc2lvbi00LjAvZmVkZXJhdGVkLXF1ZXVlcy9mZWRlcmF0ZWRfcXVldWVzMDAucG5nIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi92ZXJzaW9uZWRfZG9jcy92ZXJzaW9uLTQuMC9mZWRlcmF0ZWQtcXVldWVzL2ZlZGVyYXRlZF9xdWV1ZXMwMC5wbmc/Njk1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2ltYWdlcy9mZWRlcmF0ZWRfcXVldWVzMDAtNzAzODQ5N2U0NDFhNjhiYTU4YmU3MjYzNDViNTY5ZGMucG5nXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-4.0/federated-queues/federated_queues00.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-4.0/federated-queues/federated_queues01.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/federated_queues01-892135df5067a26a0f9f85e0c773e629.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmVyc2lvbmVkX2RvY3MvdmVyc2lvbi00LjAvZmVkZXJhdGVkLXF1ZXVlcy9mZWRlcmF0ZWRfcXVldWVzMDEucG5nIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi92ZXJzaW9uZWRfZG9jcy92ZXJzaW9uLTQuMC9mZWRlcmF0ZWQtcXVldWVzL2ZlZGVyYXRlZF9xdWV1ZXMwMS5wbmc/MTcxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2ltYWdlcy9mZWRlcmF0ZWRfcXVldWVzMDEtODkyMTM1ZGY1MDY3YTI2YTBmOWY4NWUwYzc3M2U2MjkucG5nXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-4.0/federated-queues/federated_queues01.png\n");

/***/ }),

/***/ "./versioned_docs/version-4.0/federated-queues/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_4_0_federated_queues_index_md_0cf_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_4_0_federated_queues_index_md_0cf_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-4-0-federated-queues-index-md-0cf.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n/* harmony import */ var _theme_Tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n/* harmony import */ var _theme_TabItem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Federated Queues'\n};\nconst contentTitle = 'Federated Queues';\n\nconst assets = {\n\n};\n\n\n\n\n\nconst toc = [{\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"Use Cases\",\n  \"id\": \"use-cases\",\n  \"level\": 2\n}, {\n  \"value\": \"Limitations\",\n  \"id\": \"limitations\",\n  \"level\": 2\n}, {\n  \"value\": \"Usage and Configuration\",\n  \"id\": \"usage\",\n  \"level\": 2\n}, {\n  \"value\": \"Complex Topologies and Loop Handling\",\n  \"id\": \"loops\",\n  \"level\": 2\n}, {\n  \"value\": \"Implementation\",\n  \"id\": \"details\",\n  \"level\": 2\n}, {\n  \"value\": \"Pitfalls\",\n  \"id\": \"pitfalls\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    img: \"img\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"federated-queues\",\n        children: \"Federated Queues\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This guide covers federated queues, a subset of functionality offered by the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./federation\",\n        children: \"Federation plugin\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Some covered topics include:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"An overview of queue federation\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Common \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#use-cases\",\n          children: \"use cases\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#usage\",\n          children: \"Usage and configuration\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#limitations\",\n          children: \"Limitations\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#pitfalls\",\n          children: \"pitfalls\"\n        }), \" of queue federation\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#details\",\n          children: \"Implementation details\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A separate \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./federation-reference\",\n        children: \"Federation plugin reference\"\n      }), \" guide is available.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In addition to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./federated-exchanges\",\n        children: \"federated exchanges\"\n      }), \", RabbitMQ supports federated queues.\\r\\nThis feature provides a way of balancing the load of a single logical queue\\r\\nacross nodes or clusters. It does so by moving messages to other federation\\r\\npeers (nodes or clusters) when the local queue has no consumers.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"While federated exchanges replicate their stream of messages from the upstream\\r\\nto one or more downstreams, federated queues move data where the consumers are,\\r\\nalways preferring local consumers to remote ones. Federated queues are considered\\r\\nto be equal peers, there is no \\\"leader/follower\\\" relationship between them like with federated exchanges.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A federated queue links to other of its federated peers (called \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"upstream\"\n      }), \" queues).\\r\\nIt will retrieve messages from upstream queues in order to satisfy demand for\\r\\nmessages from local consumers. The upstream queues do not\\r\\nneed to be reconfigured. They are assumed to be located on a separate node or in a separate\\r\\ncluster.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"An upstream definition is a URI with certain recognised query parameters that\\r\\ncontrol link connection parameters. Upstreams can be managed using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: \"CLI tools\"\n      }), \"\\r\\nor the HTTP API with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-federation-management\",\n        children: \"an additional plugin\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The following diagram demonstrates several federated and unfederated\\r\\nqueues in two RabbitMQ nodes connected using queue federation:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"figure\", {\n      className: \"without-borders\",\n      style: {\n        maxWidth: '700px'\n      },\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Overview of federated queues\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-4.0/federated-queues/federated_queues00.png\")[\"default\"]) + \"\",\n          width: \"1553\",\n          height: \"826\"\n        })\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When queue federation is used, usually only a subset of queues in a cluster is federated.\\r\\nSome queues can be inherently local to the \\\"site\\\" (cluster) and its uses.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"use-cases\",\n      children: \"Use Cases\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The typical use would be to have the same \\\"logical\\\" queue\\r\\ndistributed over many brokers. Each broker would declare a federated\\r\\nqueue with all the other federated queues upstream. The links\\r\\nwould form a complete bi-directional graph on the federated peers (nodes or clusters).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Such a logical distributed queue is capable of having rather\\r\\nhigher capacity than a single queue. It will perform best when\\r\\nthere is some degree of locality; i.e. as many messages as\\r\\npossible are consumed from the same queue as they were published\\r\\nto, and the federation mechanism only needs to move messages\\r\\naround in order to perform load balancing.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Brokers running different versions of RabbitMQ can be connected using federation.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"limitations\",\n      children: \"Limitations\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Federated queues include a number of limitations or differences compared to their non-federated peers\\r\\nas well as federated exchanges.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Queue federation will not propagate \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/tutorials/amqp-concepts\",\n        children: \"bindings\"\n      }), \" from the downstream to the upstreams.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Applications that use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n        children: \"basic.get\"\n      }), \" (consume via polling, a highly discouraged practice)\\r\\ncannot retrieve messages over federation if there aren't any in a local queue (on the node the client is connected to).\\r\\nSince \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n        children: \"basic.get\"\n      }), \" is a synchronous method, the node serving a request would have to\\r\\nblock while contacting all the other nodes to retrieve more\\r\\nmessages. This wouldn't sit well with federation's availability and partition tolerance-oriented\\r\\ndesign and use cases.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"usage\",\n      children: \"Usage and Configuration\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Federated queues are declared just like any other queue, by applications.\\r\\nIn order for RabbitMQ to recognize that a queue needs to be federated,\\r\\nand what other nodes messages should be consumed from, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"downstream\"\n      }), \"\\r\\n(consuming) nodes need to be configured.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"figure\", {\n      className: \"without-borders\",\n      style: {\n        maxWidth: '700px'\n      },\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Federated queue policies\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-4.0/federated-queues/federated_queues01.png\")[\"default\"]) + \"\",\n          width: \"1574\",\n          height: \"1023\"\n        })\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Federation configuration uses \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./parameters\",\n        children: \"runtime parameters and policies\"\n      }), \", which means it can be configured\\r\\nand reconfigured on the fly as system topology changes. There are two key pieces of configuration involved:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Upstreams: these are remote endpoints in a federated system\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Federation policies: these control what queues are federated and what upstreams (peers) they will connect to\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Both of those are configured on the downstream nodes or clusters.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To add an upstream, use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl set_parameter\"\n      }), \" command. It accepts three parameters:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Parameter type, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"federation-upstream\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"An upstream name that federation policies will refer to\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"An upstream definition JSON document with at least one mandatory key, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"uri\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The following example configures an upstream named \\\"origin\\\" which can be contacted at \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"remote-host.local:5672\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"# Adds a federation upstream named \\\"origin\\\"\\r\\nrabbitmqctl set_parameter federation-upstream origin '{\\\"uri\\\":\\\"amqp://remote-host.local:5672\\\"}'\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"# Adds a federation upstream named \\\"origin\\\"\\r\\nrabbitmqctl.bat set_parameter federation-upstream origin '\\\"{\\\"\\\"uri\\\"\\\":\\\"\\\"amqp://remote-host.local:5672\\\"\\\"}\\\"'\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Once an upstream has been specified, a policy that controls federation can be added.\\r\\nIt is added just like any other \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./policies\",\n        children: \"policy\"\n      }), \", using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl set_policy\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"# Adds a policy named \\\"queue-federation\\\"\\r\\nrabbitmqctl set_policy queue-federation \\\"^federated\\\\.\\\" \\\\\\r\\n    '{\\\"federation-upstream-set\\\":\\\"all\\\"}' \\\\\\r\\n    --priority 10 \\\\\\r\\n    --apply-to queues\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"# Adds a policy named \\\"queue-federation\\\"\\r\\nrabbitmqctl.bat set_policy queue-federation '^federated\\\\.' `\\r\\n    '\\\"{\\\"\\\"federation-upstream-set\\\"\\\":\\\"\\\"all\\\"\\\"}\\\"' `\\r\\n    --priority 10 `\\r\\n    --apply-to queues\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In the example above, the policy will match queues whose name begins with a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"federated.\"\n      }), \" prefix\\r\\nin the default virtual host. Those queues will set up federation links for all declared upstreams.\\r\\nThe name of the policy is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"queue-federation\"\n      }), \". As with any policy, if multiple policies match a queue,\\r\\nthe one with the highest priority will be used. Multiple policy definitions will not be combined, even if their\\r\\npriorities are equal.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Once configured, a federation link (connection) will be opened for every matching queue and upstream pair.\\r\\nBy \\\"matching queue\\\" here we mean a queue that is matched by the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./policies\",\n        children: \"federation policy pattern\"\n      }), \".\\r\\nIf no queues matched, no links will be started.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To deactivate federation for the matching queues, delete the policy using its name:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl clear_policy queue-federation\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"loops\",\n      children: \"Complex Topologies and Loop Handling\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A federated queue can be \\\"upstream\\\"\\r\\nfrom another federated queue. One can even form \\\"loops\\\", for\\r\\nexample, queue A declares queue B to be upstream from it, and\\r\\nqueue B declares queue A to be upstream from it. More complex\\r\\nmultiple-connected arrangements are allowed. Such complex topologies\\r\\nwill be increasingly difficult to reason about and troubleshoot, however.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Unlike federated exchanges, queue federation does not replicate data and\\r\\ndoes not handle loops explicitly. There is no limit to how\\r\\nmany times a message can be forwarded between federated queues.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In a set of mutually-federated queues, messages will move to where\\r\\nthe spare consuming capacity is so if the spare consuming\\r\\ncapacity keeps moving around then so will the messages. Since messages are moved to remote nodes\\r\\nonly when there are no local consumers, it is rare for a message to be moved\\r\\nacross all nodes and \\\"wrap around\\\".\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"details\",\n      children: \"Implementation\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The federated queue will connect to all its upstream queues\\r\\nusing AMQP 0-9-1 (optionally \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl\",\n        children: \"secured with TLS\"\n      }), \").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The federated queue will only retrieve messages when it has run\\r\\nout of messages locally, it has consumers that need messages, and\\r\\nthe upstream queue has \\\"spare\\\" messages that are not being\\r\\nconsumed. The intent is to ensure that messages are only\\r\\ntransferred between federated queues when needed. This is\\r\\nimplemented using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./consumer-priority\",\n        children: \"consumer priorities\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If messages are forwarded from one queue to another then message\\r\\nordering is only preserved for messages which have made exactly\\r\\nthe same journey between nodes. In some cases messages which were\\r\\nadjacent when published may take different routes to the same node\\r\\nto be consumed; therefore messages can be reordered in the\\r\\npresence of queue federation.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Each individual queue applies its arguments separately;\\r\\nfor example if you set \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-max-length\"\n      }), \" on a federated\\r\\nqueue then that queue will have its length limited (possibly\\r\\ndiscarding messages when it gets full) but other queues that are\\r\\nfederated with it will not be affected. Note in particular that\\r\\nwhen \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ttl\",\n        children: \"per-queue or per-message TTL\"\n      }), \" is in\\r\\nuse, a message will have its timer reset when it is transferred to\\r\\nanother queue.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"pitfalls\",\n      children: \"Pitfalls\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Federated queues cannot currently cause messages to\\r\\ntraverse multiple hops between brokers based solely on need for\\r\\nmessages in one place. For example, if you federate queues on\\r\\nnodes A, B and C, with A and B connected and B and C connected,\\r\\nbut not A and C, then if messages are available at A and consumers\\r\\nwaiting at C then messages will not be transferred from A to C via\\r\\nB unless there is also a consumer at B.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is possible to bind a federated queue to a federated\\r\\nexchange. However, the results may be unexpected to some.\\r\\nSince a federated exchange will retrieve messages from its\\r\\nupstream that match its bindings, any message published to a\\r\\nfederated exchange will be copied to any nodes that matching\\r\\nbindings. A federated queue will then move these messages\\r\\naround between nodes, and it is therefore possible to end up\\r\\nwith multiple copies of the same message on the same node.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./versioned_docs/version-4.0/federated-queues/index.md\n");

/***/ })

}]);