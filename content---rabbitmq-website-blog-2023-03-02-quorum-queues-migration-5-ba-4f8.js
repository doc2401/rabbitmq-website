"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-blog-2023-03-02-quorum-queues-migration-5-ba-4f8"],{

/***/ "./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2023-03-02-quorum-queues-migration-index-md-5ba.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"permalink":"/rabbitmq-website/blog/2023/03/02/quorum-queues-migration","editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/blog/2023-03-02-quorum-queues-migration/index.md","source":"@site/blog/2023-03-02-quorum-queues-migration/index.md","title":"Migrating from Mirrored Classic Queues to Quorum Queues","description":"Quorum Queues are a superior replacement for Classic Mirrored Queues","date":"2023-03-02T00:00:00.000Z","tags":[{"inline":true,"label":"HowTo","permalink":"/rabbitmq-website/blog/tags/how-to"}],"readingTime":13.9,"hasTruncateMarker":true,"authors":[{"name":"Alexey Lebedeff","url":"https://github.com/binarin","imageURL":"https://github.com/binarin.png","key":"alebedeff","page":null}],"frontMatter":{"title":"Migrating from Mirrored Classic Queues to Quorum Queues","tags":["HowTo"],"authors":["alebedeff"]},"unlisted":false,"prevItem":{"title":"Serving Millions of Clients with Native MQTT","permalink":"/rabbitmq-website/blog/2023/03/21/native-mqtt"},"nextItem":{"title":"High Initial Memory Consumption of RabbitMQ Nodes on Centos Stream 9","permalink":"/rabbitmq-website/blog/2022/08/30/high-initial-memory-consumption-of-rabbitmq-nodes-on-centos-stream-9"}}');

/***/ }),

/***/ "./blog/2023-03-02-quorum-queues-migration/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2023_03_02_quorum_queues_migration_index_md_5ba_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2023_03_02_quorum_queues_migration_index_md_5ba_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2023-03-02-quorum-queues-migration-index-md-5ba.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Migrating from Mirrored Classic Queues to Quorum Queues',\n\ttags: [\n\t\t'HowTo'\n\t],\n\tauthors: [\n\t\t'alebedeff'\n\t]\n};\nconst contentTitle = undefined;\n\nconst assets = {\n\"authorsImageUrls\": [undefined],\n};\n\n\n\nconst toc = [{\n  \"value\": \"Performance improvements\",\n  \"id\": \"performance-improvements\",\n  \"level\": 2\n}, {\n  \"value\": \"Compatibility considerations\",\n  \"id\": \"compatibility-considerations\",\n  \"level\": 2\n}, {\n  \"value\": \"General requirements\",\n  \"id\": \"general-requirements\",\n  \"level\": 2\n}, {\n  \"value\": \"Finding the queues and features being used\",\n  \"id\": \"finding-the-queues-and-features-being-used\",\n  \"level\": 2\n}, {\n  \"value\": \"Breaking changes\",\n  \"id\": \"breaking-changes\",\n  \"level\": 2\n}, {\n  \"value\": \"Priority queues\",\n  \"id\": \"priority-queues\",\n  \"level\": 3\n}, {\n  \"value\": \"Overflow dead lettering\",\n  \"id\": \"overflow-dead-lettering\",\n  \"level\": 3\n}, {\n  \"value\": \"Global QoS for consumers\",\n  \"id\": \"global-qos-for-consumers\",\n  \"level\": 3\n}, {\n  \"value\": \"<code>x-cancel-on-ha-failover</code> for consumers\",\n  \"id\": \"x-cancel-on-ha-failover-for-consumers\",\n  \"level\": 3\n}, {\n  \"value\": \"Trivial changes\",\n  \"id\": \"trivial-changes\",\n  \"level\": 2\n}, {\n  \"value\": \"Lazy queues\",\n  \"id\": \"lazy-queues\",\n  \"level\": 3\n}, {\n  \"value\": \"Non-durable queues\",\n  \"id\": \"non-durable-queues\",\n  \"level\": 3\n}, {\n  \"value\": \"Exclusive queues\",\n  \"id\": \"exclusive-queues\",\n  \"level\": 3\n}, {\n  \"value\": \"Migrate the Queues One Virtual Host at a Time\",\n  \"id\": \"new-vhost-migration\",\n  \"level\": 2\n}, {\n  \"value\": \"Create destination virtual host\",\n  \"id\": \"create-destination-virtual-host\",\n  \"level\": 3\n}, {\n  \"value\": \"Create federation upstream\",\n  \"id\": \"create-federation-upstream\",\n  \"level\": 3\n}, {\n  \"value\": \"Moving definitions\",\n  \"id\": \"moving-definitions\",\n  \"level\": 3\n}, {\n  \"value\": \"Point consumers to the new vhost\",\n  \"id\": \"point-consumers-to-the-new-vhost\",\n  \"level\": 3\n}, {\n  \"value\": \"Point producers to the new vhost\",\n  \"id\": \"point-producers-to-the-new-vhost\",\n  \"level\": 3\n}, {\n  \"value\": \"Shovel remaining messages to the new vhost\",\n  \"id\": \"shovel-remaining-messages-to-the-new-vhost\",\n  \"level\": 3\n}, {\n  \"value\": \"Ensure future queue declarations succeed\",\n  \"id\": \"ensure-future-queue-declarations-succeed\",\n  \"level\": 3\n}, {\n  \"value\": \"Migrate in place\",\n  \"id\": \"in-place-migration\",\n  \"level\": 2\n}, {\n  \"value\": \"Preparing producers and consumers\",\n  \"id\": \"preparing-producers-and-consumers\",\n  \"level\": 3\n}, {\n  \"value\": \"Migration steps\",\n  \"id\": \"migration-steps\",\n  \"level\": 3\n}, {\n  \"value\": \"Conclusion\",\n  \"id\": \"conclusion\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    figcaption: \"figcaption\",\n    figure: \"figure\",\n    h2: \"h2\",\n    h3: \"h3\",\n    img: \"img\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Quorum Queues are a superior replacement for Classic Mirrored Queues\\r\\nthat were introduced in RabbitMQ version 3.8. And there are two\\r\\ncomplementary reasons why you would need to migrate.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"First of all, Classic Mirrored Queues were deprecated in 3.9, with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2021/08/21/4.0-deprecation-announcements\",\n        children: \"a\\r\\nformal announcement posted on August 21, 2021\"\n      }), \". They will be removed\\r\\nentirely in 4.0\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"But also they are more reliable and predictable, faster for most\\r\\nworkloads and require less maintenance - so you shouldn't feel that\\r\\nyour hand is being forced without no apparent reason.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Quorum Queues are better in all regards, but they are not\\r\\n100%-compatible feature-wise with Mirrored Queues. Thus the migration\\r\\ncan look like a daunting task.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"After a sneak peek into the future performance improvements, this post outlines a few possible migration strategies and includes guidance on how to deal with incompatible features.\\r\\nThe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/3.13/migrate-mcq-to-qq\",\n        children: \"Migrate your RabbitMQ Mirrored Classic Queues to Quorum Queues documentation\"\n      }), \" is also available to help you through the migration process.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"performance-improvements\",\n      children: \"Performance improvements\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2022/05/16/rabbitmq-3.10-performance-improvements\",\n        children: \"RabbitMQ 3.10 Performance\\r\\nImprovements\"\n      }), \"\\r\\nblog post, performance benefits of Quorum Queues were already discussed in some detail.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"And on the following graph you can see what new levels of performance\\r\\none can expect from yet-to-be-released RabbitMQ 3.12:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.figure, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Quorum Queues vs Mirrored Queues Performance Showcase\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-03-02-quorum-queues-migration/qq-migration-3.12-perf-improvements.png\")[\"default\"]) + \"\",\n          width: \"720\",\n          height: \"538\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.figcaption, {\n          children: \"Quorum Queues vs Mirrored Queues Performance Showcase\"\n        })]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This graph shows throughput under different workloads, using 1kB messages.\\r\\nHigher is better, although in some tests the maximum throughput is capped (in such tests we look at the latency and/or whether the throughput is stable).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The colors are as follows:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"orange - quorum queues\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"green - mirrored classic queues v1 (non-lazy)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"yellow - mirrored classic queues v1 (lazy)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"blue - mirrored classic queues v2\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Without digging into too much detail, we can see that quorum queues\\r\\noffer a significantly higher throughput in almost all cases. For\\r\\nexample, the first test is a single queue, single publisher, single\\r\\nconsumer test. A quorum queue can sustain a 30000 msg/s throughput\\r\\n(again, using 1kb messages), while offering high levels of data safety\\r\\nand replicating data to all 3 nodes in the cluster. Meanwhile, classic\\r\\nmirrored queues offer only a third of that throughput, yet providing\\r\\nway lower data safety guarantees. In some tests we can see quorum\\r\\nqueues (orange line) completely flat, meaning they can sustain the\\r\\nworkload and still have some capacity left (otherwise they performance\\r\\nwould start fluctuating), while mirrored queues offer lower and less\\r\\nstable throughput.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The astute reader can notice that in the second test quorum\\r\\nqueues initially provide very high publisher throughput but quickly\\r\\ndegrade. This is something we are working on right now and we hope\\r\\nto improve very soon. This is only a corner case when there are no\\r\\nconsumers, and the queue quickly becomes very long (millions of\\r\\nmessages).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"compatibility-considerations\",\n      children: \"Compatibility considerations\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The RabbitMQ documentation has a dedicated page on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/quorum-queues\",\n        children: \"Quorum Queues\"\n      }), \".\\r\\nSpecifically in this document there is a\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/quorum-queues#feature-matrix\",\n        children: \"feature matrix\"\n      }), \" which provides a\\r\\nlist with all differences between Mirrored Classic Queues and Mirrored\\r\\nQueues. These differences can require a different amount of work for a\\r\\nsuccessful migration. Some of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#trivial-changes\",\n        children: \"them\"\n      }), \" can be trivial\\r\\nto change, while \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#breaking-changes\",\n        children: \"others\"\n      }), \" can require changes in\\r\\nthe way an application interacts with RabbitMQ. All of them are\\r\\nthoroughly documented further.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"And it goes without saying that migrated applications should be\\r\\nthoroughly tested against quorum queues, as behaviour can be somewhat\\r\\ndifferent under the load and in edge cases.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"There are 2 migration strategies described in this post:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#new-vhost-migration\",\n          children: \"First one\"\n        }), \" involves creating a new vhost, and\\r\\nmigrating with minimal loss of uptime with the help of\\r\\nfederation. If all incompatible features are cleaned up or moved to\\r\\npolicies, this is also the happy path migration - the existing code\\r\\nwill be able to work both with mirrored and quorum queues by only changing\\r\\nconnection parameters.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#in-place-migration\",\n          children: \"Another one\"\n        }), \" trades uptime for re-using the\\r\\nsame virtual host, and requires the ability to stop all the\\r\\nconsumers and producers for a given queue.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"general-requirements\",\n      children: \"General requirements\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"There should be at least 3 nodes in the cluster - there is no sense\\r\\nin using quorum queues with a smaller amount of replicas.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Management plugin should be running on at least one node - it's\\r\\nbeing used for exporting/importing definitions for a single host,\\r\\nwhich can greatly simplify definitions cleanup. (And\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbitmqadmin\"\n        }), \" CLI command is also using the plugin behind the\\r\\nscenes).\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Shovel plugin should be enabled.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"finding-the-queues-and-features-being-used\",\n      children: \"Finding the queues and features being used\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"All mirrored classic queues have \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-mode\"\n      }), \" in their effective policy\\r\\ndefinition. The policies that apply it can be found via the following script:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"#!/bin/sh\\r\\nprintf \\\"%s\\\\t%s\\\\t%s\\\\t%s\\\\t%s\\\\t%s\\\\n\\\" vhost policy_name pattern apply_to definition priority\\r\\nfor vhost in $(rabbitmqctl -q list_vhosts | tail -n +2) ; do\\r\\n  rabbitmqctl -q list_policies -p \\\"$vhost\\\" |\\r\\n    grep 'ha-mode'\\r\\ndone\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"But it can be easier to just list the queues that are actually\\r\\nmirrored on the running system. That way there is no need to guess\\r\\nwhether HA-policies are actually applied:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"#!/bin/sh\\r\\nprintf \\\"%s\\\\t%s\\\\t%s\\\\n\\\" vhost queue_name mirrors\\r\\nfor vhost in $(rabbitmqctl -q list_vhosts | tail -n +2) ; do\\r\\n  rabbitmqctl -q list_queues -p \\\"$vhost\\\" name durable policy effective_policy_definition arguments mirror_pids type |\\r\\n\\tsed -n '/\\\\t\\\\[[^\\\\t]\\\\+\\\\tclassic$/{s/\\\\t\\\\[[^\\\\t]\\\\+\\\\tclassic$//; p}' |\\r\\n\\txargs -x -r -L1 -d '\\\\n' printf \\\"%s\\\\t%s\\\\n\\\" \\\"$vhost\\\"\\r\\ndone\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that the above command uses \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"effective_policy_definition\"\n      }), \" argument,\\r\\nwhich is only available since 3.10.13/3.11.5. If it's not available,\\r\\nit's possible to either use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl\"\n      }), \" from a fresh version of\\r\\nRabbitMQ, or manually match policy name to its definition.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"breaking-changes\",\n      children: \"Breaking changes\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When one or more of the following features are being used,\\r\\nstraightforward migration to quorum queues is not possible. The way\\r\\nthat application interacts with a broker needs to be changed.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This section outlines how to find whether some of these features are\\r\\nbeing used in a running system, and what changes need to be made for\\r\\neasier migration.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"priority-queues\",\n      children: \"Priority queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Classic mirrored queues actually create a separate queue for every\\r\\npriority behind the scenes. For migration it’s necessary for the\\r\\napplications to explicitly handle creation of those queues, and also\\r\\npublishing/consuming to and from them.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This feature can be detected by the presence of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-max-priority\"\n      }), \" in\\r\\nthe queue list output from above. The same exact string can be\\r\\nsearched for in the source code. Priority queues can’t be created via\\r\\npolicy, so no policy changes are involved.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"overflow-dead-lettering\",\n      children: \"Overflow dead lettering\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Overflow mode\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/maxlength#overflow-behaviour\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"reject-publish-dlx\"\n        })\n      }), \" is not\\r\\nsupported by quorum queues. The code needs to be updated to use\\r\\npublisher confirms and to do dead lettering by itself.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This feature can be detected by the presence of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"reject-publish-dlx\"\n      }), \"\\r\\nin the queue list output from above. The same exact string can be\\r\\nsearched for in the source code.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"global-qos-for-consumers\",\n      children: \"Global QoS for consumers\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/quorum-queues#global-qos\",\n        children: \"Global QoS for\\r\\nconsumers\"\n      }), \" is not\\r\\nsupported for quorum queues. A decision needs to be made about how\\r\\nnecessary results can be achieved using alternative means, e.g. by\\r\\nusing a lower per-consumer QoS that can give approximately the same\\r\\nresults (given the known application load pattern).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To detect whether this feature is used, the following command can be\\r\\nexecuted agains a running system and checked for a non-empty output:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl list_channels pid name global_prefetch_count | sed -n '/\\\\t0$/!p'\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It will give a list of channel PIDs that have global QoS enabled,\\r\\nwhich then can be mapped to a queue name and checked for being a\\r\\nmirrored queue:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl list_consumers queue_name channel_pid\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.h3, {\n      id: \"x-cancel-on-ha-failover-for-consumers\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-cancel-on-ha-failover\"\n      }), \" for consumers\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Mirrored queues consumers can be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/3.13/ha#cancellation\",\n        children: \"automatically\\r\\ncancelled\"\n      }), \" when a queue\\r\\nleader fails over. This can cause a loss of information about which\\r\\nmessages were sent to which consumer, and redelivery of such messages.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Quorum queues are less exposed to such behaviour - the only case when\\r\\nit still can happen is when a whole node goes down. For other leader\\r\\nchanges (e.g. caused by rebalancing), there will be no redeliveries.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"And redeliveries can also happen for inflight messages when the\\r\\nconsumer is cancelled or the channel is closed. So application needs\\r\\nto be prepared for redeliveries anyway, without specifically asking\\r\\nfor such information.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"trivial-changes\",\n      children: \"Trivial changes\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"These features don't do anything when quorum queues are being\\r\\nused. The best way to handle them is to remove them from the source\\r\\ncode completely, or move them to a policy instead.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"lazy-queues\",\n      children: \"Lazy queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Classic queue can optionally operate in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/lazy-queues\",\n        children: \"lazy\\r\\nmode\"\n      }), \", but for quorum\\r\\nqueues this is the only way of operation. The best way to handle this\\r\\nfor migration is to move \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-queue-mode\"\n      }), \" from source code to a policy.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"non-durable-queues\",\n      children: \"Non-durable queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Non-durable queues will be deleted on a node/cluster boot. Having\\r\\nextra durability guarantees that mirroring provides is a bit\\r\\npointless.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Non-durable queues concept is also going away in the future releases:\\r\\nthe only option for ephemeral queues will be exclusive queues. This\\r\\naffects only durability of queue definitions, messages can still be marked\\r\\ntransient.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For such queues a decision have to be made one way or another: is this\\r\\nqueue content important enough to get availability guarantees of\\r\\nquorum queues, or it's better to downgrade it to a classic (but\\r\\ndurable) queue.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"exclusive-queues\",\n      children: \"Exclusive queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Exclusive queues are not mirrored even if the policy says so. But\\r\\nattempt to declare an exclusive quorum queue will result in an\\r\\nerror. This is clearly one of the cases where migration is not needed,\\r\\nbut care must be taken as to avoid exclusive queue declarations with\\r\\nan explicit \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-queue-type: quorum\"\n      }), \" argument.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"new-vhost-migration\",\n      children: \"Migrate the Queues One Virtual Host at a Time\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The procedure to migrate from classic mirrored queues to quorum queues\\r\\nis similar to a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/blue-green-upgrade\",\n        children: \"blue-green cluster upgrade\"\n      }), \",\\r\\nexcept that migration can happen to a new virtual host on the same\\r\\nRabbitMQ cluster. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/federation\",\n        children: \"Federation Plugin\"\n      }), \" is then being\\r\\nused to seamlessly migrate from the old to the new one.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"One important aspect of this migration path is that it's possible to\\r\\nspecify the default queue type for a new virtual host. Setting it to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"quorum\"\n      }), \" makes all the queues without explicit type created as\\r\\nquorum queues (except for exclusive, non-durable or auto-delete queues).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If all incompatible features were cleaned up from the source code (and\\r\\nthere is no explicit \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-queue-type\"\n      }), \" arguments in the source code), then\\r\\nit'll be possible to use exactly the same code to work both to the old\\r\\nvirtual host with classical mirrored queues, and with a new virtual\\r\\nhost with quorum queues - only the virtual host in the connection\\r\\nparameters needs to be changed.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"create-destination-virtual-host\",\n      children: \"Create destination virtual host\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Special attention needs to be paid that the new virtual host is\\r\\ncreated with proper default queue type. It should be selected from the\\r\\nqueue type dropdown when new virtual host is being added via\\r\\nmanagement UI. It can also be created using CLI interface, specifying\\r\\nthe default queue type, and adding some permissions:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl add_vhost NEW_VHOST --default-queue-type quorum\\r\\nrabbitmqctl set_permissions -p NEW_VHOST USERNAME '.*' '.*' '.*'\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"create-federation-upstream\",\n      children: \"Create federation upstream\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A new federation upstream should be created for the NEW_VHOST, with\\r\\nURI pointing to the OLD_VHOST: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"amqp:///OLD_VHOST\"\n      }), \". (Note that\\r\\ndefault vhost URI is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"amqp:///%2f\"\n      }), \").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The upstream can be created via management UI, or via CLI:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl set_parameter federation-upstream quorum-migration-upstream \\\\\\r\\n    --vhost NEW_VHOST \\\\\\r\\n    '{\\\"uri\\\":\\\"amqp:///OLD_VHOST\\\", \\\"trust-user-id\\\":true}'\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When this form of URI, with an empty hostname is used, there is no\\r\\nneed to specify credentials, but connection is only possible within\\r\\nbounds of a single cluster.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"user-id\"\n      }), \" in messages is being used for any purpose, it can also be\\r\\npreserved as shown in the CLI example above.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"moving-definitions\",\n      children: \"Moving definitions\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Export definitions of the source virtual host to a file. This is\\r\\navailable on the \\\"Overview\\\" page of the management UI (don't forget to\\r\\nselect a single virtual host). Or use the following CLI command:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqadmin export -V OLD_VHOST OLD_VHOST.json\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The following changes needs to be made to this file before loading it back into a NEW_VHOST:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Remove \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-queue-type\"\n        }), \" declarations for queues that you want to have\\r\\nas classic ones in the old virtual host, and as quorum ones in the\\r\\nnew virtual host.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Other changes that need to be applied to queue definitions:\", \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [\"Remove \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"x-max-priority\"\n            }), \" argument\"]\n          }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [\"Change \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"x-overlow\"\n            }), \" argument when it is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"reject-publish-dlx\"\n            })]\n          }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [\"Remove \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"x-queue-mode\"\n            }), \" argument\"]\n          }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [\"Change \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"durable\"\n            }), \" attribute to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"true\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Change the following keys in policies:\", \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [\"Remove everything starting with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"ha-\"\n            }), \": \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"ha-mode\"\n            }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"ha-params\"\n            }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"ha-sync-mode\"\n            }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"ha-sync-batch-size\"\n            }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"ha-promote-on-shutdown\"\n            }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"ha-promote-on-failure\"\n            })]\n          }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [\"Remove \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"queue-mode\"\n            })]\n          }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n            children: [\"Change \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"overflow\"\n            }), \" when it is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"reject-publish-dlx\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Policies that ended empty after the previous step should be dropped.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Federation with the old vhost should be added to any remaining\\r\\npolicies, pointing to the federation upstream created earlier:\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"\\\"federation-upstream-set\\\":\\\"quorum-migration-upstream\\\"\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"If there is no catch-all policy (applying to queues with pattern\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \".*\"\n        }), \"), it needs to be created and also point to the federation\\r\\nupstream. This ensures that every queue in the old vhost will be\\r\\nfederated.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Policies that apply federation rules to exchanges need to be\\r\\nremoved for the period of the migration, to avoid duplicate\\r\\nmessages.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Now the modified schema can be loaded into the new virtual host from\\r\\nUI or using CLI tools:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# Import definitions for a single virtual host using rabbitmqadmin.\\r\\n# See https://www.rabbitmq.com/docs/definitions to learn more.\\r\\nrabbitmqadmin import -V NEW_VHOST NEW_VHOST.json\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"point-consumers-to-the-new-vhost\",\n      children: \"Point consumers to the new vhost\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"At this point it should be possible to point consumers to the new\\r\\nvirtual host by only updating the connection parameters.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"point-producers-to-the-new-vhost\",\n      children: \"Point producers to the new vhost\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Producers can now be also pointed to the new virtual host.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The time when consumers are stopped is also the time where federated\\r\\nexchanges should be disabled in the old vhost, and enabled in the new\\r\\none.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Under sufficient system load messages from the old virtual host will\\r\\nnot be picked up. If message ordering is important, than this should\\r\\nbe done in steps: stop producers, shovel remaining messages to the new\\r\\nvirtual host, start consumers on the new virtual host.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"shovel-remaining-messages-to-the-new-vhost\",\n      children: \"Shovel remaining messages to the new vhost\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For every non-empty queue in the old host a shovel needs to be configured:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl set_parameter shovel migrate-QUEUE_TO_MIGRATE \\\\\\r\\n  '{\\\"src-protocol\\\": \\\"amqp091\\\", \\\"src-uri\\\": \\\"amqp:///OLD_VHOST\\\", \\\"src-queue\\\": \\\"QUEUE_TO_MIGRATE\\\",\\r\\n    \\\"dest-protocol\\\": \\\"amqp091\\\", \\\"dest-uri\\\": \\\"amqp:///NEW_VHOST\\\", \\\"dest-queue\\\": \\\"QUEUE_TO_MIGRATE\\\"}'\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"After the queue has been drained, the shovel can be deleted:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl clear_parameter shovel migrate-QUEUE_TO_MIGRATE\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"ensure-future-queue-declarations-succeed\",\n      children: \"Ensure future queue declarations succeed\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Many applications declare queues before they use them, in multiple places. When it comes to\\r\\nmigrating away from classic mirrored queues, this presents a channel: if clients declare queues\\r\\nwithout explicitly providing a queue type, after the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#moving-definitions\",\n        children: \"Moving Definitions\"\n      }), \"\\r\\nstep, all future declaration attempts would hit a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"PRECONDITION_FAILURE\"\n      }), \" channel error\\r\\nwhen an existing queue is re-declared.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To avoid this scenario, there are three options:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Add the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-queue-type\"\n        }), \" declarations back to all clients using quorum queues.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"set the default queue type node-wide using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"default_queue_type\"\n        }), \", a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbitmq.conf\"\n        }), \"\\r\\nsetting that is available \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.a, {\n          href: \"https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.13.3\",\n          children: [\"in RabbitMQ \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"3.13.3\"\n          })]\n        }), \"\\r\\nand later versions\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Set \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"quorum_queue.property_equivalence.relaxed_checks_on_redeclaration = true\"\n        }), \", a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbitmq.conf\"\n        }), \"\\r\\nsetting available since \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.a, {\n          href: \"https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.11.16\",\n          children: [\"RabbitMQ \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"3.11.16\"\n          })]\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The third option, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"quorum_queue.property_equivalence.relaxed_checks_on_redeclaration\"\n      }), \" set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \",\\r\\ncan be adopted at any time during the migration process.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"in-place-migration\",\n      children: \"Migrate in place\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In this version of the process, we trade uptime for the ability to\\r\\nperform the migration in an existing virtual host and cluster.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For each queue (or some group of queues) being migrated, it should be\\r\\npossible to stop all the consumers and producers for the time of the\\r\\nmigration.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"preparing-producers-and-consumers\",\n      children: \"Preparing producers and consumers\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"All incompatible features should be cleaned up. In addition to that,\\r\\nin every place where queues are being declared, it'd be nice to make\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-queue-type\"\n      }), \" argument configurable without changing application code.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"migration-steps\",\n      children: \"Migration steps\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"First, the consumers and producers will need to be stopped.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The messages should be shoveled to a new, temporary queue.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The old queue should be deleted.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"A new quorum queue with the same name as the original queue should be created.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The contents of the temporary queue should now be shoveled over to the new quorum queue.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The consumers can now be reconfigured to use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-queue-type\"\n        }), \" of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"quorum\"\n        }), \" and started.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"conclusion\",\n      children: \"Conclusion\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Hopefully this blog post has shown that with a proper preparation the\\r\\nmigration can be fruitful and a relatively simple endeavour.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The migration has a lot of benefits. But one should also keep in mind\\r\\nthat Classic Mirrored Queues have been deprecated for more than a year\\r\\nand are going to be removed entirely in an upcoming release. So even\\r\\nif you don't plan to do the migration right now, doing these\\r\\npreparations beforehand can be a good idea.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"And we've tried to provide you the comprehesive guide for this\\r\\npurpose. Maybe it's time to do something now?\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./blog/2023-03-02-quorum-queues-migration/index.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-03-02-quorum-queues-migration/qq-migration-3.12-perf-improvements.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/qq-migration-3.12-perf-improvements-87c0bedcb730e17c8d59b87f43b902c9.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmxvZy8yMDIzLTAzLTAyLXF1b3J1bS1xdWV1ZXMtbWlncmF0aW9uL3FxLW1pZ3JhdGlvbi0zLjEyLXBlcmYtaW1wcm92ZW1lbnRzLnBuZyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWJiaXRtcS13ZWJzaXRlLy4vYmxvZy8yMDIzLTAzLTAyLXF1b3J1bS1xdWV1ZXMtbWlncmF0aW9uL3FxLW1pZ3JhdGlvbi0zLjEyLXBlcmYtaW1wcm92ZW1lbnRzLnBuZz9mNzJiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvaW1hZ2VzL3FxLW1pZ3JhdGlvbi0zLjEyLXBlcmYtaW1wcm92ZW1lbnRzLTg3YzBiZWRjYjczMGUxN2M4ZDU5Yjg3ZjQzYjkwMmM5LnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./blog/2023-03-02-quorum-queues-migration/qq-migration-3.12-perf-improvements.png\n");

/***/ })

}]);