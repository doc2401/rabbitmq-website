"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-docs-next-mqtt-0-c-5-79c"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/default/site-docs-mqtt-md-0c5.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"mqtt","title":"MQTT Plugin","description":"<!--","source":"@site/docs/mqtt.md","sourceDirName":".","slug":"/mqtt","permalink":"/rabbitmq-website/docs/next/mqtt","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/docs/mqtt.md","tags":[],"version":"current","frontMatter":{"title":"MQTT Plugin"},"sidebar":"docsSidebar","previous":{"title":"Web STOMP Plugin","permalink":"/rabbitmq-website/docs/next/web-stomp"},"next":{"title":"Web MQTT Plugin","permalink":"/rabbitmq-website/docs/next/web-mqtt"}}');

/***/ }),

/***/ "./docs/mqtt.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_default_site_docs_mqtt_md_0c5_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_default_site_docs_mqtt_md_0c5_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/default/site-docs-mqtt-md-0c5.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n/* harmony import */ var _theme_Tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n/* harmony import */ var _theme_TabItem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'MQTT Plugin'\n};\nconst contentTitle = 'MQTT Plugin';\n\nconst assets = {\n\n};\n\n\n\n\n\nconst toc = [{\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"Enabling the Plugin\",\n  \"id\": \"enabling-plugin\",\n  \"level\": 2\n}, {\n  \"value\": \"Supported MQTT features\",\n  \"id\": \"features\",\n  \"level\": 2\n}, {\n  \"value\": \"How the MQTT plugin works\",\n  \"id\": \"implementation\",\n  \"level\": 2\n}, {\n  \"value\": \"Mapping MQTT to the AMQP 0.9.1 model\",\n  \"id\": \"mapping-mqtt-to-the-amqp-091-model\",\n  \"level\": 3\n}, {\n  \"value\": \"Queue Types\",\n  \"id\": \"queue-types\",\n  \"level\": 3\n}, {\n  \"value\": \"Queue Properties and Arguments\",\n  \"id\": \"queue-properties-and-arguments\",\n  \"level\": 3\n}, {\n  \"value\": \"Topic level separator and wildcards\",\n  \"id\": \"topic-level-separator-and-wildcards\",\n  \"level\": 3\n}, {\n  \"value\": \"Using Quorum Queues\",\n  \"id\": \"quorum-queues\",\n  \"level\": 2\n}, {\n  \"value\": \"MQTT QoS 0 queue type\",\n  \"id\": \"qos0-queue-type\",\n  \"level\": 2\n}, {\n  \"value\": \"Overload protection\",\n  \"id\": \"overload-protection\",\n  \"level\": 3\n}, {\n  \"value\": \"Users and Authentication\",\n  \"id\": \"authentication\",\n  \"level\": 2\n}, {\n  \"value\": \"Local vs. Remote Client Connections\",\n  \"id\": \"local-vs-remote\",\n  \"level\": 3\n}, {\n  \"value\": \"Anonymous Connections\",\n  \"id\": \"anonymous-connections\",\n  \"level\": 3\n}, {\n  \"value\": \"Plugin Configuration\",\n  \"id\": \"config\",\n  \"level\": 2\n}, {\n  \"value\": \"TCP Listeners\",\n  \"id\": \"tcp-listeners\",\n  \"level\": 3\n}, {\n  \"value\": \"TCP Listener Options\",\n  \"id\": \"listener-opts\",\n  \"level\": 3\n}, {\n  \"value\": \"TLS Support\",\n  \"id\": \"tls\",\n  \"level\": 3\n}, {\n  \"value\": \"Virtual Hosts\",\n  \"id\": \"virtual-hosts\",\n  \"level\": 3\n}, {\n  \"value\": \"Port to Virtual Host Mapping\",\n  \"id\": \"port-to-virtual-host-mapping\",\n  \"level\": 4\n}, {\n  \"value\": \"Virtual Host as Part of Username\",\n  \"id\": \"virtual-host-as-part-of-username\",\n  \"level\": 4\n}, {\n  \"value\": \"Authentication with TLS/x509 client certificates\",\n  \"id\": \"tls-certificate-authentication\",\n  \"level\": 3\n}, {\n  \"value\": \"Usage of client_id Extraction from Client Certificates for Authentication\",\n  \"id\": \"usage-of-client_id-extraction-from-client-certificates-for-authentication\",\n  \"level\": 4\n}, {\n  \"value\": \"Flow Control\",\n  \"id\": \"flow\",\n  \"level\": 3\n}, {\n  \"value\": \"Custom Exchanges\",\n  \"id\": \"custom-exchanges\",\n  \"level\": 2\n}, {\n  \"value\": \"Retained Messages and Stores\",\n  \"id\": \"retained\",\n  \"level\": 2\n}, {\n  \"value\": \"Metrics\",\n  \"id\": \"metrics\",\n  \"level\": 2\n}, {\n  \"value\": \"Prometheus\",\n  \"id\": \"prometheus\",\n  \"level\": 3\n}, {\n  \"value\": \"RabbitMQ Management API\",\n  \"id\": \"rabbitmq-management-api\",\n  \"level\": 3\n}, {\n  \"value\": \"Performance and Scalability Check List\",\n  \"id\": \"scalability\",\n  \"level\": 2\n}, {\n  \"value\": \"Proxy Protocol\",\n  \"id\": \"proxy-protocol\",\n  \"level\": 2\n}, {\n  \"value\": \"Sparkplug Support\",\n  \"id\": \"sparkplug-support\",\n  \"level\": 2\n}, {\n  \"value\": \"Limitations\",\n  \"id\": \"limitations\",\n  \"level\": 2\n}, {\n  \"value\": \"QoS 2\",\n  \"id\": \"qos-2\",\n  \"level\": 3\n}, {\n  \"value\": \"Re-authentication\",\n  \"id\": \"re-authentication\",\n  \"level\": 3\n}, {\n  \"value\": \"Shared Subscriptions\",\n  \"id\": \"shared-subscriptions\",\n  \"level\": 3\n}, {\n  \"value\": \"Overlapping Subscriptions\",\n  \"id\": \"overlapping-subscriptions\",\n  \"level\": 3\n}, {\n  \"value\": \"Retained Message Stores\",\n  \"id\": \"retained-message-stores\",\n  \"level\": 3\n}, {\n  \"value\": \"Delayed and Retained Will Mesage\",\n  \"id\": \"delayed-and-retained-will-mesage\",\n  \"level\": 3\n}, {\n  \"value\": \"Disabling the Plugin\",\n  \"id\": \"disabling-plugin\",\n  \"level\": 2\n}, {\n  \"value\": \"Retained Messages and Stores\",\n  \"id\": \"retained\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    header: \"header\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"mqtt-plugin\",\n        children: \"MQTT Plugin\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ supports MQTT versions\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html\",\n        children: \"3.1\"\n      }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html\",\n        children: \"3.1.1\"\n      }), \", and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html\",\n        children: \"5.0\"\n      }), \"\\r\\nvia a plugin that ships in the core distribution.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This guide covers the following topics:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#enabling-plugin\",\n          children: \"How to enable the plugin\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#features\",\n          children: \"Supported MQTT features\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#limitations\",\n          children: \"limitations\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#implementation\",\n          children: \"MQTT plugin implementation overview\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"When (not) to use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#quorum-queues\",\n          children: \"quorum queues\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#qos0-queue-type\",\n          children: \"MQTT QoS 0 queue type\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#authentication\",\n          children: \"Users and authentication\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#local-vs-remote\",\n          children: \"remote connections\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#config\",\n          children: \"Key configurable settings\"\n        }), \" of the plugin\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#tls\",\n          children: \"TLS support\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#virtual-hosts\",\n          children: \"Virtual hosts\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#metrics\",\n          children: \"Metrics\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#scalability\",\n          children: \"Performance and scalability check list\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#proxy-protocol\",\n          children: \"Proxy protocol\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#sparkplug-support\",\n          children: \"Sparkplug support\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"enabling-plugin\",\n      children: \"Enabling the Plugin\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The MQTT plugin is included in the RabbitMQ distribution. Before clients can successfully\\r\\nconnect, it must be enabled on all cluster nodes using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./man/rabbitmq-plugins.8\",\n        children: \"rabbitmq-plugins\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmq-plugins enable rabbitmq_mqtt\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"features\",\n      children: \"Supported MQTT features\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ supports most MQTT 5.0 features including the following:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901235\",\n          children: \"QoS 0 (at most once)\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901236\",\n          children: \"QoS 1 (at least once)\"\n        }), \" publish & subscribe\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"TLS, OAuth 2.0\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901039\",\n          children: \"Clean\"\n        }), \" and non-clean sessions\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901112\",\n          children: \"Message Expiry Interval\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901166\",\n          children: \"Subscription Identifier\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901169\",\n          children: \"Subscription Options\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901040\",\n          children: \"Will messages\"\n        }), \" including \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901062\",\n          children: \"Will Delay Interval\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901253\",\n          children: \"Request / Response\"\n        }), \" including interoperability with other protocols such as AMQP 0.9.1 and AMQP 1.0\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901113\",\n          children: \"Topic Alias\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901104\",\n          children: \"Retained\"\n        }), \" messages with the limitations described in section \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#retained\",\n          children: \"Retained Messages and Stores\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901285\",\n          children: \"MQTT over a WebSocket\"\n        }), \" via the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./web-mqtt\",\n          children: \"RabbitMQ Web MQTT Plugin\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2023/07/21/mqtt5\",\n        children: \"MQTT 5.0 blog post\"\n      }), \" provides a complete list of supported MQTT 5.0 features including their usage and implementation details.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"MQTT clients can interoperate with other protocols.\\r\\nFor example, MQTT publishers can send messages to AMQP 0.9.1 or AMQP 1.0 consumers if these consumers consume from a queue\\r\\nthat is bound to the MQTT \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/tutorials/amqp-concepts#exchange-topic\",\n        children: \"topic exchange\"\n      }), \" (configured via \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.exchange\"\n      }), \" and defaulting to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"amq.topic\"\n      }), \").\\r\\nLikewise an AMQP 0.9.1, AMQP 1.0, or STOMP publisher can send messages to an MQTT subscriber if the publisher publishes to the MQTT topic exchange.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"implementation\",\n      children: \"How the MQTT plugin works\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ MQTT plugin targets MQTT 3.1, 3.1.1, and 5.0 supporting a broad range\\r\\nof MQTT clients. It also makes it possible for MQTT clients to interoperate\\r\\nwith \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./protocols\",\n        children: \"AMQP 0-9-1, AMQP 1.0, and STOMP\"\n      }), \" clients.\\r\\nThere is also support for multi-tenancy.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"mapping-mqtt-to-the-amqp-091-model\",\n      children: \"Mapping MQTT to the AMQP 0.9.1 model\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ core implements the AMQP 0.9.1 protocol.\\r\\nThe plugin builds on top of the AMQP 0.9.1 entities: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/tutorials/amqp-concepts#exchanges\",\n        children: \"exchanges\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./queues\",\n        children: \"queues\"\n      }), \", and bindings.\\r\\nMessages published to MQTT topics are routed by an AMQP 0.9.1 topic exchange.\\r\\nMQTT subscribers consume from queues bound to the topic exchange.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The MQTT plugin creates a dedicated queue per MQTT subscriber. To be more precise, there could be 0, 1, or 2 queues per MQTT session:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"There are 0 queues for an MQTT session if the MQTT client never sends a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901161\",\n          children: \"SUBSCRIBE\"\n        }), \" packet. The MQTT client is only publishing messages.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"There is 1 queue for an MQTT session if the MQTT client creates one or multiple subscriptions with the same QoS level.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"There are 2 queues for an MQTT session if the MQTT client creates subscriptions with both QoS levels: QoS 0 and QoS 1.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When listing queues you will observe the queue naming pattern \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt-subscription-<MQTT client ID>qos[0|1]\"\n      }), \" where \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"<MQTT client ID>\"\n      }), \" is the MQTT \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901059\",\n        children: \"client identifier\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"[0|1]\"\n      }), \" is either \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"0\"\n      }), \" for a QoS 0 subscription or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"1\"\n      }), \" for a QoS 1 subscription.\\r\\nHaving a separate queue per MQTT subscriber allows every MQTT subscriber to receive its own copy of the application message.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The plugin creates queues transparently for MQTT subscribing clients.\\r\\nThe MQTT specification does not define the concept of queues and MQTT clients are not aware that these queues exist.\\r\\nA queue is an implementation detail of how RabbitMQ implements the MQTT protocol.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"queue-types\",\n      children: \"Queue Types\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"An MQTT client can publish a message to any queue type.\\r\\nFor that to work, a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./classic-queues\",\n        children: \"classic queue\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"quorum queue\"\n      }), \", or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./streams\",\n        children: \"stream\"\n      }), \" must be bound to the topic exchange with a binding key matching the topic of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901100\",\n        children: \"PUBLISH\"\n      }), \" packet.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The MQTT plugin creates a classic queue, quorum queue, or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#qos0-queue-type\",\n        children: \"MQTT QoS 0 queue\"\n      }), \" per MQTT subscriber.\\r\\nBy default, the plugin creates a classic queue.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The plugin can be configured to create quorum queues (instead of classic queues) for subscribers whose MQTT session lasts longer than their MQTT network connection.\\r\\nThis is explained in section \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#quorum-queues\",\n        children: \"Quorum Queues\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./feature-flags\",\n        children: \"feature flag\"\n      }), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit_mqtt_qos0_queue\"\n      }), \" is enabled, the plugin creates an MQTT QoS 0 queue for QoS 0 subscribers whose MQTT session last as long as their MQTT network connection.\\r\\nThis is explained in section \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#qos0-queue-type\",\n        children: \"MQTT QoS 0 queue type\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.h3, {\n      id: \"queue-properties-and-arguments\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./queues#properties\",\n        children: \"Queue Properties\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./queues#optional-arguments\",\n        children: \"Arguments\"\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Since RabbitMQ 3.12 all queues created by the MQTT plugin\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./queues#durability\",\n          children: \"durable\"\n        }), \", i.e. queue metadata is stored on disk.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./queues#exclusive-queues\",\n          children: \"exclusive\"\n        }), \" if the MQTT session lasts as long as the MQTT network connection.\\r\\nIn that case, RabbitMQ will delete all state for the MQTT client - including its queue - when the network connection (and session) ends.\\r\\nOnly the subscribing MQTT client can consume from its queue.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"are not \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"auto-delete\"\n        }), \". For example, if an MQTT client subscribes to a topic and subsequently unsubscribes, the queue will not be deleted.\\r\\nHowever, the queue will be deleted when the MQTT session ends.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"have a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./ttl#queue-ttl\",\n          children: \"Queue TTL\"\n        }), \" set (queue argument \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-expires\"\n        }), \") if the MQTT session expires eventually (i.e. session expiry is not disabled by the RabbitMQ operator, see below) and outlasts the MQTT network connection.\\r\\nThe Queue TTL (in milliseconds) is determined by the minimum of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901048\",\n          children: \"Session Expiry Interval\"\n        }), \" (in seconds) requested by the MQTT client in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901033\",\n          children: \"CONNECT\"\n        }), \" packet and the server side configured \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"mqtt.max_session_expiry_interval_seconds\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The default value for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.max_session_expiry_interval_seconds\"\n      }), \" is 86400 (1 day).\\r\\nA RabbitMQ operator can force all MQTT sessions to end as soon as their network connections end by setting this parameter to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"0\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A RabbitMQ operator can allow MQTT sessions to last forever by setting this parameter to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"infinity\"\n      }), \".\\r\\nThis carries a risk: short-lived clients that don't use clean sessions can leave queues and messages behind, which will consume resources and require manual cleanup.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ deletes any state for the MQTT client when the MQTT session ends.\\r\\nThis state includes the client's queue(s) including QoS 0 and QoS 1 messages and the queue bindings (i.e. the client's subscriptions).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"topic-level-separator-and-wildcards\",\n      children: \"Topic level separator and wildcards\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The MQTT protocol specification defines slash (\\\"/\\\") as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901243\",\n        children: \"topic level separator\"\n      }), \" whereas\\r\\nAMQP 0-9-1 defines a dot (\\\".\\\") as topic level separator. This plugin translates patterns under the hood\\r\\nto bridge the two.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For example, MQTT topic \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cities/london\"\n      }), \" becomes AMQP 0.9.1 topic \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cities.london\"\n      }), \" and vice versa.\\r\\nTherefore, when an MQTT client publishes a message with topic \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cities/london\"\n      }), \", if an AMQP 0.9.1 client wants to receive that message, it should create a binding from its queue\\r\\nto the topic exchange with binding key \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cities.london\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Vice versa, when an AMQP 0.9.1 client publishes a message with topic \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cities.london\"\n      }), \", if an MQTT client wants to receive that message, it should create an MQTT subscription with topic filter \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cities/london\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This has one important limitation: MQTT topics that have dots in them won't work as expected and are to be avoided, the same goes for AMQP 0-9-1 routing and binding keys that contains slashes.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Furthermore, MQTT defines the plus sign (\\\"+\\\") as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901245\",\n        children: \"single-level wildcard\"\n      }), \" whereas AMQP 0.9.1\\r\\ndefines the asterisk sign (\\\"*\\\") to match a single word:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.table, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.thead, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.th, {\n            children: \"MQTT\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.th, {\n            children: \"AMQP 0.9.1\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tbody, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"/ (slash)\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \". (dot)\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"topic level separator\"\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"+ (plus)\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"* (asterisk)\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"single-level wildcard (match a single word)\"\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"# (hash)\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"# (hash)\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"multi-level wildcard (match zero or more words)\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"quorum-queues\",\n      children: \"Using Quorum Queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.durable_queue_type\"\n      }), \" option, it is possible to opt in to use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"quorum queues\"\n      }), \" for subscribers whose MQTT session lasts longer than their MQTT network connection.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"This value must only be enabled for new clusters\"\n      }), \" before any clients declare durable subscriptions.\\r\\nSince a queue type cannot be changed after declaration, if the value of this setting is changed for an existing cluster, clients with an existing durable state would run into a queue type mismatch error and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"fail to subscribe\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Below is a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#config-file\",\n        children: \"rabbitmq.conf\"\n      }), \" example that opts in to use quorum queues:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"# must ONLY be enabled for new clusters before any clients declare durable subscriptions\\r\\nmqtt.durable_queue_type = quorum\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Currently, this setting applies to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"all\"\n      }), \" MQTT clients that:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"subscribe with QoS 1, and\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"connected with a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901048\",\n          children: \"Session Expiry Interval\"\n        }), \" greater than 0 (MQTT 5.0) or set CleanSession to 0 (MQTT 3.1.1)\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The second condition means that the MQTT session outlasts the MQTT network connection.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"While quorum queues are designed for data safety and predictable efficient recovery\\r\\nfrom replica failures, they also have downsides. A quorum queue by definition requires\\r\\nat least three replicas in the cluster. Therefore quorum queues take longer to declare\\r\\nand delete, and are not a good fit for environments with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./networking#dealing-with-high-connection-churn\",\n        children: \"high client connection churn\"\n      }), \" or\\r\\nenvironments with many (hundreds of thousands) subscribers.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Quorum queues are a great fit for a few (hundreds) longer lived clients that actually care a great deal about data safety.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"qos0-queue-type\",\n      children: \"MQTT QoS 0 queue type\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The MQTT plugin creates an MQTT QoS 0 queue if the following three conditions are met:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./feature-flags\",\n          children: \"Feature flag\"\n        }), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbit_mqtt_qos0_queue\"\n        }), \" is enabled.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The MQTT client subscribes with QoS 0.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The MQTT 5.0 client connects with a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901048\",\n          children: \"Session Expiry Interval\"\n        }), \" of 0, or the MQTT 3.1.1 client connects with CleanSession set to 1.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The third condition means that the MQTT session lasts only as long as the network connection.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The MQTT QoS 0 queue type can be thought of as a “pseudo” or “virtual” queue:\\r\\nIt is very different from the other queue types (classic queues, quorum queues, and streams) in the sense that this new queue type is neither a separate Erlang process nor does it store messages on disk.\\r\\nInstead, this queue type is a subset of the Erlang process mailbox.\\r\\nMQTT messages are directly sent to the MQTT connection process of the subscribing client.\\r\\nIn other words, MQTT messages are sent to any “online” MQTT subscribers.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is more accurate to think of the queue being \\\"skipped\\\".\\r\\nThe fact that sending messages directly to the MQTT connection process is implemented as a queue type is to simplify routing of messages and protocol interoperability,\\r\\nsuch that messages can not only be sent from the MQTT publishing connection process, but also from an AMQP 0.9.1 \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./channels\",\n        children: \"channel\"\n      }), \" process.\\r\\nThe latter enables sending messages from an AMQP 0.9.1, AMQP 1.0 or STOMP client directly to the MQTT subscriber connection process skipping a dedicated queue process.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The benefits of using the MQTT QoS 0 queues type are:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Support for larger fanouts, e.g. sending a message from the \\\"cloud\\\" (RabbitMQ) to all devices (MQTT clients).\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Lower \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./memory-use\",\n          children: \"memory usage\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Lower publisher confirm latency\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Lower end-to-end latency\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Because the MQTT QoS 0 queue type has no flow control, MQTT messages might arrive faster in the MQTT connection process mailbox than being delivered from the MQTT connection process to the MQTT subscribing client.\\r\\nThis can happen when the network connection between MQTT subscribing client and RabbitMQ is poor or in a large fan-in scenario where many publishers overload a single MQTT subscribing client.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"overload-protection\",\n      children: \"Overload protection\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To protect against high \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./memory-use\",\n        children: \"memory usage\"\n      }), \" due to MQTT QoS 0 messages piling up in the MQTT connection process mailbox, RabbitMQ intentionally drops QoS 0 messages from the MQTT QoS 0 queue if both conditions are true:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"the number of messages in the MQTT connection process mailbox exceeds the configured \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"mqtt.mailbox_soft_limit\"\n        }), \" (defaults to 200), and\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"the socket sending to the MQTT client is busy (not sending fast enough due to TCP backpressure).\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that there can be other messages in the process mailbox (e.g. applications messages sent from the MQTT subscribing client to RabbitMQ or confirmations from another queue type to the MQTT connection process) which are obviously not dropped.\\r\\nHowever, these other messages also contribute to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.mailbox_soft_limit\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Setting \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.mailbox_soft_limit\"\n      }), \" to 0 disables the overload protection mechanism meaning QoS 0 messages are never dropped intentionally by RabbitMQ.\\r\\nSetting \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.mailbox_soft_limit\"\n      }), \" to a very high value decreases the likelihood of intentionally dropping QoS 0 messages while increasing the risk of causing a cluster wide memory alarm\\r\\n(especially if the message payloads are large or if there are many overloaded queues of type \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit_mqtt_qos0_queue\"\n      }), \").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.mailbox_soft_limit\"\n      }), \" can be thought of a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./maxlength\",\n        children: \"queue length limit\"\n      }), \" (although not precisely because, as mentioned previously, the Erlang process mailbox can contain other messages than MQTT application messages).\\r\\nThis is why the configuration key \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.mailbox_soft_limit\"\n      }), \" contains the word \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"soft\"\n      }), \".\\r\\nThe described overload protection mechanism corresponds roughly to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./maxlength#overflow-behaviour\",\n        children: \"overflow behaviour\"\n      }), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"drop-head\"\n      }), \" that exists in classic queues and quorum queues.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The following Prometheus metric reported by a given RabbitMQ node shows how many QoS 0 messages were dropped in total across all queues of type \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit_mqtt_qos0_queue\"\n      }), \" during the lifetime of that node:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmq_global_messages_dead_lettered_maxlen_total{queue_type=\\\"rabbit_mqtt_qos0_queue\\\",dead_letter_strategy=\\\"disabled\\\"} 0\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2023/03/21/native-mqtt#new-mqtt-qos-0-queue-type\",\n        children: \"Native MQTT\"\n      }), \" blog post describes the MQTT QoS 0 queue type in more detail.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"authentication\",\n      children: \"Users and Authentication\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"MQTT clients will be able to connect provided that they have a set of credentials for an existing user with the appropriate permissions.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For an MQTT connection to succeed, it must successfully authenticate and the user must\\r\\nhave the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./access-control\",\n        children: \"appropriate permissions\"\n      }), \" to the virtual host used by the\\r\\nplugin (see below).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"MQTT clients can (and usually do) specify a set of credentials when they connect. The credentials\\r\\ncan be a username and password pair, or a x.509 certificate (see below).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The plugin supports anonymous authentication but its use is highly discouraged and it is a subject\\r\\nto certain limitations (listed below) enforced for a reasonable level of security\\r\\nby default.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Users and their permissions can be managed using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: \"rabbitmqctl\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./management\",\n        children: \"management UI\"\n      }), \"\\r\\nor \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./management#http-api\",\n        children: \"HTTP API\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For example, the following commands create a new user for MQTT connections with full access\\r\\nto the default \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./vhosts\",\n        children: \"virtual host\"\n      }), \" used by this plugin:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# username and password are both \\\"mqtt-test\\\"\\r\\nrabbitmqctl add_user mqtt-test mqtt-test\\r\\nrabbitmqctl set_permissions -p \\\"/\\\" mqtt-test \\\".*\\\" \\\".*\\\" \\\".*\\\"\\r\\nrabbitmqctl set_user_tags mqtt-test management\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that colons may not appear in usernames.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"local-vs-remote\",\n      children: \"Local vs. Remote Client Connections\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When an MQTT client provides no login credentials, the plugin uses the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"guest\"\n      }), \" account by default which will not allow non-\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"localhost\"\n      }), \"\\r\\nconnections. When connecting from a remote host, here are the options\\r\\nthat make sure remote clients can successfully connect:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Create one or more new user(s), grant them full permissions to the virtual host used by the MQTT plugin and make clients\\r\\nthat connect from remote hosts use those credentials. This is the recommended option.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Set \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"anonymous_login_user\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"anonymous_login_pass\"\n        }), \" to a non-\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"guest\"\n        }), \" user who has the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./access-control\",\n          children: \"appropriate permissions\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"anonymous-connections\",\n      children: \"Anonymous Connections\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"MQTT supports optional authentication (clients may provide no credentials).\\r\\nTherefore a default set of credentials is used for anonymous connections.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"anonymous_login_user\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"anonymous_login_pass\"\n      }), \" configuration keys are used to specify\\r\\nthe credentials:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"anonymous_login_user = some-user\\r\\nanonymous_login_pass = s3kRe7\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is possible to disable anonymous connections:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"mqtt.allow_anonymous = false\\r\\nanonymous_login_user = none\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.allow_anonymous\"\n      }), \" key is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"false\"\n      }), \" then clients \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"must\"\n      }), \" provide credentials.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The use of anonymous connections is highly discouraged and it is a subject\\r\\nto certain limitations (see above) enforced for a reasonable level of security\\r\\nby default.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"config\",\n      children: \"Plugin Configuration\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Here is a sample \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#config-file\",\n        children: \"configuration\"\n      }), \" that demonstrates a number of MQTT plugin settings:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"mqtt.listeners.tcp.default = 1883\\r\\n## Default MQTT with TLS port is 8883\\r\\n# mqtt.listeners.ssl.default = 8883\\r\\n\\r\\n# anonymous connections, if allowed, will use the default\\r\\n# credentials specified here\\r\\nmqtt.allow_anonymous  = true\\r\\n\\r\\nmqtt.vhost            = /\\r\\nmqtt.exchange         = amq.topic\\r\\nmqtt.prefetch         = 10\\r\\n# 24 hours by default\\r\\nmqtt.max_session_expiry_interval_seconds = 86400\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tcp-listeners\",\n      children: \"TCP Listeners\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When no configuration is specified the MQTT plugin will listen on\\r\\nall interfaces on port 1883 and have a default user login/passcode\\r\\nof \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"guest\"\n      }), \"/\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"guest\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To change the listener port, edit your\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#configuration-files\",\n        children: \"Configuration file\"\n      }), \",\\r\\nto contain a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"tcp_listeners\"\n      }), \" variable for the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq_mqtt\"\n      }), \" application.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For example, a minimalistic configuration file which changes the listener\\r\\nport to 12345 would look like:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"mqtt.listeners.tcp.1 = 12345\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"while one which changes the listener to listen only on localhost (for\\r\\nboth IPv4 and IPv6) would look like:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"mqtt.listeners.tcp.1 = 127.0.0.1:1883\\r\\nmqtt.listeners.tcp.2 = ::1:1883\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"listener-opts\",\n      children: \"TCP Listener Options\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The plugin supports TCP listener option configuration.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The settings use a common prefix, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.tcp_listen_options\"\n      }), \", and control\\r\\nthings such as TCP buffer sizes, inbound TCP connection queue length, whether \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./heartbeats#tcp-keepalives\",\n        children: \"TCP keepalives\"\n      }), \"\\r\\nare enabled and so on. See the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./networking\",\n        children: \"Networking guide\"\n      }), \" for details.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"mqtt.listeners.tcp.1 = 127.0.0.1:1883\\r\\nmqtt.listeners.tcp.2 = ::1:1883\\r\\n\\r\\nmqtt.tcp_listen_options.backlog = 4096\\r\\nmqtt.tcp_listen_options.buffer  = 131072\\r\\nmqtt.tcp_listen_options.recbuf  = 131072\\r\\nmqtt.tcp_listen_options.sndbuf  = 131072\\r\\n\\r\\nmqtt.tcp_listen_options.keepalive = true\\r\\nmqtt.tcp_listen_options.nodelay   = true\\r\\n\\r\\nmqtt.tcp_listen_options.exit_on_close = true\\r\\nmqtt.tcp_listen_options.send_timeout  = 120\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tls\",\n      children: \"TLS Support\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To use TLS for MQTT connections, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl\",\n        children: \"TLS must be configured\"\n      }), \" in the broker. To enable\\r\\nTLS-enabled MQTT connections, add a TLS listener for MQTT using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.listeners.ssl.*\"\n      }), \" configuration keys.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The plugin will use core RabbitMQ server\\r\\ncertificates and key (just like AMQP 0-9-1 and AMQP 1.0 listeners do):\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"ssl_options.cacertfile = /path/to/ca_certificate.pem\\r\\nssl_options.certfile   = /path/to/server_certificate.pem\\r\\nssl_options.keyfile    = /path/to/server_key.pem\\r\\nssl_options.verify     = verify_peer\\r\\nssl_options.fail_if_no_peer_cert  = true\\r\\n\\r\\n# default TLS-enabled port for MQTT connections\\r\\nmqtt.listeners.ssl.default = 8883\\r\\nmqtt.listeners.tcp.default = 1883\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that RabbitMQ rejects SSLv3 connections by default because that protocol\\r\\nis known to be compromised.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"See the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl\",\n        children: \"TLS configuration guide\"\n      }), \" for details.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"virtual-hosts\",\n      children: \"Virtual Hosts\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ is a multi-tenant system at the core and every connection belongs\\r\\nto a virtual host. Some messaging protocols have the concept of vhosts,\\r\\nothers don't. MQTT falls into the latter category. Therefore the MQTT plugin\\r\\nneeds to provide a way to map connections to vhosts.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"vhost\"\n      }), \" option controls which RabbitMQ vhost the adapter connects to\\r\\nby default. The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"vhost\"\n      }), \"\\r\\nconfiguration is only consulted if no vhost is provided during connection establishment.\\r\\nThere are several (optional) ways to specify the vhost the client will\\r\\nconnect to.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"port-to-virtual-host-mapping\",\n      children: \"Port to Virtual Host Mapping\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"First way is mapping MQTT plugin (TCP or TLS) listener ports to vhosts. The mapping\\r\\nis specified thanks to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt_port_to_vhost_mapping\"\n      }), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./parameters\",\n        children: \"global runtime parameter\"\n      }), \".\\r\\nLet's take the following plugin configuration:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"mqtt.listeners.tcp.1 = 1883\\r\\nmqtt.listeners.tcp.2 = 1884\\r\\n\\r\\nmqtt.listeners.ssl.1 = 8883\\r\\nmqtt.listeners.ssl.2 = 8884\\r\\n\\r\\n# (other TLS settings are omitted for brevity)\\r\\n\\r\\nmqtt.vhost            = /\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note the plugin listens on ports 1883, 1884, 8883, and 8884. Imagine you\\r\\nwant clients connecting to ports 1883 and 8883 to connect to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"vhost1\"\n      }), \" virtual\\r\\nhost, and clients connecting to ports 1884 and 8884 to connect to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"vhost2\"\n      }), \"\\r\\nvirtual host. A port-to-vhost mapping can be created by setting the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt_port_to_vhost_mapping\"\n      }), \" global parameter with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqctl set_global_parameter mqtt_port_to_vhost_mapping \\\\\\r\\n    '{\\\"1883\\\":\\\"vhost1\\\", \\\"8883\\\":\\\"vhost1\\\", \\\"1884\\\":\\\"vhost2\\\", \\\"8884\\\":\\\"vhost2\\\"}'\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"rabbitmqctl.bat set_global_parameter mqtt_port_to_vhost_mapping ^\\r\\n    \\\"{\\\"\\\"1883\\\"\\\":\\\"\\\"vhost1\\\"\\\", \\\"\\\"8883\\\"\\\":\\\"\\\"vhost1\\\"\\\", \\\"\\\"1884\\\"\\\":\\\"\\\"vhost2\\\"\\\", \\\"\\\"8884\\\"\\\":\\\"\\\"vhost2\\\"\\\"}\\\"\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"HTTP API\",\n        label: \"HTTP API\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-ini\",\n            children: \"PUT /api/global-parameters/mqtt_port_to_vhost_mapping\\r\\n# => {\\\"value\\\": {\\\"1883\\\":\\\"vhost1\\\", \\\"8883\\\":\\\"vhost1\\\", \\\"1884\\\":\\\"vhost2\\\", \\\"8884\\\":\\\"vhost2\\\"}}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If there's no mapping for a given port (because the port cannot be found in\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt_port_to_vhost_mapping\"\n      }), \" global parameter JSON document or if the global parameter\\r\\nisn't set at all), the plugin will try to extract the virtual host from the username\\r\\n(see below) and will ultimately use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"vhost\"\n      }), \" plugin config option.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The broker queries the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt_port_to_vhost_mapping\"\n      }), \" global parameter value at connection time.\\r\\nIf the value changes, connected clients are not notified or disconnected. They need\\r\\nto reconnect to switch to a new virtual host.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"virtual-host-as-part-of-username\",\n      children: \"Virtual Host as Part of Username\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Another and more specific way to specify a vhost while connecting is to prepend the vhost\\r\\nto the username and to separate with a colon.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For example, connecting with\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"/:guest\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"is equivalent to the default vhost and username, while\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt-vhost:mqtt-username\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"means connecting to the vhost \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt-host\"\n      }), \" with username \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt-username\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Specifying the virtual host in the username takes precedence over the port-to-vhost\\r\\nmapping specified with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt_port_to_vhost_mapping\"\n      }), \" global parameter.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"tls-certificate-authentication\",\n      children: \"Authentication with TLS/x509 client certificates\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The plugin can authenticate TLS-enabled connections by extracting\\r\\na name from the client's TLS (x509) certificate, without using a password.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For safety the server must be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#tls\",\n        children: \"configured with the TLS options\"\n      }), \"\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"fail_if_no_peer_cert\"\n      }), \" set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"verify\"\n      }), \" set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"verify_peer\"\n      }), \", to\\r\\nforce all TLS clients to have a verifiable client certificate.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To switch this feature on, set \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ssl_cert_login\"\n      }), \" to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \" for the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq_mqtt\"\n      }), \" application. For example:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"mqtt.ssl_cert_login = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"By default this will set the username to an RFC4514-ish string form of\\r\\nthe certificate's subject's Distinguished Name, similar to that\\r\\nproduced by OpenSSL's \\\"-nameopt RFC2253\\\" option.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To use the Common Name instead, add:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"ssl_cert_login_from = common_name\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"to your configuration.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The authenticated user must exist in the configured authentication / authorisation backend(s).\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Clients \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n          children: \"must not\"\n        }), \" supply username and password.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"You can optionally specify a virtual host for a client certificate by using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt_default_vhosts\"\n      }), \"\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./parameters\",\n        children: \"global runtime parameter\"\n      }), \". The value of this global parameter must contain a JSON document that\\r\\nmaps certificates' subject's Distinguished Name to their target virtual host. Let's see how to\\r\\nmap 2 certificates, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"O=client,CN=guest\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"O=client,CN=rabbit\"\n      }), \", to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"vhost1\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"vhost2\"\n      }), \"\\r\\nvirtual hosts, respectively.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Global parameters can be set up with using the following methods:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqctl set_global_parameter mqtt_default_vhosts \\\\\\r\\n    '{\\\"O=client,CN=guest\\\": \\\"vhost1\\\", \\\"O=client,CN=rabbit\\\": \\\"vhost2\\\"}'\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"rabbitmqctl set_global_parameter mqtt_default_vhosts ^\\r\\n    \\\"{\\\"\\\"O=client,CN=guest\\\"\\\": \\\"\\\"vhost1\\\"\\\", \\\"\\\"O=client,CN=rabbit\\\"\\\": \\\"\\\"vhost2\\\"\\\"}'\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"HTTP API\",\n        label: \"HTTP API\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"PUT /api/global-parameters/mqtt_default_vhosts\\r\\n# => {\\\"value\\\": {\\\"O=client,CN=guest\\\": \\\"vhost1\\\", \\\"O=client,CN=rabbit\\\": \\\"vhost2\\\"}}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"If the virtual host for a certificate cannot be found (because the certificate\\r\\nsubject's DN cannot be found in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"mqtt_default_vhosts\"\n        }), \" global parameter JSON\\r\\ndocument or if the global parameter isn't set at all), the virtual host specified\\r\\nby the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"vhost\"\n        }), \" plugin config option will be used.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The broker queries the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"mqtt_default_vhosts\"\n        }), \" global parameter value at connection time.\\r\\nIf the value changes, connected clients are not notified or disconnected. They need\\r\\nto reconnect to switch to a new virtual host.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The certificate-to-vhost mapping with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"mqtt_default_vhosts\"\n        }), \" global parameter\\r\\nis considered more specific than the port-to-vhost mapping with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"mqtt_port_to_vhost_mapping\"\n        }), \"\\r\\nglobal parameter and so takes precedence over it.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"usage-of-client_id-extraction-from-client-certificates-for-authentication\",\n      children: \"Usage of client_id Extraction from Client Certificates for Authentication\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Nodes can be configured to verify that the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"client_id\"\n      }), \" set on the MQTT connection matches the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"client_id\"\n      }), \" found in the client's certificate.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If they match, RabbitMQ proceeds with the user's authentication by passing the user's identity along with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"client_id\"\n      }), \" to the configured authentication backend(s).\\r\\nSome authentication backends, like the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq_auth_backend_http\"\n      }), \", may use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"client_id\"\n      }), \" credential in addition to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"username\"\n      }), \" to make authentication and/or authorization decisions.\\r\\nIf the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"client_id\"\n      }), \"(s) did not match, RabbitMQ closes the connection with the reason code \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"2\"\n      }), \", meaning, \\\"the client identifier is not allowed by the server\\\".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In order to do so, RabbitMQ must first be instructed how to fetch the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"client_id\"\n      }), \" from the certificate. This is done with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.ssl_cert_client_id_from\"\n      }), \" configuration key.\\r\\nThe acceptable values are:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"distinguished_name\"\n        }), \": this is the DN, or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/X.509\",\n          children: \"distinguished name\"\n        }), \", of the certificate\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"subject_alternative_name\"\n        }), \": the Subject Alternative Name or SAN, which comes from a certificate's extensions section\\r\\nBecause different ypes of Subject Alternative Names exist, the type may need to be specified as well\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.ssl_cert_client_id_from\"\n      }), \" is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"subject_alternative_name\"\n      }), \", the type of alternative name can be configured using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.ssl_cert_login_san_type\"\n      }), \". The default type, used if the setting\\r\\nis omitted, is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"dns\"\n      }), \". The acceptable values are:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"dns\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"ip\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"email\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"uri\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"other_name\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A certificate can contain multiple SAN fields of the same type, for example, two alternative DNS names. If this is the case, use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.ssl_cert_login_san_index\"\n      }), \" configuration key\\r\\nto specify the index to be used. By default, RabbitMQ will pick the first value, that is, the default value of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt.ssl_cert_login_san_index\"\n      }), \" is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"0\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Below an example where the username is extracted from the certificate's distinguished name and the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"client_id\"\n      }), \" is extracted from\\r\\nthe first SAN (Subject Alternative Name) of type \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"uri\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"ssl_cert_login_from = distinguished_name\\r\\nmqtt.ssl_cert_client_id_from = subject_alternative_name\\r\\nmqtt.ssl_cert_login_san_type = uri\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"flow\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901251\",\n        children: \"Flow Control\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"prefetch\"\n      }), \" option controls the maximum number of unacknowledged PUBLISH packets with QoS=1 that will be delivered.\\r\\nThis option is interpreted in the same way as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./consumer-prefetch\",\n        children: \"consumer prefetch\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"An MQTT 5.0 client can define a lower number by setting \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901049\",\n        children: \"Receive Maximum\"\n      }), \" in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"CONNECT\"\n      }), \" packet.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"custom-exchanges\",\n      children: \"Custom Exchanges\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"exchange\"\n      }), \" option determines which exchange messages from MQTT clients are published to.\\r\\nThe exchange must be created before clients publish any messages. The exchange is expected to be a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/tutorials/amqp-concepts#exchange-topic\",\n        children: \"topic exchange\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The default topic exchange \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"amq.topic\"\n      }), \" is pre-declared: It therefore exists when RabbitMQ is started.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"retained\",\n      children: \"Retained Messages and Stores\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The plugin supports retained messages with the limitations described in this section.\\r\\nThe message store implementation is pluggable and the plugin ships with two implementation out of the box:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://www.erlang.org/doc/man/ets.html\",\n          children: \"ETS\"\n        }), \"-based (in memory), implemented in module \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n          children: \"rabbit_mqtt_retained_msg_store_ets\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://www.erlang.org/doc/man/dets.html\",\n          children: \"DETS\"\n        }), \"-based (on disk), implemented in module \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n          children: \"rabbit_mqtt_retained_msg_store_dets\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Both implementations have limitations and trade-offs.\\r\\nWith the first one, the maximum number of messages that can be retained is limited by RAM.\\r\\nWith the second one, there is a limit of 2 GB per vhost. Both are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"node-local\"\n      }), \":\\r\\nRetained messages are neither replicated to nor queried from remote cluster nodes.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"An example that works is the following: An MQTT Client publishes a retained message to node A with topic \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"topic/1\"\n      }), \".\\r\\nThereafter another client subscribes with topic filter \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"topic/1\"\n      }), \" on node A.\\r\\nThe new subscriber will receive the retained message.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"However, if a client publishes a retained message on node A and another client subsequently subscribes on node B,\\r\\nthat subscribing client will not receive any retained message stored on node A.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Furthermore, if the topic filter contains wildcards (the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901244\",\n        children: \"multi-level wildcard character\"\n      }), \" “#” or the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901245\",\n        children: \"single-level wildcard character\"\n      }), \" “+”), no retained messages are sent.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To configure the store, use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n        children: \"mqtt.retained_message_store\"\n      }), \" configuration key:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"## use DETS (disk-based) store for retained messages\\r\\nmqtt.retained_message_store = rabbit_mqtt_retained_msg_store_dets\\r\\n## only used by DETS store (in milliseconds)\\r\\nmqtt.retained_message_store_dets_sync_interval = 2000\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The value must be a module that implements the store:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n          children: \"rabbit_mqtt_retained_msg_store_ets\"\n        }), \" for RAM-based\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n          children: \"rabbit_mqtt_retained_msg_store_dets\"\n        }), \" for disk-based (This is the default value.)\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"These implementations are suitable for development but sometimes won't be for production needs.\\r\\nThe MQTT specification does not define consistency or replication requirements for retained\\r\\nmessage stores, therefore RabbitMQ allows for custom ones to meet the consistency and\\r\\navailability needs of a particular environment. For example, stores based on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://basho.com/riak/\",\n        children: \"Riak\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://cassandra.apache.org/\",\n        children: \"Cassandra\"\n      }), \" would be suitable for most production environments as\\r\\nthose data stores provide \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/basho/basho_docs/blob/master/content/riak/kv/2.2.3/using/reference/strong-consistency.md\",\n        children: \"tunable consistency\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Message stores must implement the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n        children: \"rabbit_mqtt_retained_msg_store\"\n      }), \" behaviour.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"metrics\",\n      children: \"Metrics\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"prometheus\",\n      children: \"Prometheus\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This plugin emits the Prometheus metrics listed in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/blob/main/deps/rabbitmq_prometheus/metrics.md#global-counters\",\n        children: \"Global Counters\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The values for Prometheus label \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"protocol\"\n      }), \" are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt310\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt311\"\n      }), \", and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mqtt50\"\n      }), \" depending on whether the MQTT client uses MQTT 3.1, MQTT 3.1.1, or MQTT 5.0.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The values for Prometheus label \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"queue_type\"\n      }), \" are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit_classic_queue\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit_quorum_queue\"\n      }), \", and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbit_mqtt_qos0_queue\"\n      }), \" depending on the queue type the MQTT client consumes from.\\r\\n(Note that MQTT clients never consume from \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./streams\",\n        children: \"streams\"\n      }), \" directly although they can publish messages to streams.)\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"rabbitmq-management-api\",\n      children: \"RabbitMQ Management API\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The Management API delivers metrics for MQTT Connections (e.g. network traffic from / to client) and for Classic Queues and Quorum Queues (e.g. how many messages they contain).\\r\\nHowever, Management API metrics that are tied to AMQP 0.9.1 \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./channels\",\n        children: \"channels\"\n      }), \", e.g message rates, are not available since 3.12.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"scalability\",\n      children: \"Performance and Scalability Check List\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"MQTT is the standard protocol for the Internet of Things (IoT).\\r\\nA common IoT workload is that many MQTT devices publish sensor data periodically to the MQTT broker.\\r\\nThere could be hundreds of thousands, sometimes even millions of IoT devices that connect to the MQTT broker.\\r\\nThe blog post \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2023/03/21/native-mqtt\",\n        children: \"Native MQTT\"\n      }), \" demonstrates performance benchmarks of such workloads.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This section aims at providing a non-exhaustive checklist with tips and tricks to configure RabbitMQ as an efficient MQTT broker that supports many client connections:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Set \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"management_agent.disable_metrics_collector = true\"\n        }), \" to disable metrics collection in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./management\",\n          children: \"Management plugin\"\n        }), \".\\r\\nThe RabbitMQ Management plugin has not been designed for excessive metrics collection.\\r\\nIn fact, metrics delivery via the management API is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/blog/2021/08/21/4.0-deprecation-announcements#disable-metrics-delivery-via-the-management-api--ui\",\n          children: \"deprecated\"\n        }), \". Instead, use a tool that has been designed for collecting and querying a huge number of metrics: Prometheus.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"MQTT packets and subscriptions with QoS 0 provide much better performance than QoS 1.\\r\\nUnlike AMQP 0.9.1 and AMQP 1.0, MQTT is not designed to maximise throughput: For example, there are no \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./confirms#consumer-acks-multiple-parameter\",\n          children: \"multi-acks\"\n        }), \".\\r\\nEvery \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901100\",\n          children: \"PUBLISH\"\n        }), \" packet with QoS 1 needs to be acknowledged individually.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Decrease TCP buffer sizes as described in section \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#listener-opts\",\n          children: \"TCP Listener Options\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This substantially reduces \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./memory-use\",\n        children: \"memory usage\"\n      }), \" in environments with many concurrently connected clients.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Less topic levels (in an MQTT topic and MQTT topic filter) perform better than more topic levels.\\r\\nFor example, prefer to structure your topic as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"city/name\"\n        }), \" instead of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"continent/country/city/name\"\n        }), \", if possible.\\r\\nEach topic level in a topic filter currently creates its own entry in the database used by RabbitMQ.\\r\\nTherefore, creating and deleting many subscriptions will be faster when there are fewer topic levels.\\r\\nAlso, routing messages with fewer topic levels is faster.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"In workloads with high subscription churn, increase Mnesia configuration parameter \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"dump_log_write_threshold\"\n        }), \" (e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\\\"-mnesia dump_log_write_threshold 20000\\\"\"\n        }), \")\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"When connecting many clients, increase the maximum number of Erlang processes (e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\\\"+P 10000000\"\n        }), \")\\r\\nand the maximum number of open ports (e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"ERL_MAX_PORTS=10000000\"\n        }), \").\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Consult the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./networking\",\n        children: \"Networking\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure\",\n        children: \"Configuration\"\n      }), \" guides for more information.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"proxy-protocol\",\n      children: \"Proxy Protocol\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The MQTT plugin supports the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://www.haproxy.org/download/3.1/doc/proxy-protocol.txt\",\n        children: \"proxy protocol\"\n      }), \".\\r\\nThis feature is disabled by default, to enable it for MQTT clients:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"mqtt.proxy_protocol = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"See the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./networking#proxy-protocol\",\n        children: \"Networking Guide\"\n      }), \" for more information\\r\\nabout the proxy protocol.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"sparkplug-support\",\n      children: \"Sparkplug Support\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://www.cirrus-link.com/mqtt-sparkplug-tahu/\",\n        children: \"Sparkplug\"\n      }), \" is a specification\\r\\nthat provides guidance for the design of an MQTT system. In Sparkplug,\\r\\nMQTT topics must start with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"spAvM.N\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"spBvM.N\"\n      }), \", where \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"M\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"N\"\n      }), \" are integers.\\r\\nThis unfortunately conflicts with the way the RabbitMQ MQTT plugin \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#implementation\",\n        children: \"translates MQTT\\r\\ntopics into AMQP 0.9.1 routing keys\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To solve this, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"sparkplug\"\n      }), \" configuration entry can be set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"mqtt.sparkplug = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When the Sparkplug support is enabled, the MQTT plugin will not translate the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"spAvM.N\"\n      }), \"/\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"spBvM.N\"\n      }), \" part of the names of topics.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"limitations\",\n      children: \"Limitations\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The RabbitMQ MQTT plugin has currently the following limitations.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"qos-2\",\n      children: \"QoS 2\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901237\",\n        children: \"QoS 2: Exactly once delivery\"\n      }), \" is unsupported.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If an MQTT 3.0 or 3.1.1 client publishes a message with QoS 2, RabbitMQ will downgrade the QoS level to 1.\\r\\nIf an MQTT 5.0 client publishes a message with QoS 2, RabbitMQ will disconnect the client with reason code \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"155: QoS not supported\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"re-authentication\",\n      children: \"Re-authentication\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ does not support the MQTT 5.0 \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901217\",\n        children: \"AUTH\"\n      }), \" packet,\\r\\nand therefore does not support \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901257\",\n        children: \"re-authentication\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"While RabbitMQ supports OAuth 2.0 token renewal for AMQP 1.0, AMQP 0.9.1, and the RabbitMQ stream protocol, RabbitMQ does not support OAuth 2.0 token renewal for MQTT.\\r\\nIf a token expires, RabbitMQ will disconnect the MQTT client with reason code \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"160: Maximum connect time\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"shared-subscriptions\",\n      children: \"Shared Subscriptions\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901250\",\n        children: \"Shared subscriptions\"\n      }), \" are unsupported.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"overlapping-subscriptions\",\n      children: \"Overlapping Subscriptions\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Overlapping subscriptions with different QoS levels can result in duplicate messages being delivered.\\r\\nApplications need to account for this.\\r\\nFor example when the same MQTT client creates a QoS 0 subscription for topic filter \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/sports/football/#\"\n      }), \" and a QoS 1 subscription for topic filter \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/sports/#\"\n      }), \", it will be delivered duplicate messages.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"retained-message-stores\",\n      children: \"Retained Message Stores\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As described in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#retained\",\n        children: \"Retained Messages and Stores\"\n      }), \", retained messages are stored and queried only node local.\\r\\nFurthermore, if the topic filter contains wildcards (the multi-level wildcard character “#” or the single-level wildcard character “+”), no retained messages are sent.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"delayed-and-retained-will-mesage\",\n      children: \"Delayed and Retained Will Mesage\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901040\",\n        children: \"Will Message\"\n      }), \" that is both \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901062\",\n        children: \"delayed\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901042\",\n        children: \"retained\"\n      }), \" is not retained.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"disabling-plugin\",\n      children: \"Disabling the Plugin\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Before the plugin is disabled on a node, or a node removed from the cluster, it must be decommissioned using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbitmqctl\"\n        })\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"rabbitmqctl decommission_mqtt_node <node>;\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"retained\",\n      children: \"Retained Messages and Stores\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The plugin supports retained messages. Message store implementation is pluggable\\r\\nand the plugin ships with two implementation out of the box:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"ETS-based (in memory), implemented in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n          children: \"rabbit_mqtt_retained_msg_store_ets\"\n        }), \" module\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"DETS-based (on disk), implemented in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n          children: \"rabbit_mqtt_retained_msg_store_dets\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Both implementations have limitations and trade-offs.\\r\\nWith the first one, maximum number of messages that can be retained is limited by RAM.\\r\\nWith the second one, there is a limit of 2 GB per vhost. Both are node-local\\r\\n(messages retained on one broker node are not replicated to other nodes in the cluster).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To configure the store, use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n        children: \"rabbitmq_mqtt.retained_message_store\"\n      }), \" configuration key:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"mqtt.allow_anonymous                     = true\\r\\nmqtt.vhost                               = /\\r\\nmqtt.exchange                            = amq.topic\\r\\nmqtt.max_session_expiry_interval_seconds = 1800\\r\\nmqtt.prefetch                            = 10\\r\\n\\r\\n## use DETS (disk-based) store for retained messages\\r\\nmqtt.retained_message_store = rabbit_mqtt_retained_msg_store_dets\\r\\n## only used by DETS store\\r\\nmqtt.retained_message_store_dets_sync_interval = 2000\\r\\n\\r\\nmqtt.listeners.ssl = none\\r\\nmqtt.listeners.tcp.default = 1883\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The value must be a module that implements the store:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n          children: \"rabbit_mqtt_retained_msg_store_ets\"\n        }), \" for RAM-based\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n          children: \"rabbit_mqtt_retained_msg_store_dets\"\n        }), \" for disk-based\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"These implementations are suitable for development but sometimes won't be for production needs.\\r\\nMQTT 3.1 specification does not define consistency or replication requirements for retained\\r\\nmessage stores, therefore RabbitMQ allows for custom ones to meet the consistency and\\r\\navailability needs of a particular environment. For example, stores based on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://basho.com/riak/\",\n        children: \"Riak\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://cassandra.apache.org/\",\n        children: \"Cassandra\"\n      }), \" would be suitable for most production environments as\\r\\nthose data stores provide \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/basho/basho_docs/blob/master/content/riak/kv/2.2.3/using/reference/strong-consistency.md\",\n        children: \"tunable consistency\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Message stores must implement the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n        children: \"rabbit_mqtt_retained_msg_store\"\n      }), \" behaviour.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9kb2NzL21xdHQubWQiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL2RvY3MvbXF0dC5tZD9kYjFkIl0sInNvdXJjZXNDb250ZW50IjpbIlxuXG5leHBvcnQgY29uc3QgZnJvbnRNYXR0ZXIgPSB7XG5cdHRpdGxlOiAnTVFUVCBQbHVnaW4nXG59O1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRUaXRsZSA9ICdNUVRUIFBsdWdpbic7XG5leHBvcnQge2RlZmF1bHQgYXMgbWV0YWRhdGF9IGZyb20gJ0BzaXRlLy5kb2N1c2F1cnVzL2RvY3VzYXVydXMtcGx1Z2luLWNvbnRlbnQtZG9jcy9kZWZhdWx0L3NpdGUtZG9jcy1tcXR0LW1kLTBjNS5qc29uJ1xuZXhwb3J0IGNvbnN0IGFzc2V0cyA9IHtcblxufTtcblxuaW1wb3J0IHtGcmFnbWVudCBhcyBfRnJhZ21lbnQsIGpzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7dXNlTURYQ29tcG9uZW50cyBhcyBfcHJvdmlkZUNvbXBvbmVudHN9IGZyb20gXCJAbWR4LWpzL3JlYWN0XCI7XG5pbXBvcnQgVGFicyBmcm9tICdAdGhlbWUvVGFicyc7XG5pbXBvcnQgVGFiSXRlbSBmcm9tICdAdGhlbWUvVGFiSXRlbSc7XG5leHBvcnQgY29uc3QgdG9jID0gW3tcbiAgXCJ2YWx1ZVwiOiBcIk92ZXJ2aWV3XCIsXG4gIFwiaWRcIjogXCJvdmVydmlld1wiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIkVuYWJsaW5nIHRoZSBQbHVnaW5cIixcbiAgXCJpZFwiOiBcImVuYWJsaW5nLXBsdWdpblwiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlN1cHBvcnRlZCBNUVRUIGZlYXR1cmVzXCIsXG4gIFwiaWRcIjogXCJmZWF0dXJlc1wiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIkhvdyB0aGUgTVFUVCBwbHVnaW4gd29ya3NcIixcbiAgXCJpZFwiOiBcImltcGxlbWVudGF0aW9uXCIsXG4gIFwibGV2ZWxcIjogMlxufSwge1xuICBcInZhbHVlXCI6IFwiTWFwcGluZyBNUVRUIHRvIHRoZSBBTVFQIDAuOS4xIG1vZGVsXCIsXG4gIFwiaWRcIjogXCJtYXBwaW5nLW1xdHQtdG8tdGhlLWFtcXAtMDkxLW1vZGVsXCIsXG4gIFwibGV2ZWxcIjogM1xufSwge1xuICBcInZhbHVlXCI6IFwiUXVldWUgVHlwZXNcIixcbiAgXCJpZFwiOiBcInF1ZXVlLXR5cGVzXCIsXG4gIFwibGV2ZWxcIjogM1xufSwge1xuICBcInZhbHVlXCI6IFwiUXVldWUgUHJvcGVydGllcyBhbmQgQXJndW1lbnRzXCIsXG4gIFwiaWRcIjogXCJxdWV1ZS1wcm9wZXJ0aWVzLWFuZC1hcmd1bWVudHNcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJUb3BpYyBsZXZlbCBzZXBhcmF0b3IgYW5kIHdpbGRjYXJkc1wiLFxuICBcImlkXCI6IFwidG9waWMtbGV2ZWwtc2VwYXJhdG9yLWFuZC13aWxkY2FyZHNcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJVc2luZyBRdW9ydW0gUXVldWVzXCIsXG4gIFwiaWRcIjogXCJxdW9ydW0tcXVldWVzXCIsXG4gIFwibGV2ZWxcIjogMlxufSwge1xuICBcInZhbHVlXCI6IFwiTVFUVCBRb1MgMCBxdWV1ZSB0eXBlXCIsXG4gIFwiaWRcIjogXCJxb3MwLXF1ZXVlLXR5cGVcIixcbiAgXCJsZXZlbFwiOiAyXG59LCB7XG4gIFwidmFsdWVcIjogXCJPdmVybG9hZCBwcm90ZWN0aW9uXCIsXG4gIFwiaWRcIjogXCJvdmVybG9hZC1wcm90ZWN0aW9uXCIsXG4gIFwibGV2ZWxcIjogM1xufSwge1xuICBcInZhbHVlXCI6IFwiVXNlcnMgYW5kIEF1dGhlbnRpY2F0aW9uXCIsXG4gIFwiaWRcIjogXCJhdXRoZW50aWNhdGlvblwiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIkxvY2FsIHZzLiBSZW1vdGUgQ2xpZW50IENvbm5lY3Rpb25zXCIsXG4gIFwiaWRcIjogXCJsb2NhbC12cy1yZW1vdGVcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJBbm9ueW1vdXMgQ29ubmVjdGlvbnNcIixcbiAgXCJpZFwiOiBcImFub255bW91cy1jb25uZWN0aW9uc1wiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlBsdWdpbiBDb25maWd1cmF0aW9uXCIsXG4gIFwiaWRcIjogXCJjb25maWdcIixcbiAgXCJsZXZlbFwiOiAyXG59LCB7XG4gIFwidmFsdWVcIjogXCJUQ1AgTGlzdGVuZXJzXCIsXG4gIFwiaWRcIjogXCJ0Y3AtbGlzdGVuZXJzXCIsXG4gIFwibGV2ZWxcIjogM1xufSwge1xuICBcInZhbHVlXCI6IFwiVENQIExpc3RlbmVyIE9wdGlvbnNcIixcbiAgXCJpZFwiOiBcImxpc3RlbmVyLW9wdHNcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJUTFMgU3VwcG9ydFwiLFxuICBcImlkXCI6IFwidGxzXCIsXG4gIFwibGV2ZWxcIjogM1xufSwge1xuICBcInZhbHVlXCI6IFwiVmlydHVhbCBIb3N0c1wiLFxuICBcImlkXCI6IFwidmlydHVhbC1ob3N0c1wiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlBvcnQgdG8gVmlydHVhbCBIb3N0IE1hcHBpbmdcIixcbiAgXCJpZFwiOiBcInBvcnQtdG8tdmlydHVhbC1ob3N0LW1hcHBpbmdcIixcbiAgXCJsZXZlbFwiOiA0XG59LCB7XG4gIFwidmFsdWVcIjogXCJWaXJ0dWFsIEhvc3QgYXMgUGFydCBvZiBVc2VybmFtZVwiLFxuICBcImlkXCI6IFwidmlydHVhbC1ob3N0LWFzLXBhcnQtb2YtdXNlcm5hbWVcIixcbiAgXCJsZXZlbFwiOiA0XG59LCB7XG4gIFwidmFsdWVcIjogXCJBdXRoZW50aWNhdGlvbiB3aXRoIFRMUy94NTA5IGNsaWVudCBjZXJ0aWZpY2F0ZXNcIixcbiAgXCJpZFwiOiBcInRscy1jZXJ0aWZpY2F0ZS1hdXRoZW50aWNhdGlvblwiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlVzYWdlIG9mIGNsaWVudF9pZCBFeHRyYWN0aW9uIGZyb20gQ2xpZW50IENlcnRpZmljYXRlcyBmb3IgQXV0aGVudGljYXRpb25cIixcbiAgXCJpZFwiOiBcInVzYWdlLW9mLWNsaWVudF9pZC1leHRyYWN0aW9uLWZyb20tY2xpZW50LWNlcnRpZmljYXRlcy1mb3ItYXV0aGVudGljYXRpb25cIixcbiAgXCJsZXZlbFwiOiA0XG59LCB7XG4gIFwidmFsdWVcIjogXCJGbG93IENvbnRyb2xcIixcbiAgXCJpZFwiOiBcImZsb3dcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJDdXN0b20gRXhjaGFuZ2VzXCIsXG4gIFwiaWRcIjogXCJjdXN0b20tZXhjaGFuZ2VzXCIsXG4gIFwibGV2ZWxcIjogMlxufSwge1xuICBcInZhbHVlXCI6IFwiUmV0YWluZWQgTWVzc2FnZXMgYW5kIFN0b3Jlc1wiLFxuICBcImlkXCI6IFwicmV0YWluZWRcIixcbiAgXCJsZXZlbFwiOiAyXG59LCB7XG4gIFwidmFsdWVcIjogXCJNZXRyaWNzXCIsXG4gIFwiaWRcIjogXCJtZXRyaWNzXCIsXG4gIFwibGV2ZWxcIjogMlxufSwge1xuICBcInZhbHVlXCI6IFwiUHJvbWV0aGV1c1wiLFxuICBcImlkXCI6IFwicHJvbWV0aGV1c1wiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlJhYmJpdE1RIE1hbmFnZW1lbnQgQVBJXCIsXG4gIFwiaWRcIjogXCJyYWJiaXRtcS1tYW5hZ2VtZW50LWFwaVwiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlBlcmZvcm1hbmNlIGFuZCBTY2FsYWJpbGl0eSBDaGVjayBMaXN0XCIsXG4gIFwiaWRcIjogXCJzY2FsYWJpbGl0eVwiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlByb3h5IFByb3RvY29sXCIsXG4gIFwiaWRcIjogXCJwcm94eS1wcm90b2NvbFwiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlNwYXJrcGx1ZyBTdXBwb3J0XCIsXG4gIFwiaWRcIjogXCJzcGFya3BsdWctc3VwcG9ydFwiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIkxpbWl0YXRpb25zXCIsXG4gIFwiaWRcIjogXCJsaW1pdGF0aW9uc1wiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlFvUyAyXCIsXG4gIFwiaWRcIjogXCJxb3MtMlwiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlJlLWF1dGhlbnRpY2F0aW9uXCIsXG4gIFwiaWRcIjogXCJyZS1hdXRoZW50aWNhdGlvblwiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlNoYXJlZCBTdWJzY3JpcHRpb25zXCIsXG4gIFwiaWRcIjogXCJzaGFyZWQtc3Vic2NyaXB0aW9uc1wiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIk92ZXJsYXBwaW5nIFN1YnNjcmlwdGlvbnNcIixcbiAgXCJpZFwiOiBcIm92ZXJsYXBwaW5nLXN1YnNjcmlwdGlvbnNcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJSZXRhaW5lZCBNZXNzYWdlIFN0b3Jlc1wiLFxuICBcImlkXCI6IFwicmV0YWluZWQtbWVzc2FnZS1zdG9yZXNcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJEZWxheWVkIGFuZCBSZXRhaW5lZCBXaWxsIE1lc2FnZVwiLFxuICBcImlkXCI6IFwiZGVsYXllZC1hbmQtcmV0YWluZWQtd2lsbC1tZXNhZ2VcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJEaXNhYmxpbmcgdGhlIFBsdWdpblwiLFxuICBcImlkXCI6IFwiZGlzYWJsaW5nLXBsdWdpblwiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlJldGFpbmVkIE1lc3NhZ2VzIGFuZCBTdG9yZXNcIixcbiAgXCJpZFwiOiBcInJldGFpbmVkXCIsXG4gIFwibGV2ZWxcIjogMlxufV07XG5mdW5jdGlvbiBfY3JlYXRlTWR4Q29udGVudChwcm9wcykge1xuICBjb25zdCBfY29tcG9uZW50cyA9IHtcbiAgICBhOiBcImFcIixcbiAgICBjb2RlOiBcImNvZGVcIixcbiAgICBoMTogXCJoMVwiLFxuICAgIGgyOiBcImgyXCIsXG4gICAgaDM6IFwiaDNcIixcbiAgICBoNDogXCJoNFwiLFxuICAgIGhlYWRlcjogXCJoZWFkZXJcIixcbiAgICBsaTogXCJsaVwiLFxuICAgIG9sOiBcIm9sXCIsXG4gICAgcDogXCJwXCIsXG4gICAgcHJlOiBcInByZVwiLFxuICAgIHN0cm9uZzogXCJzdHJvbmdcIixcbiAgICB0YWJsZTogXCJ0YWJsZVwiLFxuICAgIHRib2R5OiBcInRib2R5XCIsXG4gICAgdGQ6IFwidGRcIixcbiAgICB0aDogXCJ0aFwiLFxuICAgIHRoZWFkOiBcInRoZWFkXCIsXG4gICAgdHI6IFwidHJcIixcbiAgICB1bDogXCJ1bFwiLFxuICAgIC4uLl9wcm92aWRlQ29tcG9uZW50cygpLFxuICAgIC4uLnByb3BzLmNvbXBvbmVudHNcbiAgfTtcbiAgcmV0dXJuIF9qc3hzKF9GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5oZWFkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmgxLCB7XG4gICAgICAgIGlkOiBcIm1xdHQtcGx1Z2luXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIk1RVFQgUGx1Z2luXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDIsIHtcbiAgICAgIGlkOiBcIm92ZXJ2aWV3XCIsXG4gICAgICBjaGlsZHJlbjogXCJPdmVydmlld1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJSYWJiaXRNUSBzdXBwb3J0cyBNUVRUIHZlcnNpb25zXFxyXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcImh0dHBzOi8vcHVibGljLmRoZS5pYm0uY29tL3NvZnR3YXJlL2R3L3dlYnNlcnZpY2VzL3dzLW1xdHQvbXF0dC12M3IxLmh0bWxcIixcbiAgICAgICAgY2hpbGRyZW46IFwiMy4xXCJcbiAgICAgIH0pLCBcIixcXHJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL21xdHQvbXF0dC92My4xLjEvb3MvbXF0dC12My4xLjEtb3MuaHRtbFwiLFxuICAgICAgICBjaGlsZHJlbjogXCIzLjEuMVwiXG4gICAgICB9KSwgXCIsIGFuZFxcclxcblwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWxcIixcbiAgICAgICAgY2hpbGRyZW46IFwiNS4wXCJcbiAgICAgIH0pLCBcIlxcclxcbnZpYSBhIHBsdWdpbiB0aGF0IHNoaXBzIGluIHRoZSBjb3JlIGRpc3RyaWJ1dGlvbi5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJUaGlzIGd1aWRlIGNvdmVycyB0aGUgZm9sbG93aW5nIHRvcGljczpcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy51bCwge1xuICAgICAgY2hpbGRyZW46IFtcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIiNlbmFibGluZy1wbHVnaW5cIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJIb3cgdG8gZW5hYmxlIHRoZSBwbHVnaW5cIlxuICAgICAgICB9KVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCIjZmVhdHVyZXNcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJTdXBwb3J0ZWQgTVFUVCBmZWF0dXJlc1wiXG4gICAgICAgIH0pLCBcIiBhbmQgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiI2xpbWl0YXRpb25zXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwibGltaXRhdGlvbnNcIlxuICAgICAgICB9KV1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIiNpbXBsZW1lbnRhdGlvblwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIk1RVFQgcGx1Z2luIGltcGxlbWVudGF0aW9uIG92ZXJ2aWV3XCJcbiAgICAgICAgfSlcbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW1wiV2hlbiAobm90KSB0byB1c2UgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiI3F1b3J1bS1xdWV1ZXNcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJxdW9ydW0gcXVldWVzXCJcbiAgICAgICAgfSldXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCIjcW9zMC1xdWV1ZS10eXBlXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiTVFUVCBRb1MgMCBxdWV1ZSB0eXBlXCJcbiAgICAgICAgfSlcbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiI2F1dGhlbnRpY2F0aW9uXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiVXNlcnMgYW5kIGF1dGhlbnRpY2F0aW9uXCJcbiAgICAgICAgfSksIFwiIGFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCIjbG9jYWwtdnMtcmVtb3RlXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwicmVtb3RlIGNvbm5lY3Rpb25zXCJcbiAgICAgICAgfSldXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIiNjb25maWdcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJLZXkgY29uZmlndXJhYmxlIHNldHRpbmdzXCJcbiAgICAgICAgfSksIFwiIG9mIHRoZSBwbHVnaW5cIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIiN0bHNcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJUTFMgc3VwcG9ydFwiXG4gICAgICAgIH0pXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCIjdmlydHVhbC1ob3N0c1wiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIlZpcnR1YWwgaG9zdHNcIlxuICAgICAgICB9KVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiI21ldHJpY3NcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJNZXRyaWNzXCJcbiAgICAgICAgfSlcbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIiNzY2FsYWJpbGl0eVwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIlBlcmZvcm1hbmNlIGFuZCBzY2FsYWJpbGl0eSBjaGVjayBsaXN0XCJcbiAgICAgICAgfSlcbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIiNwcm94eS1wcm90b2NvbFwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIlByb3h5IHByb3RvY29sXCJcbiAgICAgICAgfSlcbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIiNzcGFya3BsdWctc3VwcG9ydFwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIlNwYXJrcGx1ZyBzdXBwb3J0XCJcbiAgICAgICAgfSlcbiAgICAgIH0pLCBcIlxcblwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJlbmFibGluZy1wbHVnaW5cIixcbiAgICAgIGNoaWxkcmVuOiBcIkVuYWJsaW5nIHRoZSBQbHVnaW5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhlIE1RVFQgcGx1Z2luIGlzIGluY2x1ZGVkIGluIHRoZSBSYWJiaXRNUSBkaXN0cmlidXRpb24uIEJlZm9yZSBjbGllbnRzIGNhbiBzdWNjZXNzZnVsbHlcXHJcXG5jb25uZWN0LCBpdCBtdXN0IGJlIGVuYWJsZWQgb24gYWxsIGNsdXN0ZXIgbm9kZXMgdXNpbmcgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vbWFuL3JhYmJpdG1xLXBsdWdpbnMuOFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRtcS1wbHVnaW5zXCJcbiAgICAgIH0pLCBcIjpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWJhc2hcIixcbiAgICAgICAgY2hpbGRyZW46IFwicmFiYml0bXEtcGx1Z2lucyBlbmFibGUgcmFiYml0bXFfbXF0dFxcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJmZWF0dXJlc1wiLFxuICAgICAgY2hpbGRyZW46IFwiU3VwcG9ydGVkIE1RVFQgZmVhdHVyZXNcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlJhYmJpdE1RIHN1cHBvcnRzIG1vc3QgTVFUVCA1LjAgZmVhdHVyZXMgaW5jbHVkaW5nIHRoZSBmb2xsb3dpbmc6XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMudWwsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcImh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9tcXR0L21xdHQvdjUuMC9vcy9tcXR0LXY1LjAtb3MuaHRtbCNfVG9jMzkwMTIzNVwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIlFvUyAwIChhdCBtb3N0IG9uY2UpXCJcbiAgICAgICAgfSksIFwiIGFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDEyMzZcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJRb1MgMSAoYXQgbGVhc3Qgb25jZSlcIlxuICAgICAgICB9KSwgXCIgcHVibGlzaCAmIHN1YnNjcmliZVwiXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFwiVExTLCBPQXV0aCAyLjBcIlxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDEwMzlcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJDbGVhblwiXG4gICAgICAgIH0pLCBcIiBhbmQgbm9uLWNsZWFuIHNlc3Npb25zXCJdXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDExMTJcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJNZXNzYWdlIEV4cGlyeSBJbnRlcnZhbFwiXG4gICAgICAgIH0pXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcImh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9tcXR0L21xdHQvdjUuMC9vcy9tcXR0LXY1LjAtb3MuaHRtbCNfVG9jMzkwMTE2NlwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIlN1YnNjcmlwdGlvbiBJZGVudGlmaWVyXCJcbiAgICAgICAgfSksIFwiIGFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDExNjlcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJTdWJzY3JpcHRpb24gT3B0aW9uc1wiXG4gICAgICAgIH0pXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDEwNDBcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJXaWxsIG1lc3NhZ2VzXCJcbiAgICAgICAgfSksIFwiIGluY2x1ZGluZyBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDEwNjJcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJXaWxsIERlbGF5IEludGVydmFsXCJcbiAgICAgICAgfSldXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcImh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9tcXR0L21xdHQvdjUuMC9vcy9tcXR0LXY1LjAtb3MuaHRtbCNfVG9jMzkwMTI1M1wiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIlJlcXVlc3QgLyBSZXNwb25zZVwiXG4gICAgICAgIH0pLCBcIiBpbmNsdWRpbmcgaW50ZXJvcGVyYWJpbGl0eSB3aXRoIG90aGVyIHByb3RvY29scyBzdWNoIGFzIEFNUVAgMC45LjEgYW5kIEFNUVAgMS4wXCJdXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDExMTNcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJUb3BpYyBBbGlhc1wiXG4gICAgICAgIH0pXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcImh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9tcXR0L21xdHQvdjUuMC9vcy9tcXR0LXY1LjAtb3MuaHRtbCNfVG9jMzkwMTEwNFwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIlJldGFpbmVkXCJcbiAgICAgICAgfSksIFwiIG1lc3NhZ2VzIHdpdGggdGhlIGxpbWl0YXRpb25zIGRlc2NyaWJlZCBpbiBzZWN0aW9uIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIiNyZXRhaW5lZFwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIlJldGFpbmVkIE1lc3NhZ2VzIGFuZCBTdG9yZXNcIlxuICAgICAgICB9KV1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL21xdHQvbXF0dC92NS4wL29zL21xdHQtdjUuMC1vcy5odG1sI19Ub2MzOTAxMjg1XCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiTVFUVCBvdmVyIGEgV2ViU29ja2V0XCJcbiAgICAgICAgfSksIFwiIHZpYSB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiLi93ZWItbXF0dFwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIlJhYmJpdE1RIFdlYiBNUVRUIFBsdWdpblwiXG4gICAgICAgIH0pXVxuICAgICAgfSksIFwiXFxuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGUgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi9ibG9nLzIwMjMvMDcvMjEvbXF0dDVcIixcbiAgICAgICAgY2hpbGRyZW46IFwiTVFUVCA1LjAgYmxvZyBwb3N0XCJcbiAgICAgIH0pLCBcIiBwcm92aWRlcyBhIGNvbXBsZXRlIGxpc3Qgb2Ygc3VwcG9ydGVkIE1RVFQgNS4wIGZlYXR1cmVzIGluY2x1ZGluZyB0aGVpciB1c2FnZSBhbmQgaW1wbGVtZW50YXRpb24gZGV0YWlscy5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIk1RVFQgY2xpZW50cyBjYW4gaW50ZXJvcGVyYXRlIHdpdGggb3RoZXIgcHJvdG9jb2xzLlxcclxcbkZvciBleGFtcGxlLCBNUVRUIHB1Ymxpc2hlcnMgY2FuIHNlbmQgbWVzc2FnZXMgdG8gQU1RUCAwLjkuMSBvciBBTVFQIDEuMCBjb25zdW1lcnMgaWYgdGhlc2UgY29uc3VtZXJzIGNvbnN1bWUgZnJvbSBhIHF1ZXVlXFxyXFxudGhhdCBpcyBib3VuZCB0byB0aGUgTVFUVCBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiL3R1dG9yaWFscy9hbXFwLWNvbmNlcHRzI2V4Y2hhbmdlLXRvcGljXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcInRvcGljIGV4Y2hhbmdlXCJcbiAgICAgIH0pLCBcIiAoY29uZmlndXJlZCB2aWEgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJtcXR0LmV4Y2hhbmdlXCJcbiAgICAgIH0pLCBcIiBhbmQgZGVmYXVsdGluZyB0byBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImFtcS50b3BpY1wiXG4gICAgICB9KSwgXCIpLlxcclxcbkxpa2V3aXNlIGFuIEFNUVAgMC45LjEsIEFNUVAgMS4wLCBvciBTVE9NUCBwdWJsaXNoZXIgY2FuIHNlbmQgbWVzc2FnZXMgdG8gYW4gTVFUVCBzdWJzY3JpYmVyIGlmIHRoZSBwdWJsaXNoZXIgcHVibGlzaGVzIHRvIHRoZSBNUVRUIHRvcGljIGV4Y2hhbmdlLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJpbXBsZW1lbnRhdGlvblwiLFxuICAgICAgY2hpbGRyZW46IFwiSG93IHRoZSBNUVRUIHBsdWdpbiB3b3Jrc1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJSYWJiaXRNUSBNUVRUIHBsdWdpbiB0YXJnZXRzIE1RVFQgMy4xLCAzLjEuMSwgYW5kIDUuMCBzdXBwb3J0aW5nIGEgYnJvYWQgcmFuZ2VcXHJcXG5vZiBNUVRUIGNsaWVudHMuIEl0IGFsc28gbWFrZXMgaXQgcG9zc2libGUgZm9yIE1RVFQgY2xpZW50cyB0byBpbnRlcm9wZXJhdGVcXHJcXG53aXRoIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL3Byb3RvY29sc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJBTVFQIDAtOS0xLCBBTVFQIDEuMCwgYW5kIFNUT01QXCJcbiAgICAgIH0pLCBcIiBjbGllbnRzLlxcclxcblRoZXJlIGlzIGFsc28gc3VwcG9ydCBmb3IgbXVsdGktdGVuYW5jeS5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwibWFwcGluZy1tcXR0LXRvLXRoZS1hbXFwLTA5MS1tb2RlbFwiLFxuICAgICAgY2hpbGRyZW46IFwiTWFwcGluZyBNUVRUIHRvIHRoZSBBTVFQIDAuOS4xIG1vZGVsXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlJhYmJpdE1RIGNvcmUgaW1wbGVtZW50cyB0aGUgQU1RUCAwLjkuMSBwcm90b2NvbC5cXHJcXG5UaGUgcGx1Z2luIGJ1aWxkcyBvbiB0b3Agb2YgdGhlIEFNUVAgMC45LjEgZW50aXRpZXM6IFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIvdHV0b3JpYWxzL2FtcXAtY29uY2VwdHMjZXhjaGFuZ2VzXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImV4Y2hhbmdlc1wiXG4gICAgICB9KSwgXCIsIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL3F1ZXVlc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJxdWV1ZXNcIlxuICAgICAgfSksIFwiLCBhbmQgYmluZGluZ3MuXFxyXFxuTWVzc2FnZXMgcHVibGlzaGVkIHRvIE1RVFQgdG9waWNzIGFyZSByb3V0ZWQgYnkgYW4gQU1RUCAwLjkuMSB0b3BpYyBleGNoYW5nZS5cXHJcXG5NUVRUIHN1YnNjcmliZXJzIGNvbnN1bWUgZnJvbSBxdWV1ZXMgYm91bmQgdG8gdGhlIHRvcGljIGV4Y2hhbmdlLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlRoZSBNUVRUIHBsdWdpbiBjcmVhdGVzIGEgZGVkaWNhdGVkIHF1ZXVlIHBlciBNUVRUIHN1YnNjcmliZXIuIFRvIGJlIG1vcmUgcHJlY2lzZSwgdGhlcmUgY291bGQgYmUgMCwgMSwgb3IgMiBxdWV1ZXMgcGVyIE1RVFQgc2Vzc2lvbjpcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy51bCwge1xuICAgICAgY2hpbGRyZW46IFtcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW1wiVGhlcmUgYXJlIDAgcXVldWVzIGZvciBhbiBNUVRUIHNlc3Npb24gaWYgdGhlIE1RVFQgY2xpZW50IG5ldmVyIHNlbmRzIGEgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL21xdHQvbXF0dC92NS4wL29zL21xdHQtdjUuMC1vcy5odG1sI19Ub2MzOTAxMTYxXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiU1VCU0NSSUJFXCJcbiAgICAgICAgfSksIFwiIHBhY2tldC4gVGhlIE1RVFQgY2xpZW50IGlzIG9ubHkgcHVibGlzaGluZyBtZXNzYWdlcy5cIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIlRoZXJlIGlzIDEgcXVldWUgZm9yIGFuIE1RVFQgc2Vzc2lvbiBpZiB0aGUgTVFUVCBjbGllbnQgY3JlYXRlcyBvbmUgb3IgbXVsdGlwbGUgc3Vic2NyaXB0aW9ucyB3aXRoIHRoZSBzYW1lIFFvUyBsZXZlbC5cIlxuICAgICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFwiVGhlcmUgYXJlIDIgcXVldWVzIGZvciBhbiBNUVRUIHNlc3Npb24gaWYgdGhlIE1RVFQgY2xpZW50IGNyZWF0ZXMgc3Vic2NyaXB0aW9ucyB3aXRoIGJvdGggUW9TIGxldmVsczogUW9TIDAgYW5kIFFvUyAxLlwiXG4gICAgICB9KSwgXCJcXG5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIldoZW4gbGlzdGluZyBxdWV1ZXMgeW91IHdpbGwgb2JzZXJ2ZSB0aGUgcXVldWUgbmFtaW5nIHBhdHRlcm4gXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJtcXR0LXN1YnNjcmlwdGlvbi08TVFUVCBjbGllbnQgSUQ+cW9zWzB8MV1cIlxuICAgICAgfSksIFwiIHdoZXJlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiPE1RVFQgY2xpZW50IElEPlwiXG4gICAgICB9KSwgXCIgaXMgdGhlIE1RVFQgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcImh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9tcXR0L21xdHQvdjUuMC9vcy9tcXR0LXY1LjAtb3MuaHRtbCNfVG9jMzkwMTA1OVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJjbGllbnQgaWRlbnRpZmllclwiXG4gICAgICB9KSwgXCIgYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiWzB8MV1cIlxuICAgICAgfSksIFwiIGlzIGVpdGhlciBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIjBcIlxuICAgICAgfSksIFwiIGZvciBhIFFvUyAwIHN1YnNjcmlwdGlvbiBvciBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIjFcIlxuICAgICAgfSksIFwiIGZvciBhIFFvUyAxIHN1YnNjcmlwdGlvbi5cXHJcXG5IYXZpbmcgYSBzZXBhcmF0ZSBxdWV1ZSBwZXIgTVFUVCBzdWJzY3JpYmVyIGFsbG93cyBldmVyeSBNUVRUIHN1YnNjcmliZXIgdG8gcmVjZWl2ZSBpdHMgb3duIGNvcHkgb2YgdGhlIGFwcGxpY2F0aW9uIG1lc3NhZ2UuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiVGhlIHBsdWdpbiBjcmVhdGVzIHF1ZXVlcyB0cmFuc3BhcmVudGx5IGZvciBNUVRUIHN1YnNjcmliaW5nIGNsaWVudHMuXFxyXFxuVGhlIE1RVFQgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCBkZWZpbmUgdGhlIGNvbmNlcHQgb2YgcXVldWVzIGFuZCBNUVRUIGNsaWVudHMgYXJlIG5vdCBhd2FyZSB0aGF0IHRoZXNlIHF1ZXVlcyBleGlzdC5cXHJcXG5BIHF1ZXVlIGlzIGFuIGltcGxlbWVudGF0aW9uIGRldGFpbCBvZiBob3cgUmFiYml0TVEgaW1wbGVtZW50cyB0aGUgTVFUVCBwcm90b2NvbC5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJxdWV1ZS10eXBlc1wiLFxuICAgICAgY2hpbGRyZW46IFwiUXVldWUgVHlwZXNcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiQW4gTVFUVCBjbGllbnQgY2FuIHB1Ymxpc2ggYSBtZXNzYWdlIHRvIGFueSBxdWV1ZSB0eXBlLlxcclxcbkZvciB0aGF0IHRvIHdvcmssIGEgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vY2xhc3NpYy1xdWV1ZXNcIixcbiAgICAgICAgY2hpbGRyZW46IFwiY2xhc3NpYyBxdWV1ZVwiXG4gICAgICB9KSwgXCIsIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL3F1b3J1bS1xdWV1ZXNcIixcbiAgICAgICAgY2hpbGRyZW46IFwicXVvcnVtIHF1ZXVlXCJcbiAgICAgIH0pLCBcIiwgb3IgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vc3RyZWFtc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJzdHJlYW1cIlxuICAgICAgfSksIFwiIG11c3QgYmUgYm91bmQgdG8gdGhlIHRvcGljIGV4Y2hhbmdlIHdpdGggYSBiaW5kaW5nIGtleSBtYXRjaGluZyB0aGUgdG9waWMgb2YgdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDExMDBcIixcbiAgICAgICAgY2hpbGRyZW46IFwiUFVCTElTSFwiXG4gICAgICB9KSwgXCIgcGFja2V0LlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhlIE1RVFQgcGx1Z2luIGNyZWF0ZXMgYSBjbGFzc2ljIHF1ZXVlLCBxdW9ydW0gcXVldWUsIG9yIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIjcW9zMC1xdWV1ZS10eXBlXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIk1RVFQgUW9TIDAgcXVldWVcIlxuICAgICAgfSksIFwiIHBlciBNUVRUIHN1YnNjcmliZXIuXFxyXFxuQnkgZGVmYXVsdCwgdGhlIHBsdWdpbiBjcmVhdGVzIGEgY2xhc3NpYyBxdWV1ZS5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlRoZSBwbHVnaW4gY2FuIGJlIGNvbmZpZ3VyZWQgdG8gY3JlYXRlIHF1b3J1bSBxdWV1ZXMgKGluc3RlYWQgb2YgY2xhc3NpYyBxdWV1ZXMpIGZvciBzdWJzY3JpYmVycyB3aG9zZSBNUVRUIHNlc3Npb24gbGFzdHMgbG9uZ2VyIHRoYW4gdGhlaXIgTVFUVCBuZXR3b3JrIGNvbm5lY3Rpb24uXFxyXFxuVGhpcyBpcyBleHBsYWluZWQgaW4gc2VjdGlvbiBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiI3F1b3J1bS1xdWV1ZXNcIixcbiAgICAgICAgY2hpbGRyZW46IFwiUXVvcnVtIFF1ZXVlc1wiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJJZiBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9mZWF0dXJlLWZsYWdzXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImZlYXR1cmUgZmxhZ1wiXG4gICAgICB9KSwgXCIgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRfbXF0dF9xb3MwX3F1ZXVlXCJcbiAgICAgIH0pLCBcIiBpcyBlbmFibGVkLCB0aGUgcGx1Z2luIGNyZWF0ZXMgYW4gTVFUVCBRb1MgMCBxdWV1ZSBmb3IgUW9TIDAgc3Vic2NyaWJlcnMgd2hvc2UgTVFUVCBzZXNzaW9uIGxhc3QgYXMgbG9uZyBhcyB0aGVpciBNUVRUIG5ldHdvcmsgY29ubmVjdGlvbi5cXHJcXG5UaGlzIGlzIGV4cGxhaW5lZCBpbiBzZWN0aW9uIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIjcW9zMC1xdWV1ZS10eXBlXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIk1RVFQgUW9TIDAgcXVldWUgdHlwZVwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJxdWV1ZS1wcm9wZXJ0aWVzLWFuZC1hcmd1bWVudHNcIixcbiAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9xdWV1ZXMjcHJvcGVydGllc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJRdWV1ZSBQcm9wZXJ0aWVzXCJcbiAgICAgIH0pLCBcIiBhbmQgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vcXVldWVzI29wdGlvbmFsLWFyZ3VtZW50c1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJBcmd1bWVudHNcIlxuICAgICAgfSldXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiU2luY2UgUmFiYml0TVEgMy4xMiBhbGwgcXVldWVzIGNyZWF0ZWQgYnkgdGhlIE1RVFQgcGx1Z2luXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMudWwsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcImFyZSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCIuL3F1ZXVlcyNkdXJhYmlsaXR5XCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiZHVyYWJsZVwiXG4gICAgICAgIH0pLCBcIiwgaS5lLiBxdWV1ZSBtZXRhZGF0YSBpcyBzdG9yZWQgb24gZGlzay5cIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW1wiYXJlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIi4vcXVldWVzI2V4Y2x1c2l2ZS1xdWV1ZXNcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJleGNsdXNpdmVcIlxuICAgICAgICB9KSwgXCIgaWYgdGhlIE1RVFQgc2Vzc2lvbiBsYXN0cyBhcyBsb25nIGFzIHRoZSBNUVRUIG5ldHdvcmsgY29ubmVjdGlvbi5cXHJcXG5JbiB0aGF0IGNhc2UsIFJhYmJpdE1RIHdpbGwgZGVsZXRlIGFsbCBzdGF0ZSBmb3IgdGhlIE1RVFQgY2xpZW50IC0gaW5jbHVkaW5nIGl0cyBxdWV1ZSAtIHdoZW4gdGhlIG5ldHdvcmsgY29ubmVjdGlvbiAoYW5kIHNlc3Npb24pIGVuZHMuXFxyXFxuT25seSB0aGUgc3Vic2NyaWJpbmcgTVFUVCBjbGllbnQgY2FuIGNvbnN1bWUgZnJvbSBpdHMgcXVldWUuXCJdXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcImFyZSBub3QgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcImF1dG8tZGVsZXRlXCJcbiAgICAgICAgfSksIFwiLiBGb3IgZXhhbXBsZSwgaWYgYW4gTVFUVCBjbGllbnQgc3Vic2NyaWJlcyB0byBhIHRvcGljIGFuZCBzdWJzZXF1ZW50bHkgdW5zdWJzY3JpYmVzLCB0aGUgcXVldWUgd2lsbCBub3QgYmUgZGVsZXRlZC5cXHJcXG5Ib3dldmVyLCB0aGUgcXVldWUgd2lsbCBiZSBkZWxldGVkIHdoZW4gdGhlIE1RVFQgc2Vzc2lvbiBlbmRzLlwiXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbXCJoYXZlIGEgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiLi90dGwjcXVldWUtdHRsXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiUXVldWUgVFRMXCJcbiAgICAgICAgfSksIFwiIHNldCAocXVldWUgYXJndW1lbnQgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcIngtZXhwaXJlc1wiXG4gICAgICAgIH0pLCBcIikgaWYgdGhlIE1RVFQgc2Vzc2lvbiBleHBpcmVzIGV2ZW50dWFsbHkgKGkuZS4gc2Vzc2lvbiBleHBpcnkgaXMgbm90IGRpc2FibGVkIGJ5IHRoZSBSYWJiaXRNUSBvcGVyYXRvciwgc2VlIGJlbG93KSBhbmQgb3V0bGFzdHMgdGhlIE1RVFQgbmV0d29yayBjb25uZWN0aW9uLlxcclxcblRoZSBRdWV1ZSBUVEwgKGluIG1pbGxpc2Vjb25kcykgaXMgZGV0ZXJtaW5lZCBieSB0aGUgbWluaW11bSBvZiB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL21xdHQvbXF0dC92NS4wL29zL21xdHQtdjUuMC1vcy5odG1sI19Ub2MzOTAxMDQ4XCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiU2Vzc2lvbiBFeHBpcnkgSW50ZXJ2YWxcIlxuICAgICAgICB9KSwgXCIgKGluIHNlY29uZHMpIHJlcXVlc3RlZCBieSB0aGUgTVFUVCBjbGllbnQgaW4gdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcImh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9tcXR0L21xdHQvdjUuMC9vcy9tcXR0LXY1LjAtb3MuaHRtbCNfVG9jMzkwMTAzM1wiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIkNPTk5FQ1RcIlxuICAgICAgICB9KSwgXCIgcGFja2V0IGFuZCB0aGUgc2VydmVyIHNpZGUgY29uZmlndXJlZCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwibXF0dC5tYXhfc2Vzc2lvbl9leHBpcnlfaW50ZXJ2YWxfc2Vjb25kc1wiXG4gICAgICAgIH0pLCBcIi5cIl1cbiAgICAgIH0pLCBcIlxcblwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhlIGRlZmF1bHQgdmFsdWUgZm9yIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXF0dC5tYXhfc2Vzc2lvbl9leHBpcnlfaW50ZXJ2YWxfc2Vjb25kc1wiXG4gICAgICB9KSwgXCIgaXMgODY0MDAgKDEgZGF5KS5cXHJcXG5BIFJhYmJpdE1RIG9wZXJhdG9yIGNhbiBmb3JjZSBhbGwgTVFUVCBzZXNzaW9ucyB0byBlbmQgYXMgc29vbiBhcyB0aGVpciBuZXR3b3JrIGNvbm5lY3Rpb25zIGVuZCBieSBzZXR0aW5nIHRoaXMgcGFyYW1ldGVyIHRvIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiMFwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJBIFJhYmJpdE1RIG9wZXJhdG9yIGNhbiBhbGxvdyBNUVRUIHNlc3Npb25zIHRvIGxhc3QgZm9yZXZlciBieSBzZXR0aW5nIHRoaXMgcGFyYW1ldGVyIHRvIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiaW5maW5pdHlcIlxuICAgICAgfSksIFwiLlxcclxcblRoaXMgY2FycmllcyBhIHJpc2s6IHNob3J0LWxpdmVkIGNsaWVudHMgdGhhdCBkb24ndCB1c2UgY2xlYW4gc2Vzc2lvbnMgY2FuIGxlYXZlIHF1ZXVlcyBhbmQgbWVzc2FnZXMgYmVoaW5kLCB3aGljaCB3aWxsIGNvbnN1bWUgcmVzb3VyY2VzIGFuZCByZXF1aXJlIG1hbnVhbCBjbGVhbnVwLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlJhYmJpdE1RIGRlbGV0ZXMgYW55IHN0YXRlIGZvciB0aGUgTVFUVCBjbGllbnQgd2hlbiB0aGUgTVFUVCBzZXNzaW9uIGVuZHMuXFxyXFxuVGhpcyBzdGF0ZSBpbmNsdWRlcyB0aGUgY2xpZW50J3MgcXVldWUocykgaW5jbHVkaW5nIFFvUyAwIGFuZCBRb1MgMSBtZXNzYWdlcyBhbmQgdGhlIHF1ZXVlIGJpbmRpbmdzIChpLmUuIHRoZSBjbGllbnQncyBzdWJzY3JpcHRpb25zKS5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJ0b3BpYy1sZXZlbC1zZXBhcmF0b3ItYW5kLXdpbGRjYXJkc1wiLFxuICAgICAgY2hpbGRyZW46IFwiVG9waWMgbGV2ZWwgc2VwYXJhdG9yIGFuZCB3aWxkY2FyZHNcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhlIE1RVFQgcHJvdG9jb2wgc3BlY2lmaWNhdGlvbiBkZWZpbmVzIHNsYXNoIChcXFwiL1xcXCIpIGFzIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDEyNDNcIixcbiAgICAgICAgY2hpbGRyZW46IFwidG9waWMgbGV2ZWwgc2VwYXJhdG9yXCJcbiAgICAgIH0pLCBcIiB3aGVyZWFzXFxyXFxuQU1RUCAwLTktMSBkZWZpbmVzIGEgZG90IChcXFwiLlxcXCIpIGFzIHRvcGljIGxldmVsIHNlcGFyYXRvci4gVGhpcyBwbHVnaW4gdHJhbnNsYXRlcyBwYXR0ZXJucyB1bmRlciB0aGUgaG9vZFxcclxcbnRvIGJyaWRnZSB0aGUgdHdvLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiRm9yIGV4YW1wbGUsIE1RVFQgdG9waWMgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJjaXRpZXMvbG9uZG9uXCJcbiAgICAgIH0pLCBcIiBiZWNvbWVzIEFNUVAgMC45LjEgdG9waWMgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJjaXRpZXMubG9uZG9uXCJcbiAgICAgIH0pLCBcIiBhbmQgdmljZSB2ZXJzYS5cXHJcXG5UaGVyZWZvcmUsIHdoZW4gYW4gTVFUVCBjbGllbnQgcHVibGlzaGVzIGEgbWVzc2FnZSB3aXRoIHRvcGljIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiY2l0aWVzL2xvbmRvblwiXG4gICAgICB9KSwgXCIsIGlmIGFuIEFNUVAgMC45LjEgY2xpZW50IHdhbnRzIHRvIHJlY2VpdmUgdGhhdCBtZXNzYWdlLCBpdCBzaG91bGQgY3JlYXRlIGEgYmluZGluZyBmcm9tIGl0cyBxdWV1ZVxcclxcbnRvIHRoZSB0b3BpYyBleGNoYW5nZSB3aXRoIGJpbmRpbmcga2V5IFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiY2l0aWVzLmxvbmRvblwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJWaWNlIHZlcnNhLCB3aGVuIGFuIEFNUVAgMC45LjEgY2xpZW50IHB1Ymxpc2hlcyBhIG1lc3NhZ2Ugd2l0aCB0b3BpYyBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImNpdGllcy5sb25kb25cIlxuICAgICAgfSksIFwiLCBpZiBhbiBNUVRUIGNsaWVudCB3YW50cyB0byByZWNlaXZlIHRoYXQgbWVzc2FnZSwgaXQgc2hvdWxkIGNyZWF0ZSBhbiBNUVRUIHN1YnNjcmlwdGlvbiB3aXRoIHRvcGljIGZpbHRlciBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImNpdGllcy9sb25kb25cIlxuICAgICAgfSksIFwiLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlRoaXMgaGFzIG9uZSBpbXBvcnRhbnQgbGltaXRhdGlvbjogTVFUVCB0b3BpY3MgdGhhdCBoYXZlIGRvdHMgaW4gdGhlbSB3b24ndCB3b3JrIGFzIGV4cGVjdGVkIGFuZCBhcmUgdG8gYmUgYXZvaWRlZCwgdGhlIHNhbWUgZ29lcyBmb3IgQU1RUCAwLTktMSByb3V0aW5nIGFuZCBiaW5kaW5nIGtleXMgdGhhdCBjb250YWlucyBzbGFzaGVzLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJGdXJ0aGVybW9yZSwgTVFUVCBkZWZpbmVzIHRoZSBwbHVzIHNpZ24gKFxcXCIrXFxcIikgYXMgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcImh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9tcXR0L21xdHQvdjUuMC9vcy9tcXR0LXY1LjAtb3MuaHRtbCNfVG9jMzkwMTI0NVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJzaW5nbGUtbGV2ZWwgd2lsZGNhcmRcIlxuICAgICAgfSksIFwiIHdoZXJlYXMgQU1RUCAwLjkuMVxcclxcbmRlZmluZXMgdGhlIGFzdGVyaXNrIHNpZ24gKFxcXCIqXFxcIikgdG8gbWF0Y2ggYSBzaW5nbGUgd29yZDpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMudGFibGUsIHtcbiAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy50aGVhZCwge1xuICAgICAgICBjaGlsZHJlbjogX2pzeHMoX2NvbXBvbmVudHMudHIsIHtcbiAgICAgICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMudGgsIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBcIk1RVFRcIlxuICAgICAgICAgIH0pLCBfanN4KF9jb21wb25lbnRzLnRoLCB7XG4gICAgICAgICAgICBjaGlsZHJlbjogXCJBTVFQIDAuOS4xXCJcbiAgICAgICAgICB9KSwgX2pzeChfY29tcG9uZW50cy50aCwge1xuICAgICAgICAgICAgY2hpbGRyZW46IFwiRGVzY3JpcHRpb25cIlxuICAgICAgICAgIH0pXVxuICAgICAgICB9KVxuICAgICAgfSksIF9qc3hzKF9jb21wb25lbnRzLnRib2R5LCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeHMoX2NvbXBvbmVudHMudHIsIHtcbiAgICAgICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMudGQsIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBcIi8gKHNsYXNoKVwiXG4gICAgICAgICAgfSksIF9qc3goX2NvbXBvbmVudHMudGQsIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBcIi4gKGRvdClcIlxuICAgICAgICAgIH0pLCBfanN4KF9jb21wb25lbnRzLnRkLCB7XG4gICAgICAgICAgICBjaGlsZHJlbjogXCJ0b3BpYyBsZXZlbCBzZXBhcmF0b3JcIlxuICAgICAgICAgIH0pXVxuICAgICAgICB9KSwgX2pzeHMoX2NvbXBvbmVudHMudHIsIHtcbiAgICAgICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMudGQsIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBcIisgKHBsdXMpXCJcbiAgICAgICAgICB9KSwgX2pzeChfY29tcG9uZW50cy50ZCwge1xuICAgICAgICAgICAgY2hpbGRyZW46IFwiKiAoYXN0ZXJpc2spXCJcbiAgICAgICAgICB9KSwgX2pzeChfY29tcG9uZW50cy50ZCwge1xuICAgICAgICAgICAgY2hpbGRyZW46IFwic2luZ2xlLWxldmVsIHdpbGRjYXJkIChtYXRjaCBhIHNpbmdsZSB3b3JkKVwiXG4gICAgICAgICAgfSldXG4gICAgICAgIH0pLCBfanN4cyhfY29tcG9uZW50cy50ciwge1xuICAgICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy50ZCwge1xuICAgICAgICAgICAgY2hpbGRyZW46IFwiIyAoaGFzaClcIlxuICAgICAgICAgIH0pLCBfanN4KF9jb21wb25lbnRzLnRkLCB7XG4gICAgICAgICAgICBjaGlsZHJlbjogXCIjIChoYXNoKVwiXG4gICAgICAgICAgfSksIF9qc3goX2NvbXBvbmVudHMudGQsIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBcIm11bHRpLWxldmVsIHdpbGRjYXJkIChtYXRjaCB6ZXJvIG9yIG1vcmUgd29yZHMpXCJcbiAgICAgICAgICB9KV1cbiAgICAgICAgfSldXG4gICAgICB9KV1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwicXVvcnVtLXF1ZXVlc1wiLFxuICAgICAgY2hpbGRyZW46IFwiVXNpbmcgUXVvcnVtIFF1ZXVlc1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJVc2luZyB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJtcXR0LmR1cmFibGVfcXVldWVfdHlwZVwiXG4gICAgICB9KSwgXCIgb3B0aW9uLCBpdCBpcyBwb3NzaWJsZSB0byBvcHQgaW4gdG8gdXNlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL3F1b3J1bS1xdWV1ZXNcIixcbiAgICAgICAgY2hpbGRyZW46IFwicXVvcnVtIHF1ZXVlc1wiXG4gICAgICB9KSwgXCIgZm9yIHN1YnNjcmliZXJzIHdob3NlIE1RVFQgc2Vzc2lvbiBsYXN0cyBsb25nZXIgdGhhbiB0aGVpciBNUVRUIG5ldHdvcmsgY29ubmVjdGlvbi5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLnN0cm9uZywge1xuICAgICAgICBjaGlsZHJlbjogXCJUaGlzIHZhbHVlIG11c3Qgb25seSBiZSBlbmFibGVkIGZvciBuZXcgY2x1c3RlcnNcIlxuICAgICAgfSksIFwiIGJlZm9yZSBhbnkgY2xpZW50cyBkZWNsYXJlIGR1cmFibGUgc3Vic2NyaXB0aW9ucy5cXHJcXG5TaW5jZSBhIHF1ZXVlIHR5cGUgY2Fubm90IGJlIGNoYW5nZWQgYWZ0ZXIgZGVjbGFyYXRpb24sIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIHNldHRpbmcgaXMgY2hhbmdlZCBmb3IgYW4gZXhpc3RpbmcgY2x1c3RlciwgY2xpZW50cyB3aXRoIGFuIGV4aXN0aW5nIGR1cmFibGUgc3RhdGUgd291bGQgcnVuIGludG8gYSBxdWV1ZSB0eXBlIG1pc21hdGNoIGVycm9yIGFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5zdHJvbmcsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiZmFpbCB0byBzdWJzY3JpYmVcIlxuICAgICAgfSksIFwiLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiQmVsb3cgaXMgYSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9jb25maWd1cmUjY29uZmlnLWZpbGVcIixcbiAgICAgICAgY2hpbGRyZW46IFwicmFiYml0bXEuY29uZlwiXG4gICAgICB9KSwgXCIgZXhhbXBsZSB0aGF0IG9wdHMgaW4gdG8gdXNlIHF1b3J1bSBxdWV1ZXM6XCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1pbmlcIixcbiAgICAgICAgY2hpbGRyZW46IFwiIyBtdXN0IE9OTFkgYmUgZW5hYmxlZCBmb3IgbmV3IGNsdXN0ZXJzIGJlZm9yZSBhbnkgY2xpZW50cyBkZWNsYXJlIGR1cmFibGUgc3Vic2NyaXB0aW9uc1xcclxcbm1xdHQuZHVyYWJsZV9xdWV1ZV90eXBlID0gcXVvcnVtXFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJDdXJyZW50bHksIHRoaXMgc2V0dGluZyBhcHBsaWVzIHRvIFwiLCBfanN4KF9jb21wb25lbnRzLnN0cm9uZywge1xuICAgICAgICBjaGlsZHJlbjogXCJhbGxcIlxuICAgICAgfSksIFwiIE1RVFQgY2xpZW50cyB0aGF0OlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5vbCwge1xuICAgICAgY2hpbGRyZW46IFtcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInN1YnNjcmliZSB3aXRoIFFvUyAxLCBhbmRcIlxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbXCJjb25uZWN0ZWQgd2l0aCBhIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcImh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9tcXR0L21xdHQvdjUuMC9vcy9tcXR0LXY1LjAtb3MuaHRtbCNfVG9jMzkwMTA0OFwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIlNlc3Npb24gRXhwaXJ5IEludGVydmFsXCJcbiAgICAgICAgfSksIFwiIGdyZWF0ZXIgdGhhbiAwIChNUVRUIDUuMCkgb3Igc2V0IENsZWFuU2Vzc2lvbiB0byAwIChNUVRUIDMuMS4xKVwiXVxuICAgICAgfSksIFwiXFxuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiVGhlIHNlY29uZCBjb25kaXRpb24gbWVhbnMgdGhhdCB0aGUgTVFUVCBzZXNzaW9uIG91dGxhc3RzIHRoZSBNUVRUIG5ldHdvcmsgY29ubmVjdGlvbi5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiV2hpbGUgcXVvcnVtIHF1ZXVlcyBhcmUgZGVzaWduZWQgZm9yIGRhdGEgc2FmZXR5IGFuZCBwcmVkaWN0YWJsZSBlZmZpY2llbnQgcmVjb3ZlcnlcXHJcXG5mcm9tIHJlcGxpY2EgZmFpbHVyZXMsIHRoZXkgYWxzbyBoYXZlIGRvd25zaWRlcy4gQSBxdW9ydW0gcXVldWUgYnkgZGVmaW5pdGlvbiByZXF1aXJlc1xcclxcbmF0IGxlYXN0IHRocmVlIHJlcGxpY2FzIGluIHRoZSBjbHVzdGVyLiBUaGVyZWZvcmUgcXVvcnVtIHF1ZXVlcyB0YWtlIGxvbmdlciB0byBkZWNsYXJlXFxyXFxuYW5kIGRlbGV0ZSwgYW5kIGFyZSBub3QgYSBnb29kIGZpdCBmb3IgZW52aXJvbm1lbnRzIHdpdGggXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vbmV0d29ya2luZyNkZWFsaW5nLXdpdGgtaGlnaC1jb25uZWN0aW9uLWNodXJuXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImhpZ2ggY2xpZW50IGNvbm5lY3Rpb24gY2h1cm5cIlxuICAgICAgfSksIFwiIG9yXFxyXFxuZW52aXJvbm1lbnRzIHdpdGggbWFueSAoaHVuZHJlZHMgb2YgdGhvdXNhbmRzKSBzdWJzY3JpYmVycy5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJRdW9ydW0gcXVldWVzIGFyZSBhIGdyZWF0IGZpdCBmb3IgYSBmZXcgKGh1bmRyZWRzKSBsb25nZXIgbGl2ZWQgY2xpZW50cyB0aGF0IGFjdHVhbGx5IGNhcmUgYSBncmVhdCBkZWFsIGFib3V0IGRhdGEgc2FmZXR5LlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDIsIHtcbiAgICAgIGlkOiBcInFvczAtcXVldWUtdHlwZVwiLFxuICAgICAgY2hpbGRyZW46IFwiTVFUVCBRb1MgMCBxdWV1ZSB0eXBlXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJUaGUgTVFUVCBwbHVnaW4gY3JlYXRlcyBhbiBNUVRUIFFvUyAwIHF1ZXVlIGlmIHRoZSBmb2xsb3dpbmcgdGhyZWUgY29uZGl0aW9ucyBhcmUgbWV0OlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLm9sLCB7XG4gICAgICBjaGlsZHJlbjogW1wiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCIuL2ZlYXR1cmUtZmxhZ3NcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJGZWF0dXJlIGZsYWdcIlxuICAgICAgICB9KSwgXCIgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdF9tcXR0X3FvczBfcXVldWVcIlxuICAgICAgICB9KSwgXCIgaXMgZW5hYmxlZC5cIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIlRoZSBNUVRUIGNsaWVudCBzdWJzY3JpYmVzIHdpdGggUW9TIDAuXCJcbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW1wiVGhlIE1RVFQgNS4wIGNsaWVudCBjb25uZWN0cyB3aXRoIGEgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL21xdHQvbXF0dC92NS4wL29zL21xdHQtdjUuMC1vcy5odG1sI19Ub2MzOTAxMDQ4XCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiU2Vzc2lvbiBFeHBpcnkgSW50ZXJ2YWxcIlxuICAgICAgICB9KSwgXCIgb2YgMCwgb3IgdGhlIE1RVFQgMy4xLjEgY2xpZW50IGNvbm5lY3RzIHdpdGggQ2xlYW5TZXNzaW9uIHNldCB0byAxLlwiXVxuICAgICAgfSksIFwiXFxuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiVGhlIHRoaXJkIGNvbmRpdGlvbiBtZWFucyB0aGF0IHRoZSBNUVRUIHNlc3Npb24gbGFzdHMgb25seSBhcyBsb25nIGFzIHRoZSBuZXR3b3JrIGNvbm5lY3Rpb24uXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJUaGUgTVFUVCBRb1MgMCBxdWV1ZSB0eXBlIGNhbiBiZSB0aG91Z2h0IG9mIGFzIGEg4oCccHNldWRv4oCdIG9yIOKAnHZpcnR1YWzigJ0gcXVldWU6XFxyXFxuSXQgaXMgdmVyeSBkaWZmZXJlbnQgZnJvbSB0aGUgb3RoZXIgcXVldWUgdHlwZXMgKGNsYXNzaWMgcXVldWVzLCBxdW9ydW0gcXVldWVzLCBhbmQgc3RyZWFtcykgaW4gdGhlIHNlbnNlIHRoYXQgdGhpcyBuZXcgcXVldWUgdHlwZSBpcyBuZWl0aGVyIGEgc2VwYXJhdGUgRXJsYW5nIHByb2Nlc3Mgbm9yIGRvZXMgaXQgc3RvcmUgbWVzc2FnZXMgb24gZGlzay5cXHJcXG5JbnN0ZWFkLCB0aGlzIHF1ZXVlIHR5cGUgaXMgYSBzdWJzZXQgb2YgdGhlIEVybGFuZyBwcm9jZXNzIG1haWxib3guXFxyXFxuTVFUVCBtZXNzYWdlcyBhcmUgZGlyZWN0bHkgc2VudCB0byB0aGUgTVFUVCBjb25uZWN0aW9uIHByb2Nlc3Mgb2YgdGhlIHN1YnNjcmliaW5nIGNsaWVudC5cXHJcXG5JbiBvdGhlciB3b3JkcywgTVFUVCBtZXNzYWdlcyBhcmUgc2VudCB0byBhbnkg4oCcb25saW5l4oCdIE1RVFQgc3Vic2NyaWJlcnMuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkl0IGlzIG1vcmUgYWNjdXJhdGUgdG8gdGhpbmsgb2YgdGhlIHF1ZXVlIGJlaW5nIFxcXCJza2lwcGVkXFxcIi5cXHJcXG5UaGUgZmFjdCB0aGF0IHNlbmRpbmcgbWVzc2FnZXMgZGlyZWN0bHkgdG8gdGhlIE1RVFQgY29ubmVjdGlvbiBwcm9jZXNzIGlzIGltcGxlbWVudGVkIGFzIGEgcXVldWUgdHlwZSBpcyB0byBzaW1wbGlmeSByb3V0aW5nIG9mIG1lc3NhZ2VzIGFuZCBwcm90b2NvbCBpbnRlcm9wZXJhYmlsaXR5LFxcclxcbnN1Y2ggdGhhdCBtZXNzYWdlcyBjYW4gbm90IG9ubHkgYmUgc2VudCBmcm9tIHRoZSBNUVRUIHB1Ymxpc2hpbmcgY29ubmVjdGlvbiBwcm9jZXNzLCBidXQgYWxzbyBmcm9tIGFuIEFNUVAgMC45LjEgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vY2hhbm5lbHNcIixcbiAgICAgICAgY2hpbGRyZW46IFwiY2hhbm5lbFwiXG4gICAgICB9KSwgXCIgcHJvY2Vzcy5cXHJcXG5UaGUgbGF0dGVyIGVuYWJsZXMgc2VuZGluZyBtZXNzYWdlcyBmcm9tIGFuIEFNUVAgMC45LjEsIEFNUVAgMS4wIG9yIFNUT01QIGNsaWVudCBkaXJlY3RseSB0byB0aGUgTVFUVCBzdWJzY3JpYmVyIGNvbm5lY3Rpb24gcHJvY2VzcyBza2lwcGluZyBhIGRlZGljYXRlZCBxdWV1ZSBwcm9jZXNzLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlRoZSBiZW5lZml0cyBvZiB1c2luZyB0aGUgTVFUVCBRb1MgMCBxdWV1ZXMgdHlwZSBhcmU6XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMub2wsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogXCJTdXBwb3J0IGZvciBsYXJnZXIgZmFub3V0cywgZS5nLiBzZW5kaW5nIGEgbWVzc2FnZSBmcm9tIHRoZSBcXFwiY2xvdWRcXFwiIChSYWJiaXRNUSkgdG8gYWxsIGRldmljZXMgKE1RVFQgY2xpZW50cykuXCJcbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW1wiTG93ZXIgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiLi9tZW1vcnktdXNlXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwibWVtb3J5IHVzYWdlXCJcbiAgICAgICAgfSldXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogXCJMb3dlciBwdWJsaXNoZXIgY29uZmlybSBsYXRlbmN5XCJcbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIkxvd2VyIGVuZC10by1lbmQgbGF0ZW5jeVwiXG4gICAgICB9KSwgXCJcXG5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJCZWNhdXNlIHRoZSBNUVRUIFFvUyAwIHF1ZXVlIHR5cGUgaGFzIG5vIGZsb3cgY29udHJvbCwgTVFUVCBtZXNzYWdlcyBtaWdodCBhcnJpdmUgZmFzdGVyIGluIHRoZSBNUVRUIGNvbm5lY3Rpb24gcHJvY2VzcyBtYWlsYm94IHRoYW4gYmVpbmcgZGVsaXZlcmVkIGZyb20gdGhlIE1RVFQgY29ubmVjdGlvbiBwcm9jZXNzIHRvIHRoZSBNUVRUIHN1YnNjcmliaW5nIGNsaWVudC5cXHJcXG5UaGlzIGNhbiBoYXBwZW4gd2hlbiB0aGUgbmV0d29yayBjb25uZWN0aW9uIGJldHdlZW4gTVFUVCBzdWJzY3JpYmluZyBjbGllbnQgYW5kIFJhYmJpdE1RIGlzIHBvb3Igb3IgaW4gYSBsYXJnZSBmYW4taW4gc2NlbmFyaW8gd2hlcmUgbWFueSBwdWJsaXNoZXJzIG92ZXJsb2FkIGEgc2luZ2xlIE1RVFQgc3Vic2NyaWJpbmcgY2xpZW50LlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcIm92ZXJsb2FkLXByb3RlY3Rpb25cIixcbiAgICAgIGNoaWxkcmVuOiBcIk92ZXJsb2FkIHByb3RlY3Rpb25cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVG8gcHJvdGVjdCBhZ2FpbnN0IGhpZ2ggXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vbWVtb3J5LXVzZVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJtZW1vcnkgdXNhZ2VcIlxuICAgICAgfSksIFwiIGR1ZSB0byBNUVRUIFFvUyAwIG1lc3NhZ2VzIHBpbGluZyB1cCBpbiB0aGUgTVFUVCBjb25uZWN0aW9uIHByb2Nlc3MgbWFpbGJveCwgUmFiYml0TVEgaW50ZW50aW9uYWxseSBkcm9wcyBRb1MgMCBtZXNzYWdlcyBmcm9tIHRoZSBNUVRUIFFvUyAwIHF1ZXVlIGlmIGJvdGggY29uZGl0aW9ucyBhcmUgdHJ1ZTpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMub2wsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcInRoZSBudW1iZXIgb2YgbWVzc2FnZXMgaW4gdGhlIE1RVFQgY29ubmVjdGlvbiBwcm9jZXNzIG1haWxib3ggZXhjZWVkcyB0aGUgY29uZmlndXJlZCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwibXF0dC5tYWlsYm94X3NvZnRfbGltaXRcIlxuICAgICAgICB9KSwgXCIgKGRlZmF1bHRzIHRvIDIwMCksIGFuZFwiXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFwidGhlIHNvY2tldCBzZW5kaW5nIHRvIHRoZSBNUVRUIGNsaWVudCBpcyBidXN5IChub3Qgc2VuZGluZyBmYXN0IGVub3VnaCBkdWUgdG8gVENQIGJhY2twcmVzc3VyZSkuXCJcbiAgICAgIH0pLCBcIlxcblwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiTm90ZSB0aGF0IHRoZXJlIGNhbiBiZSBvdGhlciBtZXNzYWdlcyBpbiB0aGUgcHJvY2VzcyBtYWlsYm94IChlLmcuIGFwcGxpY2F0aW9ucyBtZXNzYWdlcyBzZW50IGZyb20gdGhlIE1RVFQgc3Vic2NyaWJpbmcgY2xpZW50IHRvIFJhYmJpdE1RIG9yIGNvbmZpcm1hdGlvbnMgZnJvbSBhbm90aGVyIHF1ZXVlIHR5cGUgdG8gdGhlIE1RVFQgY29ubmVjdGlvbiBwcm9jZXNzKSB3aGljaCBhcmUgb2J2aW91c2x5IG5vdCBkcm9wcGVkLlxcclxcbkhvd2V2ZXIsIHRoZXNlIG90aGVyIG1lc3NhZ2VzIGFsc28gY29udHJpYnV0ZSB0byB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJtcXR0Lm1haWxib3hfc29mdF9saW1pdFwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJTZXR0aW5nIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXF0dC5tYWlsYm94X3NvZnRfbGltaXRcIlxuICAgICAgfSksIFwiIHRvIDAgZGlzYWJsZXMgdGhlIG92ZXJsb2FkIHByb3RlY3Rpb24gbWVjaGFuaXNtIG1lYW5pbmcgUW9TIDAgbWVzc2FnZXMgYXJlIG5ldmVyIGRyb3BwZWQgaW50ZW50aW9uYWxseSBieSBSYWJiaXRNUS5cXHJcXG5TZXR0aW5nIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXF0dC5tYWlsYm94X3NvZnRfbGltaXRcIlxuICAgICAgfSksIFwiIHRvIGEgdmVyeSBoaWdoIHZhbHVlIGRlY3JlYXNlcyB0aGUgbGlrZWxpaG9vZCBvZiBpbnRlbnRpb25hbGx5IGRyb3BwaW5nIFFvUyAwIG1lc3NhZ2VzIHdoaWxlIGluY3JlYXNpbmcgdGhlIHJpc2sgb2YgY2F1c2luZyBhIGNsdXN0ZXIgd2lkZSBtZW1vcnkgYWxhcm1cXHJcXG4oZXNwZWNpYWxseSBpZiB0aGUgbWVzc2FnZSBwYXlsb2FkcyBhcmUgbGFyZ2Ugb3IgaWYgdGhlcmUgYXJlIG1hbnkgb3ZlcmxvYWRlZCBxdWV1ZXMgb2YgdHlwZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdF9tcXR0X3FvczBfcXVldWVcIlxuICAgICAgfSksIFwiKS5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHQubWFpbGJveF9zb2Z0X2xpbWl0XCJcbiAgICAgIH0pLCBcIiBjYW4gYmUgdGhvdWdodCBvZiBhIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL21heGxlbmd0aFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJxdWV1ZSBsZW5ndGggbGltaXRcIlxuICAgICAgfSksIFwiIChhbHRob3VnaCBub3QgcHJlY2lzZWx5IGJlY2F1c2UsIGFzIG1lbnRpb25lZCBwcmV2aW91c2x5LCB0aGUgRXJsYW5nIHByb2Nlc3MgbWFpbGJveCBjYW4gY29udGFpbiBvdGhlciBtZXNzYWdlcyB0aGFuIE1RVFQgYXBwbGljYXRpb24gbWVzc2FnZXMpLlxcclxcblRoaXMgaXMgd2h5IHRoZSBjb25maWd1cmF0aW9uIGtleSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHQubWFpbGJveF9zb2Z0X2xpbWl0XCJcbiAgICAgIH0pLCBcIiBjb250YWlucyB0aGUgd29yZCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInNvZnRcIlxuICAgICAgfSksIFwiLlxcclxcblRoZSBkZXNjcmliZWQgb3ZlcmxvYWQgcHJvdGVjdGlvbiBtZWNoYW5pc20gY29ycmVzcG9uZHMgcm91Z2hseSB0byBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9tYXhsZW5ndGgjb3ZlcmZsb3ctYmVoYXZpb3VyXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIm92ZXJmbG93IGJlaGF2aW91clwiXG4gICAgICB9KSwgXCIgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJkcm9wLWhlYWRcIlxuICAgICAgfSksIFwiIHRoYXQgZXhpc3RzIGluIGNsYXNzaWMgcXVldWVzIGFuZCBxdW9ydW0gcXVldWVzLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhlIGZvbGxvd2luZyBQcm9tZXRoZXVzIG1ldHJpYyByZXBvcnRlZCBieSBhIGdpdmVuIFJhYmJpdE1RIG5vZGUgc2hvd3MgaG93IG1hbnkgUW9TIDAgbWVzc2FnZXMgd2VyZSBkcm9wcGVkIGluIHRvdGFsIGFjcm9zcyBhbGwgcXVldWVzIG9mIHR5cGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRfbXF0dF9xb3MwX3F1ZXVlXCJcbiAgICAgIH0pLCBcIiBkdXJpbmcgdGhlIGxpZmV0aW1lIG9mIHRoYXQgbm9kZTpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWJhc2hcIixcbiAgICAgICAgY2hpbGRyZW46IFwicmFiYml0bXFfZ2xvYmFsX21lc3NhZ2VzX2RlYWRfbGV0dGVyZWRfbWF4bGVuX3RvdGFse3F1ZXVlX3R5cGU9XFxcInJhYmJpdF9tcXR0X3FvczBfcXVldWVcXFwiLGRlYWRfbGV0dGVyX3N0cmF0ZWd5PVxcXCJkaXNhYmxlZFxcXCJ9IDBcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiL2Jsb2cvMjAyMy8wMy8yMS9uYXRpdmUtbXF0dCNuZXctbXF0dC1xb3MtMC1xdWV1ZS10eXBlXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIk5hdGl2ZSBNUVRUXCJcbiAgICAgIH0pLCBcIiBibG9nIHBvc3QgZGVzY3JpYmVzIHRoZSBNUVRUIFFvUyAwIHF1ZXVlIHR5cGUgaW4gbW9yZSBkZXRhaWwuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDIsIHtcbiAgICAgIGlkOiBcImF1dGhlbnRpY2F0aW9uXCIsXG4gICAgICBjaGlsZHJlbjogXCJVc2VycyBhbmQgQXV0aGVudGljYXRpb25cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIk1RVFQgY2xpZW50cyB3aWxsIGJlIGFibGUgdG8gY29ubmVjdCBwcm92aWRlZCB0aGF0IHRoZXkgaGF2ZSBhIHNldCBvZiBjcmVkZW50aWFscyBmb3IgYW4gZXhpc3RpbmcgdXNlciB3aXRoIHRoZSBhcHByb3ByaWF0ZSBwZXJtaXNzaW9ucy5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiRm9yIGFuIE1RVFQgY29ubmVjdGlvbiB0byBzdWNjZWVkLCBpdCBtdXN0IHN1Y2Nlc3NmdWxseSBhdXRoZW50aWNhdGUgYW5kIHRoZSB1c2VyIG11c3RcXHJcXG5oYXZlIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9hY2Nlc3MtY29udHJvbFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJhcHByb3ByaWF0ZSBwZXJtaXNzaW9uc1wiXG4gICAgICB9KSwgXCIgdG8gdGhlIHZpcnR1YWwgaG9zdCB1c2VkIGJ5IHRoZVxcclxcbnBsdWdpbiAoc2VlIGJlbG93KS5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJNUVRUIGNsaWVudHMgY2FuIChhbmQgdXN1YWxseSBkbykgc3BlY2lmeSBhIHNldCBvZiBjcmVkZW50aWFscyB3aGVuIHRoZXkgY29ubmVjdC4gVGhlIGNyZWRlbnRpYWxzXFxyXFxuY2FuIGJlIGEgdXNlcm5hbWUgYW5kIHBhc3N3b3JkIHBhaXIsIG9yIGEgeC41MDkgY2VydGlmaWNhdGUgKHNlZSBiZWxvdykuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJUaGUgcGx1Z2luIHN1cHBvcnRzIGFub255bW91cyBhdXRoZW50aWNhdGlvbiBidXQgaXRzIHVzZSBpcyBoaWdobHkgZGlzY291cmFnZWQgYW5kIGl0IGlzIGEgc3ViamVjdFxcclxcbnRvIGNlcnRhaW4gbGltaXRhdGlvbnMgKGxpc3RlZCBiZWxvdykgZW5mb3JjZWQgZm9yIGEgcmVhc29uYWJsZSBsZXZlbCBvZiBzZWN1cml0eVxcclxcbmJ5IGRlZmF1bHQuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlVzZXJzIGFuZCB0aGVpciBwZXJtaXNzaW9ucyBjYW4gYmUgbWFuYWdlZCB1c2luZyBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9jbGlcIixcbiAgICAgICAgY2hpbGRyZW46IFwicmFiYml0bXFjdGxcIlxuICAgICAgfSksIFwiLCBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9tYW5hZ2VtZW50XCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIm1hbmFnZW1lbnQgVUlcIlxuICAgICAgfSksIFwiXFxyXFxub3IgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vbWFuYWdlbWVudCNodHRwLWFwaVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJIVFRQIEFQSVwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJGb3IgZXhhbXBsZSwgdGhlIGZvbGxvd2luZyBjb21tYW5kcyBjcmVhdGUgYSBuZXcgdXNlciBmb3IgTVFUVCBjb25uZWN0aW9ucyB3aXRoIGZ1bGwgYWNjZXNzXFxyXFxudG8gdGhlIGRlZmF1bHQgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vdmhvc3RzXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcInZpcnR1YWwgaG9zdFwiXG4gICAgICB9KSwgXCIgdXNlZCBieSB0aGlzIHBsdWdpbjpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWJhc2hcIixcbiAgICAgICAgY2hpbGRyZW46IFwiIyB1c2VybmFtZSBhbmQgcGFzc3dvcmQgYXJlIGJvdGggXFxcIm1xdHQtdGVzdFxcXCJcXHJcXG5yYWJiaXRtcWN0bCBhZGRfdXNlciBtcXR0LXRlc3QgbXF0dC10ZXN0XFxyXFxucmFiYml0bXFjdGwgc2V0X3Blcm1pc3Npb25zIC1wIFxcXCIvXFxcIiBtcXR0LXRlc3QgXFxcIi4qXFxcIiBcXFwiLipcXFwiIFxcXCIuKlxcXCJcXHJcXG5yYWJiaXRtcWN0bCBzZXRfdXNlcl90YWdzIG1xdHQtdGVzdCBtYW5hZ2VtZW50XFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiTm90ZSB0aGF0IGNvbG9ucyBtYXkgbm90IGFwcGVhciBpbiB1c2VybmFtZXMuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwibG9jYWwtdnMtcmVtb3RlXCIsXG4gICAgICBjaGlsZHJlbjogXCJMb2NhbCB2cy4gUmVtb3RlIENsaWVudCBDb25uZWN0aW9uc1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJXaGVuIGFuIE1RVFQgY2xpZW50IHByb3ZpZGVzIG5vIGxvZ2luIGNyZWRlbnRpYWxzLCB0aGUgcGx1Z2luIHVzZXMgdGhlXFxyXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJndWVzdFwiXG4gICAgICB9KSwgXCIgYWNjb3VudCBieSBkZWZhdWx0IHdoaWNoIHdpbGwgbm90IGFsbG93IG5vbi1cIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImxvY2FsaG9zdFwiXG4gICAgICB9KSwgXCJcXHJcXG5jb25uZWN0aW9ucy4gV2hlbiBjb25uZWN0aW5nIGZyb20gYSByZW1vdGUgaG9zdCwgaGVyZSBhcmUgdGhlIG9wdGlvbnNcXHJcXG50aGF0IG1ha2Ugc3VyZSByZW1vdGUgY2xpZW50cyBjYW4gc3VjY2Vzc2Z1bGx5IGNvbm5lY3Q6XCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnVsLCB7XG4gICAgICBjaGlsZHJlbjogW1wiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFwiQ3JlYXRlIG9uZSBvciBtb3JlIG5ldyB1c2VyKHMpLCBncmFudCB0aGVtIGZ1bGwgcGVybWlzc2lvbnMgdG8gdGhlIHZpcnR1YWwgaG9zdCB1c2VkIGJ5IHRoZSBNUVRUIHBsdWdpbiBhbmQgbWFrZSBjbGllbnRzXFxyXFxudGhhdCBjb25uZWN0IGZyb20gcmVtb3RlIGhvc3RzIHVzZSB0aG9zZSBjcmVkZW50aWFscy4gVGhpcyBpcyB0aGUgcmVjb21tZW5kZWQgb3B0aW9uLlwiXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcIlNldCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiYW5vbnltb3VzX2xvZ2luX3VzZXJcIlxuICAgICAgICB9KSwgXCIgYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJhbm9ueW1vdXNfbG9naW5fcGFzc1wiXG4gICAgICAgIH0pLCBcIiB0byBhIG5vbi1cIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiZ3Vlc3RcIlxuICAgICAgICB9KSwgXCIgdXNlciB3aG8gaGFzIHRoZVxcclxcblwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIi4vYWNjZXNzLWNvbnRyb2xcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJhcHByb3ByaWF0ZSBwZXJtaXNzaW9uc1wiXG4gICAgICAgIH0pLCBcIi5cIl1cbiAgICAgIH0pLCBcIlxcblwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJhbm9ueW1vdXMtY29ubmVjdGlvbnNcIixcbiAgICAgIGNoaWxkcmVuOiBcIkFub255bW91cyBDb25uZWN0aW9uc1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiTVFUVCBzdXBwb3J0cyBvcHRpb25hbCBhdXRoZW50aWNhdGlvbiAoY2xpZW50cyBtYXkgcHJvdmlkZSBubyBjcmVkZW50aWFscykuXFxyXFxuVGhlcmVmb3JlIGEgZGVmYXVsdCBzZXQgb2YgY3JlZGVudGlhbHMgaXMgdXNlZCBmb3IgYW5vbnltb3VzIGNvbm5lY3Rpb25zLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJhbm9ueW1vdXNfbG9naW5fdXNlclwiXG4gICAgICB9KSwgXCIgYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiYW5vbnltb3VzX2xvZ2luX3Bhc3NcIlxuICAgICAgfSksIFwiIGNvbmZpZ3VyYXRpb24ga2V5cyBhcmUgdXNlZCB0byBzcGVjaWZ5XFxyXFxudGhlIGNyZWRlbnRpYWxzOlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtaW5pXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImFub255bW91c19sb2dpbl91c2VyID0gc29tZS11c2VyXFxyXFxuYW5vbnltb3VzX2xvZ2luX3Bhc3MgPSBzM2tSZTdcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJJdCBpcyBwb3NzaWJsZSB0byBkaXNhYmxlIGFub255bW91cyBjb25uZWN0aW9uczpcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtaW5pXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHQuYWxsb3dfYW5vbnltb3VzID0gZmFsc2VcXHJcXG5hbm9ueW1vdXNfbG9naW5fdXNlciA9IG5vbmVcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIklmIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHQuYWxsb3dfYW5vbnltb3VzXCJcbiAgICAgIH0pLCBcIiBrZXkgaXMgc2V0IHRvIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiZmFsc2VcIlxuICAgICAgfSksIFwiIHRoZW4gY2xpZW50cyBcIiwgX2pzeChfY29tcG9uZW50cy5zdHJvbmcsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXVzdFwiXG4gICAgICB9KSwgXCIgcHJvdmlkZSBjcmVkZW50aWFscy5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJUaGUgdXNlIG9mIGFub255bW91cyBjb25uZWN0aW9ucyBpcyBoaWdobHkgZGlzY291cmFnZWQgYW5kIGl0IGlzIGEgc3ViamVjdFxcclxcbnRvIGNlcnRhaW4gbGltaXRhdGlvbnMgKHNlZSBhYm92ZSkgZW5mb3JjZWQgZm9yIGEgcmVhc29uYWJsZSBsZXZlbCBvZiBzZWN1cml0eVxcclxcbmJ5IGRlZmF1bHQuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwiY29uZmlnXCIsXG4gICAgICBjaGlsZHJlbjogXCJQbHVnaW4gQ29uZmlndXJhdGlvblwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJIZXJlIGlzIGEgc2FtcGxlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL2NvbmZpZ3VyZSNjb25maWctZmlsZVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJjb25maWd1cmF0aW9uXCJcbiAgICAgIH0pLCBcIiB0aGF0IGRlbW9uc3RyYXRlcyBhIG51bWJlciBvZiBNUVRUIHBsdWdpbiBzZXR0aW5nczpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWluaVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJtcXR0Lmxpc3RlbmVycy50Y3AuZGVmYXVsdCA9IDE4ODNcXHJcXG4jIyBEZWZhdWx0IE1RVFQgd2l0aCBUTFMgcG9ydCBpcyA4ODgzXFxyXFxuIyBtcXR0Lmxpc3RlbmVycy5zc2wuZGVmYXVsdCA9IDg4ODNcXHJcXG5cXHJcXG4jIGFub255bW91cyBjb25uZWN0aW9ucywgaWYgYWxsb3dlZCwgd2lsbCB1c2UgdGhlIGRlZmF1bHRcXHJcXG4jIGNyZWRlbnRpYWxzIHNwZWNpZmllZCBoZXJlXFxyXFxubXF0dC5hbGxvd19hbm9ueW1vdXMgID0gdHJ1ZVxcclxcblxcclxcbm1xdHQudmhvc3QgICAgICAgICAgICA9IC9cXHJcXG5tcXR0LmV4Y2hhbmdlICAgICAgICAgPSBhbXEudG9waWNcXHJcXG5tcXR0LnByZWZldGNoICAgICAgICAgPSAxMFxcclxcbiMgMjQgaG91cnMgYnkgZGVmYXVsdFxcclxcbm1xdHQubWF4X3Nlc3Npb25fZXhwaXJ5X2ludGVydmFsX3NlY29uZHMgPSA4NjQwMFxcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJ0Y3AtbGlzdGVuZXJzXCIsXG4gICAgICBjaGlsZHJlbjogXCJUQ1AgTGlzdGVuZXJzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIldoZW4gbm8gY29uZmlndXJhdGlvbiBpcyBzcGVjaWZpZWQgdGhlIE1RVFQgcGx1Z2luIHdpbGwgbGlzdGVuIG9uXFxyXFxuYWxsIGludGVyZmFjZXMgb24gcG9ydCAxODgzIGFuZCBoYXZlIGEgZGVmYXVsdCB1c2VyIGxvZ2luL3Bhc3Njb2RlXFxyXFxub2YgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJndWVzdFwiXG4gICAgICB9KSwgXCIvXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJndWVzdFwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUbyBjaGFuZ2UgdGhlIGxpc3RlbmVyIHBvcnQsIGVkaXQgeW91clxcclxcblwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL2NvbmZpZ3VyZSNjb25maWd1cmF0aW9uLWZpbGVzXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIkNvbmZpZ3VyYXRpb24gZmlsZVwiXG4gICAgICB9KSwgXCIsXFxyXFxudG8gY29udGFpbiBhIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwidGNwX2xpc3RlbmVyc1wiXG4gICAgICB9KSwgXCIgdmFyaWFibGUgZm9yIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdG1xX21xdHRcIlxuICAgICAgfSksIFwiIGFwcGxpY2F0aW9uLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkZvciBleGFtcGxlLCBhIG1pbmltYWxpc3RpYyBjb25maWd1cmF0aW9uIGZpbGUgd2hpY2ggY2hhbmdlcyB0aGUgbGlzdGVuZXJcXHJcXG5wb3J0IHRvIDEyMzQ1IHdvdWxkIGxvb2sgbGlrZTpcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtaW5pXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHQubGlzdGVuZXJzLnRjcC4xID0gMTIzNDVcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJ3aGlsZSBvbmUgd2hpY2ggY2hhbmdlcyB0aGUgbGlzdGVuZXIgdG8gbGlzdGVuIG9ubHkgb24gbG9jYWxob3N0IChmb3JcXHJcXG5ib3RoIElQdjQgYW5kIElQdjYpIHdvdWxkIGxvb2sgbGlrZTpcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtaW5pXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHQubGlzdGVuZXJzLnRjcC4xID0gMTI3LjAuMC4xOjE4ODNcXHJcXG5tcXR0Lmxpc3RlbmVycy50Y3AuMiA9IDo6MToxODgzXFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcImxpc3RlbmVyLW9wdHNcIixcbiAgICAgIGNoaWxkcmVuOiBcIlRDUCBMaXN0ZW5lciBPcHRpb25zXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJUaGUgcGx1Z2luIHN1cHBvcnRzIFRDUCBsaXN0ZW5lciBvcHRpb24gY29uZmlndXJhdGlvbi5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhlIHNldHRpbmdzIHVzZSBhIGNvbW1vbiBwcmVmaXgsIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXF0dC50Y3BfbGlzdGVuX29wdGlvbnNcIlxuICAgICAgfSksIFwiLCBhbmQgY29udHJvbFxcclxcbnRoaW5ncyBzdWNoIGFzIFRDUCBidWZmZXIgc2l6ZXMsIGluYm91bmQgVENQIGNvbm5lY3Rpb24gcXVldWUgbGVuZ3RoLCB3aGV0aGVyIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL2hlYXJ0YmVhdHMjdGNwLWtlZXBhbGl2ZXNcIixcbiAgICAgICAgY2hpbGRyZW46IFwiVENQIGtlZXBhbGl2ZXNcIlxuICAgICAgfSksIFwiXFxyXFxuYXJlIGVuYWJsZWQgYW5kIHNvIG9uLiBTZWUgdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL25ldHdvcmtpbmdcIixcbiAgICAgICAgY2hpbGRyZW46IFwiTmV0d29ya2luZyBndWlkZVwiXG4gICAgICB9KSwgXCIgZm9yIGRldGFpbHMuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1pbmlcIixcbiAgICAgICAgY2hpbGRyZW46IFwibXF0dC5saXN0ZW5lcnMudGNwLjEgPSAxMjcuMC4wLjE6MTg4M1xcclxcbm1xdHQubGlzdGVuZXJzLnRjcC4yID0gOjoxOjE4ODNcXHJcXG5cXHJcXG5tcXR0LnRjcF9saXN0ZW5fb3B0aW9ucy5iYWNrbG9nID0gNDA5Nlxcclxcbm1xdHQudGNwX2xpc3Rlbl9vcHRpb25zLmJ1ZmZlciAgPSAxMzEwNzJcXHJcXG5tcXR0LnRjcF9saXN0ZW5fb3B0aW9ucy5yZWNidWYgID0gMTMxMDcyXFxyXFxubXF0dC50Y3BfbGlzdGVuX29wdGlvbnMuc25kYnVmICA9IDEzMTA3Mlxcclxcblxcclxcbm1xdHQudGNwX2xpc3Rlbl9vcHRpb25zLmtlZXBhbGl2ZSA9IHRydWVcXHJcXG5tcXR0LnRjcF9saXN0ZW5fb3B0aW9ucy5ub2RlbGF5ICAgPSB0cnVlXFxyXFxuXFxyXFxubXF0dC50Y3BfbGlzdGVuX29wdGlvbnMuZXhpdF9vbl9jbG9zZSA9IHRydWVcXHJcXG5tcXR0LnRjcF9saXN0ZW5fb3B0aW9ucy5zZW5kX3RpbWVvdXQgID0gMTIwXFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcInRsc1wiLFxuICAgICAgY2hpbGRyZW46IFwiVExTIFN1cHBvcnRcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVG8gdXNlIFRMUyBmb3IgTVFUVCBjb25uZWN0aW9ucywgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vc3NsXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIlRMUyBtdXN0IGJlIGNvbmZpZ3VyZWRcIlxuICAgICAgfSksIFwiIGluIHRoZSBicm9rZXIuIFRvIGVuYWJsZVxcclxcblRMUy1lbmFibGVkIE1RVFQgY29ubmVjdGlvbnMsIGFkZCBhIFRMUyBsaXN0ZW5lciBmb3IgTVFUVCB1c2luZyB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJtcXR0Lmxpc3RlbmVycy5zc2wuKlwiXG4gICAgICB9KSwgXCIgY29uZmlndXJhdGlvbiBrZXlzLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlRoZSBwbHVnaW4gd2lsbCB1c2UgY29yZSBSYWJiaXRNUSBzZXJ2ZXJcXHJcXG5jZXJ0aWZpY2F0ZXMgYW5kIGtleSAoanVzdCBsaWtlIEFNUVAgMC05LTEgYW5kIEFNUVAgMS4wIGxpc3RlbmVycyBkbyk6XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWluaVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJzc2xfb3B0aW9ucy5jYWNlcnRmaWxlID0gL3BhdGgvdG8vY2FfY2VydGlmaWNhdGUucGVtXFxyXFxuc3NsX29wdGlvbnMuY2VydGZpbGUgICA9IC9wYXRoL3RvL3NlcnZlcl9jZXJ0aWZpY2F0ZS5wZW1cXHJcXG5zc2xfb3B0aW9ucy5rZXlmaWxlICAgID0gL3BhdGgvdG8vc2VydmVyX2tleS5wZW1cXHJcXG5zc2xfb3B0aW9ucy52ZXJpZnkgICAgID0gdmVyaWZ5X3BlZXJcXHJcXG5zc2xfb3B0aW9ucy5mYWlsX2lmX25vX3BlZXJfY2VydCAgPSB0cnVlXFxyXFxuXFxyXFxuIyBkZWZhdWx0IFRMUy1lbmFibGVkIHBvcnQgZm9yIE1RVFQgY29ubmVjdGlvbnNcXHJcXG5tcXR0Lmxpc3RlbmVycy5zc2wuZGVmYXVsdCA9IDg4ODNcXHJcXG5tcXR0Lmxpc3RlbmVycy50Y3AuZGVmYXVsdCA9IDE4ODNcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJOb3RlIHRoYXQgUmFiYml0TVEgcmVqZWN0cyBTU0x2MyBjb25uZWN0aW9ucyBieSBkZWZhdWx0IGJlY2F1c2UgdGhhdCBwcm90b2NvbFxcclxcbmlzIGtub3duIHRvIGJlIGNvbXByb21pc2VkLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJTZWUgdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL3NzbFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJUTFMgY29uZmlndXJhdGlvbiBndWlkZVwiXG4gICAgICB9KSwgXCIgZm9yIGRldGFpbHMuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcInZpcnR1YWwtaG9zdHNcIixcbiAgICAgIGNoaWxkcmVuOiBcIlZpcnR1YWwgSG9zdHNcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlJhYmJpdE1RIGlzIGEgbXVsdGktdGVuYW50IHN5c3RlbSBhdCB0aGUgY29yZSBhbmQgZXZlcnkgY29ubmVjdGlvbiBiZWxvbmdzXFxyXFxudG8gYSB2aXJ0dWFsIGhvc3QuIFNvbWUgbWVzc2FnaW5nIHByb3RvY29scyBoYXZlIHRoZSBjb25jZXB0IG9mIHZob3N0cyxcXHJcXG5vdGhlcnMgZG9uJ3QuIE1RVFQgZmFsbHMgaW50byB0aGUgbGF0dGVyIGNhdGVnb3J5LiBUaGVyZWZvcmUgdGhlIE1RVFQgcGx1Z2luXFxyXFxubmVlZHMgdG8gcHJvdmlkZSBhIHdheSB0byBtYXAgY29ubmVjdGlvbnMgdG8gdmhvc3RzLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJ2aG9zdFwiXG4gICAgICB9KSwgXCIgb3B0aW9uIGNvbnRyb2xzIHdoaWNoIFJhYmJpdE1RIHZob3N0IHRoZSBhZGFwdGVyIGNvbm5lY3RzIHRvXFxyXFxuYnkgZGVmYXVsdC4gVGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwidmhvc3RcIlxuICAgICAgfSksIFwiXFxyXFxuY29uZmlndXJhdGlvbiBpcyBvbmx5IGNvbnN1bHRlZCBpZiBubyB2aG9zdCBpcyBwcm92aWRlZCBkdXJpbmcgY29ubmVjdGlvbiBlc3RhYmxpc2htZW50LlxcclxcblRoZXJlIGFyZSBzZXZlcmFsIChvcHRpb25hbCkgd2F5cyB0byBzcGVjaWZ5IHRoZSB2aG9zdCB0aGUgY2xpZW50IHdpbGxcXHJcXG5jb25uZWN0IHRvLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmg0LCB7XG4gICAgICBpZDogXCJwb3J0LXRvLXZpcnR1YWwtaG9zdC1tYXBwaW5nXCIsXG4gICAgICBjaGlsZHJlbjogXCJQb3J0IHRvIFZpcnR1YWwgSG9zdCBNYXBwaW5nXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkZpcnN0IHdheSBpcyBtYXBwaW5nIE1RVFQgcGx1Z2luIChUQ1Agb3IgVExTKSBsaXN0ZW5lciBwb3J0cyB0byB2aG9zdHMuIFRoZSBtYXBwaW5nXFxyXFxuaXMgc3BlY2lmaWVkIHRoYW5rcyB0byB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJtcXR0X3BvcnRfdG9fdmhvc3RfbWFwcGluZ1wiXG4gICAgICB9KSwgXCIgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vcGFyYW1ldGVyc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJnbG9iYWwgcnVudGltZSBwYXJhbWV0ZXJcIlxuICAgICAgfSksIFwiLlxcclxcbkxldCdzIHRha2UgdGhlIGZvbGxvd2luZyBwbHVnaW4gY29uZmlndXJhdGlvbjpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWluaVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJtcXR0Lmxpc3RlbmVycy50Y3AuMSA9IDE4ODNcXHJcXG5tcXR0Lmxpc3RlbmVycy50Y3AuMiA9IDE4ODRcXHJcXG5cXHJcXG5tcXR0Lmxpc3RlbmVycy5zc2wuMSA9IDg4ODNcXHJcXG5tcXR0Lmxpc3RlbmVycy5zc2wuMiA9IDg4ODRcXHJcXG5cXHJcXG4jIChvdGhlciBUTFMgc2V0dGluZ3MgYXJlIG9taXR0ZWQgZm9yIGJyZXZpdHkpXFxyXFxuXFxyXFxubXF0dC52aG9zdCAgICAgICAgICAgID0gL1xcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiTm90ZSB0aGUgcGx1Z2luIGxpc3RlbnMgb24gcG9ydHMgMTg4MywgMTg4NCwgODg4MywgYW5kIDg4ODQuIEltYWdpbmUgeW91XFxyXFxud2FudCBjbGllbnRzIGNvbm5lY3RpbmcgdG8gcG9ydHMgMTg4MyBhbmQgODg4MyB0byBjb25uZWN0IHRvIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInZob3N0MVwiXG4gICAgICB9KSwgXCIgdmlydHVhbFxcclxcbmhvc3QsIGFuZCBjbGllbnRzIGNvbm5lY3RpbmcgdG8gcG9ydHMgMTg4NCBhbmQgODg4NCB0byBjb25uZWN0IHRvIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInZob3N0MlwiXG4gICAgICB9KSwgXCJcXHJcXG52aXJ0dWFsIGhvc3QuIEEgcG9ydC10by12aG9zdCBtYXBwaW5nIGNhbiBiZSBjcmVhdGVkIGJ5IHNldHRpbmcgdGhlXFxyXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJtcXR0X3BvcnRfdG9fdmhvc3RfbWFwcGluZ1wiXG4gICAgICB9KSwgXCIgZ2xvYmFsIHBhcmFtZXRlciB3aXRoIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwicmFiYml0bXFjdGxcIlxuICAgICAgfSksIFwiOlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhUYWJzLCB7XG4gICAgICBncm91cElkOiBcImV4YW1wbGVzXCIsXG4gICAgICBjaGlsZHJlbjogW19qc3goVGFiSXRlbSwge1xuICAgICAgICB2YWx1ZTogXCJiYXNoXCIsXG4gICAgICAgIGxhYmVsOiBcImJhc2hcIixcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWJhc2hcIixcbiAgICAgICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdG1xY3RsIHNldF9nbG9iYWxfcGFyYW1ldGVyIG1xdHRfcG9ydF90b192aG9zdF9tYXBwaW5nIFxcXFxcXHJcXG4gICAgJ3tcXFwiMTg4M1xcXCI6XFxcInZob3N0MVxcXCIsIFxcXCI4ODgzXFxcIjpcXFwidmhvc3QxXFxcIiwgXFxcIjE4ODRcXFwiOlxcXCJ2aG9zdDJcXFwiLCBcXFwiODg4NFxcXCI6XFxcInZob3N0MlxcXCJ9J1xcblwiXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0pLCBfanN4KFRhYkl0ZW0sIHtcbiAgICAgICAgdmFsdWU6IFwiUG93ZXJTaGVsbFwiLFxuICAgICAgICBsYWJlbDogXCJQb3dlclNoZWxsXCIsXG4gICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1Qb3dlclNoZWxsXCIsXG4gICAgICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRtcWN0bC5iYXQgc2V0X2dsb2JhbF9wYXJhbWV0ZXIgbXF0dF9wb3J0X3RvX3Zob3N0X21hcHBpbmcgXlxcclxcbiAgICBcXFwie1xcXCJcXFwiMTg4M1xcXCJcXFwiOlxcXCJcXFwidmhvc3QxXFxcIlxcXCIsIFxcXCJcXFwiODg4M1xcXCJcXFwiOlxcXCJcXFwidmhvc3QxXFxcIlxcXCIsIFxcXCJcXFwiMTg4NFxcXCJcXFwiOlxcXCJcXFwidmhvc3QyXFxcIlxcXCIsIFxcXCJcXFwiODg4NFxcXCJcXFwiOlxcXCJcXFwidmhvc3QyXFxcIlxcXCJ9XFxcIlxcblwiXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0pLCBfanN4KFRhYkl0ZW0sIHtcbiAgICAgICAgdmFsdWU6IFwiSFRUUCBBUElcIixcbiAgICAgICAgbGFiZWw6IFwiSFRUUCBBUElcIixcbiAgICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWluaVwiLFxuICAgICAgICAgICAgY2hpbGRyZW46IFwiUFVUIC9hcGkvZ2xvYmFsLXBhcmFtZXRlcnMvbXF0dF9wb3J0X3RvX3Zob3N0X21hcHBpbmdcXHJcXG4jID0+IHtcXFwidmFsdWVcXFwiOiB7XFxcIjE4ODNcXFwiOlxcXCJ2aG9zdDFcXFwiLCBcXFwiODg4M1xcXCI6XFxcInZob3N0MVxcXCIsIFxcXCIxODg0XFxcIjpcXFwidmhvc3QyXFxcIiwgXFxcIjg4ODRcXFwiOlxcXCJ2aG9zdDJcXFwifX1cXG5cIlxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9KV1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIklmIHRoZXJlJ3Mgbm8gbWFwcGluZyBmb3IgYSBnaXZlbiBwb3J0IChiZWNhdXNlIHRoZSBwb3J0IGNhbm5vdCBiZSBmb3VuZCBpblxcclxcbnRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHRfcG9ydF90b192aG9zdF9tYXBwaW5nXCJcbiAgICAgIH0pLCBcIiBnbG9iYWwgcGFyYW1ldGVyIEpTT04gZG9jdW1lbnQgb3IgaWYgdGhlIGdsb2JhbCBwYXJhbWV0ZXJcXHJcXG5pc24ndCBzZXQgYXQgYWxsKSwgdGhlIHBsdWdpbiB3aWxsIHRyeSB0byBleHRyYWN0IHRoZSB2aXJ0dWFsIGhvc3QgZnJvbSB0aGUgdXNlcm5hbWVcXHJcXG4oc2VlIGJlbG93KSBhbmQgd2lsbCB1bHRpbWF0ZWx5IHVzZSB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJ2aG9zdFwiXG4gICAgICB9KSwgXCIgcGx1Z2luIGNvbmZpZyBvcHRpb24uXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGUgYnJva2VyIHF1ZXJpZXMgdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXF0dF9wb3J0X3RvX3Zob3N0X21hcHBpbmdcIlxuICAgICAgfSksIFwiIGdsb2JhbCBwYXJhbWV0ZXIgdmFsdWUgYXQgY29ubmVjdGlvbiB0aW1lLlxcclxcbklmIHRoZSB2YWx1ZSBjaGFuZ2VzLCBjb25uZWN0ZWQgY2xpZW50cyBhcmUgbm90IG5vdGlmaWVkIG9yIGRpc2Nvbm5lY3RlZC4gVGhleSBuZWVkXFxyXFxudG8gcmVjb25uZWN0IHRvIHN3aXRjaCB0byBhIG5ldyB2aXJ0dWFsIGhvc3QuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDQsIHtcbiAgICAgIGlkOiBcInZpcnR1YWwtaG9zdC1hcy1wYXJ0LW9mLXVzZXJuYW1lXCIsXG4gICAgICBjaGlsZHJlbjogXCJWaXJ0dWFsIEhvc3QgYXMgUGFydCBvZiBVc2VybmFtZVwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiQW5vdGhlciBhbmQgbW9yZSBzcGVjaWZpYyB3YXkgdG8gc3BlY2lmeSBhIHZob3N0IHdoaWxlIGNvbm5lY3RpbmcgaXMgdG8gcHJlcGVuZCB0aGUgdmhvc3RcXHJcXG50byB0aGUgdXNlcm5hbWUgYW5kIHRvIHNlcGFyYXRlIHdpdGggYSBjb2xvbi5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkZvciBleGFtcGxlLCBjb25uZWN0aW5nIHdpdGhcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtaW5pXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIi86Z3Vlc3RcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJpcyBlcXVpdmFsZW50IHRvIHRoZSBkZWZhdWx0IHZob3N0IGFuZCB1c2VybmFtZSwgd2hpbGVcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJtcXR0LXZob3N0Om1xdHQtdXNlcm5hbWVcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIm1lYW5zIGNvbm5lY3RpbmcgdG8gdGhlIHZob3N0IFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXF0dC1ob3N0XCJcbiAgICAgIH0pLCBcIiB3aXRoIHVzZXJuYW1lIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXF0dC11c2VybmFtZVwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJTcGVjaWZ5aW5nIHRoZSB2aXJ0dWFsIGhvc3QgaW4gdGhlIHVzZXJuYW1lIHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0aGUgcG9ydC10by12aG9zdFxcclxcbm1hcHBpbmcgc3BlY2lmaWVkIHdpdGggdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXF0dF9wb3J0X3RvX3Zob3N0X21hcHBpbmdcIlxuICAgICAgfSksIFwiIGdsb2JhbCBwYXJhbWV0ZXIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcInRscy1jZXJ0aWZpY2F0ZS1hdXRoZW50aWNhdGlvblwiLFxuICAgICAgY2hpbGRyZW46IFwiQXV0aGVudGljYXRpb24gd2l0aCBUTFMveDUwOSBjbGllbnQgY2VydGlmaWNhdGVzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJUaGUgcGx1Z2luIGNhbiBhdXRoZW50aWNhdGUgVExTLWVuYWJsZWQgY29ubmVjdGlvbnMgYnkgZXh0cmFjdGluZ1xcclxcbmEgbmFtZSBmcm9tIHRoZSBjbGllbnQncyBUTFMgKHg1MDkpIGNlcnRpZmljYXRlLCB3aXRob3V0IHVzaW5nIGEgcGFzc3dvcmQuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkZvciBzYWZldHkgdGhlIHNlcnZlciBtdXN0IGJlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIjdGxzXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImNvbmZpZ3VyZWQgd2l0aCB0aGUgVExTIG9wdGlvbnNcIlxuICAgICAgfSksIFwiXFxyXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJmYWlsX2lmX25vX3BlZXJfY2VydFwiXG4gICAgICB9KSwgXCIgc2V0IHRvIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwidHJ1ZVwiXG4gICAgICB9KSwgXCIgYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwidmVyaWZ5XCJcbiAgICAgIH0pLCBcIiBzZXQgdG8gXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJ2ZXJpZnlfcGVlclwiXG4gICAgICB9KSwgXCIsIHRvXFxyXFxuZm9yY2UgYWxsIFRMUyBjbGllbnRzIHRvIGhhdmUgYSB2ZXJpZmlhYmxlIGNsaWVudCBjZXJ0aWZpY2F0ZS5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlRvIHN3aXRjaCB0aGlzIGZlYXR1cmUgb24sIHNldCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInNzbF9jZXJ0X2xvZ2luXCJcbiAgICAgIH0pLCBcIiB0byBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInRydWVcIlxuICAgICAgfSksIFwiIGZvciB0aGVcXHJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdG1xX21xdHRcIlxuICAgICAgfSksIFwiIGFwcGxpY2F0aW9uLiBGb3IgZXhhbXBsZTpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWluaVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJtcXR0LnNzbF9jZXJ0X2xvZ2luID0gdHJ1ZVxcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkJ5IGRlZmF1bHQgdGhpcyB3aWxsIHNldCB0aGUgdXNlcm5hbWUgdG8gYW4gUkZDNDUxNC1pc2ggc3RyaW5nIGZvcm0gb2ZcXHJcXG50aGUgY2VydGlmaWNhdGUncyBzdWJqZWN0J3MgRGlzdGluZ3Vpc2hlZCBOYW1lLCBzaW1pbGFyIHRvIHRoYXRcXHJcXG5wcm9kdWNlZCBieSBPcGVuU1NMJ3MgXFxcIi1uYW1lb3B0IFJGQzIyNTNcXFwiIG9wdGlvbi5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlRvIHVzZSB0aGUgQ29tbW9uIE5hbWUgaW5zdGVhZCwgYWRkOlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1pbmlcIixcbiAgICAgICAgY2hpbGRyZW46IFwic3NsX2NlcnRfbG9naW5fZnJvbSA9IGNvbW1vbl9uYW1lXFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwidG8geW91ciBjb25maWd1cmF0aW9uLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiTm90ZSB0aGF0OlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnVsLCB7XG4gICAgICBjaGlsZHJlbjogW1wiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFwiVGhlIGF1dGhlbnRpY2F0ZWQgdXNlciBtdXN0IGV4aXN0IGluIHRoZSBjb25maWd1cmVkIGF1dGhlbnRpY2F0aW9uIC8gYXV0aG9yaXNhdGlvbiBiYWNrZW5kKHMpLlwiXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcIkNsaWVudHMgXCIsIF9qc3goX2NvbXBvbmVudHMuc3Ryb25nLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwibXVzdCBub3RcIlxuICAgICAgICB9KSwgXCIgc3VwcGx5IHVzZXJuYW1lIGFuZCBwYXNzd29yZC5cIl1cbiAgICAgIH0pLCBcIlxcblwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiWW91IGNhbiBvcHRpb25hbGx5IHNwZWNpZnkgYSB2aXJ0dWFsIGhvc3QgZm9yIGEgY2xpZW50IGNlcnRpZmljYXRlIGJ5IHVzaW5nIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHRfZGVmYXVsdF92aG9zdHNcIlxuICAgICAgfSksIFwiXFxyXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vcGFyYW1ldGVyc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJnbG9iYWwgcnVudGltZSBwYXJhbWV0ZXJcIlxuICAgICAgfSksIFwiLiBUaGUgdmFsdWUgb2YgdGhpcyBnbG9iYWwgcGFyYW1ldGVyIG11c3QgY29udGFpbiBhIEpTT04gZG9jdW1lbnQgdGhhdFxcclxcbm1hcHMgY2VydGlmaWNhdGVzJyBzdWJqZWN0J3MgRGlzdGluZ3Vpc2hlZCBOYW1lIHRvIHRoZWlyIHRhcmdldCB2aXJ0dWFsIGhvc3QuIExldCdzIHNlZSBob3cgdG9cXHJcXG5tYXAgMiBjZXJ0aWZpY2F0ZXMsIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiTz1jbGllbnQsQ049Z3Vlc3RcIlxuICAgICAgfSksIFwiIGFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIk89Y2xpZW50LENOPXJhYmJpdFwiXG4gICAgICB9KSwgXCIsIHRvIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInZob3N0MVwiXG4gICAgICB9KSwgXCIgYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwidmhvc3QyXCJcbiAgICAgIH0pLCBcIlxcclxcbnZpcnR1YWwgaG9zdHMsIHJlc3BlY3RpdmVseS5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJHbG9iYWwgcGFyYW1ldGVycyBjYW4gYmUgc2V0IHVwIHdpdGggdXNpbmcgdGhlIGZvbGxvd2luZyBtZXRob2RzOlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKFRhYnMsIHtcbiAgICAgIGdyb3VwSWQ6IFwiZXhhbXBsZXNcIixcbiAgICAgIGNoaWxkcmVuOiBbX2pzeChUYWJJdGVtLCB7XG4gICAgICAgIHZhbHVlOiBcImJhc2hcIixcbiAgICAgICAgbGFiZWw6IFwiYmFzaFwiLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtYmFzaFwiLFxuICAgICAgICAgICAgY2hpbGRyZW46IFwicmFiYml0bXFjdGwgc2V0X2dsb2JhbF9wYXJhbWV0ZXIgbXF0dF9kZWZhdWx0X3Zob3N0cyBcXFxcXFxyXFxuICAgICd7XFxcIk89Y2xpZW50LENOPWd1ZXN0XFxcIjogXFxcInZob3N0MVxcXCIsIFxcXCJPPWNsaWVudCxDTj1yYWJiaXRcXFwiOiBcXFwidmhvc3QyXFxcIn0nXFxuXCJcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSksIF9qc3goVGFiSXRlbSwge1xuICAgICAgICB2YWx1ZTogXCJQb3dlclNoZWxsXCIsXG4gICAgICAgIGxhYmVsOiBcIlBvd2VyU2hlbGxcIixcbiAgICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLVBvd2VyU2hlbGxcIixcbiAgICAgICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdG1xY3RsIHNldF9nbG9iYWxfcGFyYW1ldGVyIG1xdHRfZGVmYXVsdF92aG9zdHMgXlxcclxcbiAgICBcXFwie1xcXCJcXFwiTz1jbGllbnQsQ049Z3Vlc3RcXFwiXFxcIjogXFxcIlxcXCJ2aG9zdDFcXFwiXFxcIiwgXFxcIlxcXCJPPWNsaWVudCxDTj1yYWJiaXRcXFwiXFxcIjogXFxcIlxcXCJ2aG9zdDJcXFwiXFxcIn0nXFxuXCJcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSksIF9qc3goVGFiSXRlbSwge1xuICAgICAgICB2YWx1ZTogXCJIVFRQIEFQSVwiLFxuICAgICAgICBsYWJlbDogXCJIVFRQIEFQSVwiLFxuICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtYmFzaFwiLFxuICAgICAgICAgICAgY2hpbGRyZW46IFwiUFVUIC9hcGkvZ2xvYmFsLXBhcmFtZXRlcnMvbXF0dF9kZWZhdWx0X3Zob3N0c1xcclxcbiMgPT4ge1xcXCJ2YWx1ZVxcXCI6IHtcXFwiTz1jbGllbnQsQ049Z3Vlc3RcXFwiOiBcXFwidmhvc3QxXFxcIiwgXFxcIk89Y2xpZW50LENOPXJhYmJpdFxcXCI6IFxcXCJ2aG9zdDJcXFwifX1cXG5cIlxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9KV1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJOb3RlIHRoYXQ6XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMudWwsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcIklmIHRoZSB2aXJ0dWFsIGhvc3QgZm9yIGEgY2VydGlmaWNhdGUgY2Fubm90IGJlIGZvdW5kIChiZWNhdXNlIHRoZSBjZXJ0aWZpY2F0ZVxcclxcbnN1YmplY3QncyBETiBjYW5ub3QgYmUgZm91bmQgaW4gdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJtcXR0X2RlZmF1bHRfdmhvc3RzXCJcbiAgICAgICAgfSksIFwiIGdsb2JhbCBwYXJhbWV0ZXIgSlNPTlxcclxcbmRvY3VtZW50IG9yIGlmIHRoZSBnbG9iYWwgcGFyYW1ldGVyIGlzbid0IHNldCBhdCBhbGwpLCB0aGUgdmlydHVhbCBob3N0IHNwZWNpZmllZFxcclxcbmJ5IHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwidmhvc3RcIlxuICAgICAgICB9KSwgXCIgcGx1Z2luIGNvbmZpZyBvcHRpb24gd2lsbCBiZSB1c2VkLlwiXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbXCJUaGUgYnJva2VyIHF1ZXJpZXMgdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJtcXR0X2RlZmF1bHRfdmhvc3RzXCJcbiAgICAgICAgfSksIFwiIGdsb2JhbCBwYXJhbWV0ZXIgdmFsdWUgYXQgY29ubmVjdGlvbiB0aW1lLlxcclxcbklmIHRoZSB2YWx1ZSBjaGFuZ2VzLCBjb25uZWN0ZWQgY2xpZW50cyBhcmUgbm90IG5vdGlmaWVkIG9yIGRpc2Nvbm5lY3RlZC4gVGhleSBuZWVkXFxyXFxudG8gcmVjb25uZWN0IHRvIHN3aXRjaCB0byBhIG5ldyB2aXJ0dWFsIGhvc3QuXCJdXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcIlRoZSBjZXJ0aWZpY2F0ZS10by12aG9zdCBtYXBwaW5nIHdpdGggdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJtcXR0X2RlZmF1bHRfdmhvc3RzXCJcbiAgICAgICAgfSksIFwiIGdsb2JhbCBwYXJhbWV0ZXJcXHJcXG5pcyBjb25zaWRlcmVkIG1vcmUgc3BlY2lmaWMgdGhhbiB0aGUgcG9ydC10by12aG9zdCBtYXBwaW5nIHdpdGggdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJtcXR0X3BvcnRfdG9fdmhvc3RfbWFwcGluZ1wiXG4gICAgICAgIH0pLCBcIlxcclxcbmdsb2JhbCBwYXJhbWV0ZXIgYW5kIHNvIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBpdC5cIl1cbiAgICAgIH0pLCBcIlxcblwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmg0LCB7XG4gICAgICBpZDogXCJ1c2FnZS1vZi1jbGllbnRfaWQtZXh0cmFjdGlvbi1mcm9tLWNsaWVudC1jZXJ0aWZpY2F0ZXMtZm9yLWF1dGhlbnRpY2F0aW9uXCIsXG4gICAgICBjaGlsZHJlbjogXCJVc2FnZSBvZiBjbGllbnRfaWQgRXh0cmFjdGlvbiBmcm9tIENsaWVudCBDZXJ0aWZpY2F0ZXMgZm9yIEF1dGhlbnRpY2F0aW9uXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIk5vZGVzIGNhbiBiZSBjb25maWd1cmVkIHRvIHZlcmlmeSB0aGF0IHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImNsaWVudF9pZFwiXG4gICAgICB9KSwgXCIgc2V0IG9uIHRoZSBNUVRUIGNvbm5lY3Rpb24gbWF0Y2hlcyB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJjbGllbnRfaWRcIlxuICAgICAgfSksIFwiIGZvdW5kIGluIHRoZSBjbGllbnQncyBjZXJ0aWZpY2F0ZS5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIklmIHRoZXkgbWF0Y2gsIFJhYmJpdE1RIHByb2NlZWRzIHdpdGggdGhlIHVzZXIncyBhdXRoZW50aWNhdGlvbiBieSBwYXNzaW5nIHRoZSB1c2VyJ3MgaWRlbnRpdHkgYWxvbmcgd2l0aCB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJjbGllbnRfaWRcIlxuICAgICAgfSksIFwiIHRvIHRoZSBjb25maWd1cmVkIGF1dGhlbnRpY2F0aW9uIGJhY2tlbmQocykuXFxyXFxuU29tZSBhdXRoZW50aWNhdGlvbiBiYWNrZW5kcywgbGlrZSB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRtcV9hdXRoX2JhY2tlbmRfaHR0cFwiXG4gICAgICB9KSwgXCIsIG1heSB1c2UgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJjbGllbnRfaWRcIlxuICAgICAgfSksIFwiIGNyZWRlbnRpYWwgaW4gYWRkaXRpb24gdG8gXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJ1c2VybmFtZVwiXG4gICAgICB9KSwgXCIgdG8gbWFrZSBhdXRoZW50aWNhdGlvbiBhbmQvb3IgYXV0aG9yaXphdGlvbiBkZWNpc2lvbnMuXFxyXFxuSWYgdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiY2xpZW50X2lkXCJcbiAgICAgIH0pLCBcIihzKSBkaWQgbm90IG1hdGNoLCBSYWJiaXRNUSBjbG9zZXMgdGhlIGNvbm5lY3Rpb24gd2l0aCB0aGUgcmVhc29uIGNvZGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCIyXCJcbiAgICAgIH0pLCBcIiwgbWVhbmluZywgXFxcInRoZSBjbGllbnQgaWRlbnRpZmllciBpcyBub3QgYWxsb3dlZCBieSB0aGUgc2VydmVyXFxcIi5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkluIG9yZGVyIHRvIGRvIHNvLCBSYWJiaXRNUSBtdXN0IGZpcnN0IGJlIGluc3RydWN0ZWQgaG93IHRvIGZldGNoIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImNsaWVudF9pZFwiXG4gICAgICB9KSwgXCIgZnJvbSB0aGUgY2VydGlmaWNhdGUuIFRoaXMgaXMgZG9uZSB3aXRoIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHQuc3NsX2NlcnRfY2xpZW50X2lkX2Zyb21cIlxuICAgICAgfSksIFwiIGNvbmZpZ3VyYXRpb24ga2V5LlxcclxcblRoZSBhY2NlcHRhYmxlIHZhbHVlcyBhcmU6XCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnVsLCB7XG4gICAgICBjaGlsZHJlbjogW1wiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiZGlzdGluZ3Vpc2hlZF9uYW1lXCJcbiAgICAgICAgfSksIFwiOiB0aGlzIGlzIHRoZSBETiwgb3IgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWC41MDlcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJkaXN0aW5ndWlzaGVkIG5hbWVcIlxuICAgICAgICB9KSwgXCIsIG9mIHRoZSBjZXJ0aWZpY2F0ZVwiXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwic3ViamVjdF9hbHRlcm5hdGl2ZV9uYW1lXCJcbiAgICAgICAgfSksIFwiOiB0aGUgU3ViamVjdCBBbHRlcm5hdGl2ZSBOYW1lIG9yIFNBTiwgd2hpY2ggY29tZXMgZnJvbSBhIGNlcnRpZmljYXRlJ3MgZXh0ZW5zaW9ucyBzZWN0aW9uXFxyXFxuQmVjYXVzZSBkaWZmZXJlbnQgeXBlcyBvZiBTdWJqZWN0IEFsdGVybmF0aXZlIE5hbWVzIGV4aXN0LCB0aGUgdHlwZSBtYXkgbmVlZCB0byBiZSBzcGVjaWZpZWQgYXMgd2VsbFwiXVxuICAgICAgfSksIFwiXFxuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJJZiBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHQuc3NsX2NlcnRfY2xpZW50X2lkX2Zyb21cIlxuICAgICAgfSksIFwiIGlzIHNldCB0byBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInN1YmplY3RfYWx0ZXJuYXRpdmVfbmFtZVwiXG4gICAgICB9KSwgXCIsIHRoZSB0eXBlIG9mIGFsdGVybmF0aXZlIG5hbWUgY2FuIGJlIGNvbmZpZ3VyZWQgdXNpbmcgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJtcXR0LnNzbF9jZXJ0X2xvZ2luX3Nhbl90eXBlXCJcbiAgICAgIH0pLCBcIi4gVGhlIGRlZmF1bHQgdHlwZSwgdXNlZCBpZiB0aGUgc2V0dGluZ1xcclxcbmlzIG9taXR0ZWQsIGlzIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiZG5zXCJcbiAgICAgIH0pLCBcIi4gVGhlIGFjY2VwdGFibGUgdmFsdWVzIGFyZTpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMudWwsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiZG5zXCJcbiAgICAgICAgfSlcbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJpcFwiXG4gICAgICAgIH0pXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiZW1haWxcIlxuICAgICAgICB9KVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcInVyaVwiXG4gICAgICAgIH0pXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwib3RoZXJfbmFtZVwiXG4gICAgICAgIH0pXG4gICAgICB9KSwgXCJcXG5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkEgY2VydGlmaWNhdGUgY2FuIGNvbnRhaW4gbXVsdGlwbGUgU0FOIGZpZWxkcyBvZiB0aGUgc2FtZSB0eXBlLCBmb3IgZXhhbXBsZSwgdHdvIGFsdGVybmF0aXZlIEROUyBuYW1lcy4gSWYgdGhpcyBpcyB0aGUgY2FzZSwgdXNlIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHQuc3NsX2NlcnRfbG9naW5fc2FuX2luZGV4XCJcbiAgICAgIH0pLCBcIiBjb25maWd1cmF0aW9uIGtleVxcclxcbnRvIHNwZWNpZnkgdGhlIGluZGV4IHRvIGJlIHVzZWQuIEJ5IGRlZmF1bHQsIFJhYmJpdE1RIHdpbGwgcGljayB0aGUgZmlyc3QgdmFsdWUsIHRoYXQgaXMsIHRoZSBkZWZhdWx0IHZhbHVlIG9mIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXF0dC5zc2xfY2VydF9sb2dpbl9zYW5faW5kZXhcIlxuICAgICAgfSksIFwiIGlzIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiMFwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJCZWxvdyBhbiBleGFtcGxlIHdoZXJlIHRoZSB1c2VybmFtZSBpcyBleHRyYWN0ZWQgZnJvbSB0aGUgY2VydGlmaWNhdGUncyBkaXN0aW5ndWlzaGVkIG5hbWUgYW5kIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImNsaWVudF9pZFwiXG4gICAgICB9KSwgXCIgaXMgZXh0cmFjdGVkIGZyb21cXHJcXG50aGUgZmlyc3QgU0FOIChTdWJqZWN0IEFsdGVybmF0aXZlIE5hbWUpIG9mIHR5cGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJ1cmlcIlxuICAgICAgfSksIFwiOlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtaW5pXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcInNzbF9jZXJ0X2xvZ2luX2Zyb20gPSBkaXN0aW5ndWlzaGVkX25hbWVcXHJcXG5tcXR0LnNzbF9jZXJ0X2NsaWVudF9pZF9mcm9tID0gc3ViamVjdF9hbHRlcm5hdGl2ZV9uYW1lXFxyXFxubXF0dC5zc2xfY2VydF9sb2dpbl9zYW5fdHlwZSA9IHVyaVxcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJmbG93XCIsXG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL21xdHQvbXF0dC92NS4wL29zL21xdHQtdjUuMC1vcy5odG1sI19Ub2MzOTAxMjUxXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIkZsb3cgQ29udHJvbFwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwicHJlZmV0Y2hcIlxuICAgICAgfSksIFwiIG9wdGlvbiBjb250cm9scyB0aGUgbWF4aW11bSBudW1iZXIgb2YgdW5hY2tub3dsZWRnZWQgUFVCTElTSCBwYWNrZXRzIHdpdGggUW9TPTEgdGhhdCB3aWxsIGJlIGRlbGl2ZXJlZC5cXHJcXG5UaGlzIG9wdGlvbiBpcyBpbnRlcnByZXRlZCBpbiB0aGUgc2FtZSB3YXkgYXMgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vY29uc3VtZXItcHJlZmV0Y2hcIixcbiAgICAgICAgY2hpbGRyZW46IFwiY29uc3VtZXIgcHJlZmV0Y2hcIlxuICAgICAgfSksIFwiLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiQW4gTVFUVCA1LjAgY2xpZW50IGNhbiBkZWZpbmUgYSBsb3dlciBudW1iZXIgYnkgc2V0dGluZyBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL21xdHQvbXF0dC92NS4wL29zL21xdHQtdjUuMC1vcy5odG1sI19Ub2MzOTAxMDQ5XCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIlJlY2VpdmUgTWF4aW11bVwiXG4gICAgICB9KSwgXCIgaW4gdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiQ09OTkVDVFwiXG4gICAgICB9KSwgXCIgcGFja2V0LlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJjdXN0b20tZXhjaGFuZ2VzXCIsXG4gICAgICBjaGlsZHJlbjogXCJDdXN0b20gRXhjaGFuZ2VzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImV4Y2hhbmdlXCJcbiAgICAgIH0pLCBcIiBvcHRpb24gZGV0ZXJtaW5lcyB3aGljaCBleGNoYW5nZSBtZXNzYWdlcyBmcm9tIE1RVFQgY2xpZW50cyBhcmUgcHVibGlzaGVkIHRvLlxcclxcblRoZSBleGNoYW5nZSBtdXN0IGJlIGNyZWF0ZWQgYmVmb3JlIGNsaWVudHMgcHVibGlzaCBhbnkgbWVzc2FnZXMuIFRoZSBleGNoYW5nZSBpcyBleHBlY3RlZCB0byBiZSBhIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIvdHV0b3JpYWxzL2FtcXAtY29uY2VwdHMjZXhjaGFuZ2UtdG9waWNcIixcbiAgICAgICAgY2hpbGRyZW46IFwidG9waWMgZXhjaGFuZ2VcIlxuICAgICAgfSksIFwiLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhlIGRlZmF1bHQgdG9waWMgZXhjaGFuZ2UgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJhbXEudG9waWNcIlxuICAgICAgfSksIFwiIGlzIHByZS1kZWNsYXJlZDogSXQgdGhlcmVmb3JlIGV4aXN0cyB3aGVuIFJhYmJpdE1RIGlzIHN0YXJ0ZWQuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDIsIHtcbiAgICAgIGlkOiBcInJldGFpbmVkXCIsXG4gICAgICBjaGlsZHJlbjogXCJSZXRhaW5lZCBNZXNzYWdlcyBhbmQgU3RvcmVzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJUaGUgcGx1Z2luIHN1cHBvcnRzIHJldGFpbmVkIG1lc3NhZ2VzIHdpdGggdGhlIGxpbWl0YXRpb25zIGRlc2NyaWJlZCBpbiB0aGlzIHNlY3Rpb24uXFxyXFxuVGhlIG1lc3NhZ2Ugc3RvcmUgaW1wbGVtZW50YXRpb24gaXMgcGx1Z2dhYmxlIGFuZCB0aGUgcGx1Z2luIHNoaXBzIHdpdGggdHdvIGltcGxlbWVudGF0aW9uIG91dCBvZiB0aGUgYm94OlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnVsLCB7XG4gICAgICBjaGlsZHJlbjogW1wiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCJodHRwczovL3d3dy5lcmxhbmcub3JnL2RvYy9tYW4vZXRzLmh0bWxcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJFVFNcIlxuICAgICAgICB9KSwgXCItYmFzZWQgKGluIG1lbW9yeSksIGltcGxlbWVudGVkIGluIG1vZHVsZSBcIiwgX2pzeChcImNvZGVcIiwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdF9tcXR0X3JldGFpbmVkX21zZ19zdG9yZV9ldHNcIlxuICAgICAgICB9KV1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiaHR0cHM6Ly93d3cuZXJsYW5nLm9yZy9kb2MvbWFuL2RldHMuaHRtbFwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIkRFVFNcIlxuICAgICAgICB9KSwgXCItYmFzZWQgKG9uIGRpc2spLCBpbXBsZW1lbnRlZCBpbiBtb2R1bGUgXCIsIF9qc3goXCJjb2RlXCIsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRfbXF0dF9yZXRhaW5lZF9tc2dfc3RvcmVfZGV0c1wiXG4gICAgICAgIH0pXVxuICAgICAgfSksIFwiXFxuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJCb3RoIGltcGxlbWVudGF0aW9ucyBoYXZlIGxpbWl0YXRpb25zIGFuZCB0cmFkZS1vZmZzLlxcclxcbldpdGggdGhlIGZpcnN0IG9uZSwgdGhlIG1heGltdW0gbnVtYmVyIG9mIG1lc3NhZ2VzIHRoYXQgY2FuIGJlIHJldGFpbmVkIGlzIGxpbWl0ZWQgYnkgUkFNLlxcclxcbldpdGggdGhlIHNlY29uZCBvbmUsIHRoZXJlIGlzIGEgbGltaXQgb2YgMiBHQiBwZXIgdmhvc3QuIEJvdGggYXJlIFwiLCBfanN4KF9jb21wb25lbnRzLnN0cm9uZywge1xuICAgICAgICBjaGlsZHJlbjogXCJub2RlLWxvY2FsXCJcbiAgICAgIH0pLCBcIjpcXHJcXG5SZXRhaW5lZCBtZXNzYWdlcyBhcmUgbmVpdGhlciByZXBsaWNhdGVkIHRvIG5vciBxdWVyaWVkIGZyb20gcmVtb3RlIGNsdXN0ZXIgbm9kZXMuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJBbiBleGFtcGxlIHRoYXQgd29ya3MgaXMgdGhlIGZvbGxvd2luZzogQW4gTVFUVCBDbGllbnQgcHVibGlzaGVzIGEgcmV0YWluZWQgbWVzc2FnZSB0byBub2RlIEEgd2l0aCB0b3BpYyBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInRvcGljLzFcIlxuICAgICAgfSksIFwiLlxcclxcblRoZXJlYWZ0ZXIgYW5vdGhlciBjbGllbnQgc3Vic2NyaWJlcyB3aXRoIHRvcGljIGZpbHRlciBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInRvcGljLzFcIlxuICAgICAgfSksIFwiIG9uIG5vZGUgQS5cXHJcXG5UaGUgbmV3IHN1YnNjcmliZXIgd2lsbCByZWNlaXZlIHRoZSByZXRhaW5lZCBtZXNzYWdlLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkhvd2V2ZXIsIGlmIGEgY2xpZW50IHB1Ymxpc2hlcyBhIHJldGFpbmVkIG1lc3NhZ2Ugb24gbm9kZSBBIGFuZCBhbm90aGVyIGNsaWVudCBzdWJzZXF1ZW50bHkgc3Vic2NyaWJlcyBvbiBub2RlIEIsXFxyXFxudGhhdCBzdWJzY3JpYmluZyBjbGllbnQgd2lsbCBub3QgcmVjZWl2ZSBhbnkgcmV0YWluZWQgbWVzc2FnZSBzdG9yZWQgb24gbm9kZSBBLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJGdXJ0aGVybW9yZSwgaWYgdGhlIHRvcGljIGZpbHRlciBjb250YWlucyB3aWxkY2FyZHMgKHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL21xdHQvbXF0dC92NS4wL29zL21xdHQtdjUuMC1vcy5odG1sI19Ub2MzOTAxMjQ0XCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIm11bHRpLWxldmVsIHdpbGRjYXJkIGNoYXJhY3RlclwiXG4gICAgICB9KSwgXCIg4oCcI+KAnSBvciB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcImh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9tcXR0L21xdHQvdjUuMC9vcy9tcXR0LXY1LjAtb3MuaHRtbCNfVG9jMzkwMTI0NVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJzaW5nbGUtbGV2ZWwgd2lsZGNhcmQgY2hhcmFjdGVyXCJcbiAgICAgIH0pLCBcIiDigJwr4oCdKSwgbm8gcmV0YWluZWQgbWVzc2FnZXMgYXJlIHNlbnQuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUbyBjb25maWd1cmUgdGhlIHN0b3JlLCB1c2UgdGhlIFwiLCBfanN4KFwiY29kZVwiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHQucmV0YWluZWRfbWVzc2FnZV9zdG9yZVwiXG4gICAgICB9KSwgXCIgY29uZmlndXJhdGlvbiBrZXk6XCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1pbmlcIixcbiAgICAgICAgY2hpbGRyZW46IFwiIyMgdXNlIERFVFMgKGRpc2stYmFzZWQpIHN0b3JlIGZvciByZXRhaW5lZCBtZXNzYWdlc1xcclxcbm1xdHQucmV0YWluZWRfbWVzc2FnZV9zdG9yZSA9IHJhYmJpdF9tcXR0X3JldGFpbmVkX21zZ19zdG9yZV9kZXRzXFxyXFxuIyMgb25seSB1c2VkIGJ5IERFVFMgc3RvcmUgKGluIG1pbGxpc2Vjb25kcylcXHJcXG5tcXR0LnJldGFpbmVkX21lc3NhZ2Vfc3RvcmVfZGV0c19zeW5jX2ludGVydmFsID0gMjAwMFxcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlRoZSB2YWx1ZSBtdXN0IGJlIGEgbW9kdWxlIHRoYXQgaW1wbGVtZW50cyB0aGUgc3RvcmU6XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMudWwsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KFwiY29kZVwiLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwicmFiYml0X21xdHRfcmV0YWluZWRfbXNnX3N0b3JlX2V0c1wiXG4gICAgICAgIH0pLCBcIiBmb3IgUkFNLWJhc2VkXCJdXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KFwiY29kZVwiLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwicmFiYml0X21xdHRfcmV0YWluZWRfbXNnX3N0b3JlX2RldHNcIlxuICAgICAgICB9KSwgXCIgZm9yIGRpc2stYmFzZWQgKFRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUuKVwiXVxuICAgICAgfSksIFwiXFxuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGVzZSBpbXBsZW1lbnRhdGlvbnMgYXJlIHN1aXRhYmxlIGZvciBkZXZlbG9wbWVudCBidXQgc29tZXRpbWVzIHdvbid0IGJlIGZvciBwcm9kdWN0aW9uIG5lZWRzLlxcclxcblRoZSBNUVRUIHNwZWNpZmljYXRpb24gZG9lcyBub3QgZGVmaW5lIGNvbnNpc3RlbmN5IG9yIHJlcGxpY2F0aW9uIHJlcXVpcmVtZW50cyBmb3IgcmV0YWluZWRcXHJcXG5tZXNzYWdlIHN0b3JlcywgdGhlcmVmb3JlIFJhYmJpdE1RIGFsbG93cyBmb3IgY3VzdG9tIG9uZXMgdG8gbWVldCB0aGUgY29uc2lzdGVuY3kgYW5kXFxyXFxuYXZhaWxhYmlsaXR5IG5lZWRzIG9mIGEgcGFydGljdWxhciBlbnZpcm9ubWVudC4gRm9yIGV4YW1wbGUsIHN0b3JlcyBiYXNlZCBvbiBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cDovL2Jhc2hvLmNvbS9yaWFrL1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJSaWFrXCJcbiAgICAgIH0pLCBcIlxcclxcbmFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cDovL2Nhc3NhbmRyYS5hcGFjaGUub3JnL1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJDYXNzYW5kcmFcIlxuICAgICAgfSksIFwiIHdvdWxkIGJlIHN1aXRhYmxlIGZvciBtb3N0IHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIGFzXFxyXFxudGhvc2UgZGF0YSBzdG9yZXMgcHJvdmlkZSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9naXRodWIuY29tL2Jhc2hvL2Jhc2hvX2RvY3MvYmxvYi9tYXN0ZXIvY29udGVudC9yaWFrL2t2LzIuMi4zL3VzaW5nL3JlZmVyZW5jZS9zdHJvbmctY29uc2lzdGVuY3kubWRcIixcbiAgICAgICAgY2hpbGRyZW46IFwidHVuYWJsZSBjb25zaXN0ZW5jeVwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJNZXNzYWdlIHN0b3JlcyBtdXN0IGltcGxlbWVudCB0aGUgXCIsIF9qc3goXCJjb2RlXCIsIHtcbiAgICAgICAgY2hpbGRyZW46IFwicmFiYml0X21xdHRfcmV0YWluZWRfbXNnX3N0b3JlXCJcbiAgICAgIH0pLCBcIiBiZWhhdmlvdXIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDIsIHtcbiAgICAgIGlkOiBcIm1ldHJpY3NcIixcbiAgICAgIGNoaWxkcmVuOiBcIk1ldHJpY3NcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJwcm9tZXRoZXVzXCIsXG4gICAgICBjaGlsZHJlbjogXCJQcm9tZXRoZXVzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlRoaXMgcGx1Z2luIGVtaXRzIHRoZSBQcm9tZXRoZXVzIG1ldHJpY3MgbGlzdGVkIGluIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vcmFiYml0bXEvcmFiYml0bXEtc2VydmVyL2Jsb2IvbWFpbi9kZXBzL3JhYmJpdG1xX3Byb21ldGhldXMvbWV0cmljcy5tZCNnbG9iYWwtY291bnRlcnNcIixcbiAgICAgICAgY2hpbGRyZW46IFwiR2xvYmFsIENvdW50ZXJzXCJcbiAgICAgIH0pLCBcIi5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlRoZSB2YWx1ZXMgZm9yIFByb21ldGhldXMgbGFiZWwgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJwcm90b2NvbFwiXG4gICAgICB9KSwgXCIgYXJlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXF0dDMxMFwiXG4gICAgICB9KSwgXCIsIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXF0dDMxMVwiXG4gICAgICB9KSwgXCIsIGFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHQ1MFwiXG4gICAgICB9KSwgXCIgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIE1RVFQgY2xpZW50IHVzZXMgTVFUVCAzLjEsIE1RVFQgMy4xLjEsIG9yIE1RVFQgNS4wLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhlIHZhbHVlcyBmb3IgUHJvbWV0aGV1cyBsYWJlbCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInF1ZXVlX3R5cGVcIlxuICAgICAgfSksIFwiIGFyZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdF9jbGFzc2ljX3F1ZXVlXCJcbiAgICAgIH0pLCBcIiwgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRfcXVvcnVtX3F1ZXVlXCJcbiAgICAgIH0pLCBcIiwgYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwicmFiYml0X21xdHRfcW9zMF9xdWV1ZVwiXG4gICAgICB9KSwgXCIgZGVwZW5kaW5nIG9uIHRoZSBxdWV1ZSB0eXBlIHRoZSBNUVRUIGNsaWVudCBjb25zdW1lcyBmcm9tLlxcclxcbihOb3RlIHRoYXQgTVFUVCBjbGllbnRzIG5ldmVyIGNvbnN1bWUgZnJvbSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9zdHJlYW1zXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcInN0cmVhbXNcIlxuICAgICAgfSksIFwiIGRpcmVjdGx5IGFsdGhvdWdoIHRoZXkgY2FuIHB1Ymxpc2ggbWVzc2FnZXMgdG8gc3RyZWFtcy4pXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcInJhYmJpdG1xLW1hbmFnZW1lbnQtYXBpXCIsXG4gICAgICBjaGlsZHJlbjogXCJSYWJiaXRNUSBNYW5hZ2VtZW50IEFQSVwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGUgTWFuYWdlbWVudCBBUEkgZGVsaXZlcnMgbWV0cmljcyBmb3IgTVFUVCBDb25uZWN0aW9ucyAoZS5nLiBuZXR3b3JrIHRyYWZmaWMgZnJvbSAvIHRvIGNsaWVudCkgYW5kIGZvciBDbGFzc2ljIFF1ZXVlcyBhbmQgUXVvcnVtIFF1ZXVlcyAoZS5nLiBob3cgbWFueSBtZXNzYWdlcyB0aGV5IGNvbnRhaW4pLlxcclxcbkhvd2V2ZXIsIE1hbmFnZW1lbnQgQVBJIG1ldHJpY3MgdGhhdCBhcmUgdGllZCB0byBBTVFQIDAuOS4xIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL2NoYW5uZWxzXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImNoYW5uZWxzXCJcbiAgICAgIH0pLCBcIiwgZS5nIG1lc3NhZ2UgcmF0ZXMsIGFyZSBub3QgYXZhaWxhYmxlIHNpbmNlIDMuMTIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDIsIHtcbiAgICAgIGlkOiBcInNjYWxhYmlsaXR5XCIsXG4gICAgICBjaGlsZHJlbjogXCJQZXJmb3JtYW5jZSBhbmQgU2NhbGFiaWxpdHkgQ2hlY2sgTGlzdFwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJNUVRUIGlzIHRoZSBzdGFuZGFyZCBwcm90b2NvbCBmb3IgdGhlIEludGVybmV0IG9mIFRoaW5ncyAoSW9UKS5cXHJcXG5BIGNvbW1vbiBJb1Qgd29ya2xvYWQgaXMgdGhhdCBtYW55IE1RVFQgZGV2aWNlcyBwdWJsaXNoIHNlbnNvciBkYXRhIHBlcmlvZGljYWxseSB0byB0aGUgTVFUVCBicm9rZXIuXFxyXFxuVGhlcmUgY291bGQgYmUgaHVuZHJlZHMgb2YgdGhvdXNhbmRzLCBzb21ldGltZXMgZXZlbiBtaWxsaW9ucyBvZiBJb1QgZGV2aWNlcyB0aGF0IGNvbm5lY3QgdG8gdGhlIE1RVFQgYnJva2VyLlxcclxcblRoZSBibG9nIHBvc3QgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi9ibG9nLzIwMjMvMDMvMjEvbmF0aXZlLW1xdHRcIixcbiAgICAgICAgY2hpbGRyZW46IFwiTmF0aXZlIE1RVFRcIlxuICAgICAgfSksIFwiIGRlbW9uc3RyYXRlcyBwZXJmb3JtYW5jZSBiZW5jaG1hcmtzIG9mIHN1Y2ggd29ya2xvYWRzLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlRoaXMgc2VjdGlvbiBhaW1zIGF0IHByb3ZpZGluZyBhIG5vbi1leGhhdXN0aXZlIGNoZWNrbGlzdCB3aXRoIHRpcHMgYW5kIHRyaWNrcyB0byBjb25maWd1cmUgUmFiYml0TVEgYXMgYW4gZWZmaWNpZW50IE1RVFQgYnJva2VyIHRoYXQgc3VwcG9ydHMgbWFueSBjbGllbnQgY29ubmVjdGlvbnM6XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMub2wsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcIlNldCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwibWFuYWdlbWVudF9hZ2VudC5kaXNhYmxlX21ldHJpY3NfY29sbGVjdG9yID0gdHJ1ZVwiXG4gICAgICAgIH0pLCBcIiB0byBkaXNhYmxlIG1ldHJpY3MgY29sbGVjdGlvbiBpbiB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiLi9tYW5hZ2VtZW50XCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiTWFuYWdlbWVudCBwbHVnaW5cIlxuICAgICAgICB9KSwgXCIuXFxyXFxuVGhlIFJhYmJpdE1RIE1hbmFnZW1lbnQgcGx1Z2luIGhhcyBub3QgYmVlbiBkZXNpZ25lZCBmb3IgZXhjZXNzaXZlIG1ldHJpY3MgY29sbGVjdGlvbi5cXHJcXG5JbiBmYWN0LCBtZXRyaWNzIGRlbGl2ZXJ5IHZpYSB0aGUgbWFuYWdlbWVudCBBUEkgaXMgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiL2Jsb2cvMjAyMS8wOC8yMS80LjAtZGVwcmVjYXRpb24tYW5ub3VuY2VtZW50cyNkaXNhYmxlLW1ldHJpY3MtZGVsaXZlcnktdmlhLXRoZS1tYW5hZ2VtZW50LWFwaS0tdWlcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJkZXByZWNhdGVkXCJcbiAgICAgICAgfSksIFwiLiBJbnN0ZWFkLCB1c2UgYSB0b29sIHRoYXQgaGFzIGJlZW4gZGVzaWduZWQgZm9yIGNvbGxlY3RpbmcgYW5kIHF1ZXJ5aW5nIGEgaHVnZSBudW1iZXIgb2YgbWV0cmljczogUHJvbWV0aGV1cy5cIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW1wiTVFUVCBwYWNrZXRzIGFuZCBzdWJzY3JpcHRpb25zIHdpdGggUW9TIDAgcHJvdmlkZSBtdWNoIGJldHRlciBwZXJmb3JtYW5jZSB0aGFuIFFvUyAxLlxcclxcblVubGlrZSBBTVFQIDAuOS4xIGFuZCBBTVFQIDEuMCwgTVFUVCBpcyBub3QgZGVzaWduZWQgdG8gbWF4aW1pc2UgdGhyb3VnaHB1dDogRm9yIGV4YW1wbGUsIHRoZXJlIGFyZSBubyBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCIuL2NvbmZpcm1zI2NvbnN1bWVyLWFja3MtbXVsdGlwbGUtcGFyYW1ldGVyXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwibXVsdGktYWNrc1wiXG4gICAgICAgIH0pLCBcIi5cXHJcXG5FdmVyeSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDExMDBcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJQVUJMSVNIXCJcbiAgICAgICAgfSksIFwiIHBhY2tldCB3aXRoIFFvUyAxIG5lZWRzIHRvIGJlIGFja25vd2xlZGdlZCBpbmRpdmlkdWFsbHkuXCJdXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcIkRlY3JlYXNlIFRDUCBidWZmZXIgc2l6ZXMgYXMgZGVzY3JpYmVkIGluIHNlY3Rpb24gXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiI2xpc3RlbmVyLW9wdHNcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJUQ1AgTGlzdGVuZXIgT3B0aW9uc1wiXG4gICAgICAgIH0pLCBcIi5cIl1cbiAgICAgIH0pLCBcIlxcblwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhpcyBzdWJzdGFudGlhbGx5IHJlZHVjZXMgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vbWVtb3J5LXVzZVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJtZW1vcnkgdXNhZ2VcIlxuICAgICAgfSksIFwiIGluIGVudmlyb25tZW50cyB3aXRoIG1hbnkgY29uY3VycmVudGx5IGNvbm5lY3RlZCBjbGllbnRzLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5vbCwge1xuICAgICAgY2hpbGRyZW46IFtcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW1wiTGVzcyB0b3BpYyBsZXZlbHMgKGluIGFuIE1RVFQgdG9waWMgYW5kIE1RVFQgdG9waWMgZmlsdGVyKSBwZXJmb3JtIGJldHRlciB0aGFuIG1vcmUgdG9waWMgbGV2ZWxzLlxcclxcbkZvciBleGFtcGxlLCBwcmVmZXIgdG8gc3RydWN0dXJlIHlvdXIgdG9waWMgYXMgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcImNpdHkvbmFtZVwiXG4gICAgICAgIH0pLCBcIiBpbnN0ZWFkIG9mIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJjb250aW5lbnQvY291bnRyeS9jaXR5L25hbWVcIlxuICAgICAgICB9KSwgXCIsIGlmIHBvc3NpYmxlLlxcclxcbkVhY2ggdG9waWMgbGV2ZWwgaW4gYSB0b3BpYyBmaWx0ZXIgY3VycmVudGx5IGNyZWF0ZXMgaXRzIG93biBlbnRyeSBpbiB0aGUgZGF0YWJhc2UgdXNlZCBieSBSYWJiaXRNUS5cXHJcXG5UaGVyZWZvcmUsIGNyZWF0aW5nIGFuZCBkZWxldGluZyBtYW55IHN1YnNjcmlwdGlvbnMgd2lsbCBiZSBmYXN0ZXIgd2hlbiB0aGVyZSBhcmUgZmV3ZXIgdG9waWMgbGV2ZWxzLlxcclxcbkFsc28sIHJvdXRpbmcgbWVzc2FnZXMgd2l0aCBmZXdlciB0b3BpYyBsZXZlbHMgaXMgZmFzdGVyLlwiXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbXCJJbiB3b3JrbG9hZHMgd2l0aCBoaWdoIHN1YnNjcmlwdGlvbiBjaHVybiwgaW5jcmVhc2UgTW5lc2lhIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJkdW1wX2xvZ193cml0ZV90aHJlc2hvbGRcIlxuICAgICAgICB9KSwgXCIgKGUuZy4gXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcIlJBQkJJVE1RX1NFUlZFUl9BRERJVElPTkFMX0VSTF9BUkdTPVxcXCItbW5lc2lhIGR1bXBfbG9nX3dyaXRlX3RocmVzaG9sZCAyMDAwMFxcXCJcIlxuICAgICAgICB9KSwgXCIpXCJdXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcIldoZW4gY29ubmVjdGluZyBtYW55IGNsaWVudHMsIGluY3JlYXNlIHRoZSBtYXhpbXVtIG51bWJlciBvZiBFcmxhbmcgcHJvY2Vzc2VzIChlLmcuIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJSQUJCSVRNUV9TRVJWRVJfQURESVRJT05BTF9FUkxfQVJHUz1cXFwiK1AgMTAwMDAwMDBcIlxuICAgICAgICB9KSwgXCIpXFxyXFxuYW5kIHRoZSBtYXhpbXVtIG51bWJlciBvZiBvcGVuIHBvcnRzIChlLmcuIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJFUkxfTUFYX1BPUlRTPTEwMDAwMDAwXCJcbiAgICAgICAgfSksIFwiKS5cIl1cbiAgICAgIH0pLCBcIlxcblwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiQ29uc3VsdCB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vbmV0d29ya2luZ1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJOZXR3b3JraW5nXCJcbiAgICAgIH0pLCBcIiBhbmQgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vY29uZmlndXJlXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIkNvbmZpZ3VyYXRpb25cIlxuICAgICAgfSksIFwiIGd1aWRlcyBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwicHJveHktcHJvdG9jb2xcIixcbiAgICAgIGNoaWxkcmVuOiBcIlByb3h5IFByb3RvY29sXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlRoZSBNUVRUIHBsdWdpbiBzdXBwb3J0cyB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcImh0dHA6Ly93d3cuaGFwcm94eS5vcmcvZG93bmxvYWQvMy4xL2RvYy9wcm94eS1wcm90b2NvbC50eHRcIixcbiAgICAgICAgY2hpbGRyZW46IFwicHJveHkgcHJvdG9jb2xcIlxuICAgICAgfSksIFwiLlxcclxcblRoaXMgZmVhdHVyZSBpcyBkaXNhYmxlZCBieSBkZWZhdWx0LCB0byBlbmFibGUgaXQgZm9yIE1RVFQgY2xpZW50czpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWluaVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJtcXR0LnByb3h5X3Byb3RvY29sID0gdHJ1ZVxcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiU2VlIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9uZXR3b3JraW5nI3Byb3h5LXByb3RvY29sXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIk5ldHdvcmtpbmcgR3VpZGVcIlxuICAgICAgfSksIFwiIGZvciBtb3JlIGluZm9ybWF0aW9uXFxyXFxuYWJvdXQgdGhlIHByb3h5IHByb3RvY29sLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJzcGFya3BsdWctc3VwcG9ydFwiLFxuICAgICAgY2hpbGRyZW46IFwiU3BhcmtwbHVnIFN1cHBvcnRcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcImh0dHBzOi8vd3d3LmNpcnJ1cy1saW5rLmNvbS9tcXR0LXNwYXJrcGx1Zy10YWh1L1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJTcGFya3BsdWdcIlxuICAgICAgfSksIFwiIGlzIGEgc3BlY2lmaWNhdGlvblxcclxcbnRoYXQgcHJvdmlkZXMgZ3VpZGFuY2UgZm9yIHRoZSBkZXNpZ24gb2YgYW4gTVFUVCBzeXN0ZW0uIEluIFNwYXJrcGx1ZyxcXHJcXG5NUVRUIHRvcGljcyBtdXN0IHN0YXJ0IHdpdGggXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJzcEF2TS5OXCJcbiAgICAgIH0pLCBcIiBvciBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInNwQnZNLk5cIlxuICAgICAgfSksIFwiLCB3aGVyZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIk1cIlxuICAgICAgfSksIFwiIGFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIk5cIlxuICAgICAgfSksIFwiIGFyZSBpbnRlZ2Vycy5cXHJcXG5UaGlzIHVuZm9ydHVuYXRlbHkgY29uZmxpY3RzIHdpdGggdGhlIHdheSB0aGUgUmFiYml0TVEgTVFUVCBwbHVnaW4gXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIiNpbXBsZW1lbnRhdGlvblwiLFxuICAgICAgICBjaGlsZHJlbjogXCJ0cmFuc2xhdGVzIE1RVFRcXHJcXG50b3BpY3MgaW50byBBTVFQIDAuOS4xIHJvdXRpbmcga2V5c1wiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUbyBzb2x2ZSB0aGlzLCB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJzcGFya3BsdWdcIlxuICAgICAgfSksIFwiIGNvbmZpZ3VyYXRpb24gZW50cnkgY2FuIGJlIHNldCB0byBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInRydWVcIlxuICAgICAgfSksIFwiOlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtaW5pXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIm1xdHQuc3BhcmtwbHVnID0gdHJ1ZVxcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiV2hlbiB0aGUgU3BhcmtwbHVnIHN1cHBvcnQgaXMgZW5hYmxlZCwgdGhlIE1RVFQgcGx1Z2luIHdpbGwgbm90IHRyYW5zbGF0ZSB0aGVcXHJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInNwQXZNLk5cIlxuICAgICAgfSksIFwiL1wiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwic3BCdk0uTlwiXG4gICAgICB9KSwgXCIgcGFydCBvZiB0aGUgbmFtZXMgb2YgdG9waWNzLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJsaW1pdGF0aW9uc1wiLFxuICAgICAgY2hpbGRyZW46IFwiTGltaXRhdGlvbnNcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlRoZSBSYWJiaXRNUSBNUVRUIHBsdWdpbiBoYXMgY3VycmVudGx5IHRoZSBmb2xsb3dpbmcgbGltaXRhdGlvbnMuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwicW9zLTJcIixcbiAgICAgIGNoaWxkcmVuOiBcIlFvUyAyXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDEyMzdcIixcbiAgICAgICAgY2hpbGRyZW46IFwiUW9TIDI6IEV4YWN0bHkgb25jZSBkZWxpdmVyeVwiXG4gICAgICB9KSwgXCIgaXMgdW5zdXBwb3J0ZWQuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJJZiBhbiBNUVRUIDMuMCBvciAzLjEuMSBjbGllbnQgcHVibGlzaGVzIGEgbWVzc2FnZSB3aXRoIFFvUyAyLCBSYWJiaXRNUSB3aWxsIGRvd25ncmFkZSB0aGUgUW9TIGxldmVsIHRvIDEuXFxyXFxuSWYgYW4gTVFUVCA1LjAgY2xpZW50IHB1Ymxpc2hlcyBhIG1lc3NhZ2Ugd2l0aCBRb1MgMiwgUmFiYml0TVEgd2lsbCBkaXNjb25uZWN0IHRoZSBjbGllbnQgd2l0aCByZWFzb24gY29kZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIjE1NTogUW9TIG5vdCBzdXBwb3J0ZWRcIlxuICAgICAgfSksIFwiLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJyZS1hdXRoZW50aWNhdGlvblwiLFxuICAgICAgY2hpbGRyZW46IFwiUmUtYXV0aGVudGljYXRpb25cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiUmFiYml0TVEgZG9lcyBub3Qgc3VwcG9ydCB0aGUgTVFUVCA1LjAgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcImh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9tcXR0L21xdHQvdjUuMC9vcy9tcXR0LXY1LjAtb3MuaHRtbCNfVG9jMzkwMTIxN1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJBVVRIXCJcbiAgICAgIH0pLCBcIiBwYWNrZXQsXFxyXFxuYW5kIHRoZXJlZm9yZSBkb2VzIG5vdCBzdXBwb3J0IFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDEyNTdcIixcbiAgICAgICAgY2hpbGRyZW46IFwicmUtYXV0aGVudGljYXRpb25cIlxuICAgICAgfSksIFwiLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiV2hpbGUgUmFiYml0TVEgc3VwcG9ydHMgT0F1dGggMi4wIHRva2VuIHJlbmV3YWwgZm9yIEFNUVAgMS4wLCBBTVFQIDAuOS4xLCBhbmQgdGhlIFJhYmJpdE1RIHN0cmVhbSBwcm90b2NvbCwgUmFiYml0TVEgZG9lcyBub3Qgc3VwcG9ydCBPQXV0aCAyLjAgdG9rZW4gcmVuZXdhbCBmb3IgTVFUVC5cXHJcXG5JZiBhIHRva2VuIGV4cGlyZXMsIFJhYmJpdE1RIHdpbGwgZGlzY29ubmVjdCB0aGUgTVFUVCBjbGllbnQgd2l0aCByZWFzb24gY29kZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIjE2MDogTWF4aW11bSBjb25uZWN0IHRpbWVcIlxuICAgICAgfSksIFwiLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJzaGFyZWQtc3Vic2NyaXB0aW9uc1wiLFxuICAgICAgY2hpbGRyZW46IFwiU2hhcmVkIFN1YnNjcmlwdGlvbnNcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcImh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9tcXR0L21xdHQvdjUuMC9vcy9tcXR0LXY1LjAtb3MuaHRtbCNfVG9jMzkwMTI1MFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJTaGFyZWQgc3Vic2NyaXB0aW9uc1wiXG4gICAgICB9KSwgXCIgYXJlIHVuc3VwcG9ydGVkLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJvdmVybGFwcGluZy1zdWJzY3JpcHRpb25zXCIsXG4gICAgICBjaGlsZHJlbjogXCJPdmVybGFwcGluZyBTdWJzY3JpcHRpb25zXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIk92ZXJsYXBwaW5nIHN1YnNjcmlwdGlvbnMgd2l0aCBkaWZmZXJlbnQgUW9TIGxldmVscyBjYW4gcmVzdWx0IGluIGR1cGxpY2F0ZSBtZXNzYWdlcyBiZWluZyBkZWxpdmVyZWQuXFxyXFxuQXBwbGljYXRpb25zIG5lZWQgdG8gYWNjb3VudCBmb3IgdGhpcy5cXHJcXG5Gb3IgZXhhbXBsZSB3aGVuIHRoZSBzYW1lIE1RVFQgY2xpZW50IGNyZWF0ZXMgYSBRb1MgMCBzdWJzY3JpcHRpb24gZm9yIHRvcGljIGZpbHRlciBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIi9zcG9ydHMvZm9vdGJhbGwvI1wiXG4gICAgICB9KSwgXCIgYW5kIGEgUW9TIDEgc3Vic2NyaXB0aW9uIGZvciB0b3BpYyBmaWx0ZXIgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCIvc3BvcnRzLyNcIlxuICAgICAgfSksIFwiLCBpdCB3aWxsIGJlIGRlbGl2ZXJlZCBkdXBsaWNhdGUgbWVzc2FnZXMuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcInJldGFpbmVkLW1lc3NhZ2Utc3RvcmVzXCIsXG4gICAgICBjaGlsZHJlbjogXCJSZXRhaW5lZCBNZXNzYWdlIFN0b3Jlc1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJBcyBkZXNjcmliZWQgaW4gXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIiNyZXRhaW5lZFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJSZXRhaW5lZCBNZXNzYWdlcyBhbmQgU3RvcmVzXCJcbiAgICAgIH0pLCBcIiwgcmV0YWluZWQgbWVzc2FnZXMgYXJlIHN0b3JlZCBhbmQgcXVlcmllZCBvbmx5IG5vZGUgbG9jYWwuXFxyXFxuRnVydGhlcm1vcmUsIGlmIHRoZSB0b3BpYyBmaWx0ZXIgY29udGFpbnMgd2lsZGNhcmRzICh0aGUgbXVsdGktbGV2ZWwgd2lsZGNhcmQgY2hhcmFjdGVyIOKAnCPigJ0gb3IgdGhlIHNpbmdsZS1sZXZlbCB3aWxkY2FyZCBjaGFyYWN0ZXIg4oCcK+KAnSksIG5vIHJldGFpbmVkIG1lc3NhZ2VzIGFyZSBzZW50LlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJkZWxheWVkLWFuZC1yZXRhaW5lZC13aWxsLW1lc2FnZVwiLFxuICAgICAgY2hpbGRyZW46IFwiRGVsYXllZCBhbmQgUmV0YWluZWQgV2lsbCBNZXNhZ2VcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiQSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL21xdHQvbXF0dC92NS4wL29zL21xdHQtdjUuMC1vcy5odG1sI19Ub2MzOTAxMDQwXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIldpbGwgTWVzc2FnZVwiXG4gICAgICB9KSwgXCIgdGhhdCBpcyBib3RoIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDEwNjJcIixcbiAgICAgICAgY2hpbGRyZW46IFwiZGVsYXllZFwiXG4gICAgICB9KSwgXCIgYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCJodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvb3MvbXF0dC12NS4wLW9zLmh0bWwjX1RvYzM5MDEwNDJcIixcbiAgICAgICAgY2hpbGRyZW46IFwicmV0YWluZWRcIlxuICAgICAgfSksIFwiIGlzIG5vdCByZXRhaW5lZC5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwiZGlzYWJsaW5nLXBsdWdpblwiLFxuICAgICAgY2hpbGRyZW46IFwiRGlzYWJsaW5nIHRoZSBQbHVnaW5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiQmVmb3JlIHRoZSBwbHVnaW4gaXMgZGlzYWJsZWQgb24gYSBub2RlLCBvciBhIG5vZGUgcmVtb3ZlZCBmcm9tIHRoZSBjbHVzdGVyLCBpdCBtdXN0IGJlIGRlY29tbWlzc2lvbmVkIHVzaW5nIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL2NsaVwiLFxuICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwicmFiYml0bXFjdGxcIlxuICAgICAgICB9KVxuICAgICAgfSksIFwiOlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtYmFzaFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRtcWN0bCBkZWNvbW1pc3Npb25fbXF0dF9ub2RlIDxub2RlPjtcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwicmV0YWluZWRcIixcbiAgICAgIGNoaWxkcmVuOiBcIlJldGFpbmVkIE1lc3NhZ2VzIGFuZCBTdG9yZXNcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlRoZSBwbHVnaW4gc3VwcG9ydHMgcmV0YWluZWQgbWVzc2FnZXMuIE1lc3NhZ2Ugc3RvcmUgaW1wbGVtZW50YXRpb24gaXMgcGx1Z2dhYmxlXFxyXFxuYW5kIHRoZSBwbHVnaW4gc2hpcHMgd2l0aCB0d28gaW1wbGVtZW50YXRpb24gb3V0IG9mIHRoZSBib3g6XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMudWwsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcIkVUUy1iYXNlZCAoaW4gbWVtb3J5KSwgaW1wbGVtZW50ZWQgaW4gdGhlIFwiLCBfanN4KFwiY29kZVwiLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwicmFiYml0X21xdHRfcmV0YWluZWRfbXNnX3N0b3JlX2V0c1wiXG4gICAgICAgIH0pLCBcIiBtb2R1bGVcIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW1wiREVUUy1iYXNlZCAob24gZGlzayksIGltcGxlbWVudGVkIGluIHRoZSBcIiwgX2pzeChcImNvZGVcIiwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdF9tcXR0X3JldGFpbmVkX21zZ19zdG9yZV9kZXRzXCJcbiAgICAgICAgfSldXG4gICAgICB9KSwgXCJcXG5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJCb3RoIGltcGxlbWVudGF0aW9ucyBoYXZlIGxpbWl0YXRpb25zIGFuZCB0cmFkZS1vZmZzLlxcclxcbldpdGggdGhlIGZpcnN0IG9uZSwgbWF4aW11bSBudW1iZXIgb2YgbWVzc2FnZXMgdGhhdCBjYW4gYmUgcmV0YWluZWQgaXMgbGltaXRlZCBieSBSQU0uXFxyXFxuV2l0aCB0aGUgc2Vjb25kIG9uZSwgdGhlcmUgaXMgYSBsaW1pdCBvZiAyIEdCIHBlciB2aG9zdC4gQm90aCBhcmUgbm9kZS1sb2NhbFxcclxcbihtZXNzYWdlcyByZXRhaW5lZCBvbiBvbmUgYnJva2VyIG5vZGUgYXJlIG5vdCByZXBsaWNhdGVkIHRvIG90aGVyIG5vZGVzIGluIHRoZSBjbHVzdGVyKS5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVG8gY29uZmlndXJlIHRoZSBzdG9yZSwgdXNlIFwiLCBfanN4KFwiY29kZVwiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdG1xX21xdHQucmV0YWluZWRfbWVzc2FnZV9zdG9yZVwiXG4gICAgICB9KSwgXCIgY29uZmlndXJhdGlvbiBrZXk6XCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1pbmlcIixcbiAgICAgICAgY2hpbGRyZW46IFwibXF0dC5hbGxvd19hbm9ueW1vdXMgICAgICAgICAgICAgICAgICAgICA9IHRydWVcXHJcXG5tcXR0LnZob3N0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gL1xcclxcbm1xdHQuZXhjaGFuZ2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBhbXEudG9waWNcXHJcXG5tcXR0Lm1heF9zZXNzaW9uX2V4cGlyeV9pbnRlcnZhbF9zZWNvbmRzID0gMTgwMFxcclxcbm1xdHQucHJlZmV0Y2ggICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAxMFxcclxcblxcclxcbiMjIHVzZSBERVRTIChkaXNrLWJhc2VkKSBzdG9yZSBmb3IgcmV0YWluZWQgbWVzc2FnZXNcXHJcXG5tcXR0LnJldGFpbmVkX21lc3NhZ2Vfc3RvcmUgPSByYWJiaXRfbXF0dF9yZXRhaW5lZF9tc2dfc3RvcmVfZGV0c1xcclxcbiMjIG9ubHkgdXNlZCBieSBERVRTIHN0b3JlXFxyXFxubXF0dC5yZXRhaW5lZF9tZXNzYWdlX3N0b3JlX2RldHNfc3luY19pbnRlcnZhbCA9IDIwMDBcXHJcXG5cXHJcXG5tcXR0Lmxpc3RlbmVycy5zc2wgPSBub25lXFxyXFxubXF0dC5saXN0ZW5lcnMudGNwLmRlZmF1bHQgPSAxODgzXFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiVGhlIHZhbHVlIG11c3QgYmUgYSBtb2R1bGUgdGhhdCBpbXBsZW1lbnRzIHRoZSBzdG9yZTpcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy51bCwge1xuICAgICAgY2hpbGRyZW46IFtcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW19qc3goXCJjb2RlXCIsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRfbXF0dF9yZXRhaW5lZF9tc2dfc3RvcmVfZXRzXCJcbiAgICAgICAgfSksIFwiIGZvciBSQU0tYmFzZWRcIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW19qc3goXCJjb2RlXCIsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRfbXF0dF9yZXRhaW5lZF9tc2dfc3RvcmVfZGV0c1wiXG4gICAgICAgIH0pLCBcIiBmb3IgZGlzay1iYXNlZFwiXVxuICAgICAgfSksIFwiXFxuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGVzZSBpbXBsZW1lbnRhdGlvbnMgYXJlIHN1aXRhYmxlIGZvciBkZXZlbG9wbWVudCBidXQgc29tZXRpbWVzIHdvbid0IGJlIGZvciBwcm9kdWN0aW9uIG5lZWRzLlxcclxcbk1RVFQgMy4xIHNwZWNpZmljYXRpb24gZG9lcyBub3QgZGVmaW5lIGNvbnNpc3RlbmN5IG9yIHJlcGxpY2F0aW9uIHJlcXVpcmVtZW50cyBmb3IgcmV0YWluZWRcXHJcXG5tZXNzYWdlIHN0b3JlcywgdGhlcmVmb3JlIFJhYmJpdE1RIGFsbG93cyBmb3IgY3VzdG9tIG9uZXMgdG8gbWVldCB0aGUgY29uc2lzdGVuY3kgYW5kXFxyXFxuYXZhaWxhYmlsaXR5IG5lZWRzIG9mIGEgcGFydGljdWxhciBlbnZpcm9ubWVudC4gRm9yIGV4YW1wbGUsIHN0b3JlcyBiYXNlZCBvbiBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cDovL2Jhc2hvLmNvbS9yaWFrL1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJSaWFrXCJcbiAgICAgIH0pLCBcIlxcclxcbmFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cDovL2Nhc3NhbmRyYS5hcGFjaGUub3JnL1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJDYXNzYW5kcmFcIlxuICAgICAgfSksIFwiIHdvdWxkIGJlIHN1aXRhYmxlIGZvciBtb3N0IHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIGFzXFxyXFxudGhvc2UgZGF0YSBzdG9yZXMgcHJvdmlkZSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9naXRodWIuY29tL2Jhc2hvL2Jhc2hvX2RvY3MvYmxvYi9tYXN0ZXIvY29udGVudC9yaWFrL2t2LzIuMi4zL3VzaW5nL3JlZmVyZW5jZS9zdHJvbmctY29uc2lzdGVuY3kubWRcIixcbiAgICAgICAgY2hpbGRyZW46IFwidHVuYWJsZSBjb25zaXN0ZW5jeVwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJNZXNzYWdlIHN0b3JlcyBtdXN0IGltcGxlbWVudCB0aGUgXCIsIF9qc3goXCJjb2RlXCIsIHtcbiAgICAgICAgY2hpbGRyZW46IFwicmFiYml0X21xdHRfcmV0YWluZWRfbXNnX3N0b3JlXCJcbiAgICAgIH0pLCBcIiBiZWhhdmlvdXIuXCJdXG4gICAgfSldXG4gIH0pO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChwcm9wcyA9IHt9KSB7XG4gIGNvbnN0IHt3cmFwcGVyOiBNRFhMYXlvdXR9ID0ge1xuICAgIC4uLl9wcm92aWRlQ29tcG9uZW50cygpLFxuICAgIC4uLnByb3BzLmNvbXBvbmVudHNcbiAgfTtcbiAgcmV0dXJuIE1EWExheW91dCA/IF9qc3goTURYTGF5b3V0LCB7XG4gICAgLi4ucHJvcHMsXG4gICAgY2hpbGRyZW46IF9qc3goX2NyZWF0ZU1keENvbnRlbnQsIHtcbiAgICAgIC4uLnByb3BzXG4gICAgfSlcbiAgfSkgOiBfY3JlYXRlTWR4Q29udGVudChwcm9wcyk7XG59XG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./docs/mqtt.md\n");

/***/ })

}]);