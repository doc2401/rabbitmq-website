"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-blog-2014-04-10-consumer-bias-in-rabbitmq-3-3-e-86-fd1"],{

/***/ "./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2014-04-10-consumer-bias-in-rabbitmq-3-3-index-md-e86.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"permalink":"/rabbitmq-website/blog/2014/04/10/consumer-bias-in-rabbitmq-3-3","editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/blog/2014-04-10-consumer-bias-in-rabbitmq-3-3/index.md","source":"@site/blog/2014-04-10-consumer-bias-in-rabbitmq-3-3/index.md","title":"Consumer Bias in RabbitMQ 3.3","description":"I warn you before we start: this is another wordy blog post about performance-ish changes in RabbitMQ 3.3. Still with us? Good.","date":"2014-04-10T00:00:00.000Z","tags":[{"inline":true,"label":"Performance","permalink":"/rabbitmq-website/blog/tags/performance"},{"inline":true,"label":"New Features","permalink":"/rabbitmq-website/blog/tags/new-features"}],"readingTime":2.46,"hasTruncateMarker":true,"authors":[{"name":"Simon MacMullen","key":"simon","page":null}],"frontMatter":{"title":"Consumer Bias in RabbitMQ 3.3","tags":["Performance","New Features"],"authors":["simon"]},"unlisted":false,"prevItem":{"title":"Finding bottlenecks with RabbitMQ 3.3","permalink":"/rabbitmq-website/blog/2014/04/14/finding-bottlenecks-with-rabbitmq-3-3"},"nextItem":{"title":"An end to synchrony: performance improvements in 3.3","permalink":"/rabbitmq-website/blog/2014/04/03/an-end-to-synchrony-performance-improvements-in-3-3"}}');

/***/ }),

/***/ "./blog/2014-04-10-consumer-bias-in-rabbitmq-3-3/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2014_04_10_consumer_bias_in_rabbitmq_3_3_index_md_e86_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2014_04_10_consumer_bias_in_rabbitmq_3_3_index_md_e86_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2014-04-10-consumer-bias-in-rabbitmq-3-3-index-md-e86.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Consumer Bias in RabbitMQ 3.3',\n\ttags: [\n\t\t'Performance',\n\t\t'New Features'\n\t],\n\tauthors: [\n\t\t'simon'\n\t]\n};\nconst contentTitle = undefined;\n\nconst assets = {\n\"authorsImageUrls\": [undefined],\n};\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    p: \"p\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"I warn you before we start: this is another wordy blog post about performance-ish changes in RabbitMQ 3.3. Still with us? Good.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"So in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2014/04/03/an-end-to-synchrony-performance-improvements-in-3-3\",\n        children: \"previous post\"\n      }), \" I mentioned \\\"a new feature which I'll talk about in a future blog post\\\". That feature is consumer bias.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Every queue in RabbitMQ is an Erlang process, and like all Erlang processes it responds to messages that are sent to it. These messages might represent AMQP messages being published to the queue, or basic.get requests coming in, or messages telling the queue that a consumer's network connection is now no longer busy so it can receive messages again, and so on. It's messages all the way down.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When the queue is not busy, it just responds to messages as they come in. But as message rates go up, and the queue starts to work harder, we get to a state where the queue is using all the CPU cycles available to it. At this point, inbound messages start to queue up to be handled by the queue! \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2012/04/16/rabbitmq-performance-measurements-part-1\",\n        children: \"Flow control\"\n      }), \" prevents them from building up indefinitely - but the fact that they are building up at all can have some consequences for the queue.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Some of the inbound messages help the queue shrink (\\\"this consumer can take messages again\\\", \\\"I'd like to perform a basic.get\\\") while some make the queue grow (\\\"I'd like to publish a new message\\\"). So when the queue is working flat-out, we'd like to give preferential treatment to the messages that help the queue shrink, in order that the queue has a tendency to stay empty rather than grow forever.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"And we added such a bias in RabbitMQ 1.7.0.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"So why am I talking about it now? That was five years ago!\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Unfortunately it turns out that just unconditionally preferring to empty the queue can have nasty side effects - in some circumstances it's possible for the queue to spend 100% of its time delivering messages to consumers, and indeed we had some reports from users who saw exactly that - all consumers would go offline, the queue would build up to some huge size, then the consumers would come back and the queue would refuse to accept a single publish until it became completely empty. That's not a very useful queue.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"So we stripped out this bias in RabbitMQ 2.8.3, and went back to the situation where CPU-bound queues can tend to grow indefinitely.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"But we still wanted to do better than that. And in 3.3.0 we were finally able to.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Now, rather than having queues unconditionally prefer to shrink, the queues are able to continuously monitor their rate of change in size, and when busy they will prioritise messages that help them to shrink - but only until they are delivering 10% more messages than they accept. So CPU-bound queues will still always accept messages, but will tend over time to become smaller rather than larger. Phew!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ibG9nLzIwMTQtMDQtMTAtY29uc3VtZXItYmlhcy1pbi1yYWJiaXRtcS0zLTMvaW5kZXgubWQiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWJiaXRtcS13ZWJzaXRlLy4vYmxvZy8yMDE0LTA0LTEwLWNvbnN1bWVyLWJpYXMtaW4tcmFiYml0bXEtMy0zL2luZGV4Lm1kPzEzNWYiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmV4cG9ydCBjb25zdCBmcm9udE1hdHRlciA9IHtcblx0dGl0bGU6ICdDb25zdW1lciBCaWFzIGluIFJhYmJpdE1RIDMuMycsXG5cdHRhZ3M6IFtcblx0XHQnUGVyZm9ybWFuY2UnLFxuXHRcdCdOZXcgRmVhdHVyZXMnXG5cdF0sXG5cdGF1dGhvcnM6IFtcblx0XHQnc2ltb24nXG5cdF1cbn07XG5leHBvcnQgY29uc3QgY29udGVudFRpdGxlID0gdW5kZWZpbmVkO1xuZXhwb3J0IHtkZWZhdWx0IGFzIG1ldGFkYXRhfSBmcm9tICdAc2l0ZS8uZG9jdXNhdXJ1cy9kb2N1c2F1cnVzLXBsdWdpbi1jb250ZW50LWJsb2cvZGVmYXVsdC9zaXRlLWJsb2ctMjAxNC0wNC0xMC1jb25zdW1lci1iaWFzLWluLXJhYmJpdG1xLTMtMy1pbmRleC1tZC1lODYuanNvbidcbmV4cG9ydCBjb25zdCBhc3NldHMgPSB7XG5cImF1dGhvcnNJbWFnZVVybHNcIjogW3VuZGVmaW5lZF0sXG59O1xuXG5pbXBvcnQge0ZyYWdtZW50IGFzIF9GcmFnbWVudCwganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHN9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHt1c2VNRFhDb21wb25lbnRzIGFzIF9wcm92aWRlQ29tcG9uZW50c30gZnJvbSBcIkBtZHgtanMvcmVhY3RcIjtcbmV4cG9ydCBjb25zdCB0b2MgPSBbXTtcbmZ1bmN0aW9uIF9jcmVhdGVNZHhDb250ZW50KHByb3BzKSB7XG4gIGNvbnN0IF9jb21wb25lbnRzID0ge1xuICAgIGE6IFwiYVwiLFxuICAgIHA6IFwicFwiLFxuICAgIC4uLl9wcm92aWRlQ29tcG9uZW50cygpLFxuICAgIC4uLnByb3BzLmNvbXBvbmVudHNcbiAgfTtcbiAgcmV0dXJuIF9qc3hzKF9GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJJIHdhcm4geW91IGJlZm9yZSB3ZSBzdGFydDogdGhpcyBpcyBhbm90aGVyIHdvcmR5IGJsb2cgcG9zdCBhYm91dCBwZXJmb3JtYW5jZS1pc2ggY2hhbmdlcyBpbiBSYWJiaXRNUSAzLjMuIFN0aWxsIHdpdGggdXM/IEdvb2QuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlNvIGluIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiL2Jsb2cvMjAxNC8wNC8wMy9hbi1lbmQtdG8tc3luY2hyb255LXBlcmZvcm1hbmNlLWltcHJvdmVtZW50cy1pbi0zLTNcIixcbiAgICAgICAgY2hpbGRyZW46IFwicHJldmlvdXMgcG9zdFwiXG4gICAgICB9KSwgXCIgSSBtZW50aW9uZWQgXFxcImEgbmV3IGZlYXR1cmUgd2hpY2ggSSdsbCB0YWxrIGFib3V0IGluIGEgZnV0dXJlIGJsb2cgcG9zdFxcXCIuIFRoYXQgZmVhdHVyZSBpcyBjb25zdW1lciBiaWFzLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkV2ZXJ5IHF1ZXVlIGluIFJhYmJpdE1RIGlzIGFuIEVybGFuZyBwcm9jZXNzLCBhbmQgbGlrZSBhbGwgRXJsYW5nIHByb2Nlc3NlcyBpdCByZXNwb25kcyB0byBtZXNzYWdlcyB0aGF0IGFyZSBzZW50IHRvIGl0LiBUaGVzZSBtZXNzYWdlcyBtaWdodCByZXByZXNlbnQgQU1RUCBtZXNzYWdlcyBiZWluZyBwdWJsaXNoZWQgdG8gdGhlIHF1ZXVlLCBvciBiYXNpYy5nZXQgcmVxdWVzdHMgY29taW5nIGluLCBvciBtZXNzYWdlcyB0ZWxsaW5nIHRoZSBxdWV1ZSB0aGF0IGEgY29uc3VtZXIncyBuZXR3b3JrIGNvbm5lY3Rpb24gaXMgbm93IG5vIGxvbmdlciBidXN5IHNvIGl0IGNhbiByZWNlaXZlIG1lc3NhZ2VzIGFnYWluLCBhbmQgc28gb24uIEl0J3MgbWVzc2FnZXMgYWxsIHRoZSB3YXkgZG93bi5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiV2hlbiB0aGUgcXVldWUgaXMgbm90IGJ1c3ksIGl0IGp1c3QgcmVzcG9uZHMgdG8gbWVzc2FnZXMgYXMgdGhleSBjb21lIGluLiBCdXQgYXMgbWVzc2FnZSByYXRlcyBnbyB1cCwgYW5kIHRoZSBxdWV1ZSBzdGFydHMgdG8gd29yayBoYXJkZXIsIHdlIGdldCB0byBhIHN0YXRlIHdoZXJlIHRoZSBxdWV1ZSBpcyB1c2luZyBhbGwgdGhlIENQVSBjeWNsZXMgYXZhaWxhYmxlIHRvIGl0LiBBdCB0aGlzIHBvaW50LCBpbmJvdW5kIG1lc3NhZ2VzIHN0YXJ0IHRvIHF1ZXVlIHVwIHRvIGJlIGhhbmRsZWQgYnkgdGhlIHF1ZXVlISBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiL2Jsb2cvMjAxMi8wNC8xNi9yYWJiaXRtcS1wZXJmb3JtYW5jZS1tZWFzdXJlbWVudHMtcGFydC0xXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIkZsb3cgY29udHJvbFwiXG4gICAgICB9KSwgXCIgcHJldmVudHMgdGhlbSBmcm9tIGJ1aWxkaW5nIHVwIGluZGVmaW5pdGVseSAtIGJ1dCB0aGUgZmFjdCB0aGF0IHRoZXkgYXJlIGJ1aWxkaW5nIHVwIGF0IGFsbCBjYW4gaGF2ZSBzb21lIGNvbnNlcXVlbmNlcyBmb3IgdGhlIHF1ZXVlLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlNvbWUgb2YgdGhlIGluYm91bmQgbWVzc2FnZXMgaGVscCB0aGUgcXVldWUgc2hyaW5rIChcXFwidGhpcyBjb25zdW1lciBjYW4gdGFrZSBtZXNzYWdlcyBhZ2FpblxcXCIsIFxcXCJJJ2QgbGlrZSB0byBwZXJmb3JtIGEgYmFzaWMuZ2V0XFxcIikgd2hpbGUgc29tZSBtYWtlIHRoZSBxdWV1ZSBncm93IChcXFwiSSdkIGxpa2UgdG8gcHVibGlzaCBhIG5ldyBtZXNzYWdlXFxcIikuIFNvIHdoZW4gdGhlIHF1ZXVlIGlzIHdvcmtpbmcgZmxhdC1vdXQsIHdlJ2QgbGlrZSB0byBnaXZlIHByZWZlcmVudGlhbCB0cmVhdG1lbnQgdG8gdGhlIG1lc3NhZ2VzIHRoYXQgaGVscCB0aGUgcXVldWUgc2hyaW5rLCBpbiBvcmRlciB0aGF0IHRoZSBxdWV1ZSBoYXMgYSB0ZW5kZW5jeSB0byBzdGF5IGVtcHR5IHJhdGhlciB0aGFuIGdyb3cgZm9yZXZlci5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkFuZCB3ZSBhZGRlZCBzdWNoIGEgYmlhcyBpbiBSYWJiaXRNUSAxLjcuMC5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlNvIHdoeSBhbSBJIHRhbGtpbmcgYWJvdXQgaXQgbm93PyBUaGF0IHdhcyBmaXZlIHllYXJzIGFnbyFcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlVuZm9ydHVuYXRlbHkgaXQgdHVybnMgb3V0IHRoYXQganVzdCB1bmNvbmRpdGlvbmFsbHkgcHJlZmVycmluZyB0byBlbXB0eSB0aGUgcXVldWUgY2FuIGhhdmUgbmFzdHkgc2lkZSBlZmZlY3RzIC0gaW4gc29tZSBjaXJjdW1zdGFuY2VzIGl0J3MgcG9zc2libGUgZm9yIHRoZSBxdWV1ZSB0byBzcGVuZCAxMDAlIG9mIGl0cyB0aW1lIGRlbGl2ZXJpbmcgbWVzc2FnZXMgdG8gY29uc3VtZXJzLCBhbmQgaW5kZWVkIHdlIGhhZCBzb21lIHJlcG9ydHMgZnJvbSB1c2VycyB3aG8gc2F3IGV4YWN0bHkgdGhhdCAtIGFsbCBjb25zdW1lcnMgd291bGQgZ28gb2ZmbGluZSwgdGhlIHF1ZXVlIHdvdWxkIGJ1aWxkIHVwIHRvIHNvbWUgaHVnZSBzaXplLCB0aGVuIHRoZSBjb25zdW1lcnMgd291bGQgY29tZSBiYWNrIGFuZCB0aGUgcXVldWUgd291bGQgcmVmdXNlIHRvIGFjY2VwdCBhIHNpbmdsZSBwdWJsaXNoIHVudGlsIGl0IGJlY2FtZSBjb21wbGV0ZWx5IGVtcHR5LiBUaGF0J3Mgbm90IGEgdmVyeSB1c2VmdWwgcXVldWUuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJTbyB3ZSBzdHJpcHBlZCBvdXQgdGhpcyBiaWFzIGluIFJhYmJpdE1RIDIuOC4zLCBhbmQgd2VudCBiYWNrIHRvIHRoZSBzaXR1YXRpb24gd2hlcmUgQ1BVLWJvdW5kIHF1ZXVlcyBjYW4gdGVuZCB0byBncm93IGluZGVmaW5pdGVseS5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkJ1dCB3ZSBzdGlsbCB3YW50ZWQgdG8gZG8gYmV0dGVyIHRoYW4gdGhhdC4gQW5kIGluIDMuMy4wIHdlIHdlcmUgZmluYWxseSBhYmxlIHRvLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiTm93LCByYXRoZXIgdGhhbiBoYXZpbmcgcXVldWVzIHVuY29uZGl0aW9uYWxseSBwcmVmZXIgdG8gc2hyaW5rLCB0aGUgcXVldWVzIGFyZSBhYmxlIHRvIGNvbnRpbnVvdXNseSBtb25pdG9yIHRoZWlyIHJhdGUgb2YgY2hhbmdlIGluIHNpemUsIGFuZCB3aGVuIGJ1c3kgdGhleSB3aWxsIHByaW9yaXRpc2UgbWVzc2FnZXMgdGhhdCBoZWxwIHRoZW0gdG8gc2hyaW5rIC0gYnV0IG9ubHkgdW50aWwgdGhleSBhcmUgZGVsaXZlcmluZyAxMCUgbW9yZSBtZXNzYWdlcyB0aGFuIHRoZXkgYWNjZXB0LiBTbyBDUFUtYm91bmQgcXVldWVzIHdpbGwgc3RpbGwgYWx3YXlzIGFjY2VwdCBtZXNzYWdlcywgYnV0IHdpbGwgdGVuZCBvdmVyIHRpbWUgdG8gYmVjb21lIHNtYWxsZXIgcmF0aGVyIHRoYW4gbGFyZ2VyLiBQaGV3IVwiXG4gICAgfSldXG4gIH0pO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChwcm9wcyA9IHt9KSB7XG4gIGNvbnN0IHt3cmFwcGVyOiBNRFhMYXlvdXR9ID0ge1xuICAgIC4uLl9wcm92aWRlQ29tcG9uZW50cygpLFxuICAgIC4uLnByb3BzLmNvbXBvbmVudHNcbiAgfTtcbiAgcmV0dXJuIE1EWExheW91dCA/IF9qc3goTURYTGF5b3V0LCB7XG4gICAgLi4ucHJvcHMsXG4gICAgY2hpbGRyZW46IF9qc3goX2NyZWF0ZU1keENvbnRlbnQsIHtcbiAgICAgIC4uLnByb3BzXG4gICAgfSlcbiAgfSkgOiBfY3JlYXRlTWR4Q29udGVudChwcm9wcyk7XG59XG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./blog/2014-04-10-consumer-bias-in-rabbitmq-3-3/index.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);