"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-docs-next-dlxebe-ab8"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/default/site-docs-dlx-md-ebe.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"dlx","title":"Dead Letter Exchanges","description":"<!--","source":"@site/docs/dlx.md","sourceDirName":".","slug":"/dlx","permalink":"/rabbitmq-website/docs/next/dlx","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/docs/dlx.md","tags":[],"version":"current","frontMatter":{"title":"Dead Letter Exchanges"},"sidebar":"docsSidebar","previous":{"title":"Lazy Queues","permalink":"/rabbitmq-website/docs/next/lazy-queues"},"next":{"title":"Priority Queues","permalink":"/rabbitmq-website/docs/next/priority"}}');

/***/ }),

/***/ "./docs/dlx.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_default_site_docs_dlx_md_ebe_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_default_site_docs_dlx_md_ebe_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/default/site-docs-dlx-md-ebe.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n/* harmony import */ var _theme_Tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n/* harmony import */ var _theme_TabItem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Dead Letter Exchanges'\n};\nconst contentTitle = 'Dead Letter Exchanges';\n\nconst assets = {\n\n};\n\n\n\n\n\nconst toc = [{\n  \"value\": \"What is a Dead Letter Exchange\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"How Dead Lettering is Configured\",\n  \"id\": \"how-dead-lettering-is-configured\",\n  \"level\": 2\n}, {\n  \"value\": \"Configuring a Dead Letter Exchange using a Policy\",\n  \"id\": \"using-policies\",\n  \"level\": 3\n}, {\n  \"value\": \"Configuring a Dead Letter Exchange using Optional Queue Arguments\",\n  \"id\": \"using-optional-queue-arguments\",\n  \"level\": 3\n}, {\n  \"value\": \"Routing Dead-Lettered Messages\",\n  \"id\": \"routing\",\n  \"level\": 2\n}, {\n  \"value\": \"Dead-letter cycle\",\n  \"id\": \"dead-letter-cycle\",\n  \"level\": 3\n}, {\n  \"value\": \"Safety\",\n  \"id\": \"safety\",\n  \"level\": 2\n}, {\n  \"value\": \"Re-Publishing with Publisher Confirms\",\n  \"id\": \"re-publishing-with-publisher-confirms\",\n  \"level\": 3\n}, {\n  \"value\": \"Dead-Lettered Effects on Messages\",\n  \"id\": \"effects\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"dead-letter-exchanges\",\n        children: \"Dead Letter Exchanges\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"What is a Dead Letter Exchange\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Messages from a queue can be \\\"dead-lettered\\\", which means these messages are republished to an exchange when any of the following four events occur.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The message is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./confirms\",\n          children: \"negatively acknowledged\"\n        }), \" by an AMQP 1.0 receiver using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-rejected\",\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"rejected\"\n          })\n        }), \"\\r\\noutcome or by an AMQP 0.9.1 consumer using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"basic.reject\"\n        }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"basic.nack\"\n        }), \" with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"requeue\"\n        }), \" parameter set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"false\"\n        }), \", or\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The message expires due to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./ttl\",\n          children: \"per-message TTL\"\n        }), \", or\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The message is dropped because its queue exceeded a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./maxlength\",\n          children: \"length limit\"\n        }), \", or\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The message is returned more times to a quorum queue than the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./quorum-queues#poison-message-handling\",\n          children: \"delivery-limit\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If an entire \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ttl#queue-ttl\",\n        children: \"queue expires\"\n      }), \", the messages in the queue are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"not\"\n      }), \" dead-lettered.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Dead letter exchanges (DLXs) are normal exchanges. They can be\\r\\nany of the usual types and are declared as normal.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"how-dead-lettering-is-configured\",\n      children: \"How Dead Lettering is Configured\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For any given queue, a DLX can be defined by clients using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./policies\",\n        children: \"policies\"\n      }), \". There\\r\\nare several DLX-related policy keys, including some \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"only supported by quorum queues\"\n      }), \" but the two key ones are\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"dead-letter-exchange\"\n        }), \": The name of the DLX to use\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"dead-letter-routing-key\"\n        }), \": The routing key to use when dead-lettering messages\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.admonition, {\n      type: \"important\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"Policy keys also can be set by applications at queue declaration time via the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./queues#optional-arguments\",\n          children: \"optional arguments\"\n        }), \".\"]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"Hardcoded \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-arguments\"\n        }), \" are strongly recommended against since they\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./queues#optional-arguments\",\n          children: \"cannot be updated without redeploying applications\"\n        }), \",\\r\\nwhile policies can be updated at any moment.\"]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In the case where both policy and arguments specify a DLX, the one\\r\\nspecified in arguments overrules the one specified in policy.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In addition to the target DLX name, a routing key to use when the messages are being\\r\\ndead-lettered.  If the routing key is not set, the\\r\\nmessage's own routing keys are used.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a dead letter exchange is specified, in addition to\\r\\nthe usual configure permissions on the declared queue, the user\\r\\nmust have read permissions on that queue and write\\r\\npermissions on the dead letter exchange. Permissions are\\r\\nverified at the time the queue is declared.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"using-policies\",\n      children: \"Configuring a Dead Letter Exchange using a Policy\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To specify a DLX using policy, add the key \\\"dead-letter-exchange\\\"\\r\\nto a policy definition:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqctl set_policy DLX \\\".*\\\" '{\\\"dead-letter-exchange\\\":\\\"my-dlx\\\"}' --apply-to queues --priority 7\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"rabbitmqctl set_policy DLX \\\".*\\\" \\\"{\\\"\\\"dead-letter-exchange\\\"\\\":\\\"\\\"my-dlx\\\"\\\"}\\\" --apply-to queues --priority 7\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"rabbitmqadmin\",\n        label: \"rabbitmqadmin v2\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqadmin policies declare --name=DLX --pattern=\\\".*\\\" --definition='{\\\"dead-letter-exchange\\\":\\\"my-dlx\\\"}' --apply-to=queues --priority=7\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"HTTP API\",\n        label: \"HTTP API\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-ini\",\n            children: \"PUT /api/policies/%2f/DLX\\r\\n    {\\\"pattern\\\": \\\".*\\\",\\r\\n     \\\"definition\\\": {\\\"dead-letter-exchange\\\":\\\"my-dlx\\\"},\\r\\n     \\\"priority\\\": 7,\\r\\n     \\\"apply-to\\\": \\\"queues\\\"}\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"Management UI\",\n        label: \"Management UI\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"ol\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Navigate to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Admin\"\n              }), \" > \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Policies\"\n              }), \" > \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Add / update a     policy\"\n              }), \".\"]\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Enter a policy name (such as \\\"DLX\\\") next to Name, a pattern (in this example, \\\".*\\\") next to\\r\\nPattern, and select what kind of entities (all queues in this example) the policy should apply to using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Apply to\"\n              }), \"\\r\\ndrop down.\"]\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Enter \\\"dead-letter-exchange\\\" for the key and \\\"my-dlx\\\" for its value in the first line next to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Policy\"\n              }), \".\"]\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Click \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Add policy\"\n              }), \".\"]\n            })\n          })]\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The previous example declares a policy called \\\"DLX\\\" that applies to all queues (regardless of the type) and configures\\r\\nan exchange named \\\"my-dlx\\\" as the dead lettering targets. This is just an example, in practice\\r\\nit is common to see multiple policies that apply to a subset of queues each.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Similarly, an explicit routing key can be specified by adding\\r\\nthe key \\\"dead-letter-routing-key\\\" to the policy:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqctl set_policy DLX \\\".*\\\" '{\\\"dead-letter-exchange\\\":\\\"my-dlx\\\", \\\"dead-letter-routing-key\\\":\\\"my-routing-key\\\"}' --apply-to queues --priority 7\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"rabbitmqctl set_policy DLX \\\".*\\\" \\\"{\\\"\\\"dead-letter-exchange\\\"\\\":\\\"\\\"my-dlx\\\"\\\", \\\"\\\"dead-letter-routing-key\\\"\\\":\\\"\\\"my-routing-key\\\"\\\"}\\\" --apply-to queues --priority 7\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"rabbitmqadmin\",\n        label: \"rabbitmqadmin v2\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqadmin policies declare --name=DLX --pattern=\\\".*\\\" --definition='{\\\"dead-letter-exchange\\\":\\\"my-dlx\\\", \\\"dead-letter-routing-key\\\":\\\"my-routing-key\\\"}' --apply-to=queues --priority=7\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"HTTP API\",\n        label: \"HTTP API\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-ini\",\n            children: \"PUT /api/policies/%2f/DLX\\r\\n    {\\\"pattern\\\": \\\".*\\\",\\r\\n     \\\"definition\\\": {\\\"dead-letter-exchange\\\":\\\"my-dlx\\\"},\\r\\n     \\\"priority\\\": 7,\\r\\n     \\\"apply-to\\\": \\\"queues\\\"}\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"Management UI\",\n        label: \"Management UI\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"ol\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Navigate to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Admin\"\n              }), \" > \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Policies\"\n              }), \" > \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Add / update a     policy\"\n              }), \".\"]\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Enter a policy name (such as \\\"DLX\\\") next to Name, a pattern (in this example, \\\".*\\\") next to\\r\\nPattern, and select what kind of entities (all queues in this example) the policy should apply to using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Apply to\"\n              }), \"\\r\\ndrop down.\"]\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Enter \\\"dead-letter-exchange\\\" for the key and \\\"my-dlx\\\" for its value in the first line next to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Policy\"\n              }), \".\"]\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Click \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Add policy\"\n              }), \".\"]\n            })\n          })]\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"using-optional-queue-arguments\",\n      children: \"Configuring a Dead Letter Exchange using Optional Queue Arguments\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"warning\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"Hardcoded \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-arguments\"\n        }), \" are strongly recommended against since they\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./queues#optional-arguments\",\n          children: \"cannot be updated without redeploying applications and deleting the queue before it can be redeclared\"\n        }), \",\\r\\nwhile policies can be updated at any moment.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To set the DLX for a queue, specify\\r\\nthe optional \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-dead-letter-exchange\"\n      }), \" argument when\\r\\ndeclaring the queue. The value must be an exchange name in\\r\\nthe same virtual host:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.exchangeDeclare(\\\"some.exchange.name\\\", \\\"direct\\\");\\r\\n\\r\\n// Important: prefer using policies over hardcoded x-arguments\\r\\nMap<String, Object> args = new HashMap<String, Object>();\\r\\nargs.put(\\\"x-dead-letter-exchange\\\", \\\"some.exchange.name\\\");\\r\\nchannel.queueDeclare(\\\"myqueue\\\", false, false, false, args);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The above code declares a new exchange called\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"some.exchange.name\"\n      }), \" and sets this new exchange\\r\\nas the dead letter exchange for a newly created queue.\\r\\nNote, the exchange does not have to be declared when\\r\\nthe queue is declared but it should exist by the time\\r\\nmessages need to be dead-lettered. If it is missing then,\\r\\nthe messages are silently dropped.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In addition to the target DLX name, a routing key to use when the messages are being\\r\\ndead-lettered. If the routing key is not set, the\\r\\nmessage's own routing keys are used.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"// Important: prefer using policies over hardcoded x-arguments.\\r\\nMap<String, Object> args = new HashMap<String, Object>();\\r\\nargs.put(\\\"x-dead-letter-exchange\\\", \\\"some.exchange.name\\\");\\r\\nargs.put(\\\"x-dead-letter-routing-key\\\", \\\"some-routing-key\\\");\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a dead letter exchange is specified, in addition to\\r\\nthe usual configure permissions on the declared queue, the user\\r\\nmust have read permissions on that queue and write\\r\\npermissions on the dead letter exchange. Permissions are\\r\\nverified at the time the queue is declared.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"routing\",\n      children: \"Routing Dead-Lettered Messages\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Dead-lettered messages are routed to their dead letter\\r\\nexchange either:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"with the routing key specified for the queue they\\r\\nwere on; or, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n          children: \"if this was not set\"\n        }), \",\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"with the same routing keys they were originally\\r\\npublished with\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For example, if you publish a message to an exchange with a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"foo\"\n      }), \"\\r\\nrouting key, and that message is\\r\\ndead-lettered, it is published to its dead letter\\r\\nexchange with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"foo\"\n      }), \" routing key. If the queue\\r\\nthe message originally landed on is declared with\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-dead-letter-routing-key\"\n      }), \" set to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"bar\"\n      }), \", then the message is published to\\r\\nits dead letter exchange with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"bar\"\n      }), \" routing key.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note, if a specific routing key was not set for the\\r\\nqueue, messages on it are dead-lettered with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"all\"\n      }), \"\\r\\ntheir original routing keys.  This includes routing keys\\r\\nadded by the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"CC\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"BCC\"\n      }), \" headers\\r\\n(refer to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./sender-selected\",\n        children: \"Sender-selected distribution\"\n      }), \" for details about these two headers).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"dead-letter-cycle\",\n      children: \"Dead-letter cycle\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to form a cycle of message dead-lettering where the same message reaches the same queue twice.\\r\\nFor example, this can happen when a queue \\\"dead-letters\\\" messages to the default exchange without specifying a dead-letter routing key.\\r\\nTo prevent automatic infinite message looping within RabbitMQ, RabbitMQ will detect a cycle and drop the message \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"if there was no rejection in the entire cycle\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"safety\",\n      children: \"Safety\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Dead-lettering is a form of message publishing, and as any form of publishing,\\r\\nit can fail in certain scenarios. For example, if dead lettering is\\r\\nconfigured to use a quorum queue that does not have an online quorum,\\r\\nthe publishing will fail, and the node perfoming dead lettering will log\\r\\na message similar to the following:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Cannot forward any dead-letter messages from source quorum queue 'qq.input' in vhost 'my-vhost'\\r\\nwith configured dead-letter-exchange exchange 'amq.topic' in vhost 'my-vhost'\\r\\nand configured dead-letter-routing-key 'my-app.events.type.abc'\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"re-publishing-with-publisher-confirms\",\n      children: \"Re-Publishing with Publisher Confirms\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"By default, dead-lettered messages are re-published \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"without\"\n      }), \" publisher\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./confirms\",\n        children: \"confirms\"\n      }), \" turned on internally. Therefore using DLX in a clustered\\r\\nRabbitMQ environment is not guaranteed to be safe. Messages are removed from the\\r\\noriginal queue immediately after publishing to the DLX target queue. This ensures\\r\\nthat there is no chance of excessive message build up that could exhaust broker\\r\\nresources. However, messages can be lost if the target queue is not available to accept messages.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Quorum queues support \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues#dead-lettering\",\n        children: \"at-least-once dead-lettering\"\n      }), \"\\r\\nwhere messages are re-published with publisher confirms turned on internally.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"effects\",\n      children: \"Dead-Lettered Effects on Messages\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Dead-lettering a message modifies its headers:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"the exchange name is replaced with that of the latest dead-letter exchange\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"the routing key may be replaced with that specified in a queue performing dead lettering (i.e. configured \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"dead-letter-routing-key\"\n        }), \"),\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"if the above happens, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"CC\"\n        }), \" header will also be removed, and\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"BCC\"\n        }), \" header will be removed as per \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./sender-selected\",\n          children: \"Sender-selected distribution\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A single message can be dead lettered multiple times.\\r\\nEach time a message is dead lettered, this event will be recorded within the message header.\\r\\nTo prevent the header from growing unboundedly, the dead letter event history is compressed by the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"{Queue, Reason}\"\n      }), \" pair.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"An AMQP 1.0 message will contain a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-annotations\",\n        children: \"message annotation\"\n      }), \"\\r\\nwith a symbolic key \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-opt-deaths\"\n      }), \" and the value being an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-types-v1.0-os.html#type-array\",\n        children: \"array\"\n      }), \"\\r\\nof \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-types-v1.0-os.html#type-map\",\n        children: \"map\"\n      }), \"s.\\r\\nAn AMQP 0.9.1 message will contain an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-death\"\n      }), \" header with the value being an array.\\r\\nThe array in both AMQP 1.0 and AMQP 0.9.1 is ordered by recency, that is the most recent dead-lettering event is recorded in the first array element.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The following table describes the AMQP 1.0 map key value pairs and the AMQP 0.9.1 table of the array elements.\\r\\nAll AMQP 1.0 keys are of type \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"symbol\"\n      }), \". AMQP 1.0 clients must not depend on the order of the map's key-value pairs.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.table, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.thead, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.th, {\n            children: \"AMQP 1.0 key\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.th, {\n            children: \"AMQP 1.0 value type\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.th, {\n            children: \"AMQP 0.9.1 key\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.th, {\n            children: \"AMQP 0.9.1 value type\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tbody, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"queue\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"string\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"queue\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"longstr\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"The name of the queue this message was dead lettered from.\"\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"reason\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"symbol\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"reason\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"longstr\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"Why this message was dead lettered (described below).\"\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"count\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"ulong\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"count\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"long\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"How many times this message was dead lettered from this queue for this reason.\"\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"first-time\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n              href: \"https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-types-v1.0-os.html#type-timestamp\",\n              children: \"timestamp\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"When this message was dead lettered the first time from this queue for this reason.\"\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"last-time\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n              href: \"https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-types-v1.0-os.html#type-timestamp\",\n              children: \"timestamp\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"When this message was dead lettered the last time from this queue for this reason.\"\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"time\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"timestamp\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"When this message was dead lettered the first time from this queue for this reason.\"\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"exchange\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"string\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"exchange\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"longstr\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"The exchange this message was published to before this message got dead lettered for the first time from this queue for this reason.\"\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"routing-keys\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"array of string\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"routing-keys\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"array of longstr\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.td, {\n            children: [\"The routing keys (including \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"CC\"\n            }), \" but excluding \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"BCC\"\n            }), \") of this message before it got dead lettered for the first time from this queue for this reason.\"]\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"ttl\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"uint\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.td, {\n            children: [\"AMQP 1.0 \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n              href: \"https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-header\",\n              children: \"header\"\n            }), \"'s \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"ttl\"\n            }), \" (time to live in milliseconds) before this message got dead lettered for the first time from this queue for this reason.\"]\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.tr, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"original-expiration\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.td, {\n            children: \"longstr\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.td, {\n            children: [\"The original \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"expiration\"\n            }), \" property of this message before it got dead lettered for the first time from this queue for this reason.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"AMQP 1.0 \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ttl\"\n      }), \" and AMQP 0.9.1 \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"original-expiration\"\n      }), \" are optional and recorded because the original message's TTL is removed from the message on dead-lettering to prevent it from expiring again in any queues it is routed to.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"reason\"\n      }), \" is a name describing why the\\r\\nmessage was dead-lettered and is one of the following:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rejected\"\n        }), \": the message was rejected\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"expired\"\n        }), \": the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./ttl\",\n          children: \"message TTL\"\n        }), \" has expired\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"maxlen\"\n        }), \": the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./maxlength\",\n          children: \"maximum allowed queue length\"\n        }), \" was exceeded\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"delivery_limit\"\n        }), \": the message is returned more times than the limit (set by policy argument \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./quorum-queues#poison-message-handling\",\n          children: \"delivery-limit\"\n        }), \" of quorum queues).\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In addition, the following six AMQP 1.0 message annotations or AMQP 0.9.1 headers are added for the very first dead-lettering event:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-first-death-queue\"\n        }), \": The first queue this message was dead lettered from.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-first-death-reason\"\n        }), \": Why this message was dead lettered for the first time.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-first-death-exchange\"\n        }), \": The exchange this message was published to before this message got dead lettered for the first time.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-last-death-queue\"\n        }), \": The last queue this message was dead lettered from.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-last-death-reason\"\n        }), \": Why this message was dead lettered for the last time.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-last-death-exchange\"\n        }), \": The exchange this message was published to before this message got dead lettered the last time.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-first-*\"\n      }), \" annotations are never modified.\\r\\nWhenever a message is dead lettered subsequently, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-last-*\"\n      }), \" annotations are updated.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/dlx.md\n");

/***/ })

}]);