"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-tutorials-amqp-conceptse-33-b70"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/tutorials/site-tutorials-amqp-concepts-index-md-e33.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"amqp-concepts/index","title":"AMQP 0-9-1 Model Explained","description":"<!--","source":"@site/tutorials/amqp-concepts/index.md","sourceDirName":"amqp-concepts","slug":"/amqp-concepts/","permalink":"/rabbitmq-website/tutorials/amqp-concepts/","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/tutorials/amqp-concepts/index.md","tags":[],"version":"current","frontMatter":{"title":"AMQP 0-9-1 Model Explained","displayed_sidebar":"tutorialsSidebar"},"sidebar":"tutorialsSidebar"}');

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/exchange-declare-ok.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/exchange-declare-ok-c3fc53d9b3d1f338b21d41751be43d23.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdHV0b3JpYWxzL2FtcXAtY29uY2VwdHMvZXhjaGFuZ2UtZGVjbGFyZS1vay5wbmciLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL3R1dG9yaWFscy9hbXFwLWNvbmNlcHRzL2V4Y2hhbmdlLWRlY2xhcmUtb2sucG5nPzg3M2QiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvZXhjaGFuZ2UtZGVjbGFyZS1vay1jM2ZjNTNkOWIzZDFmMzM4YjIxZDQxNzUxYmU0M2QyMy5wbmdcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/exchange-declare-ok.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/exchange-declare.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/exchange-declare-2a32937cd96e9dea014e3ed576313124.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdHV0b3JpYWxzL2FtcXAtY29uY2VwdHMvZXhjaGFuZ2UtZGVjbGFyZS5wbmciLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL3R1dG9yaWFscy9hbXFwLWNvbmNlcHRzL2V4Y2hhbmdlLWRlY2xhcmUucG5nP2U5MzYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvZXhjaGFuZ2UtZGVjbGFyZS0yYTMyOTM3Y2Q5NmU5ZGVhMDE0ZTNlZDU3NjMxMzEyNC5wbmdcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/exchange-declare.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/exchange-direct.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/exchange-direct-a7628306f367d189dac98aabc4865085.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdHV0b3JpYWxzL2FtcXAtY29uY2VwdHMvZXhjaGFuZ2UtZGlyZWN0LnBuZyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWJiaXRtcS13ZWJzaXRlLy4vdHV0b3JpYWxzL2FtcXAtY29uY2VwdHMvZXhjaGFuZ2UtZGlyZWN0LnBuZz84YzMyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvaW1hZ2VzL2V4Y2hhbmdlLWRpcmVjdC1hNzYyODMwNmYzNjdkMTg5ZGFjOThhYWJjNDg2NTA4NS5wbmdcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/exchange-direct.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/exchange-fanout.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/exchange-fanout-7155e1fd567292ac471a6b60711c4fc4.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdHV0b3JpYWxzL2FtcXAtY29uY2VwdHMvZXhjaGFuZ2UtZmFub3V0LnBuZyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWJiaXRtcS13ZWJzaXRlLy4vdHV0b3JpYWxzL2FtcXAtY29uY2VwdHMvZXhjaGFuZ2UtZmFub3V0LnBuZz9iYjM5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvaW1hZ2VzL2V4Y2hhbmdlLWZhbm91dC03MTU1ZTFmZDU2NzI5MmFjNDcxYTZiNjA3MTFjNGZjNC5wbmdcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/exchange-fanout.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/hello-world-example-routing.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/hello-world-example-routing-cbe9a872b37956a4072a5e13f9d76e7b.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdHV0b3JpYWxzL2FtcXAtY29uY2VwdHMvaGVsbG8td29ybGQtZXhhbXBsZS1yb3V0aW5nLnBuZyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWJiaXRtcS13ZWJzaXRlLy4vdHV0b3JpYWxzL2FtcXAtY29uY2VwdHMvaGVsbG8td29ybGQtZXhhbXBsZS1yb3V0aW5nLnBuZz9kODM1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvaW1hZ2VzL2hlbGxvLXdvcmxkLWV4YW1wbGUtcm91dGluZy1jYmU5YTg3MmIzNzk1NmE0MDcyYTVlMTNmOWQ3NmU3Yi5wbmdcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/hello-world-example-routing.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/queue-declare-ok.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/queue-declare-ok-49316b1ecebe2ba9168ee314c84af907.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdHV0b3JpYWxzL2FtcXAtY29uY2VwdHMvcXVldWUtZGVjbGFyZS1vay5wbmciLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL3R1dG9yaWFscy9hbXFwLWNvbmNlcHRzL3F1ZXVlLWRlY2xhcmUtb2sucG5nPzI1ZjMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvcXVldWUtZGVjbGFyZS1vay00OTMxNmIxZWNlYmUyYmE5MTY4ZWUzMTRjODRhZjkwNy5wbmdcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/queue-declare-ok.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/queue-declare.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/queue-declare-036e7ad8978c66ae521632767601ef0c.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdHV0b3JpYWxzL2FtcXAtY29uY2VwdHMvcXVldWUtZGVjbGFyZS5wbmciLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFiYml0bXEtd2Vic2l0ZS8uL3R1dG9yaWFscy9hbXFwLWNvbmNlcHRzL3F1ZXVlLWRlY2xhcmUucG5nPzQ3MWUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvcXVldWUtZGVjbGFyZS0wMzZlN2FkODk3OGM2NmFlNTIxNjMyNzY3NjAxZWYwYy5wbmdcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/queue-declare.png\n");

/***/ }),

/***/ "./tutorials/amqp-concepts/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_tutorials_site_tutorials_amqp_concepts_index_md_e33_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_tutorials_site_tutorials_amqp_concepts_index_md_e33_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/tutorials/site-tutorials-amqp-concepts-index-md-e33.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'AMQP 0-9-1 Model Explained',\n\tdisplayed_sidebar: 'tutorialsSidebar'\n};\nconst contentTitle = 'AMQP 0-9-1 Model Explained';\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"High-level Overview of AMQP 0-9-1 and the AMQP Model\",\n  \"id\": \"highlevel-overview\",\n  \"level\": 2\n}, {\n  \"value\": \"What is AMQP 0-9-1?\",\n  \"id\": \"what-is-amqp\",\n  \"level\": 3\n}, {\n  \"value\": \"Brokers and Their Role\",\n  \"id\": \"brokers-role\",\n  \"level\": 3\n}, {\n  \"value\": \"AMQP 0-9-1 Model in Brief\",\n  \"id\": \"amqp-model\",\n  \"level\": 3\n}, {\n  \"value\": \"AMQP 0-9-1 is a Programmable Protocol\",\n  \"id\": \"programmable-protocol\",\n  \"level\": 3\n}, {\n  \"value\": \"Exchanges and Exchange Types\",\n  \"id\": \"exchanges\",\n  \"level\": 2\n}, {\n  \"value\": \"Default Exchange\",\n  \"id\": \"exchange-default\",\n  \"level\": 3\n}, {\n  \"value\": \"Direct Exchange\",\n  \"id\": \"exchange-direct\",\n  \"level\": 3\n}, {\n  \"value\": \"Fanout Exchange\",\n  \"id\": \"exchange-fanout\",\n  \"level\": 3\n}, {\n  \"value\": \"Topic Exchange\",\n  \"id\": \"exchange-topic\",\n  \"level\": 3\n}, {\n  \"value\": \"Headers Exchange\",\n  \"id\": \"exchange-headers\",\n  \"level\": 3\n}, {\n  \"value\": \"Queues\",\n  \"id\": \"queues\",\n  \"level\": 2\n}, {\n  \"value\": \"Queue Names\",\n  \"id\": \"queue-names\",\n  \"level\": 3\n}, {\n  \"value\": \"Queue Durability\",\n  \"id\": \"queue-durability\",\n  \"level\": 3\n}, {\n  \"value\": \"Bindings\",\n  \"id\": \"bindings\",\n  \"level\": 2\n}, {\n  \"value\": \"Consumers\",\n  \"id\": \"consumers\",\n  \"level\": 2\n}, {\n  \"value\": \"Message Acknowledgements\",\n  \"id\": \"consumer-acknowledgements\",\n  \"level\": 3\n}, {\n  \"value\": \"Rejecting Messages\",\n  \"id\": \"messages-reject\",\n  \"level\": 3\n}, {\n  \"value\": \"Negative Acknowledgements\",\n  \"id\": \"messages-nack\",\n  \"level\": 3\n}, {\n  \"value\": \"Prefetching Messages\",\n  \"id\": \"messages-prefetch\",\n  \"level\": 3\n}, {\n  \"value\": \"Message Attributes and Payload\",\n  \"id\": \"messages\",\n  \"level\": 2\n}, {\n  \"value\": \"AMQP 0-9-1 Methods\",\n  \"id\": \"amqp-methods\",\n  \"level\": 2\n}, {\n  \"value\": \"Connections\",\n  \"id\": \"amqp-connections\",\n  \"level\": 2\n}, {\n  \"value\": \"Channels\",\n  \"id\": \"amqp-channels\",\n  \"level\": 2\n}, {\n  \"value\": \"Virtual Hosts\",\n  \"id\": \"amqp-vhosts\",\n  \"level\": 2\n}, {\n  \"value\": \"AMQP is Extensible\",\n  \"id\": \"amqp-extensibility\",\n  \"level\": 2\n}, {\n  \"value\": \"AMQP 0-9-1 Clients Ecosystem\",\n  \"id\": \"amqp-clients\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    img: \"img\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"amqp-0-9-1-model-explained\",\n        children: \"AMQP 0-9-1 Model Explained\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This guide provides an overview of the AMQP 0-9-1 protocol, one of the protocols\\r\\nsupported by RabbitMQ.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"highlevel-overview\",\n      children: \"High-level Overview of AMQP 0-9-1 and the AMQP Model\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"what-is-amqp\",\n      children: \"What is AMQP 0-9-1?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"AMQP 0-9-1 (Advanced Message Queuing Protocol) is a messaging\\r\\nprotocol that enables conforming client applications to\\r\\ncommunicate with conforming messaging middleware brokers.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"brokers-role\",\n      children: \"Brokers and Their Role\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Messaging brokers receive messages from \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/docs/publishers\",\n          children: \"publishers\"\n        })\n      }), \"\\r\\n(applications that publish them, also known as producers) and route them to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/docs/consumers\",\n          children: \"consumers\"\n        })\n      }), \" (applications that process them).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Since it is a network protocol, the publishers,\\r\\nconsumers and the broker can all reside on\\r\\ndifferent machines.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"amqp-model\",\n      children: \"AMQP 0-9-1 Model in Brief\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The AMQP 0-9-1 Model has the following view of the world:\\r\\nmessages are published to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"exchanges\"\n      }), \",\\r\\nwhich are often compared to post offices or mailboxes. Exchanges then\\r\\ndistribute message copies to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"queues\"\n      }), \" using rules called\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"bindings\"\n      }), \". Then the broker either delivers messages to\\r\\nconsumers subscribed to queues, or consumers\\r\\nfetch/pull messages from queues on demand.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n        alt: \"Publish path from publisher to consumer via exchange and queue\",\n        src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/hello-world-example-routing.png\")[\"default\"]) + \"\",\n        width: \"700\",\n        height: \"328\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When publishing a message, publishers may specify various\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"message attributes\"\n      }), \" (message meta-data). Some of this\\r\\nmeta-data may be used by the broker, however, the rest of it\\r\\nis completely opaque to the broker and is only used by\\r\\napplications that receive the message.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Networks are unreliable and applications may fail to process\\r\\nmessages therefore the AMQP 0-9-1 model has a notion of\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"message acknowledgements\"\n      }), \": when a message is delivered\\r\\nto a consumer the consumer \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"notifies the broker\"\n      }), \",\\r\\neither automatically or as soon as the application\\r\\ndeveloper chooses to do so. When message acknowledgements\\r\\nare in use, a broker will only completely remove a message\\r\\nfrom a queue when it receives a notification for that message\\r\\n(or group of messages).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In certain situations, for example, when a message cannot\\r\\nbe routed, messages may be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"returned\"\n      }), \" to publishers,\\r\\ndropped, or, if the broker implements an extension,\\r\\nplaced into a so-called \\\"dead letter queue\\\". Publishers choose\\r\\nhow to handle situations like this by publishing messages\\r\\nusing certain parameters.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Queues, exchanges and bindings are collectively referred to as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"AMQP entities\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"programmable-protocol\",\n      children: \"AMQP 0-9-1 is a Programmable Protocol\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"AMQP 0-9-1 is a programmable protocol in the sense that AMQP 0-9-1\\r\\nentities and routing schemes are primarily defined by applications\\r\\nthemselves, not a broker administrator. Accordingly,\\r\\nprovision is made for protocol operations that declare\\r\\nqueues and exchanges, define bindings between them,\\r\\nsubscribe to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/queues\",\n        children: \"queues\"\n      }), \" and so on.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This gives application developers a lot of freedom but\\r\\nalso requires them to be aware of potential definition\\r\\nconflicts. In practice, definition conflicts are rare and\\r\\noften indicate a misconfiguration.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Applications declare the AMQP 0-9-1 entities that they need,\\r\\ndefine necessary routing schemes and may choose to delete\\r\\nAMQP 0-9-1 entities when they are no longer used.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"exchanges\",\n      children: \"Exchanges and Exchange Types\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"Exchanges\"\n      }), \" are AMQP 0-9-1 entities where messages are\\r\\nsent to. Exchanges take a message and route it into zero or\\r\\nmore queues. The routing algorithm used depends on the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"exchange type\"\n      }), \" and rules called \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"bindings\"\n      }), \".\\r\\nAMQP 0-9-1 brokers provide four exchange types:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"table\", {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"thead\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"th\", {\n          children: \"Exchange type\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"th\", {\n          children: \"Default pre-declared names\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Direct exchange\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"(Empty string) and amq.direct\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Fanout exchange\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"amq.fanout\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Topic exchange\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"amq.topic\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Headers exchange\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"amq.match (and amq.headers in RabbitMQ)\"\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Besides the exchange type, exchanges are declared with a number of\\r\\nattributes, the most important of which are:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Name\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Durability (exchanges survive broker restart)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Auto-delete (exchange is deleted when last queue is unbound from it)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Arguments (optional, used by plugins and broker-specific features)\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Exchanges can be durable or transient. Durable\\r\\nexchanges survive broker restart whereas transient\\r\\nexchanges do not (they have to be redeclared\\r\\nwhen broker comes back online). Not all scenarios\\r\\nand use cases require exchanges to be durable.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"exchange-default\",\n      children: \"Default Exchange\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The default exchange is a direct exchange with no name\\r\\n(empty string) pre-declared by the broker. It has one special\\r\\nproperty that makes it very useful for simple applications:\\r\\nevery queue that is created is automatically bound to it with\\r\\na routing key which is the same as the queue name.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For example, when you declare a queue with the name of\\r\\n\\\"search-indexing-online\\\", the AMQP 0-9-1 broker will bind it\\r\\nto the default exchange using \\\"search-indexing-online\\\" as\\r\\nthe routing key (in this context sometimes referred to as the binding key).\\r\\nTherefore, a message published to the default\\r\\nexchange with the routing key \\\"search-indexing-online\\\"\\r\\nwill be routed to the queue \\\"search-indexing-online\\\". In\\r\\nother words, the default exchange makes it seem like it\\r\\nis possible to deliver messages directly to queues, even\\r\\nthough that is not technically what is happening.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The default exchange, in RabbitMQ, does not allow bind/unbind operations.\\r\\nBinding operations to the default exchange will result in an error.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"exchange-direct\",\n      children: \"Direct Exchange\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A direct exchange delivers messages to queues based on the\\r\\nmessage routing key. A direct exchange is ideal for the unicast\\r\\nrouting of messages. They can be used for multicast\\r\\nrouting as well.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Here is how it works:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"A queue binds to the exchange with a routing key K\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"When a new message with routing key R arrives at the\\r\\ndirect exchange, the exchange routes it to the queue if K = R\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"If multiple queues are bound to a direct exchange with the same\\r\\nrouting key K, the exchange will route the message to all queues\\r\\nfor which K = R\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A direct exchange can be represented graphically as follows:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n        alt: \"exchange delivering messages to  queues based on routing key\",\n        src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/exchange-direct.png\")[\"default\"]) + \"\",\n        width: \"698\",\n        height: \"526\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"exchange-fanout\",\n      children: \"Fanout Exchange\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A fanout exchange routes messages to all of the queues\\r\\nthat are bound to it and the routing key is ignored. If N\\r\\nqueues are bound to a fanout exchange, when a new message\\r\\nis published to that exchange a copy of the message is\\r\\ndelivered to all N queues. Fanout exchanges are ideal for\\r\\nthe broadcast routing of messages.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Because a fanout exchange delivers a copy of a message to\\r\\nevery queue bound to it, its use cases are quite similar:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Massively multi-player online (MMO) games can use it\\r\\nfor leaderboard updates or other global events\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Sport news sites can use fanout exchanges for\\r\\ndistributing score updates to mobile clients in near\\r\\nreal-time\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Distributed systems can broadcast various state and\\r\\nconfiguration updates\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Group chats can distribute messages between participants\\r\\nusing a fanout exchange (although AMQP does not have a\\r\\nbuilt-in concept of presence, so XMPP may be a better choice)\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A fanout exchange can be represented graphically as follows:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n        alt: \"exchange delivering messages to three queues\",\n        src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/exchange-fanout.png\")[\"default\"]) + \"\",\n        width: \"698\",\n        height: \"463\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"exchange-topic\",\n      children: \"Topic Exchange\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Topic exchanges route messages to one or many queues\\r\\nbased on matching between a message routing key and the\\r\\npattern that was used to bind a queue to an exchange. The\\r\\ntopic exchange type is often used to implement various\\r\\npublish/subscribe pattern variations. Topic exchanges are\\r\\ncommonly used for the multicast routing of messages.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Topic exchanges have a very broad set of use cases. Whenever\\r\\na problem involves multiple consumers/applications that\\r\\nselectively choose which type of messages they want to\\r\\nreceive, the use of topic exchanges should be considered.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Example uses:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Distributing data relevant to specific geographic\\r\\nlocation, for example, points of sale\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Background task processing done by multiple workers,\\r\\neach capable of handling specific set of tasks\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Stocks price updates (and updates on other kinds of financial data)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"News updates that involve categorization or tagging\\r\\n(for example, only for a particular sport or team)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Orchestration of services of different kinds in the cloud\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Distributed architecture/OS-specific software builds or\\r\\npackaging where each builder can handle only one architecture or OS\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"exchange-headers\",\n      children: \"Headers Exchange\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A headers exchange is designed for routing on multiple\\r\\nattributes that are more easily expressed as message\\r\\nheaders than a routing key. Headers exchanges ignore the\\r\\nrouting key attribute. Instead, the attributes used for\\r\\nrouting are taken from the headers attribute. A message is\\r\\nconsidered matching if the value of the header equals the\\r\\nvalue specified upon binding.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is possible to bind a queue to a headers exchange using\\r\\nmore than one header for matching. In this case, the broker\\r\\nneeds one more piece of information from the application\\r\\ndeveloper, namely, should it consider messages with any\\r\\nof the headers matching, or all of them? This is what the\\r\\n\\\"x-match\\\" binding argument is for. When the \\\"x-match\\\"\\r\\nargument is set to \\\"any\\\", just one matching header value\\r\\nis sufficient. Alternatively, setting \\\"x-match\\\" to \\\"all\\\"\\r\\nmandates that all the values must match.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For \\\"any\\\" and \\\"all\\\", headers beginning with the string \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-\"\n      }), \"\\r\\nwill not be used to evaluate matches.\\r\\nSetting \\\"x-match\\\" to \\\"any-with-x\\\" or \\\"all-with-x\\\" will also use headers\\r\\nbeginning with the string \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-\"\n      }), \" to evaluate matches.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Headers exchanges can be looked upon as \\\"direct exchanges\\r\\non steroids\\\". Because they route based on header values,\\r\\nthey can be used as direct exchanges where the routing key\\r\\ndoes not have to be a string; it could be an integer or a\\r\\nhash (dictionary) for example.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"queues\",\n      children: \"Queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/queues\",\n        children: \"Queues\"\n      }), \" in the AMQP 0-9-1 model are very similar to queues in\\r\\nother message- and task-queueing systems: they store\\r\\nmessages that are consumed by applications. Queues share\\r\\nsome properties with exchanges, but also have some additional\\r\\nproperties:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Name\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Durable (the queue will survive a broker restart)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Exclusive (used by only one connection and the queue will be deleted when that connection closes)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Auto-delete (queue that has had at least one consumer is deleted when last consumer unsubscribes)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Arguments (optional; used by plugins and broker-specific features such as message TTL, queue length limit, etc)\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Before a queue can be used it has to be declared. Declaring\\r\\na queue will cause it to be created if it does not already\\r\\nexist. The declaration will have no effect if the queue does\\r\\nalready exist and its attributes are the same as those in the\\r\\ndeclaration. When the existing queue attributes are not the\\r\\nsame as those in the declaration a channel-level exception\\r\\nwith code 406 (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"PRECONDITION_FAILED\"\n      }), \") will be  raised.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"queue-names\",\n      children: \"Queue Names\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Applications may pick queue names or ask the broker to generate\\r\\na name for them.  Queue names may be up to 255 bytes of UTF-8\\r\\ncharacters. An AMQP 0-9-1 broker can generate a unique queue\\r\\nname on behalf of an app. To use this feature, pass an empty\\r\\nstring as the queue name argument. The generated name will be returned\\r\\nto the client with queue declaration response.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Queue names starting with \\\"amq.\\\" are reserved for internal\\r\\nuse by the broker. Attempts to declare a queue with a name that\\r\\nviolates this rule will result in a channel-level exception\\r\\nwith reply code 403 (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ACCESS_REFUSED\"\n      }), \").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"queue-durability\",\n      children: \"Queue Durability\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In AMQP 0-9-1, queues can be declared as durable or transient.\\r\\nMetadata of a durable queue is stored on disk, while metadata of a transient queue is\\r\\nstored in memory when possible.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The same distinction is made for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/publishers#message-properties\",\n        children: \"messages at publishing time\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In environments and use cases where durability is important, applications\\r\\nmust use durable queues \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"and\"\n      }), \" make sure that publishers mark published messages as persisted.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This topic is covered in more detailed in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/queues#durability\",\n        children: \"Queues guide\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"bindings\",\n      children: \"Bindings\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Bindings are rules that exchanges use (among other things)\\r\\nto route messages to queues. To instruct an exchange E to\\r\\nroute messages to a queue Q,\\r\\nQ has to be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"bound\"\n      }), \" to E. Bindings may have an optional\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"routing key\"\n      }), \" attribute used by some exchange types. The\\r\\npurpose of the routing key is to select certain messages published\\r\\nto an exchange to be routed to the bound queue. In other words,\\r\\nthe routing key acts like a filter.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To draw an analogy:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Queue is like your destination in New York city\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Exchange is like JFK airport\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Bindings are routes from JFK to your destination. There can be zero or many ways to reach it\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Having this layer of indirection enables routing scenarios\\r\\nthat are impossible or very hard to implement using publishing\\r\\ndirectly to queues and also eliminates certain amount of\\r\\nduplicated work application developers have to do.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If a message cannot be routed to any queue (for example,\\r\\nbecause there are no bindings for the exchange it was published\\r\\nto) it is either \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/publishers#unroutable\",\n        children: \"dropped or returned to the publisher\"\n      }), \",\\r\\ndepending on message attributes the publisher has set.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"consumers\",\n      children: \"Consumers\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Storing messages in queues is useless unless applications\\r\\ncan \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/docs/consumers\",\n          children: \"consume\"\n        })\n      }), \" them. In the AMQP 0-9-1 Model, there\\r\\nare two ways for applications to do this:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Subscribe to have messages delivered to them (\\\"push API\\\"): this is the recommended option\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Polling (\\\"pull API\\\"): this way is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n          children: \"highly inefficient\"\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n          children: \"should be avoided\"\n        }), \" in most cases\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"With the \\\"push API\\\", applications have to indicate interest in\\r\\nconsuming messages from a particular queue. When they do so,\\r\\nwe say that they \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"register a consumer\"\n      }), \"\\r\\nor, simply put, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"subscribe to a queue\"\n      }), \". It is possible\\r\\nto have more than one consumer per queue or to register an\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"exclusive consumer\"\n      }), \" (excludes all other consumers from\\r\\nthe queue while it is consuming).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Each consumer (subscription) has an identifier called a\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"consumer tag\"\n      }), \". It can be used to unsubscribe from\\r\\nmessages. Consumer tags are just strings.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"consumer-acknowledgements\",\n      children: \"Message Acknowledgements\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/consumers\",\n        children: \"Consumer applications\"\n      }), \" – that is, applications that receive and process\\r\\nmessages – may occasionally fail to process individual\\r\\nmessages, lose connection to the server or fail in many other ways.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"There is also the possibility\\r\\nof network issues causing problems. This raises a question:\\r\\nwhen should the broker remove messages from queues? The\\r\\nAMQP 0-9-1 specification gives consumers control over this. There are\\r\\ntwo \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/confirms\",\n        children: \"acknowledgement modes\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"After broker sends a message to an application (using either \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"basic.deliver\"\n        }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"basic.get-ok\"\n        }), \" method).\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"After the application sends back an acknowledgement (using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"basic.ack\"\n        }), \" method).\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The former choice is called the automatic acknowledgement\\r\\nmodel, while the latter is called the explicit acknowledgement\\r\\nmodel. With the explicit model the application chooses when\\r\\nit is time to send an acknowledgement. It can be right after\\r\\nreceiving a message, or after persisting it to a data store\\r\\nbefore processing, or after fully processing the message\\r\\n(for example, successfully fetching a Web page, processing\\r\\nand storing it into some persistent data store).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If a consumer dies without sending an acknowledgement,\\r\\nthe broker will redeliver it to another consumer or,\\r\\nif none are available at the time, the broker will wait until\\r\\nat least one consumer is registered for the same queue before\\r\\nattempting redelivery.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"messages-reject\",\n      children: \"Rejecting Messages\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a consumer application receives a message, processing\\r\\nof that message may or may not succeed. An application can\\r\\nindicate to the broker that message processing has failed\\r\\n(or cannot be accomplished at the time) by rejecting a\\r\\nmessage. When rejecting a message, an application can ask\\r\\nthe broker to discard or requeue it. When there is only one\\r\\nconsumer on a queue, make sure you do not create infinite\\r\\nmessage delivery loops by rejecting and requeueing a message\\r\\nfrom the same consumer over and over again.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"messages-nack\",\n      children: \"Negative Acknowledgements\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Messages are rejected with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.reject\"\n      }), \" method.\\r\\nThere is one limitation that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.reject\"\n      }), \" has:\\r\\nthere is no way to reject multiple messages as you can do\\r\\nwith acknowledgements. However, if you are using RabbitMQ,\\r\\nthen there is a solution. RabbitMQ provides an AMQP 0-9-1\\r\\nextension known as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"negative acknowledgements\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"nacks\"\n      }), \". For\\r\\nmore information, please refer to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/confirms\",\n        children: \"Confirmations\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/nack\",\n        children: \"basic.nack extension\"\n      }), \" guides.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"messages-prefetch\",\n      children: \"Prefetching Messages\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For cases when multiple consumers share a queue, it is useful\\r\\nto be able to specify how many messages each consumer can be\\r\\nsent at once before sending the next acknowledgement. This can\\r\\nbe used as a simple load balancing technique or to improve\\r\\nthroughput if messages tend to be published in batches. For\\r\\nexample, if a producing application sends messages every\\r\\nminute because of the nature of the work it is doing.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that RabbitMQ only supports channel-level prefetch-count,\\r\\nnot connection or size based prefetching.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"messages\",\n      children: \"Message Attributes and Payload\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Messages in the AMQP 0-9-1 model have \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"attributes\"\n      }), \". Some\\r\\nattributes are so common that the AMQP 0-9-1 specification\\r\\ndefines them and application developers do not have to think\\r\\nabout the exact attribute name. Some examples are\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Content type\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Content encoding\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Routing key\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Delivery mode (persistent or not)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Message priority\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Message publishing timestamp\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Expiration period\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Publisher application id\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Some attributes are used by AMQP brokers, but most are open\\r\\nto interpretation by applications that receive them. Some\\r\\nattributes are optional and known\\r\\nas \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"headers\"\n      }), \". They are similar to X-Headers in\\r\\nHTTP. Message attributes are set when a message is published.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Messages also have a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"payload\"\n      }), \" (the data that\\r\\nthey carry), which AMQP brokers treat as an opaque byte array.\\r\\nThe broker will not inspect or modify the payload. It is possible\\r\\nfor messages to contain only attributes and no payload. It\\r\\nis common to use serialisation formats like JSON, Thrift,\\r\\nProtocol Buffers and MessagePack to serialize structured data\\r\\nin order to publish it as the message payload. Protocol peers\\r\\ntypically use the \\\"content-type\\\" and \\\"content-encoding\\\" fields to\\r\\ncommunicate this information,  but this is by convention only.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Messages may be published as persistent, which makes the broker persist them to disk.\\r\\nIf the server is restarted the system ensures that received persistent messages are not\\r\\nlost. Simply publishing a message to a durable exchange or the\\r\\nfact that the queue(s) it is routed to are durable doesn't make\\r\\na message persistent: it all depends on persistence mode of the\\r\\nmessage itself. Publishing messages as persistent affects\\r\\nperformance (just like with data stores, durability comes at a\\r\\ncertain cost in performance).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Learn more in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/publishers\",\n        children: \"Publishers guide\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"amqp-methods\",\n      children: \"AMQP 0-9-1 Methods\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"AMQP 0-9-1 is structured as a number of\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"methods\"\n      }), \". Methods are operations (like HTTP methods)\\r\\nand have nothing in common with methods in object-oriented\\r\\nprogramming languages. Protocol methods in AMQP 0-9-1 are grouped into\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"classes\"\n      }), \". Classes are just logical groupings of AMQP 0-9-1\\r\\nmethods. The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/amqp-0.9.1-spec/blob/main/pdf/amqp-xml-doc0-9-1.pdf\",\n        children: \"AMQP 0-9-1 reference\"\n      }), \" has full details of all the AMQP 0-9-1 methods (protocol operations).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Let us take a look at the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"exchange\"\n      }), \" class, a group\\r\\nof methods related to operations on exchanges. It includes\\r\\nthe following operations:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"exchange.declare\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"exchange.declare-ok\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"exchange.delete\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"exchange.delete-ok\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"(note that the RabbitMQ site reference also includes\\r\\nRabbitMQ-specific extensions to the exchange class that we\\r\\nwill not discuss in this guide).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The operations above form logical pairs:\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"exchange.declare\"\n      }), \" and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"exchange.declare-ok\"\n      }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"exchange.delete\"\n      }), \" and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"exchange.delete-ok\"\n      }), \". These operations are\\r\\n\\\"requests\\\" (sent by clients) and \\\"responses\\\" (sent by\\r\\nbrokers in response to the aforementioned \\\"requests\\\").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As an example, the client asks the broker to declare a new\\r\\nexchange using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"exchange.declare\"\n      }), \" method:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n        alt: \"exchange.declare\",\n        src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/exchange-declare.png\")[\"default\"]) + \"\",\n        width: \"551\",\n        height: \"155\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As shown on the diagram above,\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"exchange.declare\"\n      }), \" carries several\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"parameters\"\n      }), \". They enable the client to specify\\r\\nexchange name, type, durability flag and so on.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If the operation succeeds, the broker responds with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"exchange.declare-ok\"\n      }), \" method:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n        alt: \"exchange.declare-ok\",\n        src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/exchange-declare-ok.png\")[\"default\"]) + \"\",\n        width: \"551\",\n        height: \"155\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"exchange.declare-ok\"\n      }), \" does not carry any\\r\\nparameters except for the channel number (channels will be\\r\\ndescribed later in this guide).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The sequence of events is very similar for another\\r\\nmethod pair on the AMQP 0-9-1 \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"queue\"\n      }), \" method class: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"queue.declare\"\n      }), \" and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"queue.declare-ok\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n        alt: \"queue.declare\",\n        src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/queue-declare.png\")[\"default\"]) + \"\",\n        width: \"551\",\n        height: \"155\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n        alt: \"queue.declare-ok\",\n        src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./tutorials/amqp-concepts/queue-declare-ok.png\")[\"default\"]) + \"\",\n        width: \"551\",\n        height: \"155\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Not all AMQP 0-9-1 methods have counterparts. Some\\r\\n(\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.publish\"\n      }), \" being the most widely used one)\\r\\ndo not have corresponding \\\"response\\\" methods\\r\\nand some others (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.get\"\n      }), \", for example)\\r\\nhave more than one possible \\\"response\\\".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"amqp-connections\",\n      children: \"Connections\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"AMQP 0-9-1 connections are typically long-lived. AMQP 0-9-1 is an\\r\\napplication level protocol that uses TCP for reliable\\r\\ndelivery. Connections use authentication and can be\\r\\nprotected using TLS. When an application no longer needs\\r\\nto be connected to the server, it should gracefully close\\r\\nits AMQP 0-9-1 connection instead of abruptly closing the underlying TCP connection.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"amqp-channels\",\n      children: \"Channels\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Some applications need multiple connections to the\\r\\nbroker. However, it is undesirable to keep many TCP\\r\\nconnections open at the same time because doing so consumes\\r\\nsystem resources and makes it more difficult to configure\\r\\nfirewalls. AMQP 0-9-1 connections are multiplexed with\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/docs/channels\",\n          children: \"channels\"\n        })\n      }), \" that can be thought of as \\\"lightweight\\r\\nconnections that share a single TCP connection\\\".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Every protocol operation performed by a client happens on a channel.\\r\\nCommunication on a particular channel is completely separate\\r\\nfrom communication on another channel, therefore every protocol\\r\\nmethod also carries a channel ID (a.k.a. channel number), an integer\\r\\nthat both the broker and clients use to figure out which channel the method is for.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A channel only exists in the context of a connection and never on its own.\\r\\nWhen a connection is closed, so are all channels on it.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For applications that use multiple threads/processes for\\r\\nprocessing, it is very common to open a new channel per thread/process\\r\\nand not share channels between them.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"amqp-vhosts\",\n      children: \"Virtual Hosts\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To make it possible for a single broker to host multiple\\r\\nisolated \\\"environments\\\" (groups of users, exchanges,\\r\\nqueues and so on), AMQP 0-9-1 includes the concept of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/docs/vhosts\",\n          children: \"virtual hosts\"\n        })\n      }), \" (vhosts).\\r\\nThey are similar to virtual hosts used by many popular Web servers and provide completely isolated\\r\\nenvironments in which AMQP entities live. Protocol clients\\r\\nspecify what vhosts they want to use during connection negotiation.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"amqp-extensibility\",\n      children: \"AMQP is Extensible\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"AMQP 0-9-1 has several extension points:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/client-libraries/devtools#miscellaneous\",\n          children: \"Custom exchange types\"\n        }), \" let developers\\r\\nimplement routing schemes that exchange types provided out-of-the-box do\\r\\nnot cover well, for example, geodata-based routing.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Declaration of exchanges and queues can include additional attributes that the broker\\r\\ncan use. For example, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/docs/ttl\",\n          children: \"per-queue message TTL\"\n        }), \" in RabbitMQ is implemented this way.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Broker-specific extensions to the protocol. See, for example,\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/docs/extensions\",\n          children: \"extensions that RabbitMQ implements\"\n        }), \".\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Every now and then, new AMQP 0-9-1 method classes can be introduced for specific cases such\\r\\nas \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/docs/oauth2/\",\n          children: \"OAuth 2\"\n        }), \" (JWT) token refresh.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Brokers can be extended with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/docs/plugins\",\n          children: \"additional plugins\"\n        }), \",\\r\\nfor example, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/docs/management\",\n          children: \"RabbitMQ management\"\n        }), \"\\r\\nfrontend and HTTP API are implemented as a plugin.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"These features make the AMQP 0-9-1 Model even more flexible\\r\\nand applicable to a very broad range of problems.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"amqp-clients\",\n      children: \"AMQP 0-9-1 Clients Ecosystem\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"There are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/client-libraries/devtools\",\n        children: \"many AMQP 0-9-1 clients\"\n      }), \" for many\\r\\npopular programming languages and platforms. Some of them follow AMQP terminology\\r\\nclosely and only provide implementation of AMQP methods. Some\\r\\nothers have additional features, convenience methods\\r\\nand abstractions. Some of the clients are asynchronous\\r\\n(non-blocking), some are synchronous (blocking), some support\\r\\nboth models. Some clients support vendor-specific extensions\\r\\n(for example, RabbitMQ-specific extensions).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Because one of the main AMQP goals is interoperability, it is\\r\\na good idea for developers to understand protocol operations\\r\\nand not limit themselves to terminology of a particular client\\r\\nlibrary. This way communicating with developers using different\\r\\nlibraries will be significantly easier.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./tutorials/amqp-concepts/index.md\n");

/***/ })

}]);