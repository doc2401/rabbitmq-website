"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-blog-2011-01-20-rabbitmq-backing-stores-databases-and-disks-618-3db"],{

/***/ "./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2011-01-20-rabbitmq-backing-stores-databases-and-disks-index-md-618.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"permalink":"/rabbitmq-website/blog/2011/01/20/rabbitmq-backing-stores-databases-and-disks","editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/blog/2011-01-20-rabbitmq-backing-stores-databases-and-disks/index.md","source":"@site/blog/2011-01-20-rabbitmq-backing-stores-databases-and-disks/index.md","title":"RabbitMQ, backing stores, databases and disks","description":"From time to time, on","date":"2011-01-20T00:00:00.000Z","tags":[{"inline":true,"label":"Introductory","permalink":"/rabbitmq-website/blog/tags/introductory"}],"readingTime":7.365,"hasTruncateMarker":true,"authors":[{"name":"Matthew Sackman","key":"matthew","page":null}],"frontMatter":{"title":"RabbitMQ, backing stores, databases and disks","tags":["Introductory"],"authors":["matthew"]},"unlisted":false,"prevItem":{"title":"Who are you? Authentication and authorisation in RabbitMQ 2.3.1","permalink":"/rabbitmq-website/blog/2011/02/07/who-are-you-authentication-and-authorisation-in-rabbitmq-231"},"nextItem":{"title":"Ruby AMQP 0.7 released!","permalink":"/rabbitmq-website/blog/2011/01/19/ruby-amqp-0-7-released"}}');

/***/ }),

/***/ "./blog/2011-01-20-rabbitmq-backing-stores-databases-and-disks/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2011_01_20_rabbitmq_backing_stores_databases_and_disks_index_md_618_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2011_01_20_rabbitmq_backing_stores_databases_and_disks_index_md_618_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2011-01-20-rabbitmq-backing-stores-databases-and-disks-index-md-618.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'RabbitMQ, backing stores, databases and disks',\n\ttags: [\n\t\t'Introductory'\n\t],\n\tauthors: [\n\t\t'matthew'\n\t]\n};\nconst contentTitle = undefined;\n\nconst assets = {\n\"authorsImageUrls\": [undefined],\n};\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    em: \"em\",\n    p: \"p\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"From time to time, on\\r\\nour \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss\",\n        children: \"mailing\\r\\nlist\"\n      }), \" and elsewhere, the idea comes up of using a\\r\\ndifferent \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"backing store\"\n      }), \" within RabbitMQ. The backing store is\\r\\nthe bit that's responsible for writing messages to disk (a message can\\r\\nbe written to disk for a number of reasons) and it's a fairly frequent\\r\\nsuggestion to see what RabbitMQ would look like if its own backing\\r\\nstore was replaced with another storage system.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Such a change would permit functionality that is not currently\\r\\npossible, for example out-of-band queue browsing, or distributed\\r\\nstorage, but there is a fundamental difference in the nature of data\\r\\nstorage and access patterns between a message broker such as RabbitMQ\\r\\nand a generic database. Indeed RabbitMQ deliberately does not store\\r\\nmessages in such a database.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Firstly we need to discuss what properties RabbitMQ itself expects of\\r\\nany backing store. RabbitMQ writes messages to disk in two cases:\\r\\neither the message has been published in such a way that it must be\\r\\nwritten to disk (e.g. published with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"delivery_mode = 2\"\n      }), \")\\r\\nor memory pressure is causing RabbitMQ to start running out of RAM and\\r\\nso it is pushing messages to disk in order to free up RAM. In the\\r\\nfirst case, just because we've written the message to disk, does not\\r\\nmean that we're going to forget about it from RAM: if memory is\\r\\nabundant then there's no reason to incur the cost of a subsequent disk\\r\\nread.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In the second case, it means that any backing store that keeps\\r\\neverything in RAM all the time is immediately not a good fit: RabbitMQ\\r\\nwrites messages to disk in order to free up RAM, thus if the \\\"writing\\r\\nto disk\\\" bit actually just moves the message from one area of RAM to\\r\\nanother without freeing up RAM then nothing has been gained. Using\\r\\nsuch a backing store might work and it might achieve the improvements\\r\\nin functionality desired, but such a change would have substantial\\r\\nimpact on the scalability of RabbitMQ: it would no longer be able to\\r\\nabsorb more messages than can be kept in RAM, which was one of the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"raisons d'Ãªtre\"\n      }), \" for the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"new persister\"\n      }), \" work that led to\\r\\nRabbitMQ's current default backing store.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Some databases or key-value stores write disk contents\\r\\nby initially writing a snapshot of their entire data set, and then\\r\\nwriting deltas to that data set. After a while, either time based or\\r\\nbased on the number of deltas, or ratio of deltas to snapshot size, a\\r\\nnew snapshot is written, and then the previous snapshot and all its\\r\\ndeltas can be thrown away. This is how RabbitMQ's \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"old persister\"\n      }), \"\\r\\nworked. The problem with this is that it can repeatedly cause vast\\r\\namounts of data to be unnecessarily rewritten. Imagine you have two\\r\\nqueues, one of which is entirely static: no one is publishing messages\\r\\nto it, and no one is consuming messages from it, it's just sitting\\r\\nthere, but it contains several million messages, all of which have\\r\\nbeen written to disk. The other queue is almost always empty, but is\\r\\nmoving very quickly -- thousands of messages a second are being\\r\\npublished and consumed from it. Every message sent to that queue has\\r\\nto be written to disk, but they're all being consumed as soon as\\r\\nthey've been written to disk. Consider the effect of this scenario on\\r\\nthe backing store: the second queue will cause a rapid stream of\\r\\ndeltas to occur but whenever the snapshot is rewritten, it'll cause\\r\\nthe entire contents of the first queue to be rewritten too \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"even\\r\\nthough there has been no change to that queue's contents\"\n      }), \". So\\r\\nagain, backing stores that write messages to disk in this way are\\r\\nlikely to be a poor fit for RabbitMQ's needs.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"So suitable backing stores (assuming the performance and scalability\\r\\nproperties that RabbitMQ has need to be kept: this is by no means\\r\\ncertain in all scenarios) would be able to store a volume of data\\r\\nbounded only by disk size rather than RAM, and also have a reasonably\\r\\nsophisticated means of storing data on disk such that unchanged data\\r\\nwon't be rewritten indefinitely.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"There are a couple of further aspects of RabbitMQ's default backing\\r\\nstore that are worth mentioning. Queues themselves decide when and\\r\\nwhether to write a message to disk. But a single message can be sent\\r\\nto multiple queues and it is obviously advantageous to make sure each\\r\\nmessage only gets written to disk once. However, there are two\\r\\ndistinct pieces of information here: firstly, the message content\\r\\nitself. This is the same in every queue that the message has been sent\\r\\nto, and should only be written to disk once, regardless of the number\\r\\nof queues it goes to; note that subsequent writes of this do not need\\r\\nto do a value comparison: if the ID of the message is known to the\\r\\nbacking store then the message body will match what is already on disk\\r\\n-- message content is never altered by the broker. The second piece of\\r\\ninformation is the existence of the message in each queue: where in\\r\\nthe queue it lies, what its neighbours are, and what its\\r\\nqueue-specific status is. This second piece of information is what\\r\\nallows RabbitMQ to start up, recover messages and queues from disk and\\r\\nensure that the messages in each queue are in the same order as when\\r\\nRabbitMQ was shut down.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Thus RabbitMQ's default backing store consists of a\\r\\nnode-global \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"message store\"\n      }), \" which is concerned only with writing\\r\\nmessage contents to disk; and a per queue \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"queue index\"\n      }), \" which\\r\\nuses a very different format for writing per message per queue data to\\r\\ndisk. Because these two needs are very specific, there are an awful\\r\\nlot of optimisations that can be applied (and we have!).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Generic database benchmarks normally show that read performance vastly\\r\\nout performs write performance. If it doesn't then that normally means\\r\\nthe writes aren't actually going to disk (with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"fsync\"\n      }), \"), or\\r\\nthere's a bug which is crippling read performance. And indeed,\\r\\ndatabases have historically been optimised for read-heavy\\r\\nworkloads. This matches their general use case: there is a slowly\\r\\nexpanding data set which must be queried in various different ways.\\r\\nDeletions tend to be quite rare: if you think about the typical\\r\\nwebsite shopping basket on top of a relational database, then unless a\\r\\ncustomer deletes their account, there are very few reasons to ever\\r\\nissue deletions -- even if a product is discontinued, you're probably\\r\\njust going to set a flag on that product row because otherwise you\\r\\nrisk stopping customers from being able to see their order history\\r\\n(assuming it's normalised).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"So the vast volume of data in most databases is fairly static. This is\\r\\nthe exact opposite of data in message brokers: for us, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"reading\"\n      }), \"\\r\\ndata is the rarest operation, and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"writing\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"deleting\"\n      }), \"\\r\\ndata are the common cases. Ideally, if RabbitMQ is running in\\r\\nplenty of memory, there will never be any reads from disk at\\r\\nall. There will only be writes for messages that are published in such\\r\\na way that they have to be written to disk, and even then, provided we\\r\\ncan get the message out to a consumer quickly enough, there are many\\r\\nways in which we can optimise out those writes. We only ever read data\\r\\nwhen memory pressure has forced us to write messages to disk and then\\r\\nforget about the message from RAM. Read performance is certainly\\r\\nimportant: we work hard to make sure RabbitMQ gets rid of data as fast\\r\\nas possible (without utilising \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/dev/null\"\n      }), \") and being able\\r\\nto read messages from disk quickly is part of that. But avoiding the\\r\\nwrite in the first place is the goal.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In fact, as far as message brokers are concerned, it's best to think\\r\\nof RAM as a large write-back cache for the disk, and then the task is\\r\\nto optimise the management of this cache to maximise the elimination of\\r\\nwrites by delaying them for as long as possible in the hope that the\\r\\ncorresponding deletion occurs before the write has really gone to\\r\\ndisk. This is quite obviously very different from normal databases\\r\\nwhich do not try to make gains from the lifespan of data being so\\r\\nshort as it frequently is in a message broker.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"None of this is meant to deter efforts to make RabbitMQ work with\\r\\nalternative backing stores, but merely to explain why we decided to do\\r\\nour own thing when writing the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"new persister\"\n      }), \" for RabbitMQ\\r\\n(which first came out with RabbitMQ version 2.0.0) rather than use an\\r\\noff-the-shelf data store. It explains why building a high performance\\r\\nmessage broker directly on top of a normal database is tricky at best,\\r\\nand why the nature of data in a message broker is very different from\\r\\nthe nature of data in a database.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./blog/2011-01-20-rabbitmq-backing-stores-databases-and-disks/index.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);