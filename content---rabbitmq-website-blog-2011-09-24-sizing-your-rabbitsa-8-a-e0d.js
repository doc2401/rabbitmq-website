"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-blog-2011-09-24-sizing-your-rabbitsa-8-a-e0d"],{

/***/ "./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2011-09-24-sizing-your-rabbits-index-md-a8a.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"permalink":"/rabbitmq-website/blog/2011/09/24/sizing-your-rabbits","editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/blog/2011-09-24-sizing-your-rabbits/index.md","source":"@site/blog/2011-09-24-sizing-your-rabbits/index.md","title":"Sizing your Rabbits","description":"One of the problems we face at the RabbitMQ HQ is that whilst we may","date":"2011-09-24T00:00:00.000Z","tags":[{"inline":true,"label":"Introductory","permalink":"/rabbitmq-website/blog/tags/introductory"},{"inline":true,"label":"HowTo","permalink":"/rabbitmq-website/blog/tags/how-to"}],"readingTime":10.105,"hasTruncateMarker":true,"authors":[{"name":"Matthew Sackman","key":"matthew","page":null}],"frontMatter":{"title":"Sizing your Rabbits","tags":["Introductory","HowTo"],"authors":["matthew"]},"unlisted":false,"prevItem":{"title":"PubSubHuddle \'Realtime Web\' talk","permalink":"/rabbitmq-website/blog/2011/09/26/pubsubhuddle-realtime-web-talk"},"nextItem":{"title":"PubSub huddle","permalink":"/rabbitmq-website/blog/2011/09/16/pubsub-huddle"}}');

/***/ }),

/***/ "./blog/2011-09-24-sizing-your-rabbits/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2011_09_24_sizing_your_rabbits_index_md_a8a_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2011_09_24_sizing_your_rabbits_index_md_a8a_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2011-09-24-sizing-your-rabbits-index-md-a8a.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Sizing your Rabbits',\n\ttags: [\n\t\t'Introductory',\n\t\t'HowTo'\n\t],\n\tauthors: [\n\t\t'matthew'\n\t]\n};\nconst contentTitle = undefined;\n\nconst assets = {\n\"authorsImageUrls\": [undefined],\n};\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"One of the problems we face at the RabbitMQ HQ is that whilst we may\\r\\nknow lots about how the broker works, we don't tend to have a large\\r\\npool of experience of designing applications that use RabbitMQ and\\r\\nwhich need to work reliably, unattended, for long periods of time. We\\r\\nspend a lot of time answering questions on the mailing list, and we do\\r\\nconsultancy work here and there, but in some cases it's as a result of\\r\\nbeing contacted by users building applications that we're really made\\r\\nto think about long-term behaviour of RabbitMQ. Recently, we've been\\r\\nprompted to think long and hard about the basic performance of queues,\\r\\nand this has lead to some realisations about provisioning Rabbits.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ's queues are fastest when they're empty. When a queue is\\r\\nempty, and it has consumers ready to receive messages, then as soon as\\r\\na message is received by the queue, it goes straight out to the\\r\\nconsumer. In the case of a persistent message in a durable queue, yes,\\r\\nit will also go to disk, but that's done in an asynchronous manner and\\r\\nis buffered heavily. The main point is that very little book-keeping\\r\\nneeds to be done, very few data structures are modified, and very\\r\\nlittle additional memory needs allocating. Consequently, the CPU load\\r\\nof a message going through an empty queue is very small.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If the queue is not empty then a bit more work has to be done: the\\r\\nmessages have to actually be queued up. Initially, this too is fast\\r\\nand cheap as the underlying functional data structures are very\\r\\nfast. Nevertheless, by holding on to messages, the overall memory\\r\\nusage of the queue will be higher, and we are doing more work than\\r\\nbefore per message (each message is being both enqueued and dequeued\\r\\nnow, whereas before each message was just going straight out to a\\r\\nconsumer), so the CPU cost per message is higher. Consequently, the\\r\\ntop speed you'll be able to achieve with an empty queue will be higher\\r\\nthan the top speed of a queue with a fixed N messages in it, even if N\\r\\nis very small.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If the queue receives messages at a faster rate than it can pump out\\r\\nto consumers then things get slower. As the queue grows, it will\\r\\nrequire more memory. Additionally, if a queue receives a spike of\\r\\npublications, then the queue must spend time dealing with those\\r\\npublications, which takes CPU time away from sending existing messages\\r\\nout to consumers: a queue of a million messages will be able to be\\r\\ndrained out to ready consumers at a much higher rate if there are no\\r\\npublications arriving at the queue to distract it. Not exactly rocket\\r\\nscience, but worth remembering that publications arriving at a queue\\r\\ncan reduce the rate at which the queue drives its consumers.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Eventually, as a queue grows, it'll become so big that we have to\\r\\nstart writing messages out to disk and forgetting about them from RAM\\r\\nin order to free up RAM. At this point, the CPU cost per message is\\r\\nmuch higher than had the message been dealt with by an empty queue.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"None of this seems particularly profound, but keeping these points in\\r\\nmind when building your application turns out to be very important.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Let's say you design and build your application, using RabbitMQ. There\\r\\nwill be some set of publishers, and some set of consumers. You test\\r\\nthis, and let's say that in total, in one part of the system, you find\\r\\nthat the maximum rate that'll ensure your queues stay empty or very\\r\\nnear empty is 2000 msgs/second. You then choose a machine on which to\\r\\nrun RabbitMQ, which might be on some sort of virtual server. When\\r\\ntesting at 2000 msgs/second you found the CPU load of the box running\\r\\nRabbitMQ was not very high: the bottleneck was elsewhere in the\\r\\napplication -- most likely in the consumers of your queues (you were\\r\\nmeasuring the maximum stable end-to-end performance) -- so RabbitMQ\\r\\nitself wasn't being overly stressed and so wasn't eating up much\\r\\nCPU. Consequently, you choose a virtual server which isn't enormously\\r\\npowerful. You then launch the application and sure enough, everything\\r\\nlooks OK.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Over time, your application becomes more popular, and so your rates\\r\\nincrease.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Eventually, you get to a point where your consumers are running flat\\r\\nout, and your queues are staying nearly empty. But then, at the most\\r\\npopular time of the day for your application, your publishers push a\\r\\nfew more messages into your queues than before. This is just normal\\r\\ngrowth -- you have more users now and so it's not surprising messages\\r\\nare being published a bit faster than before. What you hope will\\r\\nhappen is that RabbitMQ will just happily buffer up the messages and\\r\\nwill eventually feed them to your consumers who will be able to work\\r\\nthrough the back-log during quieter times of the day.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The problem is that this might not be able to happen. Because your\\r\\nqueues are now (albeit briefly) receiving more messages than your\\r\\nconsumers can cope with, the queues spend more CPU time dealing with\\r\\neach message than they used to when the queue was empty (the messages\\r\\nnow have to be queued up). That takes away CPU time from driving the\\r\\nconsumers and unfortunately, as you chose a machine for RabbitMQ which\\r\\ndidn't have a great deal of spare CPU capacity, you start maxing out\\r\\nthe CPU. Thus your queues can't drive your consumers quite as hard as\\r\\nbefore, which in turn makes the rate of growth of the queues\\r\\nincrease. This in turn starts to push the queues to sizes where they\\r\\nhave to start pushing messages to disk in order to free up RAM which\\r\\nagain takes up more CPU which you don't have, and by this point,\\r\\nyou're likely in deep trouble.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"What can you do?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"At this immediate point, you need to get your queues drained. Because\\r\\nyour queues are spending more time dealing with new messages arriving\\r\\nthan with pushing messages out to consumers, it's unlikely that\\r\\nthrowing more consumers at the queues is going to significantly\\r\\nhelp. You really need to get the publishers to stop.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If you have the luxury of just turning off the publishers then do\\r\\nthat, and turn them back on when the queues become empty again. If you\\r\\ncan't do that, then you need to divert their load somewhere else, but\\r\\ngiven that your Rabbit is writing out to disk to avoid running out of\\r\\nmemory, and is maxing out the CPU, adding new queues to your current\\r\\nRabbit is not going to help -- you need a new Rabbit on a different\\r\\nmachine. If you've set up a cluster, then you could provision new\\r\\nqueues on a node of your RabbitMQ cluster that is not so heavily\\r\\nloaded, then attach lots of new consumers to that, and divert the\\r\\npublishers into there. At this point, you'll realise the value of not\\r\\nusing the default nameless exchange and addressing queues directly,\\r\\nand instead will be very glad that you had your publishers publish to\\r\\nan exchange you created, thus allowing you to add a new binding to\\r\\nyour fresh new queue, and deleting the binding to your old queue,\\r\\ndiverting the load, and not having to interrupt your publishers at\\r\\nall. The old queues will then be able to drive their consumers (which\\r\\nyou've not removed!) as fast as possible, and the queues will\\r\\ndrain. Now in this situation, you have the prospect of messages being\\r\\nprocessed out of order (new messages arriving in the fresh new queues\\r\\nmay be processed by your new consumers before the old messages in the\\r\\nold queues are processed), but if you have multiple consumers off a\\r\\nsingle queue then you're probably already dealing with that problem\\r\\nanyway.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Prevention, we are often told, is preferable to cure. So how could you\\r\\ndesign your application to be able to help RabbitMQ cope with these\\r\\npotentially catastrophic situations?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Firstly, don't use a very low \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.qos\"\n      }), \" prefetch value in\\r\\nyour consumers. If you use a value of 1 then it'll mean that a queue\\r\\nsends out one message to a consumer, and then can't send anything more\\r\\nto that consumer until it receives the acknowledgement back. Only when\\r\\nit's done that can it send out the next message. If it takes a while\\r\\nfor the acknowledgement to make its way back to the queue (for\\r\\nexample, high latency on the network, or the load that your Rabbit is\\r\\nunder may mean it takes a while for that acknowledgement to get all\\r\\nthe way through to the queue) then in the meantime, that consumer is\\r\\nsitting there idle. If you use a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.qos\"\n      }), \" prefetch value\\r\\nof 20, for example, then the broker will ensure that 20 messages are\\r\\nsent to the consumer, and then even as the acknowledgement for the\\r\\nfirst message is (maybe slowly) making its way back to the queue, the\\r\\nconsumer still has work to be getting on with (i.e. the next 19\\r\\nmessages). Essentially, the higher the prefetch value, the greater\\r\\ninsulation the consumer has from spikes in the round trip time back to\\r\\nthe queue.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Secondly, consider not acknowledging every message, but instead\\r\\nacknowledging every N messages and setting the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"multiple\"\n      }), \"\\r\\nflag on the acknowledgement. When the queue is overloaded, it's\\r\\nbecause it has too much work to do (profound, I know). As a consumer,\\r\\nyou can reduce the amount of work it has to do by ensuring you don't\\r\\nflood it with acknowledgements.  Thus, for example, you set the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.qos\"\n      }), \" prefetch to 20, but you only send an\\r\\nacknowledgement after you've processed every 10 messages and you set\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"multiple\"\n      }), \" flag to true on the acknowledgement. The\\r\\nqueue will now receive one-tenth of the acknowledgements it would have\\r\\npreviously received. It will still internally acknowledge all ten\\r\\nmessages, but it can do it in a more efficient way if it receives one\\r\\nacknowledgement that accounts for several messages, rather than lots\\r\\nof individual acknowledgements. However, if you're only acknowledging\\r\\nevery N messages, be sure that your \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.qos\"\n      }), \" prefetch\\r\\nvalue is higher than N. Probably at least 2*N. If your prefetch value\\r\\nis the same as N, then your consumer will once again be left idle\\r\\nwhilst the acknowledgement makes its way back to the queue and the\\r\\nqueue sends out a fresh batch of messages.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Thirdly, have a strategy to pivot the load to other queues on others\\r\\nmachines if the worst comes to the worst. Yes, it is a good idea to\\r\\nuse RabbitMQ as a buffer which insulates publishers from consumers and\\r\\ncan absorb spikes. But equally, you need to remember that RabbitMQ's\\r\\nqueues go fastest when they're empty, and we always say that you\\r\\nshould design your application so that the queues are normally\\r\\nempty. Or to put it another way, the performance of a queue is lowest\\r\\nwhen you likely need more than ever for it to absorb a large\\r\\nspike. The upshot of that is that unless you test to makes sure you\\r\\nknow it will recover, you might be in for a surprise should a\\r\\nnon-trivial spike occur which substantially increases the length of\\r\\nyour queues. You may not have factored into your thinking that in such\\r\\na situation, your existing consumers may end up being driven more\\r\\nslowly than before, simply because your queues are busy doing other\\r\\nthings (enqueuing messages), and that this can cause a vicious cycle\\r\\nthat eventually results in a catastrophic loss of performance of the\\r\\nqueue.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The nub of the issue is that a queue is a single-threaded resource. If\\r\\nyou've designed your routing topology in such a way that it already\\r\\ndoes, or at least can, spread messages across multiple queues rather\\r\\nthan just hammering all messages into a single queue, then you're far\\r\\nmore likely to be able to respond to such problems occurring quickly\\r\\nand easily, by diverting load and being able to take advantage of\\r\\nadditional CPU resources which ensure that you can minimise the\\r\\nCPU-hit per message.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./blog/2011-09-24-sizing-your-rabbits/index.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);