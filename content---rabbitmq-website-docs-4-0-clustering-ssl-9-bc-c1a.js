"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-docs-4-0-clustering-ssl-9-bc-c1a"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-4-0-clustering-ssl-md-9bc.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"clustering-ssl","title":"Securing Cluster (Inter-node) and CLI Tool Communication with TLS","description":"<!--","source":"@site/versioned_docs/version-4.0/clustering-ssl.md","sourceDirName":".","slug":"/clustering-ssl","permalink":"/rabbitmq-website/docs/4.0/clustering-ssl","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/versioned_docs/version-4.0/clustering-ssl.md","tags":[],"version":"4.0","frontMatter":{"title":"Securing Cluster (Inter-node) and CLI Tool Communication with TLS"},"sidebar":"docsSidebar","previous":{"title":"Network Partitions","permalink":"/rabbitmq-website/docs/4.0/partitions"},"next":{"title":"RabbitMQ on Amazon EC2","permalink":"/rabbitmq-website/docs/4.0/ec2"}}');

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./versioned_docs/version-4.0/clustering-ssl.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_4_0_clustering_ssl_md_9bc_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_4_0_clustering_ssl_md_9bc_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-4-0-clustering-ssl-md-9bc.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Securing Cluster (Inter-node) and CLI Tool Communication with TLS'\n};\nconst contentTitle = 'Securing Cluster (Inter-node) and CLI Tool Communication with TLS';\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"The Basics\",\n  \"id\": \"basics\",\n  \"level\": 2\n}, {\n  \"value\": \"Deploying Inter-node TLS\",\n  \"id\": \"deploying-inter-node-tls\",\n  \"level\": 3\n}, {\n  \"value\": \"Strategy One (Using Individual Flags) on Linux, macOS and BSD\",\n  \"id\": \"linux-strategy-one\",\n  \"level\": 2\n}, {\n  \"value\": \"Combining Certificate and Private Key\",\n  \"id\": \"combined-key-file\",\n  \"level\": 3\n}, {\n  \"value\": \"Configuring Individual Runtime Flags for Inter-node TLS\",\n  \"id\": \"strategy-one-flags\",\n  \"level\": 3\n}, {\n  \"value\": \"Strategy Two (Using a Single TLS Option File) on Linux, macOS and BSD\",\n  \"id\": \"linux-strategy-two\",\n  \"level\": 2\n}, {\n  \"value\": \"Using a Separate Setting File for Inter-node TLS\",\n  \"id\": \"strategy-two-flags\",\n  \"level\": 3\n}, {\n  \"value\": \"Windows\",\n  \"id\": \"windows\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"securing-cluster-inter-node-and-cli-tool-communication-with-tls\",\n        children: \"Securing Cluster (Inter-node) and CLI Tool Communication with TLS\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ nodes accept \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./connections\",\n        children: \"connections from clients\"\n      }), \" as well as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering\",\n        children: \"peer cluster nodes\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./cli\",\n        children: \"CLI tools\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The main \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl\",\n        children: \"TLS\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./troubleshooting-ssl\",\n        children: \"Troubleshooting TLS\"\n      }), \" guides explain\\r\\nhow to secure client connections with TLS. It may be desired to add a layer of encryption and an extra\\r\\nlayer of authentication to the other two kinds of connections. This guide explains how to do that.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Switching inter-node and CLI tool communication requires configuring a few \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./runtime\",\n        children: \"runtime\"\n      }), \" flags.\\r\\nThey provide the node with a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl#certificates-and-keys\",\n        children: \"CA certificate bundle and a certificate/key pair\"\n      }), \".\\r\\nCLI tools also have to be configured to use a certificate/key pair as TLS-enabled nodes\\r\\nwon't accept unencrypted connections from CLI tools and peers.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This guide assumes the reader is familiar with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl#certificates-and-keys\",\n        children: \"basics of TLS\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl#peer-verification\",\n        children: \"peer verification\"\n      }), \" (authentication) covered in the main TLS guide.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It also assumes that you already have a CA certificate bundle and a certificate/key pair generated for every\\r\\ncluster node and every host CLI tools will be use on. In production environments those certificates\\r\\nwill often be produced by operators or deployment tools. For development and experimentation,\\r\\nthere is a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl#automated-certificate-generation\",\n        children: \"quick way to generate them\"\n      }), \" using OpenSSL\\r\\nand Python.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This guide will reference three files:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"ca_certificate.pem\"\n        }), \": a certificate authority bundle\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"server_certificate.pem\"\n        }), \": a certificate (public key) that will be used by the configured node (and/or CLI tools)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"server_key.pem\"\n        }), \": a private key that will be used by the configured node (and/or CLI tools)\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Make sure you have them ready before we start.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"basics\",\n      children: \"The Basics\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Configuring a node to communicate over TLS-enabled connections involves a few\\r\\nsteps. With \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./which-erlang\",\n        children: \"supported Erlang versions\"\n      }), \" there are two ways of doing it.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The steps are very similar on all operating systems supported but minor details will be\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#windows\",\n        children: \"different on Windows\"\n      }), \" due to a different shell language.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#linux-strategy-one\",\n        children: \"Strategy one\"\n      }), \" involves the following steps:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Tell the node to use encrypted inter-node connections using a runtime flag, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"-proto_dist inet_tls\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Combine public and private keys to be used by the node into a single file\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Tell the node where to find its certificate and private key using another runtime flag, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"-ssl_dist_opt server_certfile\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Tell the node about any additional TLS settings desired, using other \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"-ssl_dist_opt\"\n        }), \" options, for example: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"-ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\"\n        }), \" to enable \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://devcentral.f5.com/s/articles/ssl-profiles-part-6-ssl-renegotiation\",\n          children: \"secure renegotiation\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#linux-strategy-two\",\n        children: \"Strategy two\"\n      }), \" is very similar but instead of specifying a set of runtime flags, those options can be specified\\r\\nin a file similar to RabbitMQ's \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#advanced-config-file\",\n        children: \"advanced.config file\"\n      }), \" and the runtime\\r\\nwill be pointed at that file. Therefore the steps are:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Tell the node to use encrypted inter-node connections using a runtime flag, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"-proto_dist inet_tls\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Deploy an inter-node TLS settings file that contains information about certificate/key pair locations, CA bundle location,\\r\\nTLS settings used and so on\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Tell the node where to find its inter-node TLS setting file using another runtime flag, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"-ssl_dist_optfile\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"We encourage operators to choose the strategy that works best for their deployment tools of choice.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"With both options environment variables are used to pass those options to the runtime. This is best\\r\\ndone using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-env.conf\"\n      }), \" as explained in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#customise-environment\",\n        children: \"Configuration guide\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Once a node has inter-node connection configured with TLS, CLI tools such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-diagnostics\"\n      }), \"\\r\\nalso must use TLS to talk to the node. Plain TCP connections will be fail.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"deploying-inter-node-tls\",\n      children: \"Deploying Inter-node TLS\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Once the certificate/key pair files and configuration are in place the new node can be started.\\r\\nNote that it might be necessary to first stop the node, then deploy the files and configuration, and finally start the node.\\r\\nThis is because CLI tools configured to use TLS won't be able to connect to a node that does\\r\\nnot expect TLS-enabled CLI tool connections.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For nodes and CLI tools to perform TLS handshake and peer verification successfully,\\r\\nthe same \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl#peer-verification\",\n        children: \"peer verification\"\n      }), \"\\r\\nexample, certificate/key pairs used by other nodes and CLI\\r\\ntools must be signed by the same certificate authority as the initial node or a\\r\\ndifferent CA that is trusted on all cluster nodes.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This is no different from how \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl#peer-verification\",\n        children: \"peer verification works for client and plugin TLS connections\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to reuse a single certificate/key pair for all nodes and CLI tools.\\r\\nThe certificate can also use a wildcard Subject Alternative Name (SAN) or Common Name (CN) such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"*.rabbitmq.example.local\"\n      }), \"\\r\\nthat would match every hostname in the cluster.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"linux-strategy-one\",\n      children: \"Strategy One (Using Individual Flags) on Linux, macOS and BSD\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"combined-key-file\",\n      children: \"Combining Certificate and Private Key\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The first strategy covered in this guide requires node's public and private keys to be combined into a single file.\\r\\nLet's call it a combined keys file. To combined them, simply concatenate the private key file,\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"server_key.pem\"\n      }), \" in the example below, to the end of the public key file, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"server_certificate.pem\"\n      }), \",\\r\\nstarting with a new line:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"cat server_certificate.pem server_key.pem > combined_keys.pem\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This can be done using a text editor and not just command line tools such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cat\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"strategy-one-flags\",\n      children: \"Configuring Individual Runtime Flags for Inter-node TLS\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Assuming a combined keys file from the section above is ready, next we infer\\r\\nthe Erlang TLS library path and export \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ERL_SSL_PATH\"\n      }), \" in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-env.conf\"\n      }), \"\\r\\nto point at it:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# These commands ensure that `ERL_SSL_PATH` is the first line in\\r\\n# /etc/rabbitmq/rabbitmq-env.conf and will preserve the existing\\r\\n# contents of that file if it already exists\\r\\n\\r\\nerl -noinput -eval 'io:format(\\\"ERL_SSL_PATH=~s~n\\\", [filename:dirname(code:which(inet_tls_dist))])' -s init stop > /tmp/ssl-path.txt\\r\\ncat /tmp/ssl-path.txt /etc/rabbitmq/rabbitmq-env.conf > /tmp/new-rabbitmq-env.conf\\r\\nmv -f /tmp/new-rabbitmq-env.conf /etc/rabbitmq/rabbitmq-env.conf\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This makes it possible for the node to load a module, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"inet_tls_dist\"\n      }), \", which is used for encrypted inter-node\\r\\ncommunication, from the path.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Step number two is telling the runtime to use that module using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"-proto_dist inet_tls\"\n      }), \" runtime flag.\\r\\nAs with other runtime flags, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"SERVER_ADDITIONAL_ERL_ARGS\"\n      }), \" is the most convenient and compatible to pass them.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Please note that the double quotes \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"must\"\n      }), \" be used here because the environment variable\\r\\nvalue is multi-line:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# -pa $ERL_SSL_PATH prepends the directory ERL_SSL_PATH points at to the code path\\r\\n# -proto_dist inet_tls tells the runtime to encrypt inter-node communication\\r\\n# -ssl_dist_opt server_certfile /path/to/combined_keys.pem tells the runtime\\r\\n#                               where to find the combined certificate/key file\\r\\n# -ssl_dist_opt server_password password   required if the private key is encrypted\\r\\n#\\r\\nSERVER_ADDITIONAL_ERL_ARGS=\\\"-pa $ERL_SSL_PATH \\\\\\r\\n  -proto_dist inet_tls \\\\\\r\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\\\\r\\n  -ssl_dist_opt server_password password\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Next step is to build on the previous example and enable secure renegotiation for\\r\\ninter-node TLS connections. While this is optional, it is highly recommended. The same\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"-ssl_dist_opt\"\n      }), \" can be used to enable more TLS-related settings. They won't be\\r\\ncovered in this example:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# -pa $ERL_SSL_PATH prepends the directory ERL_SSL_PATH points at to the code path\\r\\n# -proto_dist inet_tls tells the runtime to encrypt inter-node communication\\r\\n# -ssl_dist_opt server_certfile /path/to/combined_keys.pem tells the runtime\\r\\n#                               where to find the combined certificate/key file\\r\\n# -ssl_dist_opt server_password password   required if the private key is encrypted\\r\\n# -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true enables an additional TLS setting: secure renegotiation\\r\\nSERVER_ADDITIONAL_ERL_ARGS=\\\"-pa $ERL_SSL_PATH \\\\\\r\\n  -proto_dist inet_tls \\\\\\r\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\\\\r\\n  -ssl_dist_opt server_password password \\\\\\r\\n  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\\\"\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Once a node has inter-node connection configured with TLS, CLI tools such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-diagnostics\"\n      }), \"\\r\\nalso must use TLS to talk to the node. Plain TCP connections will be fail.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This is done very similarly to what the example above does using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"SERVER_ADDITIONAL_ERL_ARGS\"\n      }), \" but this time\\r\\nthe environment variable is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RABBITMQ_CTL_ERL_ARGS\"\n      }), \". It controls runtime flags used by CLI tools.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Here is the complete \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/etc/rabbitmq/rabbitmq-env.conf\"\n      }), \" file:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# IMPORTANT:\\r\\n# the following path is system dependent (will\\r\\n# change depending on the Erlang version, distribution,\\r\\n# and installation method used). Please double check it before proceeding!\\r\\nERL_SSL_PATH=\\\"/usr/lib64/erlang/lib/ssl-9.4/ebin\\\"\\r\\n\\r\\n# -pa $ERL_SSL_PATH prepends the directory ERL_SSL_PATH points at to the code path\\r\\n# -proto_dist inet_tls tells the runtime to encrypt inter-node communication\\r\\n# -ssl_dist_opt server_certfile /path/to/combined_keys.pem tells the runtime\\r\\n#                               where to find the combined certificate/key file\\r\\n# -ssl_dist_opt server_password password   required if the private key is encrypted\\r\\n# -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true enables an additional TLS setting: secure renegotiation\\r\\nSERVER_ADDITIONAL_ERL_ARGS=\\\"-pa $ERL_SSL_PATH \\\\\\r\\n  -proto_dist inet_tls \\\\\\r\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\\\\r\\n  -ssl_dist_opt server_password password \\\\\\r\\n  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\\\"\\r\\n\\r\\n# Same settings as above but for CLI tools\\r\\nRABBITMQ_CTL_ERL_ARGS=\\\"-pa $ERL_SSL_PATH \\\\\\r\\n  -proto_dist inet_tls \\\\\\r\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\\\\r\\n  -ssl_dist_opt server_password password \\\\\\r\\n  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\\\"\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"linux-strategy-two\",\n      children: \"Strategy Two (Using a Single TLS Option File) on Linux, macOS and BSD\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"strategy-two-flags\",\n      children: \"Using a Separate Setting File for Inter-node TLS\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Modern Erlang versions support a runtime flag, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"-ssl_dist_optfile\"\n      }), \",\\r\\nthat can be used to configure TLS for inter-node communication using a single file.\\r\\nThis simplifies the arguments passed on the command line itself.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Here is a complete \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/etc/rabbitmq/rabbitmq-env.conf\"\n      }), \" file using this setting.\\r\\nNote that the name of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"-ssl_dist_optfile\"\n      }), \" file is not significant but\\r\\nit must be stored in a location readable by the effective \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq\"\n      }), \" user:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"# NOTE: the following path is system dependent and will change between Erlang\\r\\n#       versions\\r\\nERL_SSL_PATH=\\\"/usr/lib64/erlang/lib/ssl-9.4/ebin\\\"\\r\\n\\r\\n# -pa $ERL_SSL_PATH prepends the directory ERL_SSL_PATH points at to the code path\\r\\n# -proto_dist inet_tls tells the runtime to encrypt inter-node communication\\r\\n# -ssl_dist_optfile tells the runtime where to find its inter-node TLS configuration file\\r\\nSERVER_ADDITIONAL_ERL_ARGS=\\\"-pa $ERL_SSL_PATH\\r\\n  -proto_dist inet_tls\\r\\n  -ssl_dist_optfile /etc/rabbitmq/inter_node_tls.config\\\"\\r\\n\\r\\nRABBITMQ_CTL_ERL_ARGS=\\\"-pa $ERL_SSL_PATH\\r\\n  -proto_dist inet_tls\\r\\n  -ssl_dist_optfile /etc/rabbitmq/inter_node_tls.config\\\"\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Here is an example \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"/etc/rabbitmq/inter_node_tls.config\"\n      }), \" file that uses\\r\\nseparate server certificate and private key files, enables \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl#peer-verification\",\n        children: \"peer verification\"\n      }), \"\\r\\nand requires peers to present a certificate:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"[\\r\\n  {server, [\\r\\n    {cacertfile, \\\"/full/path/to/ca_certificate.pem\\\"},\\r\\n    {certfile,   \\\"/full/path/to/server_certificate.pem\\\"},\\r\\n    {keyfile,    \\\"/full/path/to/server_key.pem\\\"},\\r\\n    {password,   \\\"password-if-keyfile-is-encrypted\\\"},\\r\\n    {secure_renegotiate, true},\\r\\n    {verify, verify_peer},\\r\\n    {fail_if_no_peer_cert, true}\\r\\n  ]},\\r\\n  {client, [\\r\\n    {cacertfile, \\\"/full/path/to/ca_certificate.pem\\\"},\\r\\n    {certfile,   \\\"/full/path/to/client_certificate.pem\\\"},\\r\\n    {keyfile,    \\\"/full/path/to/client_key.pem\\\"},\\r\\n    {password,   \\\"password-if-keyfile-is-encrypted\\\"},\\r\\n    {secure_renegotiate, true},\\r\\n    {verify, verify_peer}\\r\\n  ]}\\r\\n].\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"These options are documented further in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://erlang.org/doc/apps/ssl/ssl_distribution.html\",\n        children: \"Erlang/OTP documentation\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"windows\",\n      children: \"Windows\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Both strategies covered above for Linux, macOS and BSD systems can be used on Windows.\\r\\nAll fundamentals are the same.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"There are, however, some minor differences specific to Windows.\\r\\nFirst, the command that outputs the location of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"inet_tls_dist\"\n      }), \" module is\\r\\ndifferent due to Windows shell parsing rules. it looks like this\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"erl -noinput -eval \\\"io:format(\\\"\\\"ERL_SSL_PATH=~s~n\\\"\\\", [filename:dirname(code:which(inet_tls_dist))])\\\" -s init stop\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Next, the file containing the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./configure#customise-environment\",\n        children: \"custom environment variables\"\n      }), \"\\r\\nis named \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-env-conf.bat\"\n      }), \" on Windows. This file \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"must\"\n      }), \" be saved to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"%AppData%\\\\RabbitMQ\"\n      }), \" directory of the administrative\\r\\nuser that installed RabbitMQ.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Here is a complete \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-env-conf.bat\"\n      }), \" file using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"-ssl_dist_opfile\"\n      }), \" setting (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#linux-strategy-two\",\n        children: \"strategy two\"\n      }), \" covered above).\\r\\nNote the use of forward-slash directory delimiters.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-PowerShell\",\n        children: \"@echo off\\r\\nrem NOTE: If spaces are present in any of these paths,\\r\\nrem double quotes must be used.\\r\\n\\r\\nrem NOTE: the following path is **system dependent** and will vary between Erlang versions\\r\\nrem       and installation paths\\r\\nset SSL_PATH=\\\"C:/Program Files/erl10.0.1/lib/ssl-9.0/ebin\\\"\\r\\n\\r\\nrem -pa $ERL_SSL_PATH prepends the directory ERL_SSL_PATH points at to the code path\\r\\nrem -proto_dist inet_tls tells the runtime to encrypt inter-node communication\\r\\nrem -ssl_dist_optfile tells the runtime where to find its inter-node TLS configuration file\\r\\nset SERVER_ADDITIONAL_ERL_ARGS=-pa %SSL_PATH% ^\\r\\n    -proto_dist inet_tls ^\\r\\n    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/inter_node_tls.config\\r\\n\\r\\nrem Same as above but for CLI tools\\r\\nset CTL_ERL_ARGS=-pa %SSL_PATH% ^\\r\\n    -proto_dist inet_tls ^\\r\\n    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/inter_node_tls.config\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Below is an example \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"inter_node_tls.config\"\n      }), \" file.\\r\\nAs with other operating systems, more \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ssl\",\n        children: \"TLS options\"\n      }), \" are available\\r\\nto be set if necessary.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-bash\",\n        children: \"[\\r\\n    {server, [\\r\\n        {cacertfile, \\\"C:/Path/To/ca_certificate.pem\\\"},\\r\\n        {certfile, \\\"C:/Path/To/server_certificate.pem\\\"},\\r\\n        {keyfile, \\\"C:/Path/To/server_key.pem\\\"},\\r\\n        {password, \\\"password-if-keyfile-is-encrypted\\\"},\\r\\n        {secure_renegotiate, true},\\r\\n        {verify, verify_peer},\\r\\n        {fail_if_no_peer_cert, true}\\r\\n    ]},\\r\\n    {client, [\\r\\n        {cacertfile, \\\"C:/Path/To/ca_certificate.pem\\\"},\\r\\n        {certfile, \\\"C:/Path/To/client_certificate.pem\\\"},\\r\\n        {keyfile, \\\"C:/Path/To/client_key.pem\\\"},\\r\\n        {password, \\\"password-if-keyfile-is-encrypted\\\"},\\r\\n        {secure_renegotiate, true},\\r\\n        {verify, verify_peer}\\r\\n    ]}\\r\\n].\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi92ZXJzaW9uZWRfZG9jcy92ZXJzaW9uLTQuMC9jbHVzdGVyaW5nLXNzbC5tZCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWJiaXRtcS13ZWJzaXRlLy4vdmVyc2lvbmVkX2RvY3MvdmVyc2lvbi00LjAvY2x1c3RlcmluZy1zc2wubWQ/ZGVmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuZXhwb3J0IGNvbnN0IGZyb250TWF0dGVyID0ge1xuXHR0aXRsZTogJ1NlY3VyaW5nIENsdXN0ZXIgKEludGVyLW5vZGUpIGFuZCBDTEkgVG9vbCBDb21tdW5pY2F0aW9uIHdpdGggVExTJ1xufTtcbmV4cG9ydCBjb25zdCBjb250ZW50VGl0bGUgPSAnU2VjdXJpbmcgQ2x1c3RlciAoSW50ZXItbm9kZSkgYW5kIENMSSBUb29sIENvbW11bmljYXRpb24gd2l0aCBUTFMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIG1ldGFkYXRhfSBmcm9tICdAc2l0ZS8uZG9jdXNhdXJ1cy9kb2N1c2F1cnVzLXBsdWdpbi1jb250ZW50LWRvY3MvZGVmYXVsdC9zaXRlLXZlcnNpb25lZC1kb2NzLXZlcnNpb24tNC0wLWNsdXN0ZXJpbmctc3NsLW1kLTliYy5qc29uJ1xuZXhwb3J0IGNvbnN0IGFzc2V0cyA9IHtcblxufTtcblxuaW1wb3J0IHtGcmFnbWVudCBhcyBfRnJhZ21lbnQsIGpzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7dXNlTURYQ29tcG9uZW50cyBhcyBfcHJvdmlkZUNvbXBvbmVudHN9IGZyb20gXCJAbWR4LWpzL3JlYWN0XCI7XG5leHBvcnQgY29uc3QgdG9jID0gW3tcbiAgXCJ2YWx1ZVwiOiBcIk92ZXJ2aWV3XCIsXG4gIFwiaWRcIjogXCJvdmVydmlld1wiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlRoZSBCYXNpY3NcIixcbiAgXCJpZFwiOiBcImJhc2ljc1wiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIkRlcGxveWluZyBJbnRlci1ub2RlIFRMU1wiLFxuICBcImlkXCI6IFwiZGVwbG95aW5nLWludGVyLW5vZGUtdGxzXCIsXG4gIFwibGV2ZWxcIjogM1xufSwge1xuICBcInZhbHVlXCI6IFwiU3RyYXRlZ3kgT25lIChVc2luZyBJbmRpdmlkdWFsIEZsYWdzKSBvbiBMaW51eCwgbWFjT1MgYW5kIEJTRFwiLFxuICBcImlkXCI6IFwibGludXgtc3RyYXRlZ3ktb25lXCIsXG4gIFwibGV2ZWxcIjogMlxufSwge1xuICBcInZhbHVlXCI6IFwiQ29tYmluaW5nIENlcnRpZmljYXRlIGFuZCBQcml2YXRlIEtleVwiLFxuICBcImlkXCI6IFwiY29tYmluZWQta2V5LWZpbGVcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJDb25maWd1cmluZyBJbmRpdmlkdWFsIFJ1bnRpbWUgRmxhZ3MgZm9yIEludGVyLW5vZGUgVExTXCIsXG4gIFwiaWRcIjogXCJzdHJhdGVneS1vbmUtZmxhZ3NcIixcbiAgXCJsZXZlbFwiOiAzXG59LCB7XG4gIFwidmFsdWVcIjogXCJTdHJhdGVneSBUd28gKFVzaW5nIGEgU2luZ2xlIFRMUyBPcHRpb24gRmlsZSkgb24gTGludXgsIG1hY09TIGFuZCBCU0RcIixcbiAgXCJpZFwiOiBcImxpbnV4LXN0cmF0ZWd5LXR3b1wiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlVzaW5nIGEgU2VwYXJhdGUgU2V0dGluZyBGaWxlIGZvciBJbnRlci1ub2RlIFRMU1wiLFxuICBcImlkXCI6IFwic3RyYXRlZ3ktdHdvLWZsYWdzXCIsXG4gIFwibGV2ZWxcIjogM1xufSwge1xuICBcInZhbHVlXCI6IFwiV2luZG93c1wiLFxuICBcImlkXCI6IFwid2luZG93c1wiLFxuICBcImxldmVsXCI6IDJcbn1dO1xuZnVuY3Rpb24gX2NyZWF0ZU1keENvbnRlbnQocHJvcHMpIHtcbiAgY29uc3QgX2NvbXBvbmVudHMgPSB7XG4gICAgYTogXCJhXCIsXG4gICAgY29kZTogXCJjb2RlXCIsXG4gICAgaDE6IFwiaDFcIixcbiAgICBoMjogXCJoMlwiLFxuICAgIGgzOiBcImgzXCIsXG4gICAgaGVhZGVyOiBcImhlYWRlclwiLFxuICAgIGxpOiBcImxpXCIsXG4gICAgcDogXCJwXCIsXG4gICAgcHJlOiBcInByZVwiLFxuICAgIHN0cm9uZzogXCJzdHJvbmdcIixcbiAgICB1bDogXCJ1bFwiLFxuICAgIC4uLl9wcm92aWRlQ29tcG9uZW50cygpLFxuICAgIC4uLnByb3BzLmNvbXBvbmVudHNcbiAgfTtcbiAgcmV0dXJuIF9qc3hzKF9GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5oZWFkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmgxLCB7XG4gICAgICAgIGlkOiBcInNlY3VyaW5nLWNsdXN0ZXItaW50ZXItbm9kZS1hbmQtY2xpLXRvb2wtY29tbXVuaWNhdGlvbi13aXRoLXRsc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJTZWN1cmluZyBDbHVzdGVyIChJbnRlci1ub2RlKSBhbmQgQ0xJIFRvb2wgQ29tbXVuaWNhdGlvbiB3aXRoIFRMU1wiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJvdmVydmlld1wiLFxuICAgICAgY2hpbGRyZW46IFwiT3ZlcnZpZXdcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiUmFiYml0TVEgbm9kZXMgYWNjZXB0IFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL2Nvbm5lY3Rpb25zXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImNvbm5lY3Rpb25zIGZyb20gY2xpZW50c1wiXG4gICAgICB9KSwgXCIgYXMgd2VsbCBhcyBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9jbHVzdGVyaW5nXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcInBlZXIgY2x1c3RlciBub2Rlc1wiXG4gICAgICB9KSwgXCJcXHJcXG5hbmQgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vY2xpXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIkNMSSB0b29sc1wiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGUgbWFpbiBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9zc2xcIixcbiAgICAgICAgY2hpbGRyZW46IFwiVExTXCJcbiAgICAgIH0pLCBcIiBhbmQgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vdHJvdWJsZXNob290aW5nLXNzbFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJUcm91Ymxlc2hvb3RpbmcgVExTXCJcbiAgICAgIH0pLCBcIiBndWlkZXMgZXhwbGFpblxcclxcbmhvdyB0byBzZWN1cmUgY2xpZW50IGNvbm5lY3Rpb25zIHdpdGggVExTLiBJdCBtYXkgYmUgZGVzaXJlZCB0byBhZGQgYSBsYXllciBvZiBlbmNyeXB0aW9uIGFuZCBhbiBleHRyYVxcclxcbmxheWVyIG9mIGF1dGhlbnRpY2F0aW9uIHRvIHRoZSBvdGhlciB0d28ga2luZHMgb2YgY29ubmVjdGlvbnMuIFRoaXMgZ3VpZGUgZXhwbGFpbnMgaG93IHRvIGRvIHRoYXQuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJTd2l0Y2hpbmcgaW50ZXItbm9kZSBhbmQgQ0xJIHRvb2wgY29tbXVuaWNhdGlvbiByZXF1aXJlcyBjb25maWd1cmluZyBhIGZldyBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9ydW50aW1lXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcInJ1bnRpbWVcIlxuICAgICAgfSksIFwiIGZsYWdzLlxcclxcblRoZXkgcHJvdmlkZSB0aGUgbm9kZSB3aXRoIGEgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vc3NsI2NlcnRpZmljYXRlcy1hbmQta2V5c1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJDQSBjZXJ0aWZpY2F0ZSBidW5kbGUgYW5kIGEgY2VydGlmaWNhdGUva2V5IHBhaXJcIlxuICAgICAgfSksIFwiLlxcclxcbkNMSSB0b29scyBhbHNvIGhhdmUgdG8gYmUgY29uZmlndXJlZCB0byB1c2UgYSBjZXJ0aWZpY2F0ZS9rZXkgcGFpciBhcyBUTFMtZW5hYmxlZCBub2Rlc1xcclxcbndvbid0IGFjY2VwdCB1bmVuY3J5cHRlZCBjb25uZWN0aW9ucyBmcm9tIENMSSB0b29scyBhbmQgcGVlcnMuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGlzIGd1aWRlIGFzc3VtZXMgdGhlIHJlYWRlciBpcyBmYW1pbGlhciB3aXRoIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9zc2wjY2VydGlmaWNhdGVzLWFuZC1rZXlzXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImJhc2ljcyBvZiBUTFNcIlxuICAgICAgfSksIFwiXFxyXFxuYW5kIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL3NzbCNwZWVyLXZlcmlmaWNhdGlvblwiLFxuICAgICAgICBjaGlsZHJlbjogXCJwZWVyIHZlcmlmaWNhdGlvblwiXG4gICAgICB9KSwgXCIgKGF1dGhlbnRpY2F0aW9uKSBjb3ZlcmVkIGluIHRoZSBtYWluIFRMUyBndWlkZS5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkl0IGFsc28gYXNzdW1lcyB0aGF0IHlvdSBhbHJlYWR5IGhhdmUgYSBDQSBjZXJ0aWZpY2F0ZSBidW5kbGUgYW5kIGEgY2VydGlmaWNhdGUva2V5IHBhaXIgZ2VuZXJhdGVkIGZvciBldmVyeVxcclxcbmNsdXN0ZXIgbm9kZSBhbmQgZXZlcnkgaG9zdCBDTEkgdG9vbHMgd2lsbCBiZSB1c2Ugb24uIEluIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHRob3NlIGNlcnRpZmljYXRlc1xcclxcbndpbGwgb2Z0ZW4gYmUgcHJvZHVjZWQgYnkgb3BlcmF0b3JzIG9yIGRlcGxveW1lbnQgdG9vbHMuIEZvciBkZXZlbG9wbWVudCBhbmQgZXhwZXJpbWVudGF0aW9uLFxcclxcbnRoZXJlIGlzIGEgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vc3NsI2F1dG9tYXRlZC1jZXJ0aWZpY2F0ZS1nZW5lcmF0aW9uXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcInF1aWNrIHdheSB0byBnZW5lcmF0ZSB0aGVtXCJcbiAgICAgIH0pLCBcIiB1c2luZyBPcGVuU1NMXFxyXFxuYW5kIFB5dGhvbi5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJUaGlzIGd1aWRlIHdpbGwgcmVmZXJlbmNlIHRocmVlIGZpbGVzOlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnVsLCB7XG4gICAgICBjaGlsZHJlbjogW1wiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiY2FfY2VydGlmaWNhdGUucGVtXCJcbiAgICAgICAgfSksIFwiOiBhIGNlcnRpZmljYXRlIGF1dGhvcml0eSBidW5kbGVcIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcInNlcnZlcl9jZXJ0aWZpY2F0ZS5wZW1cIlxuICAgICAgICB9KSwgXCI6IGEgY2VydGlmaWNhdGUgKHB1YmxpYyBrZXkpIHRoYXQgd2lsbCBiZSB1c2VkIGJ5IHRoZSBjb25maWd1cmVkIG5vZGUgKGFuZC9vciBDTEkgdG9vbHMpXCJdXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJzZXJ2ZXJfa2V5LnBlbVwiXG4gICAgICAgIH0pLCBcIjogYSBwcml2YXRlIGtleSB0aGF0IHdpbGwgYmUgdXNlZCBieSB0aGUgY29uZmlndXJlZCBub2RlIChhbmQvb3IgQ0xJIHRvb2xzKVwiXVxuICAgICAgfSksIFwiXFxuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiTWFrZSBzdXJlIHlvdSBoYXZlIHRoZW0gcmVhZHkgYmVmb3JlIHdlIHN0YXJ0LlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDIsIHtcbiAgICAgIGlkOiBcImJhc2ljc1wiLFxuICAgICAgY2hpbGRyZW46IFwiVGhlIEJhc2ljc1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJDb25maWd1cmluZyBhIG5vZGUgdG8gY29tbXVuaWNhdGUgb3ZlciBUTFMtZW5hYmxlZCBjb25uZWN0aW9ucyBpbnZvbHZlcyBhIGZld1xcclxcbnN0ZXBzLiBXaXRoIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL3doaWNoLWVybGFuZ1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJzdXBwb3J0ZWQgRXJsYW5nIHZlcnNpb25zXCJcbiAgICAgIH0pLCBcIiB0aGVyZSBhcmUgdHdvIHdheXMgb2YgZG9pbmcgaXQuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGUgc3RlcHMgYXJlIHZlcnkgc2ltaWxhciBvbiBhbGwgb3BlcmF0aW5nIHN5c3RlbXMgc3VwcG9ydGVkIGJ1dCBtaW5vciBkZXRhaWxzIHdpbGwgYmVcXHJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiI3dpbmRvd3NcIixcbiAgICAgICAgY2hpbGRyZW46IFwiZGlmZmVyZW50IG9uIFdpbmRvd3NcIlxuICAgICAgfSksIFwiIGR1ZSB0byBhIGRpZmZlcmVudCBzaGVsbCBsYW5ndWFnZS5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIjbGludXgtc3RyYXRlZ3ktb25lXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIlN0cmF0ZWd5IG9uZVwiXG4gICAgICB9KSwgXCIgaW52b2x2ZXMgdGhlIGZvbGxvd2luZyBzdGVwczpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMudWwsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcIlRlbGwgdGhlIG5vZGUgdG8gdXNlIGVuY3J5cHRlZCBpbnRlci1ub2RlIGNvbm5lY3Rpb25zIHVzaW5nIGEgcnVudGltZSBmbGFnLCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiLXByb3RvX2Rpc3QgaW5ldF90bHNcIlxuICAgICAgICB9KV1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIkNvbWJpbmUgcHVibGljIGFuZCBwcml2YXRlIGtleXMgdG8gYmUgdXNlZCBieSB0aGUgbm9kZSBpbnRvIGEgc2luZ2xlIGZpbGVcIlxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbXCJUZWxsIHRoZSBub2RlIHdoZXJlIHRvIGZpbmQgaXRzIGNlcnRpZmljYXRlIGFuZCBwcml2YXRlIGtleSB1c2luZyBhbm90aGVyIHJ1bnRpbWUgZmxhZywgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcIi1zc2xfZGlzdF9vcHQgc2VydmVyX2NlcnRmaWxlXCJcbiAgICAgICAgfSldXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcIlRlbGwgdGhlIG5vZGUgYWJvdXQgYW55IGFkZGl0aW9uYWwgVExTIHNldHRpbmdzIGRlc2lyZWQsIHVzaW5nIG90aGVyIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCItc3NsX2Rpc3Rfb3B0XCJcbiAgICAgICAgfSksIFwiIG9wdGlvbnMsIGZvciBleGFtcGxlOiBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiLXNzbF9kaXN0X29wdCBzZXJ2ZXJfc2VjdXJlX3JlbmVnb3RpYXRlIHRydWUgY2xpZW50X3NlY3VyZV9yZW5lZ290aWF0ZSB0cnVlXCJcbiAgICAgICAgfSksIFwiIHRvIGVuYWJsZSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCJodHRwczovL2RldmNlbnRyYWwuZjUuY29tL3MvYXJ0aWNsZXMvc3NsLXByb2ZpbGVzLXBhcnQtNi1zc2wtcmVuZWdvdGlhdGlvblwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcInNlY3VyZSByZW5lZ290aWF0aW9uXCJcbiAgICAgICAgfSldXG4gICAgICB9KSwgXCJcXG5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIjbGludXgtc3RyYXRlZ3ktdHdvXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIlN0cmF0ZWd5IHR3b1wiXG4gICAgICB9KSwgXCIgaXMgdmVyeSBzaW1pbGFyIGJ1dCBpbnN0ZWFkIG9mIHNwZWNpZnlpbmcgYSBzZXQgb2YgcnVudGltZSBmbGFncywgdGhvc2Ugb3B0aW9ucyBjYW4gYmUgc3BlY2lmaWVkXFxyXFxuaW4gYSBmaWxlIHNpbWlsYXIgdG8gUmFiYml0TVEncyBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9jb25maWd1cmUjYWR2YW5jZWQtY29uZmlnLWZpbGVcIixcbiAgICAgICAgY2hpbGRyZW46IFwiYWR2YW5jZWQuY29uZmlnIGZpbGVcIlxuICAgICAgfSksIFwiIGFuZCB0aGUgcnVudGltZVxcclxcbndpbGwgYmUgcG9pbnRlZCBhdCB0aGF0IGZpbGUuIFRoZXJlZm9yZSB0aGUgc3RlcHMgYXJlOlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy51bCwge1xuICAgICAgY2hpbGRyZW46IFtcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW1wiVGVsbCB0aGUgbm9kZSB0byB1c2UgZW5jcnlwdGVkIGludGVyLW5vZGUgY29ubmVjdGlvbnMgdXNpbmcgYSBydW50aW1lIGZsYWcsIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCItcHJvdG9fZGlzdCBpbmV0X3Rsc1wiXG4gICAgICAgIH0pXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFwiRGVwbG95IGFuIGludGVyLW5vZGUgVExTIHNldHRpbmdzIGZpbGUgdGhhdCBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCBjZXJ0aWZpY2F0ZS9rZXkgcGFpciBsb2NhdGlvbnMsIENBIGJ1bmRsZSBsb2NhdGlvbixcXHJcXG5UTFMgc2V0dGluZ3MgdXNlZCBhbmQgc28gb25cIlxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbXCJUZWxsIHRoZSBub2RlIHdoZXJlIHRvIGZpbmQgaXRzIGludGVyLW5vZGUgVExTIHNldHRpbmcgZmlsZSB1c2luZyBhbm90aGVyIHJ1bnRpbWUgZmxhZywgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcIi1zc2xfZGlzdF9vcHRmaWxlXCJcbiAgICAgICAgfSldXG4gICAgICB9KSwgXCJcXG5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJXZSBlbmNvdXJhZ2Ugb3BlcmF0b3JzIHRvIGNob29zZSB0aGUgc3RyYXRlZ3kgdGhhdCB3b3JrcyBiZXN0IGZvciB0aGVpciBkZXBsb3ltZW50IHRvb2xzIG9mIGNob2ljZS5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiV2l0aCBib3RoIG9wdGlvbnMgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSB1c2VkIHRvIHBhc3MgdGhvc2Ugb3B0aW9ucyB0byB0aGUgcnVudGltZS4gVGhpcyBpcyBiZXN0XFxyXFxuZG9uZSB1c2luZyBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdG1xLWVudi5jb25mXCJcbiAgICAgIH0pLCBcIiBhcyBleHBsYWluZWQgaW4gdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL2NvbmZpZ3VyZSNjdXN0b21pc2UtZW52aXJvbm1lbnRcIixcbiAgICAgICAgY2hpbGRyZW46IFwiQ29uZmlndXJhdGlvbiBndWlkZVwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJPbmNlIGEgbm9kZSBoYXMgaW50ZXItbm9kZSBjb25uZWN0aW9uIGNvbmZpZ3VyZWQgd2l0aCBUTFMsIENMSSB0b29scyBzdWNoIGFzIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwicmFiYml0bXFjdGxcIlxuICAgICAgfSksIFwiIGFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdG1xLWRpYWdub3N0aWNzXCJcbiAgICAgIH0pLCBcIlxcclxcbmFsc28gbXVzdCB1c2UgVExTIHRvIHRhbGsgdG8gdGhlIG5vZGUuIFBsYWluIFRDUCBjb25uZWN0aW9ucyB3aWxsIGJlIGZhaWwuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcImRlcGxveWluZy1pbnRlci1ub2RlLXRsc1wiLFxuICAgICAgY2hpbGRyZW46IFwiRGVwbG95aW5nIEludGVyLW5vZGUgVExTXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJPbmNlIHRoZSBjZXJ0aWZpY2F0ZS9rZXkgcGFpciBmaWxlcyBhbmQgY29uZmlndXJhdGlvbiBhcmUgaW4gcGxhY2UgdGhlIG5ldyBub2RlIGNhbiBiZSBzdGFydGVkLlxcclxcbk5vdGUgdGhhdCBpdCBtaWdodCBiZSBuZWNlc3NhcnkgdG8gZmlyc3Qgc3RvcCB0aGUgbm9kZSwgdGhlbiBkZXBsb3kgdGhlIGZpbGVzIGFuZCBjb25maWd1cmF0aW9uLCBhbmQgZmluYWxseSBzdGFydCB0aGUgbm9kZS5cXHJcXG5UaGlzIGlzIGJlY2F1c2UgQ0xJIHRvb2xzIGNvbmZpZ3VyZWQgdG8gdXNlIFRMUyB3b24ndCBiZSBhYmxlIHRvIGNvbm5lY3QgdG8gYSBub2RlIHRoYXQgZG9lc1xcclxcbm5vdCBleHBlY3QgVExTLWVuYWJsZWQgQ0xJIHRvb2wgY29ubmVjdGlvbnMuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkZvciBub2RlcyBhbmQgQ0xJIHRvb2xzIHRvIHBlcmZvcm0gVExTIGhhbmRzaGFrZSBhbmQgcGVlciB2ZXJpZmljYXRpb24gc3VjY2Vzc2Z1bGx5LFxcclxcbnRoZSBzYW1lIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL3NzbCNwZWVyLXZlcmlmaWNhdGlvblwiLFxuICAgICAgICBjaGlsZHJlbjogXCJwZWVyIHZlcmlmaWNhdGlvblwiXG4gICAgICB9KSwgXCJcXHJcXG5leGFtcGxlLCBjZXJ0aWZpY2F0ZS9rZXkgcGFpcnMgdXNlZCBieSBvdGhlciBub2RlcyBhbmQgQ0xJXFxyXFxudG9vbHMgbXVzdCBiZSBzaWduZWQgYnkgdGhlIHNhbWUgY2VydGlmaWNhdGUgYXV0aG9yaXR5IGFzIHRoZSBpbml0aWFsIG5vZGUgb3IgYVxcclxcbmRpZmZlcmVudCBDQSB0aGF0IGlzIHRydXN0ZWQgb24gYWxsIGNsdXN0ZXIgbm9kZXMuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGlzIGlzIG5vIGRpZmZlcmVudCBmcm9tIGhvdyBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9zc2wjcGVlci12ZXJpZmljYXRpb25cIixcbiAgICAgICAgY2hpbGRyZW46IFwicGVlciB2ZXJpZmljYXRpb24gd29ya3MgZm9yIGNsaWVudCBhbmQgcGx1Z2luIFRMUyBjb25uZWN0aW9uc1wiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJJdCBpcyBwb3NzaWJsZSB0byByZXVzZSBhIHNpbmdsZSBjZXJ0aWZpY2F0ZS9rZXkgcGFpciBmb3IgYWxsIG5vZGVzIGFuZCBDTEkgdG9vbHMuXFxyXFxuVGhlIGNlcnRpZmljYXRlIGNhbiBhbHNvIHVzZSBhIHdpbGRjYXJkIFN1YmplY3QgQWx0ZXJuYXRpdmUgTmFtZSAoU0FOKSBvciBDb21tb24gTmFtZSAoQ04pIHN1Y2ggYXMgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCIqLnJhYmJpdG1xLmV4YW1wbGUubG9jYWxcIlxuICAgICAgfSksIFwiXFxyXFxudGhhdCB3b3VsZCBtYXRjaCBldmVyeSBob3N0bmFtZSBpbiB0aGUgY2x1c3Rlci5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwibGludXgtc3RyYXRlZ3ktb25lXCIsXG4gICAgICBjaGlsZHJlbjogXCJTdHJhdGVneSBPbmUgKFVzaW5nIEluZGl2aWR1YWwgRmxhZ3MpIG9uIExpbnV4LCBtYWNPUyBhbmQgQlNEXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMywge1xuICAgICAgaWQ6IFwiY29tYmluZWQta2V5LWZpbGVcIixcbiAgICAgIGNoaWxkcmVuOiBcIkNvbWJpbmluZyBDZXJ0aWZpY2F0ZSBhbmQgUHJpdmF0ZSBLZXlcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhlIGZpcnN0IHN0cmF0ZWd5IGNvdmVyZWQgaW4gdGhpcyBndWlkZSByZXF1aXJlcyBub2RlJ3MgcHVibGljIGFuZCBwcml2YXRlIGtleXMgdG8gYmUgY29tYmluZWQgaW50byBhIHNpbmdsZSBmaWxlLlxcclxcbkxldCdzIGNhbGwgaXQgYSBjb21iaW5lZCBrZXlzIGZpbGUuIFRvIGNvbWJpbmVkIHRoZW0sIHNpbXBseSBjb25jYXRlbmF0ZSB0aGUgcHJpdmF0ZSBrZXkgZmlsZSxcXHJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInNlcnZlcl9rZXkucGVtXCJcbiAgICAgIH0pLCBcIiBpbiB0aGUgZXhhbXBsZSBiZWxvdywgdG8gdGhlIGVuZCBvZiB0aGUgcHVibGljIGtleSBmaWxlLCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInNlcnZlcl9jZXJ0aWZpY2F0ZS5wZW1cIlxuICAgICAgfSksIFwiLFxcclxcbnN0YXJ0aW5nIHdpdGggYSBuZXcgbGluZTpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWJhc2hcIixcbiAgICAgICAgY2hpbGRyZW46IFwiY2F0IHNlcnZlcl9jZXJ0aWZpY2F0ZS5wZW0gc2VydmVyX2tleS5wZW0gPiBjb21iaW5lZF9rZXlzLnBlbVxcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhpcyBjYW4gYmUgZG9uZSB1c2luZyBhIHRleHQgZWRpdG9yIGFuZCBub3QganVzdCBjb21tYW5kIGxpbmUgdG9vbHMgc3VjaCBhcyBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImNhdFwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcInN0cmF0ZWd5LW9uZS1mbGFnc1wiLFxuICAgICAgY2hpbGRyZW46IFwiQ29uZmlndXJpbmcgSW5kaXZpZHVhbCBSdW50aW1lIEZsYWdzIGZvciBJbnRlci1ub2RlIFRMU1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJBc3N1bWluZyBhIGNvbWJpbmVkIGtleXMgZmlsZSBmcm9tIHRoZSBzZWN0aW9uIGFib3ZlIGlzIHJlYWR5LCBuZXh0IHdlIGluZmVyXFxyXFxudGhlIEVybGFuZyBUTFMgbGlicmFyeSBwYXRoIGFuZCBleHBvcnQgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJFUkxfU1NMX1BBVEhcIlxuICAgICAgfSksIFwiIGluIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwicmFiYml0bXEtZW52LmNvbmZcIlxuICAgICAgfSksIFwiXFxyXFxudG8gcG9pbnQgYXQgaXQ6XCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1iYXNoXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIiMgVGhlc2UgY29tbWFuZHMgZW5zdXJlIHRoYXQgYEVSTF9TU0xfUEFUSGAgaXMgdGhlIGZpcnN0IGxpbmUgaW5cXHJcXG4jIC9ldGMvcmFiYml0bXEvcmFiYml0bXEtZW52LmNvbmYgYW5kIHdpbGwgcHJlc2VydmUgdGhlIGV4aXN0aW5nXFxyXFxuIyBjb250ZW50cyBvZiB0aGF0IGZpbGUgaWYgaXQgYWxyZWFkeSBleGlzdHNcXHJcXG5cXHJcXG5lcmwgLW5vaW5wdXQgLWV2YWwgJ2lvOmZvcm1hdChcXFwiRVJMX1NTTF9QQVRIPX5zfm5cXFwiLCBbZmlsZW5hbWU6ZGlybmFtZShjb2RlOndoaWNoKGluZXRfdGxzX2Rpc3QpKV0pJyAtcyBpbml0IHN0b3AgPiAvdG1wL3NzbC1wYXRoLnR4dFxcclxcbmNhdCAvdG1wL3NzbC1wYXRoLnR4dCAvZXRjL3JhYmJpdG1xL3JhYmJpdG1xLWVudi5jb25mID4gL3RtcC9uZXctcmFiYml0bXEtZW52LmNvbmZcXHJcXG5tdiAtZiAvdG1wL25ldy1yYWJiaXRtcS1lbnYuY29uZiAvZXRjL3JhYmJpdG1xL3JhYmJpdG1xLWVudi5jb25mXFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIGZvciB0aGUgbm9kZSB0byBsb2FkIGEgbW9kdWxlLCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImluZXRfdGxzX2Rpc3RcIlxuICAgICAgfSksIFwiLCB3aGljaCBpcyB1c2VkIGZvciBlbmNyeXB0ZWQgaW50ZXItbm9kZVxcclxcbmNvbW11bmljYXRpb24sIGZyb20gdGhlIHBhdGguXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJTdGVwIG51bWJlciB0d28gaXMgdGVsbGluZyB0aGUgcnVudGltZSB0byB1c2UgdGhhdCBtb2R1bGUgdXNpbmcgdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiLXByb3RvX2Rpc3QgaW5ldF90bHNcIlxuICAgICAgfSksIFwiIHJ1bnRpbWUgZmxhZy5cXHJcXG5BcyB3aXRoIG90aGVyIHJ1bnRpbWUgZmxhZ3MsIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiU0VSVkVSX0FERElUSU9OQUxfRVJMX0FSR1NcIlxuICAgICAgfSksIFwiIGlzIHRoZSBtb3N0IGNvbnZlbmllbnQgYW5kIGNvbXBhdGlibGUgdG8gcGFzcyB0aGVtLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiUGxlYXNlIG5vdGUgdGhhdCB0aGUgZG91YmxlIHF1b3RlcyBcIiwgX2pzeChfY29tcG9uZW50cy5zdHJvbmcsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXVzdFwiXG4gICAgICB9KSwgXCIgYmUgdXNlZCBoZXJlIGJlY2F1c2UgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlXFxyXFxudmFsdWUgaXMgbXVsdGktbGluZTpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWJhc2hcIixcbiAgICAgICAgY2hpbGRyZW46IFwiIyAtcGEgJEVSTF9TU0xfUEFUSCBwcmVwZW5kcyB0aGUgZGlyZWN0b3J5IEVSTF9TU0xfUEFUSCBwb2ludHMgYXQgdG8gdGhlIGNvZGUgcGF0aFxcclxcbiMgLXByb3RvX2Rpc3QgaW5ldF90bHMgdGVsbHMgdGhlIHJ1bnRpbWUgdG8gZW5jcnlwdCBpbnRlci1ub2RlIGNvbW11bmljYXRpb25cXHJcXG4jIC1zc2xfZGlzdF9vcHQgc2VydmVyX2NlcnRmaWxlIC9wYXRoL3RvL2NvbWJpbmVkX2tleXMucGVtIHRlbGxzIHRoZSBydW50aW1lXFxyXFxuIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSB0byBmaW5kIHRoZSBjb21iaW5lZCBjZXJ0aWZpY2F0ZS9rZXkgZmlsZVxcclxcbiMgLXNzbF9kaXN0X29wdCBzZXJ2ZXJfcGFzc3dvcmQgcGFzc3dvcmQgICByZXF1aXJlZCBpZiB0aGUgcHJpdmF0ZSBrZXkgaXMgZW5jcnlwdGVkXFxyXFxuI1xcclxcblNFUlZFUl9BRERJVElPTkFMX0VSTF9BUkdTPVxcXCItcGEgJEVSTF9TU0xfUEFUSCBcXFxcXFxyXFxuICAtcHJvdG9fZGlzdCBpbmV0X3RscyBcXFxcXFxyXFxuICAtc3NsX2Rpc3Rfb3B0IHNlcnZlcl9jZXJ0ZmlsZSAvcGF0aC90by9jb21iaW5lZF9rZXlzLnBlbSBcXFxcXFxyXFxuICAtc3NsX2Rpc3Rfb3B0IHNlcnZlcl9wYXNzd29yZCBwYXNzd29yZFxcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiTmV4dCBzdGVwIGlzIHRvIGJ1aWxkIG9uIHRoZSBwcmV2aW91cyBleGFtcGxlIGFuZCBlbmFibGUgc2VjdXJlIHJlbmVnb3RpYXRpb24gZm9yXFxyXFxuaW50ZXItbm9kZSBUTFMgY29ubmVjdGlvbnMuIFdoaWxlIHRoaXMgaXMgb3B0aW9uYWwsIGl0IGlzIGhpZ2hseSByZWNvbW1lbmRlZC4gVGhlIHNhbWVcXHJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIi1zc2xfZGlzdF9vcHRcIlxuICAgICAgfSksIFwiIGNhbiBiZSB1c2VkIHRvIGVuYWJsZSBtb3JlIFRMUy1yZWxhdGVkIHNldHRpbmdzLiBUaGV5IHdvbid0IGJlXFxyXFxuY292ZXJlZCBpbiB0aGlzIGV4YW1wbGU6XCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1iYXNoXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIiMgLXBhICRFUkxfU1NMX1BBVEggcHJlcGVuZHMgdGhlIGRpcmVjdG9yeSBFUkxfU1NMX1BBVEggcG9pbnRzIGF0IHRvIHRoZSBjb2RlIHBhdGhcXHJcXG4jIC1wcm90b19kaXN0IGluZXRfdGxzIHRlbGxzIHRoZSBydW50aW1lIHRvIGVuY3J5cHQgaW50ZXItbm9kZSBjb21tdW5pY2F0aW9uXFxyXFxuIyAtc3NsX2Rpc3Rfb3B0IHNlcnZlcl9jZXJ0ZmlsZSAvcGF0aC90by9jb21iaW5lZF9rZXlzLnBlbSB0ZWxscyB0aGUgcnVudGltZVxcclxcbiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmUgdG8gZmluZCB0aGUgY29tYmluZWQgY2VydGlmaWNhdGUva2V5IGZpbGVcXHJcXG4jIC1zc2xfZGlzdF9vcHQgc2VydmVyX3Bhc3N3b3JkIHBhc3N3b3JkICAgcmVxdWlyZWQgaWYgdGhlIHByaXZhdGUga2V5IGlzIGVuY3J5cHRlZFxcclxcbiMgLXNzbF9kaXN0X29wdCBzZXJ2ZXJfc2VjdXJlX3JlbmVnb3RpYXRlIHRydWUgY2xpZW50X3NlY3VyZV9yZW5lZ290aWF0ZSB0cnVlIGVuYWJsZXMgYW4gYWRkaXRpb25hbCBUTFMgc2V0dGluZzogc2VjdXJlIHJlbmVnb3RpYXRpb25cXHJcXG5TRVJWRVJfQURESVRJT05BTF9FUkxfQVJHUz1cXFwiLXBhICRFUkxfU1NMX1BBVEggXFxcXFxcclxcbiAgLXByb3RvX2Rpc3QgaW5ldF90bHMgXFxcXFxcclxcbiAgLXNzbF9kaXN0X29wdCBzZXJ2ZXJfY2VydGZpbGUgL3BhdGgvdG8vY29tYmluZWRfa2V5cy5wZW0gXFxcXFxcclxcbiAgLXNzbF9kaXN0X29wdCBzZXJ2ZXJfcGFzc3dvcmQgcGFzc3dvcmQgXFxcXFxcclxcbiAgLXNzbF9kaXN0X29wdCBzZXJ2ZXJfc2VjdXJlX3JlbmVnb3RpYXRlIHRydWUgY2xpZW50X3NlY3VyZV9yZW5lZ290aWF0ZSB0cnVlXFxcIlxcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiT25jZSBhIG5vZGUgaGFzIGludGVyLW5vZGUgY29ubmVjdGlvbiBjb25maWd1cmVkIHdpdGggVExTLCBDTEkgdG9vbHMgc3VjaCBhcyBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdG1xY3RsXCJcbiAgICAgIH0pLCBcIiBhbmQgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRtcS1kaWFnbm9zdGljc1wiXG4gICAgICB9KSwgXCJcXHJcXG5hbHNvIG11c3QgdXNlIFRMUyB0byB0YWxrIHRvIHRoZSBub2RlLiBQbGFpbiBUQ1AgY29ubmVjdGlvbnMgd2lsbCBiZSBmYWlsLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhpcyBpcyBkb25lIHZlcnkgc2ltaWxhcmx5IHRvIHdoYXQgdGhlIGV4YW1wbGUgYWJvdmUgZG9lcyB1c2luZyBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIlNFUlZFUl9BRERJVElPTkFMX0VSTF9BUkdTXCJcbiAgICAgIH0pLCBcIiBidXQgdGhpcyB0aW1lXFxyXFxudGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiUkFCQklUTVFfQ1RMX0VSTF9BUkdTXCJcbiAgICAgIH0pLCBcIi4gSXQgY29udHJvbHMgcnVudGltZSBmbGFncyB1c2VkIGJ5IENMSSB0b29scy5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkhlcmUgaXMgdGhlIGNvbXBsZXRlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiL2V0Yy9yYWJiaXRtcS9yYWJiaXRtcS1lbnYuY29uZlwiXG4gICAgICB9KSwgXCIgZmlsZTpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWJhc2hcIixcbiAgICAgICAgY2hpbGRyZW46IFwiIyBJTVBPUlRBTlQ6XFxyXFxuIyB0aGUgZm9sbG93aW5nIHBhdGggaXMgc3lzdGVtIGRlcGVuZGVudCAod2lsbFxcclxcbiMgY2hhbmdlIGRlcGVuZGluZyBvbiB0aGUgRXJsYW5nIHZlcnNpb24sIGRpc3RyaWJ1dGlvbixcXHJcXG4jIGFuZCBpbnN0YWxsYXRpb24gbWV0aG9kIHVzZWQpLiBQbGVhc2UgZG91YmxlIGNoZWNrIGl0IGJlZm9yZSBwcm9jZWVkaW5nIVxcclxcbkVSTF9TU0xfUEFUSD1cXFwiL3Vzci9saWI2NC9lcmxhbmcvbGliL3NzbC05LjQvZWJpblxcXCJcXHJcXG5cXHJcXG4jIC1wYSAkRVJMX1NTTF9QQVRIIHByZXBlbmRzIHRoZSBkaXJlY3RvcnkgRVJMX1NTTF9QQVRIIHBvaW50cyBhdCB0byB0aGUgY29kZSBwYXRoXFxyXFxuIyAtcHJvdG9fZGlzdCBpbmV0X3RscyB0ZWxscyB0aGUgcnVudGltZSB0byBlbmNyeXB0IGludGVyLW5vZGUgY29tbXVuaWNhdGlvblxcclxcbiMgLXNzbF9kaXN0X29wdCBzZXJ2ZXJfY2VydGZpbGUgL3BhdGgvdG8vY29tYmluZWRfa2V5cy5wZW0gdGVsbHMgdGhlIHJ1bnRpbWVcXHJcXG4jICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlIHRvIGZpbmQgdGhlIGNvbWJpbmVkIGNlcnRpZmljYXRlL2tleSBmaWxlXFxyXFxuIyAtc3NsX2Rpc3Rfb3B0IHNlcnZlcl9wYXNzd29yZCBwYXNzd29yZCAgIHJlcXVpcmVkIGlmIHRoZSBwcml2YXRlIGtleSBpcyBlbmNyeXB0ZWRcXHJcXG4jIC1zc2xfZGlzdF9vcHQgc2VydmVyX3NlY3VyZV9yZW5lZ290aWF0ZSB0cnVlIGNsaWVudF9zZWN1cmVfcmVuZWdvdGlhdGUgdHJ1ZSBlbmFibGVzIGFuIGFkZGl0aW9uYWwgVExTIHNldHRpbmc6IHNlY3VyZSByZW5lZ290aWF0aW9uXFxyXFxuU0VSVkVSX0FERElUSU9OQUxfRVJMX0FSR1M9XFxcIi1wYSAkRVJMX1NTTF9QQVRIIFxcXFxcXHJcXG4gIC1wcm90b19kaXN0IGluZXRfdGxzIFxcXFxcXHJcXG4gIC1zc2xfZGlzdF9vcHQgc2VydmVyX2NlcnRmaWxlIC9wYXRoL3RvL2NvbWJpbmVkX2tleXMucGVtIFxcXFxcXHJcXG4gIC1zc2xfZGlzdF9vcHQgc2VydmVyX3Bhc3N3b3JkIHBhc3N3b3JkIFxcXFxcXHJcXG4gIC1zc2xfZGlzdF9vcHQgc2VydmVyX3NlY3VyZV9yZW5lZ290aWF0ZSB0cnVlIGNsaWVudF9zZWN1cmVfcmVuZWdvdGlhdGUgdHJ1ZVxcXCJcXHJcXG5cXHJcXG4jIFNhbWUgc2V0dGluZ3MgYXMgYWJvdmUgYnV0IGZvciBDTEkgdG9vbHNcXHJcXG5SQUJCSVRNUV9DVExfRVJMX0FSR1M9XFxcIi1wYSAkRVJMX1NTTF9QQVRIIFxcXFxcXHJcXG4gIC1wcm90b19kaXN0IGluZXRfdGxzIFxcXFxcXHJcXG4gIC1zc2xfZGlzdF9vcHQgc2VydmVyX2NlcnRmaWxlIC9wYXRoL3RvL2NvbWJpbmVkX2tleXMucGVtIFxcXFxcXHJcXG4gIC1zc2xfZGlzdF9vcHQgc2VydmVyX3Bhc3N3b3JkIHBhc3N3b3JkIFxcXFxcXHJcXG4gIC1zc2xfZGlzdF9vcHQgc2VydmVyX3NlY3VyZV9yZW5lZ290aWF0ZSB0cnVlIGNsaWVudF9zZWN1cmVfcmVuZWdvdGlhdGUgdHJ1ZVxcXCJcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwibGludXgtc3RyYXRlZ3ktdHdvXCIsXG4gICAgICBjaGlsZHJlbjogXCJTdHJhdGVneSBUd28gKFVzaW5nIGEgU2luZ2xlIFRMUyBPcHRpb24gRmlsZSkgb24gTGludXgsIG1hY09TIGFuZCBCU0RcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgzLCB7XG4gICAgICBpZDogXCJzdHJhdGVneS10d28tZmxhZ3NcIixcbiAgICAgIGNoaWxkcmVuOiBcIlVzaW5nIGEgU2VwYXJhdGUgU2V0dGluZyBGaWxlIGZvciBJbnRlci1ub2RlIFRMU1wiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJNb2Rlcm4gRXJsYW5nIHZlcnNpb25zIHN1cHBvcnQgYSBydW50aW1lIGZsYWcsIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiLXNzbF9kaXN0X29wdGZpbGVcIlxuICAgICAgfSksIFwiLFxcclxcbnRoYXQgY2FuIGJlIHVzZWQgdG8gY29uZmlndXJlIFRMUyBmb3IgaW50ZXItbm9kZSBjb21tdW5pY2F0aW9uIHVzaW5nIGEgc2luZ2xlIGZpbGUuXFxyXFxuVGhpcyBzaW1wbGlmaWVzIHRoZSBhcmd1bWVudHMgcGFzc2VkIG9uIHRoZSBjb21tYW5kIGxpbmUgaXRzZWxmLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiSGVyZSBpcyBhIGNvbXBsZXRlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiL2V0Yy9yYWJiaXRtcS9yYWJiaXRtcS1lbnYuY29uZlwiXG4gICAgICB9KSwgXCIgZmlsZSB1c2luZyB0aGlzIHNldHRpbmcuXFxyXFxuTm90ZSB0aGF0IHRoZSBuYW1lIG9mIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIi1zc2xfZGlzdF9vcHRmaWxlXCJcbiAgICAgIH0pLCBcIiBmaWxlIGlzIG5vdCBzaWduaWZpY2FudCBidXRcXHJcXG5pdCBtdXN0IGJlIHN0b3JlZCBpbiBhIGxvY2F0aW9uIHJlYWRhYmxlIGJ5IHRoZSBlZmZlY3RpdmUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRtcVwiXG4gICAgICB9KSwgXCIgdXNlcjpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLWJhc2hcIixcbiAgICAgICAgY2hpbGRyZW46IFwiIyBOT1RFOiB0aGUgZm9sbG93aW5nIHBhdGggaXMgc3lzdGVtIGRlcGVuZGVudCBhbmQgd2lsbCBjaGFuZ2UgYmV0d2VlbiBFcmxhbmdcXHJcXG4jICAgICAgIHZlcnNpb25zXFxyXFxuRVJMX1NTTF9QQVRIPVxcXCIvdXNyL2xpYjY0L2VybGFuZy9saWIvc3NsLTkuNC9lYmluXFxcIlxcclxcblxcclxcbiMgLXBhICRFUkxfU1NMX1BBVEggcHJlcGVuZHMgdGhlIGRpcmVjdG9yeSBFUkxfU1NMX1BBVEggcG9pbnRzIGF0IHRvIHRoZSBjb2RlIHBhdGhcXHJcXG4jIC1wcm90b19kaXN0IGluZXRfdGxzIHRlbGxzIHRoZSBydW50aW1lIHRvIGVuY3J5cHQgaW50ZXItbm9kZSBjb21tdW5pY2F0aW9uXFxyXFxuIyAtc3NsX2Rpc3Rfb3B0ZmlsZSB0ZWxscyB0aGUgcnVudGltZSB3aGVyZSB0byBmaW5kIGl0cyBpbnRlci1ub2RlIFRMUyBjb25maWd1cmF0aW9uIGZpbGVcXHJcXG5TRVJWRVJfQURESVRJT05BTF9FUkxfQVJHUz1cXFwiLXBhICRFUkxfU1NMX1BBVEhcXHJcXG4gIC1wcm90b19kaXN0IGluZXRfdGxzXFxyXFxuICAtc3NsX2Rpc3Rfb3B0ZmlsZSAvZXRjL3JhYmJpdG1xL2ludGVyX25vZGVfdGxzLmNvbmZpZ1xcXCJcXHJcXG5cXHJcXG5SQUJCSVRNUV9DVExfRVJMX0FSR1M9XFxcIi1wYSAkRVJMX1NTTF9QQVRIXFxyXFxuICAtcHJvdG9fZGlzdCBpbmV0X3Rsc1xcclxcbiAgLXNzbF9kaXN0X29wdGZpbGUgL2V0Yy9yYWJiaXRtcS9pbnRlcl9ub2RlX3Rscy5jb25maWdcXFwiXFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJIZXJlIGlzIGFuIGV4YW1wbGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCIvZXRjL3JhYmJpdG1xL2ludGVyX25vZGVfdGxzLmNvbmZpZ1wiXG4gICAgICB9KSwgXCIgZmlsZSB0aGF0IHVzZXNcXHJcXG5zZXBhcmF0ZSBzZXJ2ZXIgY2VydGlmaWNhdGUgYW5kIHByaXZhdGUga2V5IGZpbGVzLCBlbmFibGVzIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL3NzbCNwZWVyLXZlcmlmaWNhdGlvblwiLFxuICAgICAgICBjaGlsZHJlbjogXCJwZWVyIHZlcmlmaWNhdGlvblwiXG4gICAgICB9KSwgXCJcXHJcXG5hbmQgcmVxdWlyZXMgcGVlcnMgdG8gcHJlc2VudCBhIGNlcnRpZmljYXRlOlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtYmFzaFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJbXFxyXFxuICB7c2VydmVyLCBbXFxyXFxuICAgIHtjYWNlcnRmaWxlLCBcXFwiL2Z1bGwvcGF0aC90by9jYV9jZXJ0aWZpY2F0ZS5wZW1cXFwifSxcXHJcXG4gICAge2NlcnRmaWxlLCAgIFxcXCIvZnVsbC9wYXRoL3RvL3NlcnZlcl9jZXJ0aWZpY2F0ZS5wZW1cXFwifSxcXHJcXG4gICAge2tleWZpbGUsICAgIFxcXCIvZnVsbC9wYXRoL3RvL3NlcnZlcl9rZXkucGVtXFxcIn0sXFxyXFxuICAgIHtwYXNzd29yZCwgICBcXFwicGFzc3dvcmQtaWYta2V5ZmlsZS1pcy1lbmNyeXB0ZWRcXFwifSxcXHJcXG4gICAge3NlY3VyZV9yZW5lZ290aWF0ZSwgdHJ1ZX0sXFxyXFxuICAgIHt2ZXJpZnksIHZlcmlmeV9wZWVyfSxcXHJcXG4gICAge2ZhaWxfaWZfbm9fcGVlcl9jZXJ0LCB0cnVlfVxcclxcbiAgXX0sXFxyXFxuICB7Y2xpZW50LCBbXFxyXFxuICAgIHtjYWNlcnRmaWxlLCBcXFwiL2Z1bGwvcGF0aC90by9jYV9jZXJ0aWZpY2F0ZS5wZW1cXFwifSxcXHJcXG4gICAge2NlcnRmaWxlLCAgIFxcXCIvZnVsbC9wYXRoL3RvL2NsaWVudF9jZXJ0aWZpY2F0ZS5wZW1cXFwifSxcXHJcXG4gICAge2tleWZpbGUsICAgIFxcXCIvZnVsbC9wYXRoL3RvL2NsaWVudF9rZXkucGVtXFxcIn0sXFxyXFxuICAgIHtwYXNzd29yZCwgICBcXFwicGFzc3dvcmQtaWYta2V5ZmlsZS1pcy1lbmNyeXB0ZWRcXFwifSxcXHJcXG4gICAge3NlY3VyZV9yZW5lZ290aWF0ZSwgdHJ1ZX0sXFxyXFxuICAgIHt2ZXJpZnksIHZlcmlmeV9wZWVyfVxcclxcbiAgXX1cXHJcXG5dLlxcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhlc2Ugb3B0aW9ucyBhcmUgZG9jdW1lbnRlZCBmdXJ0aGVyIGluIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cDovL2VybGFuZy5vcmcvZG9jL2FwcHMvc3NsL3NzbF9kaXN0cmlidXRpb24uaHRtbFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJFcmxhbmcvT1RQIGRvY3VtZW50YXRpb25cIlxuICAgICAgfSksIFwiLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJ3aW5kb3dzXCIsXG4gICAgICBjaGlsZHJlbjogXCJXaW5kb3dzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJCb3RoIHN0cmF0ZWdpZXMgY292ZXJlZCBhYm92ZSBmb3IgTGludXgsIG1hY09TIGFuZCBCU0Qgc3lzdGVtcyBjYW4gYmUgdXNlZCBvbiBXaW5kb3dzLlxcclxcbkFsbCBmdW5kYW1lbnRhbHMgYXJlIHRoZSBzYW1lLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGVyZSBhcmUsIGhvd2V2ZXIsIHNvbWUgbWlub3IgZGlmZmVyZW5jZXMgc3BlY2lmaWMgdG8gV2luZG93cy5cXHJcXG5GaXJzdCwgdGhlIGNvbW1hbmQgdGhhdCBvdXRwdXRzIHRoZSBsb2NhdGlvbiBvZiB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJpbmV0X3Rsc19kaXN0XCJcbiAgICAgIH0pLCBcIiBtb2R1bGUgaXNcXHJcXG5kaWZmZXJlbnQgZHVlIHRvIFdpbmRvd3Mgc2hlbGwgcGFyc2luZyBydWxlcy4gaXQgbG9va3MgbGlrZSB0aGlzXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1iYXNoXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImVybCAtbm9pbnB1dCAtZXZhbCBcXFwiaW86Zm9ybWF0KFxcXCJcXFwiRVJMX1NTTF9QQVRIPX5zfm5cXFwiXFxcIiwgW2ZpbGVuYW1lOmRpcm5hbWUoY29kZTp3aGljaChpbmV0X3Rsc19kaXN0KSldKVxcXCIgLXMgaW5pdCBzdG9wXFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJOZXh0LCB0aGUgZmlsZSBjb250YWluaW5nIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9jb25maWd1cmUjY3VzdG9taXNlLWVudmlyb25tZW50XCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImN1c3RvbSBlbnZpcm9ubWVudCB2YXJpYWJsZXNcIlxuICAgICAgfSksIFwiXFxyXFxuaXMgbmFtZWQgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRtcS1lbnYtY29uZi5iYXRcIlxuICAgICAgfSksIFwiIG9uIFdpbmRvd3MuIFRoaXMgZmlsZSBcIiwgX2pzeChfY29tcG9uZW50cy5zdHJvbmcsIHtcbiAgICAgICAgY2hpbGRyZW46IFwibXVzdFwiXG4gICAgICB9KSwgXCIgYmUgc2F2ZWQgdG8gdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiJUFwcERhdGElXFxcXFJhYmJpdE1RXCJcbiAgICAgIH0pLCBcIiBkaXJlY3Rvcnkgb2YgdGhlIGFkbWluaXN0cmF0aXZlXFxyXFxudXNlciB0aGF0IGluc3RhbGxlZCBSYWJiaXRNUS5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkhlcmUgaXMgYSBjb21wbGV0ZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInJhYmJpdG1xLWVudi1jb25mLmJhdFwiXG4gICAgICB9KSwgXCIgZmlsZSB1c2luZyB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCItc3NsX2Rpc3Rfb3BmaWxlXCJcbiAgICAgIH0pLCBcIiBzZXR0aW5nIChcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiI2xpbnV4LXN0cmF0ZWd5LXR3b1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJzdHJhdGVneSB0d29cIlxuICAgICAgfSksIFwiIGNvdmVyZWQgYWJvdmUpLlxcclxcbk5vdGUgdGhlIHVzZSBvZiBmb3J3YXJkLXNsYXNoIGRpcmVjdG9yeSBkZWxpbWl0ZXJzLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtUG93ZXJTaGVsbFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJAZWNobyBvZmZcXHJcXG5yZW0gTk9URTogSWYgc3BhY2VzIGFyZSBwcmVzZW50IGluIGFueSBvZiB0aGVzZSBwYXRocyxcXHJcXG5yZW0gZG91YmxlIHF1b3RlcyBtdXN0IGJlIHVzZWQuXFxyXFxuXFxyXFxucmVtIE5PVEU6IHRoZSBmb2xsb3dpbmcgcGF0aCBpcyAqKnN5c3RlbSBkZXBlbmRlbnQqKiBhbmQgd2lsbCB2YXJ5IGJldHdlZW4gRXJsYW5nIHZlcnNpb25zXFxyXFxucmVtICAgICAgIGFuZCBpbnN0YWxsYXRpb24gcGF0aHNcXHJcXG5zZXQgU1NMX1BBVEg9XFxcIkM6L1Byb2dyYW0gRmlsZXMvZXJsMTAuMC4xL2xpYi9zc2wtOS4wL2ViaW5cXFwiXFxyXFxuXFxyXFxucmVtIC1wYSAkRVJMX1NTTF9QQVRIIHByZXBlbmRzIHRoZSBkaXJlY3RvcnkgRVJMX1NTTF9QQVRIIHBvaW50cyBhdCB0byB0aGUgY29kZSBwYXRoXFxyXFxucmVtIC1wcm90b19kaXN0IGluZXRfdGxzIHRlbGxzIHRoZSBydW50aW1lIHRvIGVuY3J5cHQgaW50ZXItbm9kZSBjb21tdW5pY2F0aW9uXFxyXFxucmVtIC1zc2xfZGlzdF9vcHRmaWxlIHRlbGxzIHRoZSBydW50aW1lIHdoZXJlIHRvIGZpbmQgaXRzIGludGVyLW5vZGUgVExTIGNvbmZpZ3VyYXRpb24gZmlsZVxcclxcbnNldCBTRVJWRVJfQURESVRJT05BTF9FUkxfQVJHUz0tcGEgJVNTTF9QQVRIJSBeXFxyXFxuICAgIC1wcm90b19kaXN0IGluZXRfdGxzIF5cXHJcXG4gICAgLXNzbF9kaXN0X29wdGZpbGUgQzovVXNlcnMvcm1xX3VzZXIvQXBwRGF0YS9Sb2FtaW5nL1JhYmJpdE1RL2ludGVyX25vZGVfdGxzLmNvbmZpZ1xcclxcblxcclxcbnJlbSBTYW1lIGFzIGFib3ZlIGJ1dCBmb3IgQ0xJIHRvb2xzXFxyXFxuc2V0IENUTF9FUkxfQVJHUz0tcGEgJVNTTF9QQVRIJSBeXFxyXFxuICAgIC1wcm90b19kaXN0IGluZXRfdGxzIF5cXHJcXG4gICAgLXNzbF9kaXN0X29wdGZpbGUgQzovVXNlcnMvcm1xX3VzZXIvQXBwRGF0YS9Sb2FtaW5nL1JhYmJpdE1RL2ludGVyX25vZGVfdGxzLmNvbmZpZ1xcblwiXG4gICAgICB9KVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiQmVsb3cgaXMgYW4gZXhhbXBsZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImludGVyX25vZGVfdGxzLmNvbmZpZ1wiXG4gICAgICB9KSwgXCIgZmlsZS5cXHJcXG5BcyB3aXRoIG90aGVyIG9wZXJhdGluZyBzeXN0ZW1zLCBtb3JlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL3NzbFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJUTFMgb3B0aW9uc1wiXG4gICAgICB9KSwgXCIgYXJlIGF2YWlsYWJsZVxcclxcbnRvIGJlIHNldCBpZiBuZWNlc3NhcnkuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1iYXNoXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIltcXHJcXG4gICAge3NlcnZlciwgW1xcclxcbiAgICAgICAge2NhY2VydGZpbGUsIFxcXCJDOi9QYXRoL1RvL2NhX2NlcnRpZmljYXRlLnBlbVxcXCJ9LFxcclxcbiAgICAgICAge2NlcnRmaWxlLCBcXFwiQzovUGF0aC9Uby9zZXJ2ZXJfY2VydGlmaWNhdGUucGVtXFxcIn0sXFxyXFxuICAgICAgICB7a2V5ZmlsZSwgXFxcIkM6L1BhdGgvVG8vc2VydmVyX2tleS5wZW1cXFwifSxcXHJcXG4gICAgICAgIHtwYXNzd29yZCwgXFxcInBhc3N3b3JkLWlmLWtleWZpbGUtaXMtZW5jcnlwdGVkXFxcIn0sXFxyXFxuICAgICAgICB7c2VjdXJlX3JlbmVnb3RpYXRlLCB0cnVlfSxcXHJcXG4gICAgICAgIHt2ZXJpZnksIHZlcmlmeV9wZWVyfSxcXHJcXG4gICAgICAgIHtmYWlsX2lmX25vX3BlZXJfY2VydCwgdHJ1ZX1cXHJcXG4gICAgXX0sXFxyXFxuICAgIHtjbGllbnQsIFtcXHJcXG4gICAgICAgIHtjYWNlcnRmaWxlLCBcXFwiQzovUGF0aC9Uby9jYV9jZXJ0aWZpY2F0ZS5wZW1cXFwifSxcXHJcXG4gICAgICAgIHtjZXJ0ZmlsZSwgXFxcIkM6L1BhdGgvVG8vY2xpZW50X2NlcnRpZmljYXRlLnBlbVxcXCJ9LFxcclxcbiAgICAgICAge2tleWZpbGUsIFxcXCJDOi9QYXRoL1RvL2NsaWVudF9rZXkucGVtXFxcIn0sXFxyXFxuICAgICAgICB7cGFzc3dvcmQsIFxcXCJwYXNzd29yZC1pZi1rZXlmaWxlLWlzLWVuY3J5cHRlZFxcXCJ9LFxcclxcbiAgICAgICAge3NlY3VyZV9yZW5lZ290aWF0ZSwgdHJ1ZX0sXFxyXFxuICAgICAgICB7dmVyaWZ5LCB2ZXJpZnlfcGVlcn1cXHJcXG4gICAgXX1cXHJcXG5dLlxcblwiXG4gICAgICB9KVxuICAgIH0pXVxuICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQocHJvcHMgPSB7fSkge1xuICBjb25zdCB7d3JhcHBlcjogTURYTGF5b3V0fSA9IHtcbiAgICAuLi5fcHJvdmlkZUNvbXBvbmVudHMoKSxcbiAgICAuLi5wcm9wcy5jb21wb25lbnRzXG4gIH07XG4gIHJldHVybiBNRFhMYXlvdXQgPyBfanN4KE1EWExheW91dCwge1xuICAgIC4uLnByb3BzLFxuICAgIGNoaWxkcmVuOiBfanN4KF9jcmVhdGVNZHhDb250ZW50LCB7XG4gICAgICAuLi5wcm9wc1xuICAgIH0pXG4gIH0pIDogX2NyZWF0ZU1keENvbnRlbnQocHJvcHMpO1xufVxuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./versioned_docs/version-4.0/clustering-ssl.md\n");

/***/ })

}]);