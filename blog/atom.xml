<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.rabbitmq.com/rabbitmq-website/blog</id>
    <title>RabbitMQ Blog</title>
    <updated>2025-04-24T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.rabbitmq.com/rabbitmq-website/blog"/>
    <subtitle>RabbitMQ Blog</subtitle>
    <icon>https://www.rabbitmq.com/rabbitmq-website/img/rabbitmq-logo.svg</icon>
    <entry>
        <title type="html"><![CDATA[RabbitMQ is not affected by CVE-2025-32433 (an Erlang/OTP CVE)]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/24/rabbitmq-is-not-affected-by-cve-2025-32433</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/24/rabbitmq-is-not-affected-by-cve-2025-32433"/>
        <updated>2025-04-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[RabbitMQ is Not Affected by CVE-2025-32433]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="rabbitmq-is-not-affected-by-cve-2025-32433">RabbitMQ is Not Affected by CVE-2025-32433<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/24/rabbitmq-is-not-affected-by-cve-2025-32433#rabbitmq-is-not-affected-by-cve-2025-32433" class="hash-link" aria-label="Direct link to RabbitMQ is Not Affected by CVE-2025-32433" title="Direct link to RabbitMQ is Not Affected by CVE-2025-32433">​</a></h2>
<p>RabbitMQ is not affected by <a href="https://github.com/erlang/otp/security/advisories/GHSA-37cp-fgq5-7wc2" target="_blank" rel="noopener noreferrer">CVE-2025-32433</a>,
a vulnerability in the Erlang's SSH library. RabbitMQ does not use SSH, neither the server nor the client parts.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="team-rabbitmqs-erlang-packages-do-not-include-ssh">Team RabbitMQ's Erlang Packages Do Not Include SSH<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/24/rabbitmq-is-not-affected-by-cve-2025-32433#team-rabbitmqs-erlang-packages-do-not-include-ssh" class="hash-link" aria-label="Direct link to Team RabbitMQ's Erlang Packages Do Not Include SSH" title="Direct link to Team RabbitMQ's Erlang Packages Do Not Include SSH">​</a></h2>
<p>Team RabbitMQ produces <a href="https://github.com/rabbitmq/erlang-rpm/releases" target="_blank" rel="noopener noreferrer">a zero dependency Erlang RPM</a>
that does not include the SSH library since it is not used. Our <a href="https://github.com/rabbitmq/erlang-debian-package" target="_blank" rel="noopener noreferrer">Debian packages</a> are split into multiple fine-grained components,
and the RabbitMQ installation guide <a href="https://www.rabbitmq.com/docs/install-debian" target="_blank" rel="noopener noreferrer">skips SSH library installation</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="patched-versions-are-available">Patched Versions Are Available<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/24/rabbitmq-is-not-affected-by-cve-2025-32433#patched-versions-are-available" class="hash-link" aria-label="Direct link to Patched Versions Are Available" title="Direct link to Patched Versions Are Available">​</a></h2>
<p>Team RabbitMQ's <a href="https://rabbitmq.com/docs/install-rpm" target="_blank" rel="noopener noreferrer">RPM repositories</a> and <a href="https://www.rabbitmq.com/docs/install-debian" target="_blank" rel="noopener noreferrer">Debian repositories</a> were updated to include Erlang <code>27.3.3</code>, <code>26.2.5.11</code> and <code>25.3.2.20</code>.</p>
<p>For aarch64 (64-bit ARM) RPM packages, see <a href="https://github.com/rabbitmq/erlang-rpm/releases" target="_blank" rel="noopener noreferrer"><code>rabbitmq/erlang-rpm</code> releases</a>.</p>
<p>For aarch64 (64-bit ARM) Debian packages of Erlang <code>26.2.5.11</code>, see <a href="https://launchpad.net/~rabbitmq/+archive/ubuntu/rabbitmq-erlang" target="_blank" rel="noopener noreferrer">this Launchpad repository</a>.</p>
<p>RabbitMQ <a href="https://github.com/docker-library/rabbitmq" target="_blank" rel="noopener noreferrer">community Docker image</a> was also upgraded to Erlang <code>27.3.3</code> and <code>26.2.5.11</code> last week.</p>]]></content>
        <author>
            <name>Michael Klishin</name>
            <uri>https://github.com/michaelklishin</uri>
        </author>
        <category label="security" term="security"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[AMQP 1.0 over WebSocket]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/16/amqp-websocket</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/16/amqp-websocket"/>
        <updated>2025-04-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We are delighted to announce support for AMQP 1.0 over WebSocket in VMware Tanzu RabbitMQ 4.1.]]></summary>
        <content type="html"><![CDATA[<p>We are delighted to announce support for AMQP 1.0 over WebSocket in <a href="https://www.vmware.com/products/app-platform/tanzu-rabbitmq" target="_blank" rel="noopener noreferrer">VMware Tanzu RabbitMQ</a> 4.1.</p>
<p>This feature enables any browser-based application to communicate with RabbitMQ using AMQP 1.0, paving the way for a wide range of efficient browser-based business messaging scenarios.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-websocket">What is WebSocket?<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/16/amqp-websocket#what-is-websocket" class="hash-link" aria-label="Direct link to What is WebSocket?" title="Direct link to What is WebSocket?">​</a></h2>
<p>WebSocket, defined in <a href="https://datatracker.ietf.org/doc/html/rfc6455" target="_blank" rel="noopener noreferrer">RFC 6455</a>, is a simple protocol consisting of two parts:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Client                                   Server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |                                         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |================ Part I =================|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |---- WebSocket Handshake Request -------&gt;|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |       GET /some/path HTTP/1.1           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |       Upgrade: websocket                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |       Connection: Upgrade               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |       Sec-WebSocket-Protocol: amqp      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |                                         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |&lt;-- WebSocket Handshake Response --------|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |       HTTP/1.1 101 Switching Protocols  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |       Upgrade: websocket                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |       Connection: Upgrade               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |       Sec-WebSocket-Protocol: amqp      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |                                         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |================ Part II ================|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |&lt;========= WebSocket Connection ========&gt;|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |        Full-duplex communication        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |                                         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |&lt;---------- Binary Data [AMQP] ---------&gt;|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |&lt;---------- Binary Data [AMQP] ---------&gt;|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |&lt;---------- Binary Data [AMQP] ---------&gt;|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |                 ...                     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |                                         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |----------- Close Frame ----------------&gt;|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |&lt;---------- Close Frame -----------------|</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The first part is the handshake, consisting of an HTTP request and response.
The second part is the data transfer:
a single TCP connection remains open between client and server, allowing either side to push binary data to the other at any time.</p>
<p>In this example, the binary data consists of <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-idp31280" target="_blank" rel="noopener noreferrer">AMQP frames</a> because the client proposed <code>Sec-WebSocket-Protocol: amqp</code> to the server, and the server accepted it.
The <code>Sec-WebSocket-Protocol</code> header specifies the application-level protocol layered over WebSocket.</p>
<p>The protocol stack for this communication looks like this:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|      AMQP         |  Application Layer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    WebSocket      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       TCP         |  Transport Layer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       IP          |  Network Layer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|     Ethernet      |  Link Layer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The WebSocket protocol itself does not dictate the application-layer protocol, allowing for flexibility.
It could support any protocol, including STOMP and MQTT.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-websocket">Why WebSocket?<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/16/amqp-websocket#why-websocket" class="hash-link" aria-label="Direct link to Why WebSocket?" title="Direct link to Why WebSocket?">​</a></h2>
<p>WebSocket provides the following advantages:</p>
<ol>
<li><strong>Browser Compatibility:</strong>
It allows browser-based applications to use application-layer protocols other than HTTP.
For security reasons, browsers restrict JavaScript from opening raw TCP connections to communicate using protocols like AMQP or MQTT.
WebSocket protects against malicious JavaScript running in a browser, therefore enabling secure application-layer communication over the WebSocket layer.</li>
<li><strong>Firewall traversal:</strong>
WebSocket facilitates communication in environments with restrictive firewall rules.
For example, while port 443 (<code>https</code>) may be allowed, port <a href="https://www.rabbitmq.com/rabbitmq-website/docs/networking#ports">5671</a> for <code>amqps</code> might be blocked.
In such cases, a secure WebSocket (<code>wss</code>) connection on port 443 can be used to communicate over AMQP.</li>
</ol>
<p>Modern browsers universally support WebSocket, making it a practical choice for web-based applications.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="websocket-in-rabbitmq">WebSocket in RabbitMQ<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/16/amqp-websocket#websocket-in-rabbitmq" class="hash-link" aria-label="Direct link to WebSocket in RabbitMQ" title="Direct link to WebSocket in RabbitMQ">​</a></h2>
<p>RabbitMQ has long supported <a href="https://www.rabbitmq.com/rabbitmq-website/docs/web-stomp">STOMP over WebSocket</a> and <a href="https://www.rabbitmq.com/rabbitmq-website/docs/web-mqtt">MQTT over WebSocket</a> through the <code>rabbitmq_web_stomp</code> and <code>rabbitmq_web_mqtt</code> plugins, respectively.</p>
<p>VMware Tanzu RabbitMQ 4.1 introduces the new <code>rabbitmq_web_amqp</code> plugin, compliant with the <a href="https://docs.oasis-open.org/amqp-bindmap/amqp-wsb/v1.0/cs01/amqp-wsb-v1.0-cs01.html" target="_blank" rel="noopener noreferrer">AMQP WebSocket Binding Committee Specification 01</a>.
This plugin operates similarly to the existing WebSocket plugins, starting a listener to manage WebSocket protocol aspects.</p>
<p>Previously, browser-based applications connected to RabbitMQ using MQTT or STOMP over WebSocket, often due to the lack of AMQP support.
AMQP over WebSocket brings the following benefits:</p>
<ul>
<li><strong>Feature Richness:</strong>
Unlike MQTT and STOMP which are designed for simplicity, AMQP is a protocol designed for business messaging supporting more advanced features.</li>
<li><strong>Efficiency</strong>:
AMQP is binary and efficient, whereas STOMP is text-oriented.</li>
</ul>
<p>This makes AMQP over WebSocket an excellent choice for efficient, feature-rich browser-based business messaging.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="websocket-relay">WebSocket Relay<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/16/amqp-websocket#websocket-relay" class="hash-link" aria-label="Direct link to WebSocket Relay" title="Direct link to WebSocket Relay">​</a></h2>
<p>Before this plugin, a workaround involved using a WebSocket relay.
A relay would accept WebSocket connections from clients and open separate TCP connections to RabbitMQ.
While functional, this approach introduced downsides such as:</p>
<ol>
<li>Additional latency from the extra network hop.</li>
<li>Increased resource usage to maintain two TCP connections per client.</li>
<li>Operational overhead for deploying and monitoring the relay.</li>
<li>An additional potential point of failure.</li>
</ol>
<p>The new plugin eliminates these issues by providing direct AMQP over WebSocket support.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="example">Example<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/16/amqp-websocket#example" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h2>
<p>RabbitMQ includes plugins <code>rabbitmq_web_stomp_examples</code> and <code>rabbitmq_web_mqtt_examples</code> with basic examples called <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2012/05/14/introducing-rabbitmq-web-stomp#the-usage">"echo" and "bunny"</a>.
Similarly, VMware Tanzu RabbitMQ 4.1 introduces <code>rabbitmq_web_amqp_examples</code>.</p>
<p>The AMQP over WebSocket "bunny" example works as follows:</p>
<ol>
<li>The <code>rabbitmq_web_amqp_examples</code> plugin creates a <a href="https://www.rabbitmq.com/rabbitmq-website/docs/streams">stream</a> named <code>amq.web_amqp_examples.bunny</code>.</li>
<li>When visiting <code>http://localhost:15670/web-amqp-examples/bunny.html</code>, the plugin serves files <code>bunny.html</code>, <code>bunny.png</code>, and <code>rhea.js</code>.
The <code>bunny.html</code> file displays the <code>bunny.png</code>.
Additionally, the <code>bunny.html</code> file contains JavaScript code which creates an AMQP over WebSocket connection from the browser to RabbitMQ:</li>
</ol>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// default AMQP over WebSocket port and path in RabbitMQ</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> url </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ws://"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">hostname</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">":15678/ws"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> ws </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> client</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">websocket_connect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">WebSocket</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> connection </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> client</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">connect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string-property property" style="color:#36acaa">"connection_details"</span><span class="token operator" style="color:#393A34">:</span><span class="token function" style="color:#d73a49">ws</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"amqp"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Setting username without password causes rhea to use SASL mechanism ANONYMOUS.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string-property property" style="color:#36acaa">"username"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ignored"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This code snippet uses the <code>rhea.js</code> file.
<a href="https://github.com/amqp/rhea" target="_blank" rel="noopener noreferrer">rhea</a> is an open source AMQP 1.0 TypeScript/JavaScript library.
This single file can be created by running the following commands in the root directory of the <code>rhea</code> repository:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">make</span><span class="token plain"> browserify</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Not only did the browser open an AMQP over WebSocket connection, but it also created a <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#section-sessions" target="_blank" rel="noopener noreferrer">session</a> and <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#section-links" target="_blank" rel="noopener noreferrer">links</a> to/from the pre-declared stream:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> address </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/queues/"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> stream</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">client</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"connection_open"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">context</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sender </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">connection</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">open_sender</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">address</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// If we open a new brower tab, we want to see the existing drawing.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> filter </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string-property property" style="color:#36acaa">'my-filter'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> amqp_types</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">wrap_described</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"first"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rabbitmq:stream-offset-spec"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">connection</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">open_receiver</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">source</span><span class="token operator" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">address</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">filter</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> filter</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p></p><figure><img decoding="async" loading="lazy" alt="AMQP over WebSocket connection" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/web-amqp-connection-2183f67ea4970cc2f168aefd49361ae8.png" width="3046" height="2198" class="img_ev3q"><figcaption>AMQP over WebSocket connection</figcaption></figure><p></p>
<ol start="3">
<li>If you open a second browser tab at the same URL, it also creates an AMQP over WebSocket connection publishing to and consuming from the same stream.</li>
<li>When you draw on either of the two browser tabs, the other tab sees the live drawing because both tabs consume from the same stream:</li>
</ol>
<p></p><figure><img decoding="async" loading="lazy" alt="Bunny Example" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/amqp-bunnies-19369c48b6c4c151d3506c3e0e4590a1.png" width="3570" height="1450" class="img_ev3q"><figcaption>Bunny Example</figcaption></figure><p></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="clients">Clients<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/16/amqp-websocket#clients" class="hash-link" aria-label="Direct link to Clients" title="Direct link to Clients">​</a></h2>
<p>As of RabbitMQ 4.1, the following <a href="https://www.rabbitmq.com/rabbitmq-website/client-libraries/amqp-client-libraries">RabbitMQ AMQP 1.0 client libraries</a> are available:</p>
<ol>
<li><a href="https://github.com/rabbitmq/rabbitmq-amqp-java-client" target="_blank" rel="noopener noreferrer">RabbitMQ AMQP 1.0 <strong>Java</strong> client</a></li>
<li><a href="https://github.com/rabbitmq/rabbitmq-amqp-dotnet-client" target="_blank" rel="noopener noreferrer">RabbitMQ AMQP 1.0 <strong>.NET</strong> client</a></li>
<li><a href="https://github.com/rabbitmq/rabbitmq-amqp-go-client" target="_blank" rel="noopener noreferrer">RabbitMQ AMQP 1.0 <strong>Go</strong> client</a></li>
<li><a href="https://github.com/rabbitmq/rabbitmq-amqp-python-client" target="_blank" rel="noopener noreferrer">RabbitMQ AMQP 1.0 <strong>Python</strong> client</a></li>
</ol>
<p>Some of these libraries are in the early stages of development.</p>
<p>The full benefit of the new AMQP over WebSocket plugin will be realised with a RabbitMQ AMQP 1.0 <strong>JavaScript</strong> library because as explained in the <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp#rabbitmq-amqp-10-clients">Native AMQP 1.0</a> blog post, these RabbitMQ specific wrappers allow to declare <a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#exchanges">exchanges</a>, <a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#queues">queues</a>, and <a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#bindings">bindings</a>.</p>
<p>Since as of RabbitMQ 4.1 no such RabbitMQ specific JavaScript library is available yet, for the time being, existing JavaScript AMQP 1.0 clients such as <a href="https://github.com/amqp/rhea" target="_blank" rel="noopener noreferrer">rhea</a> can be used instead.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-up">Wrapping up<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/16/amqp-websocket#wrapping-up" class="hash-link" aria-label="Direct link to Wrapping up" title="Direct link to Wrapping up">​</a></h2>
<p>VMware Tanzu RabbitMQ 4.1 enables browsers to communicate with RabbitMQ using AMQP 1.0.</p>
<p>Please note: the new AMQP over WebSocket plugin is a closed-source feature available exclusively in the commercial <a href="https://www.vmware.com/products/app-platform/tanzu-rabbitmq" target="_blank" rel="noopener noreferrer">VMware Tanzu RabbitMQ</a> offering.
It is not part of the open source RabbitMQ distribution.</p>
<p>While this blog post illustrated the feature with a playful example involving a bunny, AMQP 1.0 is an efficient protocol built for business messaging.
Think of enterprise tools like Salesforce, Workday, or Jira - all running in the browser and benefiting from real-time messaging.</p>]]></content>
        <author>
            <name>David Ansari</name>
            <uri>https://github.com/ansd</uri>
        </author>
        <category label="AMQP 1.0" term="AMQP 1.0"/>
        <category label="Web Messaging" term="Web Messaging"/>
        <category label="RabbitMQ 4.1" term="RabbitMQ 4.1"/>
        <category label="New Features" term="New Features"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[RabbitMQ 4.1.0 is released]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released"/>
        <updated>2025-04-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[RabbitMQ 4.1.0 is]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.1.0" target="_blank" rel="noopener noreferrer">RabbitMQ <code>4.1.0</code></a> is
a new minor release that includes <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/08/4.1-performance-improvements">multiple performance improvements</a>,
and a number of features such as thew <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/04/new-k8s-peer-discovery">new peer discovery mechanism for Kubernetes</a>.</p>
<p>See Compatibility Notes below to learn about <strong>breaking or potentially breaking changes</strong> in this release.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="highlights">Highlights<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#highlights" class="hash-link" aria-label="Direct link to Highlights" title="Direct link to Highlights">​</a></h2>
<p>Some key improvements in this release are listed below.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="quorum-queue-throughput-and-parallelism-improvements">Quorum Queue Throughput and Parallelism Improvements<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#quorum-queue-throughput-and-parallelism-improvements" class="hash-link" aria-label="Direct link to Quorum Queue Throughput and Parallelism Improvements" title="Direct link to Quorum Queue Throughput and Parallelism Improvements">​</a></h3>
<p>Quorum queue log reads are now offloaded to channels (sessions, connections).</p>
<p>In practical terms this means improved consumer throughput, lower interference of publishers
on queue delivery rate to consumers, and improved CPU core utilization by each quorum queue
(assuming there are enough cores available to the node).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="initial-support-for-amqp-10-filter-expressions">Initial Support for AMQP 1.0 Filter Expressions<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#initial-support-for-amqp-10-filter-expressions" class="hash-link" aria-label="Direct link to Initial Support for AMQP 1.0 Filter Expressions" title="Direct link to Initial Support for AMQP 1.0 Filter Expressions">​</a></h3>
<p>Support for the <code>properties</code> and <code>application-properties</code> filters of <a href="https://groups.oasis-open.org/higherlogic/ws/public/document?document_id=66227" target="_blank" rel="noopener noreferrer">AMQP Filter Expressions Version 1.0 Working Draft 09</a>.</p>
<p>As described in the <a href="https://www.rabbitmq.com/blog/2024/12/13/amqp-filter-expressions" target="_blank" rel="noopener noreferrer">AMQP 1.0 Filter Expressions</a> blog post,
this feature enables multiple concurrent clients each consuming only a subset of messages from a stream while maintaining message order.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="feature-flags-quality-of-life-improvements">Feature Flags Quality of Life Improvements<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#feature-flags-quality-of-life-improvements" class="hash-link" aria-label="Direct link to Feature Flags Quality of Life Improvements" title="Direct link to Feature Flags Quality of Life Improvements">​</a></h3>
<p>Graduated (mandatory) <a href="https://www.rabbitmq.com/docs/feature-flags" target="_blank" rel="noopener noreferrer">feature flags</a> several minors ago has proven that they could use some user experience improvements.
For example, certain required feature flags will now be enabled on node boot when all nodes in the cluster support them.</p>
<p>See core server changes below as well as the <a href="https://github.com/orgs/rabbitmq/projects/4/views/1" target="_blank" rel="noopener noreferrer">GitHub project dedicated to feature flags improvements</a>
for the complete list of related changes.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="rabbitmqadmin-v2">rabbitmqadmin v2<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#rabbitmqadmin-v2" class="hash-link" aria-label="Direct link to rabbitmqadmin v2" title="Direct link to rabbitmqadmin v2">​</a></h3>
<p><a href="https://www.rabbitmq.com/rabbitmq-website/docs/management-cli"><code>rabbitmqadmin</code> v2</a> is a major revision of the
original CLI client for the RabbitMQ HTTP API.</p>
<p>It supports a much broader set of operations, including health checks, operations
on federation upstreams, shovels, transformations of exported definitions,
(some) Tanzu RabbitMQ HTTP API endpoints, <code>--long-option</code> and subcommand inference in interactive mode,
and more.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="breaking-changes-and-compatibility-notes">Breaking Changes and Compatibility Notes<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#breaking-changes-and-compatibility-notes" class="hash-link" aria-label="Direct link to Breaking Changes and Compatibility Notes" title="Direct link to Breaking Changes and Compatibility Notes">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="initial-amqp-0-9-1-maximum-frame-size">Initial AMQP 0-9-1 Maximum Frame Size<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#initial-amqp-0-9-1-maximum-frame-size" class="hash-link" aria-label="Direct link to Initial AMQP 0-9-1 Maximum Frame Size" title="Direct link to Initial AMQP 0-9-1 Maximum Frame Size">​</a></h3>
<p>Before a client connection can negotiate a maximum frame size (<code>frame_max</code>), it must authenticate
successfully. Before the authenticated phase, a special lower <code>frame_max</code> value
is used.</p>
<p>With this release, the value was increased from the original 4096 bytes to 8192
to accommodate larger <a href="https://www.rabbitmq.com/docs/oauth2" target="_blank" rel="noopener noreferrer">JWT tokens</a>.</p>
<p>Clients that do override <code>frame_max</code> now must use values of 8192 bytes or greater.
We recommend using the default server value of <code>131072</code>: do not override the <code>frame_max</code>
key in <code>rabbitmq.conf</code> and do not set it in the application code.</p>
<p><a href="https://github.com/amqp-node/amqplib/" target="_blank" rel="noopener noreferrer"><code>amqplib</code></a> is a popular client library that has been using
a low <code>frame_max</code> default of <code>4096</code>. Its users must <a href="https://github.com/amqp-node/amqplib/blob/main/CHANGELOG.md#v0107" target="_blank" rel="noopener noreferrer">upgrade to a compatible version</a>
(starting with <code>0.10.7</code>) or explicitly use a higher <code>frame_max</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mqtt">MQTT<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#mqtt" class="hash-link" aria-label="Direct link to MQTT" title="Direct link to MQTT">​</a></h3>
<ul>
<li>
<p>The default MQTT <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901086" target="_blank" rel="noopener noreferrer">Maximum Packet Size</a> changed from 256 MiB to 16 MiB.</p>
<p>This default can be overridden by <a href="https://www.rabbitmq.com/docs/configure#config-file" target="_blank" rel="noopener noreferrer">configuring</a> <code>mqtt.max_packet_size_authenticated</code>.
Note that this value must not be greater than <code>max_message_size</code> (which also defaults to 16 MiB).</p>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="etcd-peer-discovery">etcd Peer Discovery<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#etcd-peer-discovery" class="hash-link" aria-label="Direct link to etcd Peer Discovery" title="Direct link to etcd Peer Discovery">​</a></h3>
<p>The following <code>rabbitmq.conf</code> settings are unsupported:</p>
<ul>
<li><code>cluster_formation.etcd.ssl_options.fail_if_no_peer_cert</code></li>
<li><code>cluster_formation.etcd.ssl_options.dh</code></li>
<li><code>cluster_formation.etcd.ssl_options.dhfile</code></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="erlangotp-compatibility-notes">Erlang/OTP Compatibility Notes<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#erlangotp-compatibility-notes" class="hash-link" aria-label="Direct link to Erlang/OTP Compatibility Notes" title="Direct link to Erlang/OTP Compatibility Notes">​</a></h2>
<p>This release <a href="https://www.rabbitmq.com/rabbitmq-website/docs/which-erlang">requires Erlang 26.2</a> and supports Erlang 27.x.</p>
<p><a href="https://www.rabbitmq.com/rabbitmq-website/docs/which-erlang#erlang-repositories">Provisioning Latest Erlang Releases</a> explains
what package repositories and tools can be used to provision latest patch versions of Erlang 26.x and 27.x.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="release-artifacts">Release Artifacts<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#release-artifacts" class="hash-link" aria-label="Direct link to Release Artifacts" title="Direct link to Release Artifacts">​</a></h2>
<p>Artifacts for preview releases are distributed via GitHub releases:</p>
<ul>
<li>In main repository, <a href="https://github.com/rabbitmq/rabbitmq-server/releases" target="_blank" rel="noopener noreferrer"><code>rabbitmq/rabbitmq-server</code></a></li>
<li>In the development builds repository, <a href="https://github.com/rabbitmq/server-packages/releases" target="_blank" rel="noopener noreferrer"><code>rabbitmq/server-packages</code></a></li>
</ul>
<p>There is a <code>4.1.0</code> preview version of the <a href="https://github.com/docker-library/rabbitmq" target="_blank" rel="noopener noreferrer">community RabbitMQ image</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="upgrading-to-410">Upgrading to 4.1.0<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#upgrading-to-410" class="hash-link" aria-label="Direct link to Upgrading to 4.1.0" title="Direct link to Upgrading to 4.1.0">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="documentation-guides-on-upgrades">Documentation guides on upgrades<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#documentation-guides-on-upgrades" class="hash-link" aria-label="Direct link to Documentation guides on upgrades" title="Direct link to Documentation guides on upgrades">​</a></h3>
<p>See the <a href="https://www.rabbitmq.com/docs/upgrade" target="_blank" rel="noopener noreferrer">Upgrading guide</a> for documentation on upgrades and <a href="https://github.com/rabbitmq/rabbitmq-server/releases" target="_blank" rel="noopener noreferrer">GitHub releases</a>
for release notes of individual releases.</p>
<p>This release series supports upgrades from <code>4.0.x</code> and <code>3.13.x</code>.</p>
<p><a href="https://www.rabbitmq.com/docs/blue-green-upgrade" target="_blank" rel="noopener noreferrer">Blue/Green Deployment</a>-style upgrades are avaialble for migrations
from RabbitMQ <code>3.12.x</code> series.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-required-feature-flags">New Required Feature Flags<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#new-required-feature-flags" class="hash-link" aria-label="Direct link to New Required Feature Flags" title="Direct link to New Required Feature Flags">​</a></h3>
<p>None. The required feature flag set is the same as in <code>4.0.x</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mixed-version-cluster-compatibility">Mixed version cluster compatibility<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#mixed-version-cluster-compatibility" class="hash-link" aria-label="Direct link to Mixed version cluster compatibility" title="Direct link to Mixed version cluster compatibility">​</a></h3>
<p>RabbitMQ 4.1.0 nodes can run alongside <code>4.0.x</code> nodes. <code>4.1.x</code>-specific features can only be made available when all nodes in the cluster
upgrade to 4.1.0 or a later patch release in the new series.</p>
<p>While operating in mixed version mode, some aspects of the system may not behave as expected. The list of known behavior changes will be covered in future updates.
Once all nodes are upgraded to 4.1.0, these irregularities will go away.</p>
<p>Mixed version clusters are a mechanism that allows rolling upgrade and are not meant to be run for extended
periods of time (no more than a few hours).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recommended-post-upgrade-procedures">Recommended Post-upgrade Procedures<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#recommended-post-upgrade-procedures" class="hash-link" aria-label="Direct link to Recommended Post-upgrade Procedures" title="Direct link to Recommended Post-upgrade Procedures">​</a></h3>
<p>This version does not require any additional post-upgrade procedures
compared to other versions.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="release-artifacts-1">Release Artifacts<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#release-artifacts-1" class="hash-link" aria-label="Direct link to Release Artifacts" title="Direct link to Release Artifacts">​</a></h2>
<p>Release artifacts can be obtained on <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.9" target="_blank" rel="noopener noreferrer">GitHub</a>
as well as <a href="https://www.rabbitmq.com/docs/install-rpm" target="_blank" rel="noopener noreferrer">RPM</a>, <a href="https://www.rabbitmq.com/docs/install-debian" target="_blank" rel="noopener noreferrer">Debian</a> package repositories.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="community-support-now-only-covers-the-41x-series">Community Support Now Only Covers the 4.1.x Series<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released#community-support-now-only-covers-the-41x-series" class="hash-link" aria-label="Direct link to Community Support Now Only Covers the 4.1.x Series" title="Direct link to Community Support Now Only Covers the 4.1.x Series">​</a></h2>
<p>With the release of <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.1.0" target="_blank" rel="noopener noreferrer">RabbitMQ <code>4.1.0</code></a>, this series is
no longer covered by <a href="https://www.rabbitmq.com/rabbitmq-website/release-information">community support</a>.</p>
<p>Future <code>4.0.x</code> releases will only be available to <a href="https://www.rabbitmq.com/rabbitmq-website/contact">paying customers</a>
via the Broadcom customer portal.</p>
<p>All non-paying users must <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.1.0" target="_blank" rel="noopener noreferrer">upgrade to <code>4.1.0</code></a>
in order to be covered by community support from the core team.</p>]]></content>
        <author>
            <name>Michael Klishin</name>
            <uri>https://github.com/michaelklishin</uri>
        </author>
        <category label="Releases" term="Releases"/>
        <category label="RabbitMQ 4.1" term="RabbitMQ 4.1"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[RabbitMQ 4.0.9 is released]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/14/rabbitmq-4.0.9-is-released</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/14/rabbitmq-4.0.9-is-released"/>
        <updated>2025-04-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[RabbitMQ 4.0.9 is]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.9" target="_blank" rel="noopener noreferrer">RabbitMQ <code>4.0.9</code></a> is
a new patch release in the <code>4.0.x</code> series.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="release-artifacts">Release Artifacts<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/14/rabbitmq-4.0.9-is-released#release-artifacts" class="hash-link" aria-label="Direct link to Release Artifacts" title="Direct link to Release Artifacts">​</a></h2>
<p>Release artifacts can be obtained on <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.9" target="_blank" rel="noopener noreferrer">GitHub</a>
as well as <a href="https://www.rabbitmq.com/rabbitmq-website/docs/install-rpm">RPM</a>, <a href="https://www.rabbitmq.com/rabbitmq-website/docs/install-debian">Debian</a> package repositories.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="community-support-now-only-covers-the-41x-series">Community Support Now Only Covers the 4.1.x Series<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/14/rabbitmq-4.0.9-is-released#community-support-now-only-covers-the-41x-series" class="hash-link" aria-label="Direct link to Community Support Now Only Covers the 4.1.x Series" title="Direct link to Community Support Now Only Covers the 4.1.x Series">​</a></h2>
<p>With the release of <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released">RabbitMQ <code>4.1.0</code></a>, this series is
no longer covered by <a href="https://www.rabbitmq.com/release-information" target="_blank" rel="noopener noreferrer">community support</a>.</p>
<p>Future <code>4.0.x</code> releases will only be available to <a href="https://www.rabbitmq.com/rabbitmq-website/contact">paying customers</a>
via the Broadcom customer portal.</p>
<p>All non-paying users must <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.1.0" target="_blank" rel="noopener noreferrer">upgrade to <code>4.1.0</code></a>
in order to be covered by community support from the core team.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="upgrade-guidance">Upgrade Guidance<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/14/rabbitmq-4.0.9-is-released#upgrade-guidance" class="hash-link" aria-label="Direct link to Upgrade Guidance" title="Direct link to Upgrade Guidance">​</a></h2>
<p>If <a href="https://www.rabbitmq.com/docs/upgrade" target="_blank" rel="noopener noreferrer">upgrading</a> from a version prior to 4.0, please consult
the <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.1" target="_blank" rel="noopener noreferrer"><code>4.0</code> release notes</a>.</p>]]></content>
        <author>
            <name>Michael Klishin</name>
            <uri>https://github.com/michaelklishin</uri>
        </author>
        <category label="Releases" term="Releases"/>
        <category label="RabbitMQ 4.0" term="RabbitMQ 4.0"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[RabbitMQ 4.1 Performance Improvements]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/08/4.1-performance-improvements</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/08/4.1-performance-improvements"/>
        <updated>2025-04-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[RabbitMQ 4.1 is around the corner (update: has been released)]]></summary>
        <content type="html"><![CDATA[<p>RabbitMQ 4.1 <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/15/rabbitmq-4.1.0-is-released">is around the corner</a> (update: has been released)
and, as usual, apart from new features, we have made some internal changes that should provide better performance.</p>
<p>There are at least 4 notable changes:</p>
<ol>
<li>Lower and more stable memory usage for quorum queues</li>
<li>Much better performance when consuming a long quorum queue</li>
<li>Better performance for Websocket connections</li>
<li>Lower memory usage and/or higher throughput for TCP connections</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="quorum-queues-lower-memory-usage">Quorum Queues: Lower Memory Usage<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/08/4.1-performance-improvements#quorum-queues-lower-memory-usage" class="hash-link" aria-label="Direct link to Quorum Queues: Lower Memory Usage" title="Direct link to Quorum Queues: Lower Memory Usage">​</a></h2>
<p>Quorum queues in RabbitMQ 4.1 should use less memory in many situations. As you may be aware,
<a href="https://www.rabbitmq.com/rabbitmq-website/docs/4.0/quorum-queues#how-memory-wal-and-segments-files-interact">in the past quorum queues had a sawtooth-like memory usage pattern</a>.
They would fill up an in-memory buffer (cache) for recent <a href="https://raft.github.io/" target="_blank" rel="noopener noreferrer">Raft</a> operations and once full,
the buffer was emptied and then filled up again.</p>
<p>In RabbitMQ 4.1, these entries are deleted much more frequently, leading to a more stable memory usage
under many conditions. Here's the memory usage of a cluster initially running 4.0 and then upgraded
to 4.1:</p>
<p></p><figure><img decoding="async" loading="lazy" alt="Memory usage of a cluster before/after upgrading from 4.0 to 4.1" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/qq-memory-usage-94f1748d6a2ab574ee67845844d9de36.png" width="4066" height="1992" class="img_ev3q"><figcaption>Memory usage of a cluster before/after upgrading from 4.0 to 4.1</figcaption></figure><p></p>
<p>The exact details of the workload are not super important, since this difference should be visible
for many different workloads, but for completeness, here they are:</p>
<ul>
<li>there were 10 quorum queues</li>
<li>all messages were 1kb in size</li>
<li>each queue received 500 messages per second from a single publisher (so 5000 messages per second total for all queues)</li>
<li>each queue had a single consumer (a vast majority of messages was consumed within 10 milliseconds since being published)</li>
<li>the queues were effectively empty, since all messages were promptly consumed</li>
</ul>
<p>It's worth remembering that such a low and stable memory usage cannot be expected
in all conditions. For example, <a href="https://www.rabbitmq.com/blog/2025/01/17/how-are-the-messages-stored#message-metadata" target="_blank" rel="noopener noreferrer">quorum queues keep metadata about messages in the queue in memory</a>
and therefore, if you have
many messages in the queues (messages are not immediately consumed), this metadata will
consume memory. There are also other factors and in-memory structures that will grow based on the workload.
Nevertheless, memory usage should be lower and less spiky in many common situations.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="quorum-queues-offloading-disk-reads">Quorum Queues: Offloading Disk Reads<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/08/4.1-performance-improvements#quorum-queues-offloading-disk-reads" class="hash-link" aria-label="Direct link to Quorum Queues: Offloading Disk Reads" title="Direct link to Quorum Queues: Offloading Disk Reads">​</a></h2>
<p>Let's consider a completely different workload - one where messages accumulate in the queues
and then consumers need to catch up to empty the queues. Historically, quorum queues could get overwhelmed
by an influx of consumers, especially if the messages were large and consumers requested a lot of them
(either they had a large prefetch buffer or there were a lot of consumers, or both).
In this scenario, the queue could get so busy reading the older messages from disk (to dispatch them to the consumers)
that publishers had to wait quite a bit to have their messages accepted by the queue.</p>
<p>In RabbitMQ 4.1, such disk reads are offloaded to the AMQP 0.9.1 channel or AMQP 1.0 session processes
(based on the protocol used). The queue has much less work to do and can keep serving
the publishers.</p>
<p>Let's take a look at the differences in publishing and consumption rates between 4.0 and 4.1:</p>
<p></p><figure><img decoding="async" loading="lazy" alt="Influx of consumers, 4.0 to 4.1" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/qq-disk-read-offload-f6233b4fe7a209a5dcb218b1b55b1ad0.png" width="2026" height="1220" class="img_ev3q"><figcaption>Influx of consumers, 4.0 to 4.1</figcaption></figure><p></p>
<p>Here's what's going on in this graph:</p>
<ol>
<li>We have two clusters running, 4.0 (green lines) and 4.1 (yellow)</li>
<li>Both clusters receive ~6000 messages per second, each message is 20kb</li>
<li>Initially, there are no consumers; hence, the consumption rate is zero</li>
<li>After some time, consumers start and try to consume messages</li>
<li>In each environment, there are are now 10 consumers, each with a 300 message prefetch buffer</li>
<li>4.0 environment is overwhelmed - the publishing rate drops to just ~100 messages per second</li>
<li>Meanwhile, 4.1 environment continues serving the publishers with no noticeable impact</li>
<li>Additionally, the consumption rate is almost double in the 4.1 environment</li>
<li>Once the backlog of messages is consumed, both environments can handle ~7000 messages per second in and out</li>
</ol>
<p>Not only are the publishers not throttled, but the consumers are also able to consume the messages much faster!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="better-performance-of-websocket-connections">Better Performance of WebSocket Connections<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/08/4.1-performance-improvements#better-performance-of-websocket-connections" class="hash-link" aria-label="Direct link to Better Performance of WebSocket Connections" title="Direct link to Better Performance of WebSocket Connections">​</a></h2>
<p>To serve HTTP connections, RabbitMQ uses a popular Erlang HTTP server called <a href="https://github.com/ninenines/cowboy" target="_blank" rel="noopener noreferrer">Cowboy</a>
(developed by <a href="https://github.com/essen" target="_blank" rel="noopener noreferrer">Loïc Hoguin</a> long before he joined the RabbitMQ team).
RabbitMQ 4.1 upgrades Cowboy to version 2.13.0, which <a href="https://ninenines.eu/articles/cowboy-2.13.0-performance/" target="_blank" rel="noopener noreferrer">significantly improves WebSocket
performance</a> for all systems that rely on Cowboy,
including RabbitMQ. Upgrading to RabbitMQ 4.1 should therefore be particularly beneficial to anyone using
<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/16/amqp-websocket">AMQP</a>, <a href="https://www.rabbitmq.com/docs/web-mqtt" target="_blank" rel="noopener noreferrer">MQTT</a> or <a href="https://www.rabbitmq.com/docs/web-stomp" target="_blank" rel="noopener noreferrer">STOMP</a> over WebSocket.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tcp-buffer-auto-tuning">TCP Buffer Auto-Tuning<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/08/4.1-performance-improvements#tcp-buffer-auto-tuning" class="hash-link" aria-label="Direct link to TCP Buffer Auto-Tuning" title="Direct link to TCP Buffer Auto-Tuning">​</a></h2>
<p>A key improvement described in
<a href="https://ninenines.eu/articles/cowboy-2.13.0-performance/" target="_blank" rel="noopener noreferrer">Cowboy 2.13.0 release blog post</a>
is the dynamic TCP buffer auto-tuning. For WebSocket connections, these improvements
in Cowboy automatically benefit RabbitMQ users, since Cowboy handles HTTP connections to RabbitMQ.</p>
<p>In RabbitMQ 4.1, we incorporated the same TCP buffer auto-tuning mechanism into the AMQP listener,
which is a completely separate code path and does not
use Cowboy (since Cowboy is an HTTP server). Thanks to this work, RabbitMQ should use less memory for AMQP
0.9.1 and 1.0 connections, without a noticeable performance penalty. The amount of memory saved depends on
your current buffer size and the number of connections, but in our tests it saved a few hundred megabytes
of memory in a system with a few thousand connections.</p>
<p>It's worth pointing out that the buffer discussed in this paragraph is a user-space buffer and should
not be confused with <code>recbuf</code> / <code>sndbuf</code> buffers which are kernel buffers. These can be
<a href="https://www.rabbitmq.com/docs/networking#tuning-for-throughput-tcp-buffers" target="_blank" rel="noopener noreferrer">statically configured</a>
and if they are not, they are auto-tuned by the Linux kernel (the behaviour on other operating systems
may differ).</p>
<p>The value of <code>tcp_listen_options.buffer</code>, which used to control the size of the now auto-tuned buffer,
is ignored.</p>]]></content>
        <author>
            <name>Michał Kuratczyk</name>
            <uri>https://github.com/mkuratczyk</uri>
        </author>
        <category label="Announcements" term="Announcements"/>
        <category label="performance" term="performance"/>
        <category label="RabbitMQ 4.1" term="RabbitMQ 4.1"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[RabbitMQ 4.1: New Kubernetes Peer Discovery Mechanism]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/04/new-k8s-peer-discovery</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/04/new-k8s-peer-discovery"/>
        <updated>2025-04-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[RabbitMQ 4.1 includes a completely redesigned peer discovery plugin for Kubernetes.]]></summary>
        <content type="html"><![CDATA[<p>RabbitMQ 4.1 includes a completely redesigned peer discovery plugin for Kubernetes.
No configuration changes should be needed when upgrading to 4.1, so if you want,
you can just stop reading here. If you are interested in the details, read on.
This blog post explains the peer discovery subsystem in general
and the changes to <code>rabbitmq_peer_discovery_k8s</code> in particular.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-peer-discovery">What Is Peer Discovery?<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/04/new-k8s-peer-discovery#what-is-peer-discovery" class="hash-link" aria-label="Direct link to What Is Peer Discovery?" title="Direct link to What Is Peer Discovery?">​</a></h2>
<p>Say you want to have a 3-node RabbitMQ cluster - you start 3 instances of RabbitMQ but then
what? You can manually tell two of them to join the third one using
<code>rabbitmqctl join_cluster</code> command and voilà, you have a 3-node cluster.</p>
<p>Most users would prefer this process to be automated however. That's where
peer discovery comes in. There is a handful of peer discovery plugins available in RabbitMQ
for different situations. The simplest one is called
<a href="https://www.rabbitmq.com/docs/cluster-formation#peer-discovery-classic-config" target="_blank" rel="noopener noreferrer">classic peer discovery</a>
and allows you to just put the hostnames of the nodes in the configuration file,
so that RabbitMQ automatically initiates the cluster formation with them upon startup.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>It is a common misconception that the peer discovery is performed every time a node starts.
This is not the case, it is only performed when a node starts for the first time
(when it has an empty data folder).</p></div></div>
<p>However, based on how you deploy RabbitMQ, the hostnames may not be known upfront.
Even if they are, you need a different configuration file for each cluster, which
may be inconvenient if you want a quick way to spin up new clusters for testing
environments for example.</p>
<p>In such cases, you can use other peer discovery plugins, which allow nodes to register
with some external systems such as Consul or etcd and query these systems for a list
of registered nodes. This way you don't need to know the hostnames upfront - the nodes
discover each other automatically.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="kubernetes-peer-discovery-before-rabbitmq-41">Kubernetes Peer Discovery before RabbitMQ 4.1<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/04/new-k8s-peer-discovery#kubernetes-peer-discovery-before-rabbitmq-41" class="hash-link" aria-label="Direct link to Kubernetes Peer Discovery before RabbitMQ 4.1" title="Direct link to Kubernetes Peer Discovery before RabbitMQ 4.1">​</a></h2>
<p>Before RabbitMQ 4.1, <code>rabbitmq_peer_discovery_k8s</code> performed the peer discovery by querying
the Kubernetes API server for a list of endpoints behind a service (Kubernetes automatically
registers pods of a given StatefulSet as endpoints). However, there were a few issues with
this approach:</p>
<ol>
<li>some users reported that occasionally, cluster formation would fail and the pods
would form multiple separate clusters; we never received enough data to diagnose this issue
and it never occurred in our testing (we tried thousands of times...)</li>
<li>it required permissions to query the Kubernetes API; not a big deal, but it was unnecessary
and some security-conscious users were asking why we needed this</li>
<li>it was a convoluted way of asking a question, we already know the answer to...</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="kubernetes-peer-discovery-in-rabbitmq-41">Kubernetes Peer Discovery in RabbitMQ 4.1<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/04/new-k8s-peer-discovery#kubernetes-peer-discovery-in-rabbitmq-41" class="hash-link" aria-label="Direct link to Kubernetes Peer Discovery in RabbitMQ 4.1" title="Direct link to Kubernetes Peer Discovery in RabbitMQ 4.1">​</a></h2>
<p>When deploying RabbitMQ to Kubernetes, you should always use a StatefulSet.
All pods that belong to a StatefulSet are named consistently with the name of the StatefulSet,
followed by a hyphen and an
<a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#ordinal-index" target="_blank" rel="noopener noreferrer">ordinal index</a>.
The ordinal index start is configurable, but is almost always <code>0</code>, so let's just assume it is <code>0</code>.
Given that, a 3-node cluster deployed to Kubernetes will always have nodes with suffixes <code>-0</code>, <code>-1</code> and <code>-2</code>.
There's no need to query the Kubernetes API to know this!</p>
<p>The new plugin doesn't perform any Kubernetes API queries. It just assumes that a pod with <code>-0</code> suffix
will exist and treats it as the "seed" node. All other nodes will join the cluster by joining
the <code>-0</code> node. If the <code>-0</code> node is not up, other nodes will wait forever for it to come up
(they will never form a cluster without the <code>-0</code> node). Remember that peer discovery only
happens when a node starts for the first time, so "waiting forever for node <code>-0</code>" only
applies to the first time you deploy a given cluster.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="advanced-configuration">Advanced Configuration<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/04/new-k8s-peer-discovery#advanced-configuration" class="hash-link" aria-label="Direct link to Advanced Configuration" title="Direct link to Advanced Configuration">​</a></h3>
<p>For the vast majority of users, this upgrade should be completely transparent. First of all,
since peer discovery is only performed when a node starts for the first time,
if you upgrade an existing cluster, peer discovery changes won't affect you.</p>
<p>Second, the new plugin accepts, but ignores, all configuration options of the old plugin. You will
see some warnings in the logs about deprecated options being used, but you can safely ignore them.</p>
<p>If the default configuration doesn't work for you, there are two settings you can use:</p>
<ol>
<li>
<p>If you are using an ordinal start other than <code>0</code> (and seriously, why would you?!), you should
configure the plugin by setting <code>cluster_formation.k8s.ordinal_start = N</code> where <code>N</code> is the ordinal start.
When set, all nodes will try to join the <code>-N</code> node, rather than the <code>-0</code> node.</p>
</li>
<li>
<p>Additionally, you can set <code>cluster_formation.k8s.seed_node = rabbit@seed-node-hostname</code> to
just say what the seed node is. We don't expect this setting to ever be needed, but it's there
if you really need it.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-if-im-using-the-cluster-operator">What If I'm Using The Cluster Operator?<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/04/04/new-k8s-peer-discovery#what-if-im-using-the-cluster-operator" class="hash-link" aria-label="Direct link to What If I'm Using The Cluster Operator?" title="Direct link to What If I'm Using The Cluster Operator?">​</a></h3>
<p><a href="https://www.rabbitmq.com/kubernetes/operator/operator-overview#cluster-operator" target="_blank" rel="noopener noreferrer">Cluster Operator</a>
is the recommended way of deploying RabbitMQ to Kubernetes, so if you are using it - great.
You should be able to continue using it with no changes. You will see the aforementioned warnings in the logs,
because the Cluster Operator allows deploying different RabbitMQ versions, not just 4.1.
Therefore, for the time being, it will continue setting values required by the old version of
<code>rabbitmq_peer_discovery_k8s</code> in the configuration file. Such a configuration works for both 4.1 and older
versions. At some point in the future, Cluster Operator will drop support for RabbitMQ versions older
than 4.1 and we'll remove these settings from the ConfigMap declared by the Cluster Operator.</p>]]></content>
        <author>
            <name>Michał Kuratczyk</name>
            <uri>https://github.com/mkuratczyk</uri>
        </author>
        <category label="Announcements" term="Announcements"/>
        <category label="kubernetes" term="kubernetes"/>
        <category label="RabbitMQ 4.1" term="RabbitMQ 4.1"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[RabbitMQ 4.0.7 is released]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/26/rabbitmq-4.0.7-is-released</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/26/rabbitmq-4.0.7-is-released"/>
        <updated>2025-02-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[RabbitMQ 4.0.7]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="rabbitmq-407">RabbitMQ 4.0.7<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/26/rabbitmq-4.0.7-is-released#rabbitmq-407" class="hash-link" aria-label="Direct link to RabbitMQ 4.0.7" title="Direct link to RabbitMQ 4.0.7">​</a></h2>
<p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.7" target="_blank" rel="noopener noreferrer">RabbitMQ <code>4.0.7</code></a> is
a new patch release in the <code>4.0.x</code> series.</p>
<p>This series is currently covered by <a href="https://www.rabbitmq.com/release-information" target="_blank" rel="noopener noreferrer">community support</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="release-artifacts">Release Artifacts<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/26/rabbitmq-4.0.7-is-released#release-artifacts" class="hash-link" aria-label="Direct link to Release Artifacts" title="Direct link to Release Artifacts">​</a></h2>
<p>Release artifacts can be obtained on <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.7" target="_blank" rel="noopener noreferrer">GitHub</a>
as well as <a href="https://www.rabbitmq.com/docs/install-rpm" target="_blank" rel="noopener noreferrer">RPM</a>, <a href="https://www.rabbitmq.com/docs/install-debian" target="_blank" rel="noopener noreferrer">Debian</a> package repositories.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="upgrade-guidance">Upgrade Guidance<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/26/rabbitmq-4.0.7-is-released#upgrade-guidance" class="hash-link" aria-label="Direct link to Upgrade Guidance" title="Direct link to Upgrade Guidance">​</a></h2>
<p>If <a href="https://www.rabbitmq.com/docs/upgrade" target="_blank" rel="noopener noreferrer">upgrading</a> from a version prior to 4.0, please consult
the <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.1" target="_blank" rel="noopener noreferrer"><code>4.0</code> release notes</a>.</p>]]></content>
        <author>
            <name>Michael Klishin</name>
            <uri>https://github.com/michaelklishin</uri>
        </author>
        <category label="Releases" term="Releases"/>
        <category label="RabbitMQ 4.0" term="RabbitMQ 4.0"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[RabbitMQ 4.0.6 is released]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/11/rabbitmq-4.0.6-is-released</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/11/rabbitmq-4.0.6-is-released"/>
        <updated>2025-02-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[RabbitMQ 4.0.6]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="rabbitmq-406">RabbitMQ 4.0.6<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/11/rabbitmq-4.0.6-is-released#rabbitmq-406" class="hash-link" aria-label="Direct link to RabbitMQ 4.0.6" title="Direct link to RabbitMQ 4.0.6">​</a></h2>
<p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.6" target="_blank" rel="noopener noreferrer">RabbitMQ <code>4.0.6</code></a> is
a new patch release in the <code>4.0.x</code> series.</p>
<p>This series is currently covered by <a href="https://www.rabbitmq.com/release-information" target="_blank" rel="noopener noreferrer">community support</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="release-artifacts">Release Artifacts<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/11/rabbitmq-4.0.6-is-released#release-artifacts" class="hash-link" aria-label="Direct link to Release Artifacts" title="Direct link to Release Artifacts">​</a></h2>
<p>Release artifacts can be obtained on <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.6" target="_blank" rel="noopener noreferrer">GitHub</a>
as well as <a href="https://www.rabbitmq.com/docs/install-rpm" target="_blank" rel="noopener noreferrer">RPM</a>, <a href="https://www.rabbitmq.com/docs/install-debian" target="_blank" rel="noopener noreferrer">Debian</a> package repositories.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="upgrade-guidance">Upgrade Guidance<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/11/rabbitmq-4.0.6-is-released#upgrade-guidance" class="hash-link" aria-label="Direct link to Upgrade Guidance" title="Direct link to Upgrade Guidance">​</a></h2>
<p>If <a href="https://www.rabbitmq.com/docs/upgrade" target="_blank" rel="noopener noreferrer">upgrading</a> from a version prior to 4.0, please consult
the <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.1" target="_blank" rel="noopener noreferrer"><code>4.0</code> release notes</a>.</p>]]></content>
        <author>
            <name>Michael Klishin</name>
            <uri>https://github.com/michaelklishin</uri>
        </author>
        <category label="Releases" term="Releases"/>
        <category label="RabbitMQ 4.0" term="RabbitMQ 4.0"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tanzu RabbitMQ 3.13.8 is released]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/07/tanzu-rabbitmq-3.13.8-is-released</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/07/tanzu-rabbitmq-3.13.8-is-released"/>
        <updated>2025-02-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Tanzu RabbitMQ 3.13.8 is a new patch release in the 3.13.x series of]]></summary>
        <content type="html"><![CDATA[<p><a href="https://support.broadcom.com/group/ecx/productfiles?subFamily=VMware%20Tanzu%20RabbitMQ&amp;displayGroup=VMware%20Tanzu%20RabbitMQ&amp;release=3.13.8&amp;os=&amp;servicePk=527640&amp;language=EN" target="_blank" rel="noopener noreferrer">Tanzu RabbitMQ <code>3.13.8</code></a> is a new patch release in the <code>3.13.x</code> series of
the <a href="https://www.vmware.com/products/app-platform/tanzu-rabbitmq" target="_blank" rel="noopener noreferrer">commercial edition of RabbitMQ</a>.</p>
<p>This edition includes additional feature such as Warm Standby Replication, intra-cluster traffic
compression and a FIPS-enabled Erlang runtime.</p>
<p>Tanzu RabbitMQ is available <a href="https://techdocs.broadcom.com/us/en/vmware-tanzu/data-solutions/tanzu-rabbitmq-on-kubernetes/3-13/tanzu-rabbitmq-kubernetes/overview.html" target="_blank" rel="noopener noreferrer">on Kubernetes</a>, as an <a href="https://techdocs.broadcom.com/us/en/vmware-tanzu/data-solutions/tanzu-rabbitmq-oci/3-13/tanzu-rabbitmq-oci-image/overview.html" target="_blank" rel="noopener noreferrer">OCI image</a>,
and an <a href="https://techdocs.broadcom.com/us/en/vmware-tanzu/data-solutions/tanzu-rabbitmq-ova/3-13/tanzu-rabbitmq-ova-virtual-machine/overview.html" target="_blank" rel="noopener noreferrer">OVA image</a>.</p>
<p>This release is based on open source RabbitMQ <code>3.13.x</code> and includes all the latest backports
in <a href="https://www.rabbitmq.com/blog/2025/02/07/rabbitmq-3.13.8-is-released" target="_blank" rel="noopener noreferrer">open source RabbitMQ <code>3.13.8</code></a>.</p>
<h1>Release Artifacts</h1>
<p>Release artifacts for the <code>3.13.x</code> series can be obtained via the <a href="https://support.broadcom.com/" target="_blank" rel="noopener noreferrer">Broadcom customer portal</a>:</p>
<ul>
<li><a href="https://support.broadcom.com/group/ecx/productfiles?subFamily=VMware%20Tanzu%20RabbitMQ&amp;displayGroup=VMware%20Tanzu%20RabbitMQ&amp;release=3.13.8&amp;os=&amp;servicePk=527640&amp;language=EN" target="_blank" rel="noopener noreferrer">Artifacts</a></li>
<li>Tanzu RabbitMQ <a href="https://support.broadcom.com/group/ecx/productfiles?subFamily=VMware%20Tanzu%20RabbitMQ%20on%20Kubernetes&amp;displayGroup=VMware%20Tanzu%20RabbitMQ%20on%20Kubernetes&amp;release=3.13.8&amp;os=&amp;servicePk=527733&amp;language=EN" target="_blank" rel="noopener noreferrer">on Kubernetes</a></li>
</ul>
<h1>Upgrade Guidance</h1>
<p>If&nbsp;<a href="https://www.rabbitmq.com/docs/upgrade" target="_blank" rel="noopener noreferrer">upgrading</a>&nbsp;from a version prior to 3.13.9, please first consult the&nbsp;<a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.13.0" target="_blank" rel="noopener noreferrer">open source RabbitMQ 3.13.0&nbsp;release notes</a>.</p>]]></content>
        <author>
            <name>Michael Klishin</name>
            <uri>https://github.com/michaelklishin</uri>
        </author>
        <category label="Releases" term="Releases"/>
        <category label="Tanzu RabbitMQ" term="Tanzu RabbitMQ"/>
        <category label="RabbitMQ 3.13" term="RabbitMQ 3.13"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[RabbitMQ 3.13.8 is released]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/07/rabbitmq-3.13.8-is-released</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/02/07/rabbitmq-3.13.8-is-released"/>
        <updated>2025-02-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[RabbitMQ 3.13.8 is a new patch release in the 3.13.x series.]]></summary>
        <content type="html"><![CDATA[<p>RabbitMQ <code>3.13.8</code> is a new patch release in the <code>3.13.x</code> series.
This series is currently covered by <a href="https://www.rabbitmq.com/release-information" target="_blank" rel="noopener noreferrer">commercial support</a> only.</p>
<p>For publicly available open source releases, see the <a href="https://www.rabbitmq.com/blog/tags/rabbit-mq-4-0" target="_blank" rel="noopener noreferrer"><code>4.0.x</code> series</a>.</p>
<h1>Release Artifacts</h1>
<p>Release artifacts for the <code>3.13.x</code> series can be obtained via the <a href="https://techdocs.broadcom.com/us/en/vmware-tanzu/data-solutions/open-source-rabbitmq/3-13/opn-src-rabbitmq/site-install.html" target="_blank" rel="noopener noreferrer">Broadcom customer portal</a>.</p>
<h1>Upgrade Guidance</h1>
<p>If&nbsp;<a href="https://www.rabbitmq.com/docs/upgrade" target="_blank" rel="noopener noreferrer">upgrading</a>&nbsp;from a version prior to 3.13.9, please consult the&nbsp;<a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.13.0" target="_blank" rel="noopener noreferrer">3.13.0&nbsp;release notes</a>.</p>]]></content>
        <author>
            <name>Michael Klishin</name>
            <uri>https://github.com/michaelklishin</uri>
        </author>
        <category label="Releases" term="Releases"/>
        <category label="RabbitMQ 3.13" term="RabbitMQ 3.13"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How Are The Messages Stored? Not in Memory!]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2025/01/17/how-are-the-messages-stored</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/01/17/how-are-the-messages-stored"/>
        <updated>2025-01-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[It's time to retire the myth that RabbitMQ stores messages in memory. While it was true in the early days of RabbitMQ,]]></summary>
        <content type="html"><![CDATA[<p>It's time to retire the myth that RabbitMQ stores messages in memory. While it was true in the early days of RabbitMQ,
and an option for the last 10 years, modern RabbitMQ versions almost always write messages
to disk right away. In this blog post we review how different queue types store messages but the short answer is: not in memory!</p>
<p>Let's start by clarifying what we mean by storing messages in memory, since it is not a precise statement.
If interpreted as "RabbitMQ uses memory to process messages", this phrase is certainly true.
When client applications send data to RabbitMQ, that data appears in memory buffers first (that's true for all
network-based software). It is also true, that RabbitMQ might cache some messages in memory,
for example to improve performance (again, true for virtually all software that needs to serve data).</p>
<p>However, I keep hearing this phrase used to express concerns about message durability - if you power off the server,
your messages will be lost! In this context, modern RabbitMQ versions almost never store messages in memory.</p>
<div class="theme-admonition theme-admonition-important admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>important</div><div class="admonitionContent_BuS1"><p>There is no configuration in which publishing 1GB of messages to RabbitMQ with no connected consumers,
would lead to 1GB of memory being used to store these messages. Some subset of messages can be cached in memory,
but messages are stored on disk.</p></div></div>
<p>We'll go through different queue types and discuss how the messages are processed, stored and when they are confirmed
to the publishers. Publisher confirmations are critical here - RabbitMQ doesn't offer guarantees for messages that
were not confirmed. If you haven't received the confirmation, you can't even know whether the message reached
RabbitMQ (the network connection could have failed for example). With that in mind, let's go through the different queue types.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="classic-queues">Classic Queues<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/01/17/how-are-the-messages-stored#classic-queues" class="hash-link" aria-label="Direct link to Classic Queues" title="Direct link to Classic Queues">​</a></h2>
<p><a href="https://www.rabbitmq.com/docs/classic-queues" target="_blank" rel="noopener noreferrer">Classic queues</a> is the oldest kind of queues in RabbitMQ and the main source of "RabbitMQ stores messages in memory" misconception.
RabbitMQ was first released in 2007. Disks were significantly slower back then and therefore classic queues were designed
to try to avoid writing messages to disk. There was a whole bunch of settings to configure when RabbitMQ should
write messages to disk (a process called "paging") so it would not keep messages in memory indefinitely but indeed,
you could say RabbitMQ stored messages in memory back then. However, that was a long time ago.</p>
<p>In RabbitMQ 3.6, released in 2015, the "lazy mode" was introduced. A queue configured to be lazy, always
stored messages on disk and didn't keep them in memory at all. This means that "RabbitMQ stores messages in memory"
was not true 10 years ago. It'd still do this by default, but it was completely optional.</p>
<p>Lazy mode was removed in RabbitMQ in 3.12, released in 2023, but the default (and the only available) behaviour
changed and is similar to the lazy mode, although not exactly the same. Therefore, for over a year now, classic queues don't store
messages in memory and can't even be configured to do so. The myth is almost entirely false at this point.</p>
<p>Almost entirely? So here's how classic queues work right now: they accumulate incoming messages in a small in-memory buffer
and write them to disk as a batch, as soon as the in-memory buffer is full. Since we don't know if more messages will come,
there are additional triggers that flush that buffer, including a flush after a certain number of batched messages
(even if they are too small to use the whole buffer) and after
a certain number of operations on that batch is performed. Additionally, the queue monitors how quickly messages are consumed
and makes decisions based on that (if there are fast consumers, more messages will be cached in memory). Finally, there's the
last-resort trigger which will flush the buffer every 200ms. So the absolute maximum of how long a message can be stored in
memory is 200ms but in practice, I've never seen this happen. Publishers usually receive confirms within a few milliseconds
and they are sent only after the message was written to disk.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="but-i-see-no-disk-activity-when-i-use-a-classic-queue">But I See No Disk Activity When I Use a Classic Queue!<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/01/17/how-are-the-messages-stored#but-i-see-no-disk-activity-when-i-use-a-classic-queue" class="hash-link" aria-label="Direct link to But I See No Disk Activity When I Use a Classic Queue!" title="Direct link to But I See No Disk Activity When I Use a Classic Queue!">​</a></h3>
<p>Indeed, it's entirely possible to publish messages to classic queues and see virtually no disk writes nor disk reads.
How is that possible? It's an optimisation for a very specific, but relatively common case. As explained above, messages
can be briefly kept in memory but if there are active consumers that are waiting for messages (their prefetch buffer is not full),
messages that reach the queue are dispatched to the consumers immediately, without waiting for their batch to be written to disk.
A message that gets acknowledged by the consumer before this message's batch is written to disk, will not be written to disk at all,
because it simply doesn't need to be. Queues don't store acknowledged messages, so if the message is acknowledged before it is written,
it doesn't get written. If it's acknowledged after it was written, it's deleted from the queue (the actual removal from disk
will happen later, asynchronously, but it is considered deleted immediately).</p>
<p>It's worth mentioning that classic queues have <a href="https://www.rabbitmq.com/blog/2024/01/11/3.13-release#classic-queues-storage-primer" target="_blank" rel="noopener noreferrer">two separate storage mechanisms</a>.
Messages below 4kb (configurable through <code>queue_index_embed_msgs_below</code>) are stored in a per-queue message store and messages above that threshold
are stored in a per-vhost message store. The optimisation mentioned above only works for messages that would be stored in the per-queue message store.</p>
<p>So here it is, in modern RabbitMQ versions, classic queues store messages in memory for a very short period of time (milliseconds)
and no more than 200ms for sure. They may not write messages to disk at all, if the messages are small,
and consumed quickly enough, but this is just a performance optimisation. I'll leave it up to you to decide if that
qualifies as "RabbitMQ stores messages in memory", but I think a more accurate statement would be "when a message is delivered to
a classic queue, RabbitMQ writes messages to disk with a short delay". But yes, that means that for a brief moment, they are only in memory.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="surely-transient-messages-are-stored-in-memory">Surely, Transient Messages Are Stored in Memory?<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/01/17/how-are-the-messages-stored#surely-transient-messages-are-stored-in-memory" class="hash-link" aria-label="Direct link to Surely, Transient Messages Are Stored in Memory?" title="Direct link to Surely, Transient Messages Are Stored in Memory?">​</a></h3>
<p>No. Again, things were different in the past but as of RabbitMQ 4.0, the only difference between persistent and transient messages
is when RabbitMQ sends back the publisher confirm. The messages are stored the same way as described above.</p>
<p>For persistent messages, the confirm is sent when either of these two events takes place:</p>
<ol>
<li>The message is written to disk</li>
<li>The message is delivered and acknowledged by a consumer (if that happens before it's written to disk)</li>
</ol>
<p>For transient messages, the confirm is sent as soon as the message reaches the queue and enters the in-memory buffer.
Since the message is transient, the guarantees are lax: the queue received the message, the publisher can move on.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-about-fsync">What About fsync?<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/01/17/how-are-the-messages-stored#what-about-fsync" class="hash-link" aria-label="Direct link to What About fsync?" title="Direct link to What About fsync?">​</a></h3>
<p><code>fsync</code> is a low-level file system operation that should ensure that messages are really written to disk.
There are multiple layers of I/O buffers between a user-space process such as RabbitMQ and actual hardware, including operating
system buffers and internal disk buffers. Performing a write without performing <code>fsync</code> doesn't guarantee that the data
will survive a sudden power loss. Unfortunately, <code>fsync</code> is a relatively slow operation, so any I/O intensive software has to
decide if, and when, to call it. While classic queues call <code>fsync</code> in some cases (for example, when RabbitMQ stops gracefully),
fsync is not performed before publisher confirms are sent. Therefore, even durable messages that a publisher received a confirmation for,
can technically be lost if the server crashes. If you need stronger guarantees, you can use <a href="https://www.rabbitmq.com/rabbitmq-website/docs/quorum-queues">quorum queues</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="quorum-queues">Quorum Queues<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/01/17/how-are-the-messages-stored#quorum-queues" class="hash-link" aria-label="Direct link to Quorum Queues" title="Direct link to Quorum Queues">​</a></h2>
<p>From the initial release in RabbitMQ 3.8 (released in 2019), <a href="https://www.rabbitmq.com/docs/quorum-queues" target="_blank" rel="noopener noreferrer">quorum queues</a> always stored
messages on disk. While the initial versions had an additional in-memory <strong>cache</strong> for messages, it was removed in RabbitMQ 3.10.</p>
<p>The situation is therefore simple: if the publisher received a confirmation, this means the message had already been
written to disk and <code>fsync</code>-ed on the quorum of nodes (in the most common scenario of a 3-node cluster, that means
it was written and <code>fsync</code>-ed on at least 2 nodes).</p>
<p>Since RabbitMQ doesn't offer any guarantees for messages that have not been confirmed to publishers, we could pretty much stop here.
However, for the sake of completeness, I'll mention that some messages are technically in memory:</p>
<ol>
<li>The queue process has a mailbox (an Erlang/OTP concept) where requests to the queue process (such as enqueue/dequeue operations)
arrive for processing. The quorum queue process receives messages from the mailbox and processes them as a batch. When there's
a lot of requests, these operations may accumulate in the mailbox and therefore, assuming there are enqueue operations there, at this
point, some messages are only in-memory. However, this generally means RabbitMQ is at least briefly overloaded and
either way, these operations are usually processed within a few milliseconds. Plus, these messages are not confirmed yet.</li>
<li>Quorum queues rely on the <a href="https://raft.github.io/" target="_blank" rel="noopener noreferrer">Raft protocol</a> and our <a href="https://github.com/rabbitmq/ra/" target="_blank" rel="noopener noreferrer">Raft implementations</a>
stores the most recent Raft operations in memory. For enqueue operations this means that the message is in memory as well. However,
at this point the message is already written to disk and <code>fsync</code>-ed or it hasn't been confirmed yet.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="streams">Streams<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/01/17/how-are-the-messages-stored#streams" class="hash-link" aria-label="Direct link to Streams" title="Direct link to Streams">​</a></h2>
<p>With <a href="https://www.rabbitmq.com/docs/streams" target="_blank" rel="noopener noreferrer">Streams</a>, the situation is even simpler than with quorum queues: Streams never supported keeping messages in memory, period.
The main difference between queues and stream in general, is that streams can be read multiple times and therefore consuming
a message doesn't remove that message from a stream. There's no point in storing messages only in memory, if we need to be able
to deliver them to consumers multiple times, potentially long after they were published.</p>
<p>Streams do not perform <code>fsync</code>, since they were optimised for high message throughput.</p>
<p>For completeness, just like quorum queues (and any other Erlang process), the stream process has a mailbox where requests to the stream
process arrive. There's therefore a moment where the messages are stored in memory for a short time. Once again though,
these are messages that have not been confirmed yet and they rarely stay in memory for more than a few milliseconds.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="mqtt-qos-0-queues">MQTT QoS 0 Queues<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/01/17/how-are-the-messages-stored#mqtt-qos-0-queues" class="hash-link" aria-label="Direct link to MQTT QoS 0 Queues" title="Direct link to MQTT QoS 0 Queues">​</a></h2>
<p>RabbitMQ 3.12 introduced <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2023/03/21/native-mqtt">Native MQTT support</a>, and as part of that work, a new queue type was introduced,
specifically for MQTT QoS 0 consumers (you can't explicitly declare a queue of this type, you have to create an MQTT QoS 0 subscription).
Since QoS 0 basically means best-effort but no guarantees, QoS 0 messages are not written to disk at all and are delivered directly to the
consumers that are present. Effectively, there's no queue at all (beyond the Erlang mailbox). Messages received from the publisher are
immediately delivered to the consumers and removed from memory.</p>
<p>Does this qualify as storing messages in memory? I'd say it doesn't - the messages are in memory initially, simply because
that's how computers work, and are removed from memory as soon as they are delivered to the consumers. We don't really store
them in memory - we just process them and never write them to disk in this case. You can disagree and say that this is exactly
what "storing messages in memory means" but even then - this only applies to MQTT QoS 0 usage and the messages will generally stay
in memory for no more than a fraction of second.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="message-metadata">Message Metadata<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/01/17/how-are-the-messages-stored#message-metadata" class="hash-link" aria-label="Direct link to Message Metadata" title="Direct link to Message Metadata">​</a></h2>
<p>So far I focused on message bodies, since that's what people usually mean when talking about storing messages in memory. However,
RabbitMQ also needs to keep track of the messages that are currently present in the queues. For example, when a queues has a defined
<a href="https://www.rabbitmq.com/docs/maxlength" target="_blank" rel="noopener noreferrer"><code>x-max-length</code> limit</a>, RabbitMQ needs to keep track of the total size of all the messages in the queue,
so when it delivers a message, it keeps the message size (but not the message body itself) in memory, to just subtract it quickly
from the total size of the queue, once the consumer acknowledges the messages.</p>
<p>This kind of metadata is stored differently by different queue type, but even when stored in memory, it will consume
significantly less memory than the message bodies would and doesn't change any guarantees about the message durability.</p>
<p>Here's how we store the metadata for different queue types:</p>
<ul>
<li>Classic queues<!-- -->
<ul>
<li>for messages stored in the per-queue message store, no data is stored in memory</li>
<li>for messages stored in the per-vhost message store, there's some metadata in memory</li>
</ul>
</li>
<li>Quorum queues<!-- -->
<ul>
<li>metadata is stored in memory (at least 32 bytes per message, sometimes a bit more, for example when <a href="https://www.rabbitmq.com/docs/ttl" target="_blank" rel="noopener noreferrer">message TTL</a> is used)</li>
</ul>
</li>
<li>Streams<!-- -->
<ul>
<li>no message metadata is stored in memory</li>
</ul>
</li>
</ul>
<p>This basically means that for messages under 4KB stored in classic queues, as well as for streams, regardless of how many messages
there are in the queue/stream, the memory usage is constant. You will run out disk before you run out of memory (you should
configure <a href="https://www.rabbitmq.com/docs/streams#retention" target="_blank" rel="noopener noreferrer">retention</a>/<a href="https://www.rabbitmq.com/docs/maxlength" target="_blank" rel="noopener noreferrer">length</a> limits
to avoid running out disk, but that's a different story).</p>
<p>Here's an illustration highlighting the difference between the two classic queue storage mechanisms. In this test,
I first published 1 million messages of 4000 bytes each, then deleted the queue and published 1 million messages of 4100 bytes
each. As you can see, the memory usage was stable in the first phase (small fluctuations notwithstanding), but when publishing
larger messages, we can see the memory usage grows as well. This is because 4100 bytes is above the threshold, so these
messages are stored in the per-vhost message store and the per-vhost message store keeps some metadata in memory. A million 4KB
messages would have taken up 4GB of memory to store, while the actual usage is still below 400MB.</p>
<p></p><figure><img decoding="async" loading="lazy" alt="Classic Queues: memory usage when publishing small and large messages" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/classic-queues-899b1a1caebc83614d77525cf6f9d800.png" width="2556" height="938" class="img_ev3q"><figcaption>Classic Queues: memory usage when publishing small and large messages</figcaption></figure><p></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2025/01/17/how-are-the-messages-stored#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>Here's the summary of the key points.</p>
<table><thead><tr><th>Type</th><th>When are the messages written to disk?</th><th>fsync?</th><th>When is the publisher confirm sent?</th></tr></thead><tbody><tr><td>Classic</td><td>After a few milliseconds or as soon as the in-memory buffer is full (whichever happens first)</td><td>No</td><td><strong>Durable messages</strong>: when the message is written to disk or consumed &amp; acknowledged <br> <strong>Transient messages</strong>: as soon as batched in memory</td></tr><tr><td>Quorum</td><td>Immediately (except for unconfirmed messages waiting in the mailbox, see above for details)</td><td>Yes</td><td>When written to disk and fsynced by the quorum of nodes (most commonly 2 out of 3 nodes)</td></tr><tr><td>Streams</td><td>Immediately (except for unconfirmed messages waiting in the mailbox, see above for details)</td><td>No</td><td>When written to disk by the quorum of nodes (most commonly 2 out of 3 nodes)</td></tr></tbody></table>
<p>The flexibility provided by RabbitMQ, with support for multiple protocols, queue types and other configurations (eg. single node,
vs a cluster with queue replication), combined with 18 years of history and evolution, means that almost any "RabbitMQ does/doesn't do X"
statement is incorrect or at least imprecise. They should almost always be quantified with a specific version and configuration.</p>
<p>Going back to the title of this post, I think it's fair to say that "RabbitMQ doesn't store messages in memory" is much
closer to the truth, than the opposite claim, which still circulates in discussions involving RabbitMQ. Regardless of the queue type,
there is no configuration in which publishing, say, 1GB of messages to RabbitMQ with no connected consumers, would lead to 1GB of memory being
used to store these messages. Most importantly, if you want high data safety guarantees, quorum queues are available and store data safely
by default. If you publish a message to a quorum queue and receive the confirmation, it'd take a disastrous event for RabbitMQ to lose it
(and if you want to protect messages from disastrous events, you might be interested in the commercial
<a href="https://techdocs.broadcom.com/us/en/vmware-tanzu/data-solutions/tanzu-rabbitmq-on-kubernetes/4-0/tanzu-rabbitmq-kubernetes/standby-replication.html" target="_blank" rel="noopener noreferrer">Warm Standby Replication plugin</a>).</p>
<p>If you don't need such data safety guarantees, you don't have to pay the intrinsic overhead of data safety. Just use the right tool for the job.</p>]]></content>
        <author>
            <name>Michał Kuratczyk</name>
            <uri>https://github.com/mkuratczyk</uri>
        </author>
        <category label="Classic Queues" term="Classic Queues"/>
        <category label="Quorum Queues" term="Quorum Queues"/>
        <category label="Streams" term="Streams"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Security Best Practices: epmd]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/18/epmd-public-exposure</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/18/epmd-public-exposure"/>
        <updated>2024-12-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Security Best Practices: epmd]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="security-best-practices-epmd">Security Best Practices: epmd<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/18/epmd-public-exposure#security-best-practices-epmd" class="hash-link" aria-label="Direct link to Security Best Practices: epmd" title="Direct link to Security Best Practices: epmd">​</a></h2>
<p>The Erlang Port Mapper Daemon (<code>epmd</code>) is a built-in component that helps Erlang-based applications (including RabbitMQ) discover each other’s distribution ports.
Together with DNS for hostname resolution, <code>epmd</code> is a piece of infrastructure RabbitMQ nodes rely on for clustering, inter-node communication
and CLI tools connectivity.</p>
<p>While <code>epm</code> is very limited in scope, its exposure to the public Internet often means that Erlang distribution ports are also exposed.
This creates a potential security risk: if attackers find these distribution ports, they'd be one secret value away from being able to run
CLI commands against the node (or cluster).</p>
<p>Recent scans have revealed over 85,000 instances of publicly accessible <code>epmd</code>, with roughly half associated with RabbitMQ servers.</p>
<p>Fortunately, all it usually takes to mitigate this risk is limiting network access to a range of ports. <code>epmd</code> and inter-node communication
can also be limited to local network interfaces, in particular for single node clusters used for running tests.</p>
<p>Read the full article on the <a href="https://erlef.org/blog/eef/epmd-public-exposure" target="_blank" rel="noopener noreferrer">Erlang Ecosystem Foundation blog</a>.</p>]]></content>
        <author>
            <name>Erlang Ecosystem Foundation</name>
            <uri>https://github.com/erlef</uri>
        </author>
        <category label="security" term="security"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[RabbitMQ 4.0.5 is released]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/16/rabbitmq-4.0.5-is-released</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/16/rabbitmq-4.0.5-is-released"/>
        <updated>2024-12-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[RabbitMQ 4.0.5]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="rabbitmq-405">RabbitMQ 4.0.5<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/16/rabbitmq-4.0.5-is-released#rabbitmq-405" class="hash-link" aria-label="Direct link to RabbitMQ 4.0.5" title="Direct link to RabbitMQ 4.0.5">​</a></h2>
<p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.5" target="_blank" rel="noopener noreferrer">RabbitMQ <code>4.0.5</code></a> is
a new patch release in the <code>4.0.x</code> series.</p>
<p>This series is currently covered by <a href="https://www.rabbitmq.com/release-information" target="_blank" rel="noopener noreferrer">community support</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="release-artifacts">Release Artifacts<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/16/rabbitmq-4.0.5-is-released#release-artifacts" class="hash-link" aria-label="Direct link to Release Artifacts" title="Direct link to Release Artifacts">​</a></h2>
<p>Release artifacts can be obtained on <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.5" target="_blank" rel="noopener noreferrer">GitHub</a> as well as <a href="https://www.rabbitmq.com/docs/install-rpm" target="_blank" rel="noopener noreferrer">RPM</a>, <a href="https://www.rabbitmq.com/docs/install-debian" target="_blank" rel="noopener noreferrer">Debian</a> package repositories.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="upgrade-guidance">Upgrade Guidance<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/16/rabbitmq-4.0.5-is-released#upgrade-guidance" class="hash-link" aria-label="Direct link to Upgrade Guidance" title="Direct link to Upgrade Guidance">​</a></h2>
<p>If <a href="https://www.rabbitmq.com/docs/upgrade" target="_blank" rel="noopener noreferrer">upgrading</a> from a version prior to 4.0, please consult
the <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.1" target="_blank" rel="noopener noreferrer"><code>4.0</code> release notes</a>.</p>]]></content>
        <author>
            <name>Michael Klishin</name>
            <uri>https://github.com/michaelklishin</uri>
        </author>
        <category label="Releases" term="Releases"/>
        <category label="RabbitMQ 4.0" term="RabbitMQ 4.0"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[AMQP 1.0 Filter Expressions]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/13/amqp-filter-expressions</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/13/amqp-filter-expressions"/>
        <updated>2024-12-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[RabbitMQ 4.1 introduces an exciting new feature: AMQP filter expressions for streams.]]></summary>
        <content type="html"><![CDATA[<p>RabbitMQ 4.1 <a href="https://github.com/rabbitmq/rabbitmq-server/pull/12415" target="_blank" rel="noopener noreferrer">introduces</a> an exciting new feature: AMQP filter expressions for <a href="https://www.rabbitmq.com/rabbitmq-website/docs/streams">streams</a>.</p>
<p>This feature enables RabbitMQ to support multiple concurrent clients, each consuming only a specific subset of messages while preserving message order.
Additionally, it minimizes network traffic between RabbitMQ and its clients by dispatching only the messages that match the clients' interests.</p>
<p>In this blog post, we’ll explore what AMQP filter expressions are and walk through a simple Java example of how to use them.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="specification">Specification<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/13/amqp-filter-expressions#specification" class="hash-link" aria-label="Direct link to Specification" title="Direct link to Specification">​</a></h2>
<p>As outlined in the <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp">Native AMQP 1.0</a> blog post, one of AMQP 1.0's strengths is its extensibility, supported by numerous extension specifications.
RabbitMQ 4.1 takes advantage of the extension specification <a href="https://groups.oasis-open.org/higherlogic/ws/public/document?document_id=66227" target="_blank" rel="noopener noreferrer">AMQP Filter Expressions Version 1.0 Working Draft 09</a>.</p>
<p>This specification defines AMQP type definitions for message filter expressions.
Filter expressions are predicates evaluated against a message, returning either <code>true</code> or <code>false</code>.
If a predicate evaluates to <code>true</code>, the broker dispatches the message to the consumer.</p>
<p>RabbitMQ 4.1 implements a subset of this specification, including:</p>
<ul>
<li><strong>§ 4.2.4 properties filter</strong>: Applies to the immutable <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-properties" target="_blank" rel="noopener noreferrer">properties</a> section of the message.</li>
<li><strong>§ 4.2.5 application-properties filter</strong>: Applies to the immutable <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-application-properties" target="_blank" rel="noopener noreferrer">application-properties</a> section of the message.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="example">Example<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/13/amqp-filter-expressions#example" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h2>
<p>Imagine each message carries metadata specifying a particular color.
Different consumers can subscribe to the same stream, filtering messages to receive only those matching the color they are interested in.</p>
<p></p><figure><img decoding="async" loading="lazy" alt="Consumers filtering messages from a stream" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/stream-filtering-consumers-cdb038faafdd400aa8bf6247996d5a82.svg" width="1074" height="572" class="img_ev3q"><figcaption>Consumers filtering messages from a stream</figcaption></figure><p></p>
<p>The first consumer receives all green messages.
The second consumer receives all purple messages.
The third consumer receives all blue messages.</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Try this example.</summary><div><div class="collapsibleContent_i85q"><p>You can try this example using the <a href="https://github.com/ansd/amqp-filter-expressions/tree/v0.1.0" target="_blank" rel="noopener noreferrer">amqp-filter-expressions</a> sample app along with the <a href="https://github.com/rabbitmq/rabbitmq-amqp-java-client" target="_blank" rel="noopener noreferrer">RabbitMQ AMQP 1.0 Java Client</a> by following these steps:</p><ol>
<li>Start the RabbitMQ server with the following command:</li>
</ol><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> run </span><span class="token parameter variable" style="color:#36acaa">-it</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">--rm</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">--name</span><span class="token plain"> rabbitmq </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token parameter variable" style="color:#36acaa">-p</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5672</span><span class="token plain">:5672 </span><span class="token parameter variable" style="color:#36acaa">-p</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">15672</span><span class="token plain">:15672 </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rabbitmq:4.1-rc-management</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2">
<li>Navigate to the root directory of the sample app and start the client:</li>
</ol><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mvn clean compile exec:java</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Upon running the sample app, you should see the following output on the console:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">publisher sent message 0 with color green</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">publisher sent message 1 with color blue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">publisher sent message 2 with color purple</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">publisher sent message 3 with color purple</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">publisher sent message 4 with color green</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">publisher sent message 5 with color green</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">consumer (filter green) received message 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">consumer (filter green) received message 4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">consumer (filter green) received message 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">consumer (filter purple) received message 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">consumer (filter purple) received message 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">consumer (filter blue) received message 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">consumer (filter &amp;s:e) received message 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">consumer (filter &amp;s:e) received message 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">consumer (filter &amp;s:e) received message 3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In this example, the publisher sends six messages, assigning each a specific color in the application-properties section.</p><ul>
<li>The first consumer applies an application-properties filter for <code>color: green</code>, receiving all green messages in the order they were published to the stream.</li>
<li>Similarly, the second consumer filters for <code>color: purple</code>, receiving all purple messages, and the third consumer filters for <code>color: blue</code>, receiving all blue messages.</li>
</ul><p>Additionally, this sample app contains a fourth consumer (not shown in the picture above) with a filter that matches messages whose color ends with the letter <code>e</code>.
(As per the specification, the filter expression <code>&amp;s:suffix</code> matches values ending with the specified suffix.)
This fourth consumer therefore receives messages with colors blue and purple.</p></div></div></details>
<p>AMQP filter expressions enable multiple clients to concurrently consume specific subsets of messages from the same stream while preserving message order.
This feature also minimizes network traffic between RabbitMQ and its clients by dispatching only the messages that match each client’s interests.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="stream-filtering-comparison">Stream Filtering Comparison<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/13/amqp-filter-expressions#stream-filtering-comparison" class="hash-link" aria-label="Direct link to Stream Filtering Comparison" title="Direct link to Stream Filtering Comparison">​</a></h2>
<p>The <strong>AMQP filter expressions</strong> feature described in this blog post should not be confused with the <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2023/10/16/stream-filtering"><strong>Bloom filter-based stream filtering</strong></a> introduced in RabbitMQ 3.13.</p>
<p>Both features serve the same purpose: filtering messages from a stream.
However, their implementations differ, resulting in distinct characteristics:</p>
<table><thead><tr><th>Feature</th><th>AMQP Filter Expressions</th><th>Bloom Filter Based-Stream Filtering</th></tr></thead><tbody><tr><td>Supported Protocols</td><td>AMQP 1.0</td><td>Primarily for the <a href="https://github.com/rabbitmq/rabbitmq-server/blob/main/deps/rabbitmq_stream/docs/PROTOCOL.adoc" target="_blank" rel="noopener noreferrer">RabbitMQ Streams protocol</a>, but also supports AMQP 1.0, AMQP 0.9.1, and STOMP.</td></tr><tr><td>False Positives</td><td>None</td><td>Possible: Requires additional per-message filtering on the client side.</td></tr><tr><td>Support for Multiple Values to Filter on (Publisher)</td><td>Yes: Publishers can define multiple values in the properties or application-properties sections.</td><td>No: Publishers can assign only one filter value per message.</td></tr><tr><td>Support for Multiple Filter Expressions (Consumer)</td><td>Yes: Consumers can provide multiple filter expressions, and a message is delivered if <em>all</em> filters match.</td><td>Yes: Consumers can specify multiple filter values, and a message is delivered if <em>any</em> filter matches.</td></tr><tr><td>Prefix and Suffix Matching</td><td>Yes: For string values, consumers can define expressions like: "Filter messages whose <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-properties" target="_blank" rel="noopener noreferrer">subject</a> starts with <code>emea.</code>" or "Filter messages whose <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-application-properties" target="_blank" rel="noopener noreferrer">application-properties</a> section has a key <code>color</code> and the value ends with <code>e</code>.</td><td>No</td></tr><tr><td>Broker Overhead</td><td>Implemented using efficient Erlang pattern matching or term equality operations. However, every message is read into memory for each consumer (unless combined with Bloom filter-based filtering).</td><td>Minimal: Bloom filter membership checks use constant time.  With the RabbitMQ Streams protocol, the <a href="https://man7.org/linux/man-pages/man2/sendfile.2.html" target="_blank" rel="noopener noreferrer"><code>sendfile</code> system call</a> optimizes chunk delivery without messages entering user space.</td></tr><tr><td>Network Overhead</td><td>Lower: Only messages matching the consumer's filters are transferred.</td><td>Higher: Entire <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2023/10/24/stream-filtering-internals#structure-of-a-stream">chunks</a> are transferred even if only one message matches.</td></tr></tbody></table>
<p>Both features can be used together when consuming via AMQP 1.0.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/12/13/amqp-filter-expressions#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>RabbitMQ 4.1 addresses the <a href="https://github.com/rabbitmq/rabbitmq-server/issues/262" target="_blank" rel="noopener noreferrer">challenge</a> of enabling multiple consumers on a single queue/stream while ensuring certain messages (e.g., those with the same subject or ID) are always processed by the same consumer, preserving in-order processing.</p>
<p>Although this feature is not available for <a href="https://www.rabbitmq.com/rabbitmq-website/docs/classic-queues">classic queues</a> or <a href="https://www.rabbitmq.com/rabbitmq-website/docs/quorum-queues">quorum queues</a>, AMQP filter expressions allow consumers to filter messages when consuming from a stream.
Since streams are immutable logs, total message order is maintained.</p>]]></content>
        <author>
            <name>David Ansari</name>
            <uri>https://github.com/ansd</uri>
        </author>
        <category label="AMQP 1.0" term="AMQP 1.0"/>
        <category label="Streams" term="Streams"/>
        <category label="RabbitMQ 4.1" term="RabbitMQ 4.1"/>
        <category label="New Features" term="New Features"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[AMQP 1.0 Modified Outcome]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2024/10/11/modified-outcome</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/10/11/modified-outcome"/>
        <updated>2024-10-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This blog post explores use cases of the AMQP 1.0 modified outcome.]]></summary>
        <content type="html"><![CDATA[<p>This blog post explores use cases of the AMQP 1.0 <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-modified" target="_blank" rel="noopener noreferrer">modified outcome</a>.</p>
<p>The modified outcome is a <a href="https://www.rabbitmq.com/rabbitmq-website/docs/amqp#outcomes">feature</a> exclusive to AMQP 1.0 and not available in AMQP 0.9.1
It is supported in <a href="https://www.rabbitmq.com/rabbitmq-website/docs/quorum-queues">quorum queues</a>, but not in <a href="https://www.rabbitmq.com/rabbitmq-website/docs/classic-queues">classic queues</a>.</p>
<p>This feature enables consumers to add or update <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-annotations" target="_blank" rel="noopener noreferrer">message annotations</a> before requeueing or <a href="https://www.rabbitmq.com/rabbitmq-website/docs/dlx">dead lettering</a> a message.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="requeue">Requeue<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/10/11/modified-outcome#requeue" class="hash-link" aria-label="Direct link to Requeue" title="Direct link to Requeue">​</a></h2>
<p>Including additional metadata when requeuing a message can be valuable for improving traceability and debugging during message processing.</p>
<p>For example, an application using the <a href="https://github.com/rabbitmq/rabbitmq-amqp-java-client" target="_blank" rel="noopener noreferrer">RabbitMQ AMQP 1.0 Java Client</a> can set specific message annotations before requeuing the message at the head of a quorum queue, as shown below:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Consumer</span><span class="token plain"> consumer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> connection</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">consumerBuilder</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">queue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ordersQueue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">messageHandler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> message</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Map</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">String</span><span class="token generics punctuation" style="color:#393A34">,</span><span class="token generics"> </span><span class="token generics class-name">Object</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> annotations </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">HashMap</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        annotations</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"x-opt-requeue-reason"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"external_service_unavailable"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        annotations</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"x-opt-requeue-time"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">currentTimeMillis</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        annotations</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"x-opt-requeued-by"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"consumer_1"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">requeue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">annotations</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>These annotations could use different types including <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-types-v1.0-os.html#type-map" target="_blank" rel="noopener noreferrer">map</a>, <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-types-v1.0-os.html#type-list" target="_blank" rel="noopener noreferrer">list</a>, or <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-types-v1.0-os.html#type-array" target="_blank" rel="noopener noreferrer">array</a>.
This flexibility allows not only setting details like the last requeue reason, time, and consumer, but also tracking a history of requeue events.
Maintaining such a history can reveal patterns, such as identifying consumers that requeue messages more frequently or discovering common requeue reasons across the system.
However, keep in mind that quorum queues retain modified message annotations in memory, which increases the memory overhead per requeued message.</p>
<p>Setting custom headers before requeueing a message at the head of the queue is not supported in AMQP 0.9.1.</p>
<p>Whether requeuing a message to a quorum queue via AMQP 1.0 or AMQP 0.9.1, the <a href="https://www.rabbitmq.com/docs/quorum-queues#poison-message-handling" target="_blank" rel="noopener noreferrer">x-delivery-count</a> annotation will always be incremented.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dead-letter">Dead Letter<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/10/11/modified-outcome#dead-letter" class="hash-link" aria-label="Direct link to Dead Letter" title="Direct link to Dead Letter">​</a></h2>
<p>When dead lettering a message, the consumer can include a custom reason for the dead lettering in the message annotations:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Consumer</span><span class="token plain"> consumer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> connection</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">consumerBuilder</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">queue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ordersQueue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">messageHandler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> message</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Map</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">String</span><span class="token generics punctuation" style="color:#393A34">,</span><span class="token generics"> </span><span class="token generics class-name">Object</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> annotations </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">HashMap</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        annotations</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"x-opt-dead-letter-reason"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Incompatible Message Format"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">discard</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">annotations</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>When dead lettering to a <a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#exchange-headers">headers exchange</a>, the consumer can even decide which target queue the message will be routed to:</p>
<p></p><figure><img decoding="async" loading="lazy" alt="An AMQP 1.0 consumer can use the modified outcome to decide which dead letter queue a message is routed to." src="https://www.rabbitmq.com/rabbitmq-website/assets/images/modified-outcome-1f1cee13e3c2f3aec685976bbfc338c3.svg" width="960" height="540" class="img_ev3q"><figcaption>An AMQP 1.0 consumer can use the modified outcome to decide which dead letter queue a message is routed to.</figcaption></figure><p></p>
<p>In this example, two dead letter quorum queues are bound to the dead letter headers exchange:</p>
<ol>
<li><code>transient-failures-dlq</code></li>
<li><code>business-logic-failures-dlq</code></li>
</ol>
<p>Different dead letter queues can be processed by different apps or teams, with varying actions taken depending on the nature of the failure.
For instance, all messages in the <code>transient-failures-dlq</code> could be re-published to the original <code>orders</code> queue, while messages in the <code>business-logic-failures-dlq</code> might require human intervention.</p>
<p>More dead letter queues could be added, such as:</p>
<ul>
<li><code>data-integrity-dlq</code> for messages with unknown schema</li>
<li><code>resource-limit-dlq</code> for cases where rate limits were exceeded</li>
<li><code>critical-errors-dlq</code> for situations that require administrator attention.</li>
</ul>
<p>It’s crucial that all messages dead lettered from the <code>orders</code> queue are routable.
The <a href="https://www.rabbitmq.com/rabbitmq-website/docs/ae">alternate exchange</a> in the above diagram provides "or else" routing semantics, ensuring messages end up in the <code>uncategorised-dlq</code> if no <code>x-opt-dead-letter-category</code> annotation is set.
This might occur, for example, if the publisher sets a <code>ttl</code> <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-header" target="_blank" rel="noopener noreferrer">header</a> but no consumer grants <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#link-credit">link credit</a>, causing the message to expire and be dead lettered.</p>
<p>The scenario depicted above is demonstrated in the <a href="https://github.com/ansd/modified-outcome/blob/v0.1.0/src/main/java/com/github/ansd/App.java" target="_blank" rel="noopener noreferrer">modified-outcome sample application</a>.</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>modified-outcome sample application</summary><div><div class="collapsibleContent_i85q"><p>The sample app uses the <a href="https://github.com/rabbitmq/rabbitmq-amqp-java-client" target="_blank" rel="noopener noreferrer">RabbitMQ AMQP 1.0 Java Client</a>.</p><p>You can run this sample application as follows:</p><ol>
<li>Start RabbitMQ server via <code>docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:4.0-management</code></li>
<li>In the root directory of <a href="https://github.com/ansd/modified-outcome/tree/v0.1.0" target="_blank" rel="noopener noreferrer">the sample app</a>, start the client via <code>mvn clean compile exec:java</code>.</li>
</ol><p>After publishing a message to the <code>orders</code> queue, the client app consumes the message and outputs the following on the console:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">publisher: received ACCEPTED outcome</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">consumer: setting annotations {x-opt-dead-letter-reason=Customer Not Eligible for Discount, x-opt-dead-letter-category=business-logic} and dead lettering...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The message will be dead lettered to the <code>business-logic-failures-dlq</code>.</p><p>To prevent message loss during dead lettering, the sample app uses <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2022/03/29/at-least-once-dead-lettering">at-least-once dead lettering</a>.</p></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dead-letter-vs-re-publish">Dead Letter vs. Re-publish<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/10/11/modified-outcome#dead-letter-vs-re-publish" class="hash-link" aria-label="Direct link to Dead Letter vs. Re-publish" title="Direct link to Dead Letter vs. Re-publish">​</a></h2>
<p>An AMQP 0.9.1 consumer cannot set custom headers before dead lettering a message.
However, instead of using <code>basic.nack</code> or <code>basic.reject</code> with <code>requeue=false</code> to dead letter a message, an AMQP 0.9.1 client could follow this approach:</p>
<ol>
<li>Re-publish the message directly to a specific "dead letter" queue with new custom headers.</li>
<li>Wait for RabbitMQ to confirm the re-published message.</li>
<li>Acknowledge the original message via <code>basic.ack</code>.</li>
</ol>
<p>An AMQP 1.0 client can choose between dead lettering with custom message annotations or re-publishing the message.
Both approaches have their advantages and trade-offs:</p>
<table><thead><tr><th>Criteria</th><th>Dead Letter with Custom Reason</th><th>Re-publish with Custom Reason</th></tr></thead><tbody><tr><td>Simplicity</td><td>Easier for consumers.</td><td>More complex, as the consumer must handle the republishing process.</td></tr><tr><td>Overhead</td><td>Low overhead.</td><td>Higher overhead for the client: the message payload must be re-published from the client to RabbitMQ, with additional latency due to the extra publish and confirm steps.</td></tr><tr><td>Network Failure between client and RabbitMQ before settling the consumed message.</td><td>Message gets requeued.</td><td>The message might have been both re-published and requeued, resulting in one copy ending up in the "dead letter" queue and another in the original queue.</td></tr><tr><td>Flexibility</td><td>Can modify only message annotations and route based on dead letter headers exchange.</td><td>Allows modification of any part of the message and re-publishing to any exchange.</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-up">Wrapping Up<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/10/11/modified-outcome#wrapping-up" class="hash-link" aria-label="Direct link to Wrapping Up" title="Direct link to Wrapping Up">​</a></h2>
<p>AMQP 1.0's modified outcome feature allows consumers to modify message annotations before requeueing or dead lettering.</p>
<p>Rather than relying solely on RabbitMQ's built-in dead lettering tracking via <a href="https://www.rabbitmq.com/rabbitmq-website/docs/dlx#effects">x-opt-deaths</a>, consumers can customise dead lettering event tracking and even choose which dead letter queue a message is sent to.</p>]]></content>
        <author>
            <name>David Ansari</name>
            <uri>https://github.com/ansd</uri>
        </author>
        <author>
            <name>Karl Nilsson</name>
            <uri>https://github.com/kjnilsson</uri>
        </author>
        <author>
            <name>Arnaud Cogoluègnes</name>
            <uri>https://github.com/acogoluegnes</uri>
        </author>
        <category label="AMQP 1.0" term="AMQP 1.0"/>
        <category label="RabbitMQ 4.0" term="RabbitMQ 4.0"/>
        <category label="New Features" term="New Features"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ten Benefits of AMQP 1.0 Flow Control]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control"/>
        <updated>2024-09-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This blog post outlines ten advantages of AMQP 1.0 flow control over AMQP 0.9.1, supported by two benchmarks demonstrating significant performance gains.]]></summary>
        <content type="html"><![CDATA[<p>This blog post outlines ten advantages of AMQP 1.0 flow control over AMQP 0.9.1, supported by two benchmarks demonstrating significant performance gains.
Additionally, we delve into the powerful AMQP 1.0 flow control primitives and how they are used in RabbitMQ.</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Flow_control_(data)" target="_blank" rel="noopener noreferrer">Flow control</a> is the process of managing the rate of data transmission between two nodes to prevent a fast sender from overwhelming a slow receiver.</p>
</blockquote>
<p>The AMQP 1.0 protocol defines flow control at two different levels:</p>
<ol>
<li><a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-flow-control" target="_blank" rel="noopener noreferrer">Link Flow Control</a></li>
<li><a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-session-flow-control" target="_blank" rel="noopener noreferrer">Session Flow Control</a></li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="link-flow-control">Link Flow Control<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#link-flow-control" class="hash-link" aria-label="Direct link to Link Flow Control" title="Direct link to Link Flow Control">​</a></h2>
<p>In AMQP 1.0, messages are sent over a <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#section-links" target="_blank" rel="noopener noreferrer">link</a>.
A link connects either a sending client application to an <a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#exchanges">exchange</a> in RabbitMQ or a <a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#queues">queue</a> in RabbitMQ to a consuming client application.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>While the AMQP 1.0 specification uses the terms "senders" and "receivers", the RabbitMQ documentation refers to <a href="https://www.rabbitmq.com/rabbitmq-website/docs/publishers">"publishers"</a> (or "producers") and <a href="https://www.rabbitmq.com/rabbitmq-website/docs/consumers">"consumers"</a>.
When discussing client applications, these terms can be used interchangeably. Therefore, a client application instance that:</p><ul>
<li>Sends messages to RabbitMQ is a <strong>sender</strong> / <strong>publisher</strong> / <strong>producer</strong> (with RabbitMQ acting as the <strong>receiver</strong>).</li>
<li>Receives messages from RabbitMQ is a <strong>receiver</strong> / <strong>consumer</strong> (with RabbitMQ acting as the <strong>sender</strong>).</li>
</ul></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="link-credit">Link-Credit<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#link-credit" class="hash-link" aria-label="Direct link to Link-Credit" title="Direct link to Link-Credit">​</a></h3>
<p>The central idea behind AMQP 1.0 link flow control is simple:
<strong>To receive messages, a consumer must grant credits to the sending queue.</strong></p>
<p>One credit corresponds to one message.
For example, when the consumer grants 10 credits, RabbitMQ is allowed to send 10 messages.
This straightforward principle, where the receiver provides <strong>feedback</strong> to the sender, ensures that the sender never overwhelms the receiver.</p>
<p>Both the receiver and sender maintain their own "link state".
Part of this state is the current link credit.
Link credit decreases by 1 each time a message is transferred.
Specifically, the sender reduces link credit by 1 when it sends a message, and the receiver reduces link credit by 1 when it receives a message.
When the sender's link credit reaches 0, it must stop sending messages.</p>
<p>Messages are sent in <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-transfer" target="_blank" rel="noopener noreferrer">transfer</a> frames.</p>
<p>Credits are granted in <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-flow" target="_blank" rel="noopener noreferrer">flow</a> frames:</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">field</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">link-credit</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">uint</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As you might have guessed, they are called "flow" frames because these frames carry flow control information.
The type <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-types-v1.0-os.html#type-uint" target="_blank" rel="noopener noreferrer">uint</a> stands for unsigned integer, a value between 0 and a large number (2^32 - 1).</p>
<p>Even after the link is successfully set up ("<a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-idp315568" target="_blank" rel="noopener noreferrer">attached</a>" in AMQP 1.0 terms), RabbitMQ is not allowed to start sending messages to the consumer until the consumer sends its first <code>flow</code> frame, granting link credit to the sending queue.</p>
<p>In its simplest form, when a client (receiver) grants a single credit to the queue (sender), the queue will send a single message, as illustrated in <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-idp416352" target="_blank" rel="noopener noreferrer">Figure 2.43: Synchronous Get</a> of the AMQP 1.0 specification:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Receiver                                      Sender</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">=================================================================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flow(link-credit=1)               ----------&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                        +---- transfer(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">*block until transfer arrives*         /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  &lt;---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------------------------------------------------------</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Synchronously getting a single message at a time will result in low throughput. Therefore, a client typically grants multiple credits to a queue, as shown in <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-idp424576" target="_blank" rel="noopener noreferrer">Figure 2.45: Asynchronous Notification</a> of the AMQP 1.0 specification:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Receiver                                          Sender</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">=====================================================================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  &lt;----------     transfer(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  &lt;----------     transfer(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flow(link-credit=delta)           ---+   +---     transfer(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      \ /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                       x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      / \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  &lt;--+   +--&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  &lt;----------     transfer(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  &lt;----------     transfer(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flow(link-credit=delta)           ---+   +---     transfer(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      \ /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                       x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      / \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  &lt;--+   +--&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---------------------------------------------------------------------</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If the receiver grants N credits and waits for <strong>all</strong> N messages to arrive before granting the next N credits, throughput will be higher compared to figure 2.43 where <code>N=1</code>.
However, if you look closely at figure 2.45, you will observe that the receiver grants more credits before receiving all previous messages.
This approach results in the highest throughput.
For example, in figure 2.45, the receiver might have granted 6 credits initially, and then sends another <code>flow</code> frame with <code>link-credit = 6</code> to RabbitMQ whenever it has received 3 messages.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Granting link credit is not cumulative.</p><p>When the receiver sends a <code>flow</code> frame with <code>link-credit = N</code>, the receiver <strong>sets</strong> the current credit to N instead of adding N more credits.
For example, if a receiver sends two <code>flow</code> frames with <code>link-credit = 50</code> without any messages being transferred in between, the receiver will have 50 credits, not 100.</p></div></div>
<p>The receiver knows its current processing capacity and therefore it is always the receiver (and never the sender) that determines the current link credit.
The sender only "consumes" link credit granted by the receiver by sending more messages.</p>
<p>The receiver is allowed to dynamically increase or decrease the amount of link credit depending on its current processing capacity.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Benefit #1</div><div class="admonitionContent_BuS1"><p><strong>A consuming client application can dynamically adjust how many messages it wants to receive from a specific queue.</strong></p><p>This is a great advantage of link flow control in AMQP 1.0 over <a href="https://www.rabbitmq.com/rabbitmq-website/docs/consumer-prefetch">consumer prefetch</a> in AMQP 0.9.1.
In AMQP 0.9.1, the <a href="https://github.com/rabbitmq/amqp-0.9.1-spec/blob/main/pdf/amqp-xml-doc0-9-1.pdf" target="_blank" rel="noopener noreferrer">basic.qos</a> method applies to <strong>all</strong> consumers on the given <a href="https://www.rabbitmq.com/rabbitmq-website/docs/channels">AMQP 0.9.1 channel</a>.
Furthermore, dynamically updating the consumer prefetch is not possible or convenient, as discussed in <a href="https://github.com/rabbitmq/rabbitmq-server/discussions/10174" target="_blank" rel="noopener noreferrer">#10174</a> and <a href="https://github.com/rabbitmq/rabbitmq-server/discussions/11955" target="_blank" rel="noopener noreferrer">#11955</a>.</p></div></div>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Benefit #2</div><div class="admonitionContent_BuS1"><p><strong>A consuming client application can dynamically prioritize which queue(s), out of multiple queues on the same session, it wants to receive messages from.</strong></p><p>This is another advantage of link flow control in AMQP 1.0 over <a href="https://www.rabbitmq.com/rabbitmq-website/docs/consumer-prefetch">consumer prefetch</a> in AMQP 0.9.1.
Once an AMQP 0.9.1 client calls <code>basic.consume</code> on multiple queues, it will continuously receive messages from all these queues until it calls <code>basic.cancel</code>.</p></div></div>
<p>You might wonder: What are good values for link-credit and how often should the client top up link credit?
As is often the case, the answer is that you will need to benchmark your specific workload with different values to find out.</p>
<p>Instead of implementing fancy algorithms, I would recommend starting simple:
for example, the client could initially grant 200 link credits and send a flow with <code>link-credit = 200</code> whenever the remaining link credit falls below 100.</p>
<p>In fact, this is what RabbitMQ does the other way around:
The RabbitMQ AMQP 1.0 <a href="https://github.com/rabbitmq/rabbitmq-server/blob/v4.0.x/deps/rabbit/src/rabbit_amqp_session.erl" target="_blank" rel="noopener noreferrer">session process</a> grants initially <a href="https://github.com/rabbitmq/rabbitmq-server/blob/v4.0.x/deps/rabbit/src/rabbit_amqp_session.erl#L52" target="_blank" rel="noopener noreferrer">170 link credits</a> to the publisher, and grants again 170 link credits when the remaining link credit falls below half (i.e. 85) <strong>and</strong> the number of unconfirmed messages is less than 170.
(Internally on the broker, publisher confirms are always enabled between AMQP 1.0 session process and target queues, even when no confirms are sent to the publishing client.
This means that if the target queue does not confirm fast enough, RabbitMQ stops granting link credit to the sending application.)
Please note that these RabbitMQ implementation details can change at any time.</p>
<p>The value of <code>170</code> is configurable via <a href="https://www.rabbitmq.com/rabbitmq-website/docs/configure#advanced-config-file">advanced.config</a> setting <code>rabbit.max_link_credit</code>.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Benefit #3</div><div class="admonitionContent_BuS1"><p><strong>When one target queue is overloaded, the publisher can continue publishing at high speed to all other target queues.</strong></p><p>Applications can send to multiple queues on the same AMQP 1.0 connection or session (by attaching multiple links).
Let's assume a simple scenario where a client opens two links:</p><ul>
<li>Link 1 sends to a classic queue.</li>
<li>Link 2 sends to a 5-replica quorum queue.</li>
</ul><p>Before confirming a message, the quorum queue must have replicated the message to a majority of replicas, with each replica <a href="https://man7.org/linux/man-pages/man2/fsync.2.html" target="_blank" rel="noopener noreferrer">fsync</a>ing the message to its local disk.</p><p>In contrast, classic queues do not replicate messages.
Furthermore, when a message is consumed and acknowledged quickly enough, classic queues can (thereafter) confirm the message back to the publisher without ever writing it to disk.
Hence, in this scenario, throughput for the classic queue will be far higher than for the quorum queue.</p><p>The beauty of AMQP 1.0 link flow control is that RabbitMQ can slow down granting credits on Link 2 while continuing to grant credits on Link 1 at a high frequency.
Therefore, even when the 5-replica quorum queue does not process messages as quickly as the (single replica) classic queue, the client can continue to send at full speed to the classic queue.</p><p>The following picture is copied from a <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2020/05/04/quorum-queues-and-flow-control-the-concepts#quorum-queues">previous</a> AMQP 0.9.1 blog post:</p><p></p><figure><img decoding="async" loading="lazy" alt="Flow control in AMQP 0.9.1" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/credit-flow-quorum-queue-da23589562b76b48019f48ba8e1e2753.png" width="625" height="538" class="img_ev3q"><figcaption>Flow control in AMQP 0.9.1</figcaption></figure><p></p><p>The word "credit" in this picture refers to RabbitMQ's internal flow control for AMQP 0.9.1 connections and is unrelated to link credit in AMQP 1.0.</p><p>The <code>reader</code> in the above picture is the Erlang process that reads AMQP 0.9.1 frames from the socket.
The picture shows that for AMQP 0.9.1 connections, RabbitMQ will block the <code>reader</code>, causing TCP backpressure to be applied to the client.
Therefore, when a single target queue becomes overloaded, RabbitMQ throttles the AMQP 0.9.1 connection, affecting the publishing to all other target queues.</p><p>The following benchmark shows how AMQP 1.0 can provide multiple times higher throughput compared to AMQP 0.9.1 when a connection sends to more than one target queue.</p><details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Benchmark: Two senders</summary><div><div class="collapsibleContent_i85q"><p>To put the theory we just discussed into practice, the <a href="https://github.com/ansd/rabbitmq-amqp/blob/v0.1.0/two_senders/main.go" target="_blank" rel="noopener noreferrer">two_senders</a> program simulates a similar scenario.</p><p>This program opens a single AMQP 0.9.1 connection and channel, as well as a single AMQP 1.0 connection and session.</p><p>On both the AMQP 0.9.1 channel and the AMQP 1.0 session, there are two goroutines that publish as quickly as possible into a classic queue and a quorum queue.
This results in four target queues in total:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    main.go                                                      RabbitMQ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------+                                     +----------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |        AMQP 0.9.1 connection        |                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |#####################################|                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+    |-------------------------------------|    +------------------------+    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    | P |                                               | classic-queue-amqp-091 |    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+                                               +------------------------+    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                        AMQP 0.9.1 channel                                            |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+                                               +------------------------+    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    | P |                                               | quorum-queue-amqp-091  |    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+    |-------------------------------------|    +------------------------+    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |#####################################|                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |                                     |                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |                                     |                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |                                     |                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |#####################################|                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+    |-------------------------------------|    +-----------------------+     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    | P |O============================================&gt;O| classic-queue-amqp-10 |     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+                                               +-----------------------+     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                        AMQP 1.0 session                                              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+                                               +-----------------------+     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    | P |O======================================+=====&gt;O| quorum-queue-amqp-10  |     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +-+-+    |----------------------------------|--|    +-----------------------+     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|      |      |##################################|##|                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|      |      |        AMQP 1.0 connection       |  |                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------|------+                                  |  +----------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       |                                         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       |                                         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   Publisher                               AMQP 1.0 link</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   goroutine</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Run the benchmark as follows:</p><ol>
<li>Start RabbitMQ server <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.0-beta.6" target="_blank" rel="noopener noreferrer">v4.0.0-beta.6</a> using <code>make run-broker</code> on an Ubuntu box. (On macOS, <code>fsync</code> does not write physically to the platters).</li>
<li>Execute the Go program with <code>go run two_senders/main.go</code>. After 10 seconds, the Go program will complete.</li>
<li>List the number of messages in each queue:</li>
</ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./sbin/rabbitmqctl --silent list_queues name type messages --formatter=pretty_table</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌────────────────────────┬─────────┬──────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ name                   │ type    │ messages │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├────────────────────────┼─────────┼──────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ classic-queue-amqp-091 │ classic │ 159077   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├────────────────────────┼─────────┼──────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ quorum-queue-amqp-091  │ quorum  │ 155782   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├────────────────────────┼─────────┼──────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ classic-queue-amqp-10  │ classic │ 1089075  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├────────────────────────┼─────────┼──────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ quorum-queue-amqp-10   │ quorum  │ 148580   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└────────────────────────┴─────────┴──────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>As explained in the <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#quorum-queues">AMQP 1.0 Benchmarks</a> blog post, quorum queues <a href="https://man7.org/linux/man-pages/man2/fsync.2.html" target="_blank" rel="noopener noreferrer">fsync</a> (<code>fdatasync</code> to be precise), whereas classic queues do not.
Therefore, even without replication, a quorum queue is significantly slower than a classic queue because I use a consumer-grade disk where each <code>fsync</code> takes at least 5 milliseconds.
For production clusters, it is recommended to use high-end, enterprise-grade disks that <code>fsync</code> faster.</p><p>The results show that the single AMQP 0.9.1 connection sends roughly the same number of messages to both the target classic queue and the target quorum queue.
This is because <code>quorum-queue-amqp-091</code> causes the entire AMQP 0.9.1 connection to be blocked (and unblocked) around 80 times per second in my benchmark.
As a result, the publishing rate to multiple target queues (<code>classic-queue-amqp-091</code> and <code>quorum-queue-amqp-091</code>) on a single AMQP 0.9.1 connection is constrained by the slowest target queue (<code>quorum-queue-amqp-091</code>).
In total, the AMQP 0.9.1 connection sends <code>159,077 + 155,782 = 314,859</code> messages.</p><p>In contrast, thanks to link flow control, RabbitMQ throttles only the link to the <code>quorum-queue-amqp-10</code> <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-target" target="_blank" rel="noopener noreferrer">target</a>, allowing the AMQP 1.0 client to continue publishing at full speed to the <code>classic-queue-amqp-10</code> target.
In total, the AMQP 1.0 connection sends <code>1,089,075 + 148,580 = 1,237,655</code> messages.</p><p>Therefore, in our simple benchmark, the total send throughput of AMQP 1.0 is four times (!) higher than that of AMQP 0.9.1.</p></div></div></details></div></div>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Benefit #4</div><div class="admonitionContent_BuS1"><p><strong>When one target queue is overloaded, the client can continue consuming at high speed from all source queues.
Therefore, AMQP 1.0 clients can use a single connection for both publishing and consuming at high throughput.</strong></p><p>Benefit #3 described how a single overloaded target queue causes RabbitMQ to block the reader process from reading any AMQP 0.9.1 frames.
This means that not only can the client no longer publish messages, but it also <strong>cannot consume</strong> messages.
This is because the client's message <a href="https://www.rabbitmq.com/rabbitmq-website/docs/confirms#acknowledgement-modes">acknowledgements</a> are no longer processed by RabbitMQ, preventing the delivery of new messages to the consumer once its <a href="https://www.rabbitmq.com/rabbitmq-website/docs/confirms#channel-qos-prefetch">prefetch</a> limit is reached.</p><p>Although this throttling in consumption is temporary (with the AMQP 0.9.1 <code>reader</code> process being blocked and unblocked many times per second), it can significantly reduce the consumption rate.</p><p>The RabbitMQ AMQP 0.9.1 <a href="https://www.rabbitmq.com/rabbitmq-website/docs/connections#flow-control">documentation</a> advises:</p><blockquote>
<p>It is therefore recommended that, when possible, publishers and consumers use separate connections so that consumers are isolated from potential flow control that may be applied to publishing connections, affecting manual consumer acknowledgements.</p>
</blockquote><p>This has led to an entire ecosystem of AMQP 0.9.1 client libraries adopting this "best practice" of using separate connections for publishing and consuming.
For example the RabbitMQ AMQP 0.9.1 C++ library <a href="https://github.com/bloomberg/rmqcpp/blob/1.0.0/README.md#features" target="_blank" rel="noopener noreferrer">states</a>:</p><blockquote>
<p>Publishing and Consuming happens on different connections:</p>
<p>A common application pitfall is to consume &amp; produce on the same connection.
This can cause slow-downs in consumption rate, as RabbitMQ applies backpressure to fast publishers - depending on the exact queues being consumed/published from this can cause a vicious cycle.</p>
</blockquote><p>In contrast, AMQP 1.0 link flow control allows to slow down only the link sender in the client application.
All other links (whether sending or consuming) can continue to operate at full speed.</p><p>Therefore, in AMQP 1.0, clients can use a single connection for both publishing and consuming.</p><details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Benchmark: One sender, one receiver</summary><div><div class="collapsibleContent_i85q"><p>Program <a href="https://github.com/ansd/rabbitmq-amqp/blob/v0.1.0/one_sender_one_receiver/main.go" target="_blank" rel="noopener noreferrer">one_sender_one_receiver</a> simulates a scenario where a client opens two links:</p><ul>
<li>Link 1 receives from a classic queue.</li>
<li>Link 2 sends to a quorum queue.</li>
</ul><p>This program opens a single AMQP 0.9.1 connection and channel, as well as a single AMQP 1.0 connection and session.</p><p>To prepare for the benchmark, the program writes one million messages into each classic queue.</p><p>On both the AMQP 0.9.1 channel and the AMQP 1.0 session, there are two goroutines:</p><ul>
<li>One goroutine (Link 1) that receives messages with a prefetch of 200 from the classic queue and acknowledges each one.</li>
<li>One goroutine (Link 2) that publishes in batches of 10,000 messages to the quorum queue.
(After all 10,000 confirmations are received, the next batch is published.)</li>
</ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    main.go                                                      RabbitMQ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------+                                     +----------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |        AMQP 0.9.1 connection        |                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |#####################################|                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+    |-------------------------------------|    +------------------------+    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    | C |                                               | classic-queue-amqp-091 |    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+                                               +------------------------+    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                        AMQP 0.9.1 channel                                            |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+                                               +------------------------+    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    | P |                                               | quorum-queue-amqp-091  |    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+    |-------------------------------------|    +------------------------+    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |#####################################|                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |                                     |                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |                                     |                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |                                     |                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |#####################################|                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+    |-------------------------------------|    +-----------------------+     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    | C |O&lt;============================================O| classic-queue-amqp-10 |     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+                                               +-----------------------+     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                        AMQP 1.0 session                                              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +---+                                               +-----------------------+     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    | P |O======================================+=====&gt;O| quorum-queue-amqp-10  |     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    +-+-+    |----------------------------------|--|    +-----------------------+     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|      |      |##################################|##|                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|      |      |        AMQP 1.0 connection       |  |                                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------|------+                                  |  +----------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       |                                         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       |                                         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Publisher or Consumer                      AMQP 1.0 link</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   goroutine</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Run the benchmark as follows:</p><ol>
<li>Start RabbitMQ server <a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.0-beta.6" target="_blank" rel="noopener noreferrer">v4.0.0-beta.6</a> using <code>make run-broker</code> on an Ubuntu box.</li>
<li>Execute the Go program with <code>go run one_sender_one_receiver/main.go</code></li>
<li>Once the program completes, list the number of messages in each queue:</li>
</ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./sbin/rabbitmqctl --silent list_queues name type messages --formatter=pretty_table</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">┌────────────────────────┬─────────┬──────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ name                   │ type    │ messages │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├────────────────────────┼─────────┼──────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ classic-queue-amqp-091 │ classic │ 990932   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├────────────────────────┼─────────┼──────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ quorum-queue-amqp-091  │ quorum  │ 172800   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├────────────────────────┼─────────┼──────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ classic-queue-amqp-10  │ classic │ 336229   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├────────────────────────┼─────────┼──────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ quorum-queue-amqp-10   │ quorum  │ 130000   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└────────────────────────┴─────────┴──────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>While the AMQP 0.9.1 client consumes only <code>1,000,000 - 990,932 = 9,068</code> messages, the AMQP 1.0 client consumes <code>1,000,000 - 336,229 = 663,771</code> messages.</p><p>Therefore, in this benchmark, the AMQP 1.0 client receives 73 times (!) more messages than the AMQP 0.9.1 client.</p></div></div></details></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>In AMQP 0.9.1, <a href="https://www.rabbitmq.com/rabbitmq-website/docs/consumer-prefetch">consumer prefetch</a> limits the number of unacknowledged messages.
When a consumer acknowledges messages by sending <code>basic.ack</code> frames, RabbitMQ delivers additional messages.</p><p>In AMQP 1.0, message acknowledgment is independent of link flow control.
A consumer acknowledging messages by sending <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-disposition" target="_blank" rel="noopener noreferrer">disposition</a> frames will not prompt RabbitMQ to deliver more messages.
Instead, the client must replenish link credit by sending <code>flow</code> frames for RabbitMQ to continue sending messages.
For convenience, some AMQP 1.0 client libraries automatically send both <code>disposition</code> and <code>flow</code> frames when your application acknowledges messages.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="delivery-count">Delivery-Count<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#delivery-count" class="hash-link" aria-label="Direct link to Delivery-Count" title="Direct link to Delivery-Count">​</a></h3>
<p>So far, we understand only one field of the <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-flow" target="_blank" rel="noopener noreferrer">flow</a> frame: <code>link-credit</code>.</p>
<p>What happens in the following scenario?</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Receiver                                  Sender</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">=======================================================================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                              ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">link state:                               link state:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> link-credit = 3                           link-credit = 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flow(link-credit = 6)     ---+   +---     transfer(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                              \ /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                               x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                              / \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                          &lt;--+   +--&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">link state:                               link state:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> link-credit = 5                           link-credit = 6</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Initially, <code>link-credit</code> is 3.
The receiver decides to send a <code>flow</code> frame, setting the new <code>link-credit</code> to 6.
In parallel, the sender sends a <code>transfer</code> frame.</p>
<p>Since the receiver received the <code>transfer</code> frame after it sent the <code>flow</code> frame, it will compute its new link-credit as <code>6 - 1 = 5</code>.
However, because the sender received the <code>flow</code> frame after it sent the <code>transfer</code> frame, it will set the credit to 6.
As a result, the state - and therefore the view of how many credits the link has left - becomes misaligned.
This is problematic because the sender could potentially overflow the receiver.</p>
<p>To prevent such misalignments, a second field is needed in both the link state and the <code>flow</code> frame:</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">field</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">delivery-count</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">sequence-no</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The delivery-count is increased by 1 each time a message is transferred.
Specifically, the sender increments the delivery-count whenever it sends a message, and the receiver increments the delivery-count whenever it receives a message.</p>
<p>When the sender receives a <code>flow</code> frame (which contains both link-credit and delivery-count), the sender sets its link-credit according to this <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-flow-control" target="_blank" rel="noopener noreferrer">formula</a>:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">link-credit(snd) := delivery-count(rcv) + link-credit(rcv) - delivery-count(snd).</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>(snd)</code> refers to the link state at the sender, while the link state at the receiver <code>(rcv)</code> is sent within the <code>flow</code> frame to the sender.</p>
<p>At the sender, this formula means:
"Set the new link-credit to the link-credit I just received in the flow frame minus any in-flight deliveries."</p>
<p>The purpose of the delivery-count is to establish an order in the sequence of events, which are:</p>
<ul>
<li>Sender sends message</li>
<li>Receiver receives message</li>
<li>Receivers grants link-credit</li>
<li>Sender computes receiver's link-credit</li>
</ul>
<p>Using the delivery-count resolves the misalignment issue we discussed earlier.</p>
<p>Let’s assume the delivery-count is initially set to 20:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Receiver                                      Sender</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">========================================================================================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">link state:                                   link state:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> delivery-count = 20                           delivery-count = 20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> link-credit = 3                               link-credit = 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flow(delivery-count = 20,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     link-credit = 6)         ---+   +---     transfer(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  \ /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                   x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  / \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                              &lt;--+   +--&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">link state:                                   link state:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> delivery-count = 21                           delivery-count = 21</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> link-credit = 5                               link-credit = 20+6-21 = 5 (above formula)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Some AMQP 1.0 fields, including the delivery-count are of type <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-sequence-no" target="_blank" rel="noopener noreferrer">sequence-no</a>.
These are 32-bit <a href="https://www.ietf.org/rfc/rfc1982.txt" target="_blank" rel="noopener noreferrer">RFC-1982</a> serial numbers that range from <code>[0 .. 4,294,967,295]</code> and wrap around: Adding 1 to 4,294,967,295 results in 0.</p></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The delivery-count is initialized by the sender, which sends its chosen value in the <code>initial-delivery-count</code> field of the <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-attach" target="_blank" rel="noopener noreferrer">attach</a> frame.</p><p>The sender can initialize the delivery-count to any value it chooses, such as 0, 10, or 4,294,967,295.
This value has no intrinsic meaning beyond the purpose we discussed earlier: comparing the delivery-count of the receiver with that of the sender to determine how many messages are in-flight.</p></div></div>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>From what I can tell, the AMQP 1.0 link flow control seems to be based on the paper <a href="https://www.eecs.harvard.edu/~htk/publication/1995-ieee-network-kung-morris.pdf" target="_blank" rel="noopener noreferrer">Credit-Based Flow Control for ATM Networks</a> from 1995.</p><p>The formula</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">link-credit(snd) := delivery-count(rcv) + link-credit(rcv) - delivery-count(snd).</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>from the AMQP 1.0 specification in section <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-flow-control" target="_blank" rel="noopener noreferrer">2.6.7</a> matches the formula</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Crd_Bal = Buf_Alloc - (Tx_Cnt - Fwd_Cnt)(1)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>in the paper.</p><p>The AMQP 1.0 specification even adopts similar terminology from the paper, such as "link" and "node."
Furthermore, the specification likely refers to "delivery-count" because it is called "count" in the paper as well (even though the specification clarifies that in AMQP it's not actually a count, but rather a sequence number).</p><p>Figure 2 in the paper illustrates the concept nicely:</p><p></p><figure><img decoding="async" loading="lazy" alt="Credit-Based Flow Control for ATM Networks, Figure 2: Credit Update Protocol" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/figure-2-credit-update-protocol-a457495495711e1e2a6015597b64714e.png" width="1546" height="966" class="img_ev3q"><figcaption>Credit-Based Flow Control for ATM Networks, Figure 2: Credit Update Protocol</figcaption></figure><p></p><p>In this figure:</p><ul>
<li><code>Tx_Cnt</code> corresponds to <code>delivery-count(snd)</code></li>
<li><code>Fwd_Cnt</code> corresponds to <code>delivery-count(rcv)</code></li>
<li><code>Crd_Bal</code> corresponds to <code>link-credit(snd)</code></li>
<li><code>Buf_Alloc</code> corresponds to <code>link-credit(rcv)</code></li>
</ul><p>The paper explains in detail how frequently and by how much a receiver should top up link credit.
If you want to become an expert in AMQP 1.0 flow control, I recommend reading both the AMQP 1.0 specification and the paper.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="drain">Drain<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#drain" class="hash-link" aria-label="Direct link to Drain" title="Direct link to Drain">​</a></h3>
<p>Having understood the two most important link control fields of the <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-flow" target="_blank" rel="noopener noreferrer">flow</a> frame (<code>link-credit</code> and <code>delivery-count</code>), let's move on to the <code>drain</code> field:</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">field</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">drain</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">boolean</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">default</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">false</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>By default, the <code>drain</code> field is set to <code>false</code>.
The receiver decides whether drain mode is enabled, and the sender sets <code>drain</code> to the last known value from the receiver.</p>
<p>Draining means that the sender should use all link credit from the receiver by sending available messages.
If there are not enough messages to send, the sender must still exhaust all link credit as follows:</p>
<ol>
<li>Advance the delivery-count by the remaining link-credit.</li>
<li>Set link-credit to 0.</li>
<li>Send a <code>flow</code> frame to the receiver.</li>
</ol>
<p>By setting the <code>drain</code> field to <code>true</code>, the consumer requests RabbitMQ to "Either send a <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-transfer" target="_blank" rel="noopener noreferrer">transfer</a> or a <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-flow" target="_blank" rel="noopener noreferrer">flow</a> frame."
If the source queue is empty, RabbitMQ will promptly reply with only a <code>flow</code> frame.</p>
<p>Therefore, the <code>drain</code> field allows a consumer to set a timeout when synchronously getting messages, as shown in <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-idp416352" target="_blank" rel="noopener noreferrer">Figure 2.44: Synchronous Get with a Timeout</a> of the AMQP 1.0 specification:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    Receiver                                      Sender</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    =================================================================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                          ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flow(link-credit=1)               ----------&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  *wait for link-credit &lt;= 0*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flow(drain=True)                  ---+   +--- transfer(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                          \ /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                           x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                          / \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(1)                                   &lt;--+   +--&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(2)                                   &lt;---------- flow(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                          ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -----------------------------------------------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      (1) If a message is available within the timeout, it will</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          arrive at this point.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      (2) If a message is not available within the timeout, the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          drain flag will ensure that the sender promptly advances the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          delivery-count until link-credit is consumed.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Because the link-credit is consumed quickly, the consumer can unambiguously determine whether a message was received or if the operation timed out.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="echo">Echo<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#echo" class="hash-link" aria-label="Direct link to Echo" title="Direct link to Echo">​</a></h3>
<p>Similar to the <code>drain</code> field, the <code>echo</code> field is:</p>
<ul>
<li>set to <code>false</code> by default</li>
<li>determined by the consumer, as RabbitMQ does not set this field in its current implementation</li>
</ul>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">field</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">echo</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">boolean</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">default</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">false</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The consumer can set the <code>echo</code> field to request RabbitMQ to reply with a <code>flow</code> frame.
One use case is depicted in <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-idp429232" target="_blank" rel="noopener noreferrer">Figure 2.46: Stopping Incoming Messages</a> of the AMQP 1.0 specification:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    Receiver                                       Sender</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ================================================================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                           ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                       &lt;---------- transfer(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flow(...,                          ---+   +--- transfer(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         link-credit=0,                    \ /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         echo=True)                         x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                           / \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(1)                                    &lt;--+   +--&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(2)                                    &lt;---------- flow(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                           ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ----------------------------------------------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      (1) In-flight transfers can still arrive until the flow state</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          is updated at the sender.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      (2) At this point no further transfers will arrive.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Benefit #5</div><div class="admonitionContent_BuS1"><p><strong>In AMQP 1.0, a consumer can be stopped/paused and later resumed.</strong></p><p>In AMQP 0.9.1, a consumer cannot be paused and resumed. Instead, the consumer must be cancelled using the <code>basic.cancel</code> method before registering a new consumer with <code>basic.consume</code>.</p></div></div>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Benefit #6</div><div class="admonitionContent_BuS1"><p><strong>AMQP 1.0 allows a graceful handoff from one <a href="https://www.rabbitmq.com/rabbitmq-website/docs/consumers#single-active-consumer">single active consumer</a> to the next, while maintaining message order.</strong></p><p>In AMQP 1.0, the consumer can either stop the link first and acknowledge messages before <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-detach" target="_blank" rel="noopener noreferrer">detach</a>ing the link (preferred), or detach the link directly.
Detaching the link directly will requeue any unacknowledged messages.
Either way, detaching the link causes the next consumer to be activated and to receive the messages in the original order.</p><p>In contrast, a single active consumer in AMQP 0.9.1 cannot gracefully and safely hand over to the next one.
When an AMQP 0.9.1 consumer cancels consumption via <code>basic.cancel</code> but still has unacknowledged messages, the queue will activate the next consumer.
If the AMQP 0.9.1 client crashes shortly after, messages checked out to the old consumer will be requeued, potentially violating message order.
To maintain message order, an AMQP 0.9.1 client must close the entire channel (without calling <code>basic.cancel</code> first) so that messages are requeued before the next consumer is activated.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="available">Available<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#available" class="hash-link" aria-label="Direct link to Available" title="Direct link to Available">​</a></h3>
<p>RabbitMQ sets the <code>available</code> field in the <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-flow" target="_blank" rel="noopener noreferrer">flow</a> frame to inform the consumer how many messages are available:</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">field</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">available</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">uint</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>available</code> value is only an approximation because, from the time the queue emits this information until the <code>flow</code> frame arrives at the consumer, this information can already be outdated, for instance when other clients publish messages to or consume messages from this queue.</p>
<p>For <a href="https://www.rabbitmq.com/rabbitmq-website/docs/classic-queues">classic queues</a> and <a href="https://www.rabbitmq.com/rabbitmq-website/docs/quorum-queues">quorum queues</a>, <code>available</code> indicates the number of messages ready for delivery (i.e. the queue length excluding messages that are checked out to consumers).</p>
<p>For <a href="https://www.rabbitmq.com/rabbitmq-website/docs/streams">streams</a>, <code>available</code> represents the difference between the committed offset and the last consumed <a href="https://www.rabbitmq.com/rabbitmq-website/docs/streams#consuming">offset</a>.
Roughly, the committed offset is what the different stream <a href="https://www.rabbitmq.com/rabbitmq-website/docs/streams#replication-factor">replicas</a> in the RabbitMQ cluster agree is the end of the stream.
The last consumed offset might be the same as the committed offset or lag behind it.
The <code>available</code> value is merely an estimate because <a href="https://www.rabbitmq.com/rabbitmq-website/docs/streams#limitations-ui-metrics">a stream offset does not necessarily represent a message</a>.</p>
<p>If the <a href="https://www.rabbitmq.com/rabbitmq-website/docs/consumers#single-active-consumer">Single Active Consumer</a> feature is enabled, quorum queues will return <code>available = 0</code> for all inactive (waiting) consumers.
This makes sense since no messages are available for inactive consumers, regardless of how much credit they have topped up.</p>
<p>In the <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#echo">previous</a> section, we learned that one use case for the consumer setting the <code>echo</code> field is to stop a link.
Another use case is when a consumer wants to learn about the number of messages available in the queue it consumes from.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Benefit #7</div><div class="admonitionContent_BuS1"><p><strong>AMQP 1.0 informs the consumer about the number of messages available in the queue.</strong></p><p>Including this information in every <code>flow</code> frame sent from RabbitMQ to the consumer is an advantage over AMQP 0.9.1.
In AMQP 0.9.1, methods to query available messages are more cumbersome and less efficient:</p><ul>
<li><code>queue.declare</code> with <code>passive=true</code>: The <code>queue.declare_ok</code> reply will contain a <code>message_count</code> field.</li>
<li><code>basic.get</code>: The <code>basic.get_ok</code> reply will contain a <code>message_count</code> field.</li>
</ul></div></div>
<p>The <code>available</code> field could also be set by a publisher to tell RabbitMQ how many messages the publisher has available to send.
Currently, RabbitMQ ignores this information.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="properties">Properties<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#properties" class="hash-link" aria-label="Direct link to Properties" title="Direct link to Properties">​</a></h3>
<p>The <code>properties</code> field of the <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-flow" target="_blank" rel="noopener noreferrer">flow</a> frame can carry application specific link state properties:</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">field</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">properties</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">fields</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Currently, RabbitMQ does not make use of this field.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Benefit #8</div><div class="admonitionContent_BuS1"><p><strong>AMQP 1.0 link flow control is extensible.</strong></p><p>Imagine that RabbitMQ wants to enable publishers to send messages directly to the quorum queue leader.
Since all <a href="https://github.com/rabbitmq/ra" target="_blank" rel="noopener noreferrer">Ra</a> commands, including enqueuing a message, must go through the leader first, it would make sense for the client to connect directly to the RabbitMQ node that hosts the quorum queue leader.
This "queue locality" would reduce RabbitMQ intra-cluster traffic, thereby improving latency and throughput.
When the leader changes, instead of causing RabbitMQ to <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-detach" target="_blank" rel="noopener noreferrer">detach</a> the link - which could be disruptive to the publishing application - RabbitMQ could push a leader change notification, including the new RabbitMQ node hosting the quorum queue leader, to the publisher via the <code>properties</code> field.
The application could then decide when it is convenient to detach the link and attach a new link on a different connection to continue publishing "locally".</p><p>Alternatively, RabbitMQ could send a boolean value for a key <code>local</code> in every <code>flow</code> frame's <code>properties</code> field to indicate whether the link is currently publishing or consuming locally.
If the <code>local</code> field flips from <code>true</code> to <code>false</code>, the client could query the new queue topology and leader via <a href="https://github.com/oasis-tcs/amqp-specs/blob/master/http-over-amqp-v1.0-wd06a.docx" target="_blank" rel="noopener noreferrer">HTTP over AMQP 1.0</a>.</p><p>These are just hypothetical examples showing how RabbitMQ could make use of link flow control extensibility in the future, which is an advantage over AMQP 0.9.1.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h3>
<p>We learned that AMQP 1.0 link flow control protects individual consumers or queues from being overwhelmed with messages.
The receiver periodically provides feedback to the sender on how many messages it can currently handle.</p>
<p>Each link endpoint (sender and receiver) maintains full link flow control state and exchanges this state via <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-flow" target="_blank" rel="noopener noreferrer">flow</a> frames with the other side.</p>
<p>The following link flow control fields are independently determined by the <strong>receiver</strong>:</p>
<ul>
<li><code>link-credit</code></li>
<li><code>drain</code></li>
</ul>
<p>The following link flow control fields are independently determined by the <strong>sender</strong>:</p>
<ul>
<li><code>delivery-count</code></li>
<li><code>available</code></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="session-flow-control">Session Flow Control<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#session-flow-control" class="hash-link" aria-label="Direct link to Session Flow Control" title="Direct link to Session Flow Control">​</a></h2>
<p>Before diving into <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-session-flow-control" target="_blank" rel="noopener noreferrer">session flow control</a>, let's recap what a <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#section-sessions" target="_blank" rel="noopener noreferrer">session</a> actually is.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="session">Session<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#session" class="hash-link" aria-label="Direct link to Session" title="Direct link to Session">​</a></h3>
<p>A client library creates a single TCP connection per <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#section-connections" target="_blank" rel="noopener noreferrer">AMQP connection</a>.
An AMQP 1.0 connection is established using the <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-open" target="_blank" rel="noopener noreferrer">open</a> frame.</p>
<p>Within an AMQP 1.0 connection, the client can then start multiple AMQP 1.0 sessions.
This is <a href="https://www.rabbitmq.com/rabbitmq-website/docs/connections#protocol-differences">analogous</a> to how an AMQP 0.9.1 client can open multiple <a href="https://www.rabbitmq.com/rabbitmq-website/docs/channels">AMQP 0.9.1 channels</a> within an AMQP 0.9.1 connection.
An AMQP 1.0 session is started using the <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-begin" target="_blank" rel="noopener noreferrer">begin</a> frame.</p>
<p>Within a session, a client can then create <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#section-links" target="_blank" rel="noopener noreferrer">links</a> by sending the <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-attach" target="_blank" rel="noopener noreferrer">attach</a> frame.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  Client App                                       RabbitMQ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------+                                +-------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             |################################|             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   +---+     |--------------------------------|    +---+    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   | C |O&lt;===============================+========O| Q |    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   +-+-+ \   |-------------------+-------|----|   |+-+-+    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|     |    \  |#######+###########|#######|####|   |  |      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-----|-----\-+       |           |       |    +---|--|------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      |      \        |           |       |        |  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      |     Target    |           |       |    Source |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      |               |           |       |           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   Consumer           |           |     Link        Queue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      |       Session</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 Connection</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>A client application could create, for example:</p>
<ul>
<li>A single connection with a single session, or</li>
<li>A single connection with multiple sessions, or</li>
<li>Multiple connections with one or more sessions each</li>
</ul>
<p>Usually, a single connection with a single session is sufficient.</p>
<p>Opening an AMQP connection comes with some overhead:
A TCP connection must be established, allocating operating system resources such as sockets and TCP buffers in both the client and server, and incurring latency for the TCP or TLS handshake.
Additionally, on the RabbitMQ node, a <a href="https://www.erlang.org/doc/apps/stdlib/supervisor.html" target="_blank" rel="noopener noreferrer">supervision tree</a> is created for each incoming AMQP connection.</p>
<p>A session can be thought of as a "lightweight" connection.
Each AMQP 1.0 session is currently implemented as its own <a href="https://www.erlang.org/doc/system/ref_man_processes.html" target="_blank" rel="noopener noreferrer">Erlang process</a>.
Hence, creating a session is inexpensive if the connection is already established.</p>
<p>Creating a second session within an AMQP connection might be useful in the following scenarios:</p>
<ul>
<li>Quickly and cheaply creating another "virtual connection" without incurring the aforementioned AMQP connection setup overhead.</li>
<li>Ensuring high-priority <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-transfer" target="_blank" rel="noopener noreferrer">transfer</a> frames (requiring low latency) are not blocked by other transfer frames.</li>
<li>Increasing parallelism when the RabbitMQ <a href="https://github.com/rabbitmq/rabbitmq-server/blob/v4.0.0-beta.6/deps/rabbit/src/rabbit_amqp_session.erl" target="_blank" rel="noopener noreferrer">session process</a> becomes very busy (for example, routing messages to <a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#queues">queues</a>).</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="flow-fields">Flow Fields<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#flow-fields" class="hash-link" aria-label="Direct link to Flow Fields" title="Direct link to Flow Fields">​</a></h3>
<blockquote>
<p>Sessions provide a flow control scheme based on the number of transfer frames transmitted.
Since frames have a maximum size for a given connection, this provides flow control based on the number of bytes transmitted.</p>
</blockquote>
<p>Remember that a <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-idp484080" target="_blank" rel="noopener noreferrer">large message</a> is split into multiple transfer frames.</p>
<p><a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-session-flow-control" target="_blank" rel="noopener noreferrer">Session flow control</a> in AMQP 1.0 operates at a higher layer than link flow control.
While link flow control protects individual consumers and queues, session flow control is designed to protect the entire client application and RabbitMQ as a whole.</p>
<p>Just as each link endpoint maintains link flow control state and exchanges this state via <code>flow</code> frames, each session endpoint maintains session flow control state and exchanges this state within the same <code>flow</code> frames.
The remaining fields in the <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-flow" target="_blank" rel="noopener noreferrer">flow</a> frame are therefore used for session flow control:</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">field</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">next-incoming-id</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">transfer-number</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">field</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">incoming-window</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">uint</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">mandatory</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">true</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">field</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">next-outgoing-id</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">transfer-number</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">mandatory</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">true</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">field</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">outgoing-window</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">uint</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">mandatory</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">true</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>incoming-window</code> is similar to the <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#link-credit">link-credit</a> field in that the receiving side informs the sending side how many "units" it can tolerate receiving.
The difference is that for <code>link-credit</code>, the unit is a potentially large application message, while for <code>incoming-window</code>, the unit is a <code>transfer</code> frame.</p>
<p>To provide an extreme example for better understanding: if the negotiated <code>max-frame-size</code> on the connection is very low and a single message is very large, if the receiver grants one link credit to the sender, the sender might still be blocked by session flow control sending this message in its entirety.</p>
<p><code>next-incoming-id</code> and <code>next-outgoing-id</code> are sequence numbers and serve the same purpose as the <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#delivery-count">delivery-count</a> in link flow control:
they ensure that the windows are computed correctly on the other side when <code>transfer</code> frames are sent in parallel with <code>flow</code> frames.
Two sequence numbers are needed for session flow control as opposed to one for link flow control because a session is bidirectional, while a link is unidirectional.</p>
<p>Initially, RabbitMQ allows the publisher to send <a href="https://github.com/rabbitmq/rabbitmq-server/blob/v4.0.0-beta.6/deps/rabbit/src/rabbit_amqp_session.erl#L60" target="_blank" rel="noopener noreferrer">400</a> transfer frames.
Whenever the RabbitMQ session process has processed half of that number (200 transfer frames), RabbitMQ expands this window by sending a <code>flow</code> frame to the publisher containing <code>incoming_window = 400</code>.</p>
<p>The value of <code>400</code> is configurable via <a href="https://www.rabbitmq.com/rabbitmq-website/docs/configure#advanced-config-file">advanced.config</a> setting <code>rabbit.max_incoming_window</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="rabbitmq-alarms">RabbitMQ Alarms<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#rabbitmq-alarms" class="hash-link" aria-label="Direct link to RabbitMQ Alarms" title="Direct link to RabbitMQ Alarms">​</a></h3>
<p>The only exception to this rule is when a <a href="https://www.rabbitmq.com/rabbitmq-website/docs/alarms">memory or disk alarm</a> is triggered.
To protect RabbitMQ from running out of memory or disk space, each session will close its incoming window by sending a <code>flow</code> frame with <code>incoming_window = 0</code> to publishers, effectively preventing them from sending any further <code>transfer</code> frames.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Benefit #9</div><div class="admonitionContent_BuS1"><p><strong>In the event of a cluster wide memory or disk alarm, RabbitMQ will block AMQP 1.0 clients only from publishing <code>transfer</code> frames.
Other operations, such as AMQP 1.0 clients consuming on the same session or creating new connections that only consume in order to empty queues in RabbitMQ (thereby reducing memory and disk usage), will still be allowed.</strong></p><p>In AMQP 0.9.1, RabbitMQ will block reading from the connection socket entirely and prevent opening new connections until the alarm clears.
AMQP 0.9.1 clients must use separate connections for publishing and consuming to continue consuming during an alarm.</p></div></div>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Benefit #10</div><div class="admonitionContent_BuS1"><p>As described in Benefits #4 and #9, <strong>because clients can safely and efficiently use a single AMQP 1.0 connection for both publishing and consuming, memory usage is reduced in RabbitMQ</strong>.</p><p>AMQP 0.9.1 practically requires twice the number of connections compared to AMQP 1.0.
The <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#many-connections">AMQP 1.0 Benchmarks</a> provide insights into how much memory could be saved.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="incoming-window">Incoming-Window<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#incoming-window" class="hash-link" aria-label="Direct link to Incoming-Window" title="Direct link to Incoming-Window">​</a></h3>
<p>The disadvantage of AMQP 1.0 flow control is its complexity.
While the ideas and motivations behind link flow control and session flow control are sound, implementing one layer (session flow control) on top of another layer (link flow control) can be challenging to get right and efficient in every scenario.
Consider that clients can:</p>
<ul>
<li>Modify session flow control and link flow control independently (either in the same <code>flow</code> frame or in separate <code>flow</code> frames).</li>
<li>Send a <code>flow</code> frame at any time and at different frequencies.</li>
<li>Dynamically increase or decrease either the session window or the link credit.</li>
<li>Grant a link-credit of 0 (causing the queue to stop sending) or a huge number of link credits (up to 4 billion).</li>
<li>Close its session <code>incoming-window</code> (causing the server session to stop sending) or open it widely (up to 4 billion).</li>
<li>Stop reading from its socket, applying TCP backpressure to the server.</li>
<li>Add other special logic, such as <code>drain=true</code>, into the mix.</li>
</ul>
<p>In AMQP 1.0 programs, concurrency is desirable.
Depending on the programming language, different parts of the client or broker are implemented by different threads or processes.</p>
<p>RabbitMQ achieves concurrency by running the <a href="https://github.com/rabbitmq/rabbitmq-server/blob/v4.0.0-beta.6/deps/rabbit/src/rabbit_amqp_reader.erl" target="_blank" rel="noopener noreferrer">connection reader process</a> (parsing frames), <a href="https://github.com/rabbitmq/rabbitmq-server/blob/v4.0.0-beta.6/deps/rabbit/src/rabbit_amqp_writer.erl" target="_blank" rel="noopener noreferrer">connection writer process</a> (serializing frames), <a href="https://github.com/rabbitmq/rabbitmq-server/blob/v4.0.0-beta.6/deps/rabbit/src/rabbit_amqp_session.erl" target="_blank" rel="noopener noreferrer">session process</a> (e.g. routing messages), and <a href="https://github.com/rabbitmq/rabbitmq-server/blob/v4.0.0-beta.6/deps/rabbit/src/rabbit_amqqueue_process.erl" target="_blank" rel="noopener noreferrer">queue process</a> (storing and forwarding messages) in different <a href="https://www.erlang.org/doc/system/ref_man_processes.html" target="_blank" rel="noopener noreferrer">Erlang processes</a>.</p>
<p>In a scenario where the client grants a huge number of <code>link-credit</code> to the sending queue but maintains a very small session <code>incoming-window</code>, queue processes are allowed to deliver messages, while the session process is not allowed to forward them to the client.
In this case, messages are buffered in the session process until the client's <code>incoming-window</code> allows them to be forwarded.</p>
<p>To guard against this scenario - where a large number of messages could be buffered in the session process - RabbitMQ, in its current implementation, internally grants link credits from the session process to the queue process in batches of at most 256 link credits.
Even if the client grants a large number of link credits, the queue will only ever see up to 256 credits for a given consumer.
Once these 256 messages have been sent out by the server session process, the server session process will grant the next batch of 256 credits to the queue.</p>
<p>The value of <code>256</code> is configurable via <a href="https://www.rabbitmq.com/rabbitmq-website/docs/configure#advanced-config-file">advanced.config</a> setting <code>rabbit.max_queue_credit</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-up">Wrapping Up<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control#wrapping-up" class="hash-link" aria-label="Direct link to Wrapping Up" title="Direct link to Wrapping Up">​</a></h2>
<p>This blog post explained how AMQP 1.0 link flow control and session flow control work.</p>
<p>We learned how individual processes within RabbitMQ protect themselves from overload:</p>
<ul>
<li>Queue processes are protected by link flow control.</li>
<li>Session processes and RabbitMQ as a whole are protected by session flow control.</li>
<li>Connection reader processes are protected by applying TCP backpressure when they cannot read frames quickly enough (which should be rare).</li>
</ul>
<p>This blog post also highlighted ten benefits of flow control in AMQP 1.0 over flow control in AMQP 0.9.1.
The main advantages include:</p>
<ul>
<li>Fine-grained control for consumers, allowing them to determine at any point in time the exact number of messages they want to consume from specific queue(s).</li>
<li>Higher throughput for publishing and consuming on a single AMQP connection when a target queue reaches its limits. We ran two benchmarks:<!-- -->
<ol>
<li>Total send throughput of AMQP 1.0 was four times higher than AMQP 0.9.1 when sending to two different target queues.</li>
<li>In an extreme case, consumption rate of AMQP 1.0 was 73 times higher than AMQP 0.9.1 when receiving from one queue while sending too fast to another queue.</li>
</ol>
</li>
<li>Safe and efficient usage of a single connection for both publishing and consuming.</li>
<li>The ability for consumers to stop and resume at any time.</li>
<li>Extensibility for future use cases.</li>
</ul>]]></content>
        <author>
            <name>David Ansari</name>
            <uri>https://github.com/ansd</uri>
        </author>
        <category label="AMQP 1.0" term="AMQP 1.0"/>
        <category label="RabbitMQ 4.0" term="RabbitMQ 4.0"/>
        <category label="Performance" term="Performance"/>
        <category label="Technical Deep Dive" term="Technical Deep Dive"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[RabbitMQ 4.0: New Quorum Queue Features]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/28/quorum-queues-in-4.0</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/28/quorum-queues-in-4.0"/>
        <updated>2024-08-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[RabbitMQ 4.0 (currently in beta) includes new quorum queue features:]]></summary>
        <content type="html"><![CDATA[<p>RabbitMQ 4.0 (currently in beta) includes new quorum queue features:</p>
<ul>
<li>message priorities</li>
<li>consumer priorities combined with Single Active Consumer</li>
<li>default delivery limit is now 20 (breaking change!)</li>
<li>faster recovery of long queues</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="message-priorities">Message Priorities<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/28/quorum-queues-in-4.0#message-priorities" class="hash-link" aria-label="Direct link to Message Priorities" title="Direct link to Message Priorities">​</a></h2>
<p>Support for message priorities has been probably the most demanded quorum queue feature,
mostly requested by existing classic mirrored queue users who wanted to migrate to quorum queues
(remember, <a href="https://www.rabbitmq.com/docs/3.13/ha" target="_blank" rel="noopener noreferrer">support for classic queue mirroring was removed for 4.0</a>).</p>
<p>However, the way priorities are supported is significantly different compared to how classic queues
handle them. Classic queues require <code>x-max-priority</code> argument to define the maximum
number of priorities for a given queue (if this argument is not provided, the queue will treat
all messages equally). Values from 0 to 255 are technically allowed, although
no more than a handful of priorities per queue should really be used. Quorum queues don't require
any upfront declaration (no need to enable priorities for a given queue), but there are exactly
two priorities per queue: normal and high. The behavior matches that of AMQP 1.0 specification
(see <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-header" target="_blank" rel="noopener noreferrer">chapter 3.2.1 of the AMQP 1.0 specification</a>):</p>
<ul>
<li>a priority value between 0 and 4 (inclusive) is treated as the normal priority</li>
<li>any value above 4 is considered a high priority</li>
<li>if the publisher doesn't specify the priority of a message, the value of <code>4</code> is assumed (normal priority)</li>
</ul>
<p>If a quorum queue contains both normal and high priority messages, consumers will receive a mix of
both, with a ratio of 2 high priority messages for every 1 normal priority message. This approach
avoids <a href="https://en.wikipedia.org/wiki/Starvation_(computer_science)" target="_blank" rel="noopener noreferrer">starvation</a>, since regardless
of the number of high priority messages, a progress is made on processing the normal priority messages as well.
This is in contrast with the classic queue implementation, which will always deliver higher priority
messages first, if there are any, and therefore the normal priority messages may never get delivered (or, more likely,
their delivery latency will be very high).</p>
<p>Here's a visual representation of how this works. In preparation for this test, we first published 100k
normal priority messages and then 100k high priority messages. Since quorum queues were not priority-aware until 4.0,
if we did that in an older version and then start a consumer, it would simply receive the normal priority messages first
(as they are older) and then all the high priority messages. With 4.0, we can see that the consumer
immediately starts receiving a mix of about 1500 normal priority messages per second and twice as many high priority
messages, for a total of ~4500 messages per second (the actual delivery rates are not important here,
they depend on many factors; the 2:1 high/normal priority ratio is what matters in the context of priorities).
Once the queue delivers all the high priority messages, the consumer starts receiving ~4500 normal priority
messages per second - as many as it can handle in this test scenario. The blue dotted line (with the axis
scale on the right) is the number of ready messages in the queue (total for both priorities) - we can see it
starts at 200k and ultimately drops to zero.</p>
<p></p><figure><img decoding="async" loading="lazy" alt="Consumer receives a mix of high (yellow) and normal priority (green) messages" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/message-priorities-low-first-cbcc506dfffd6ee8cabe48d2d4e31419.png" width="2630" height="932" class="img_ev3q"><figcaption>Consumer receives a mix of high (yellow) and normal priority (green) messages</figcaption></figure><p></p>
<p>Let's consider the opposite scenario - what if we publish all the high priority
messages first and only then all the normal priority messages? In this case, the consumer will receive the messages
in order of publishing. There's simply no reason for a normal priority message to overtake a higher priority message.</p>
<p></p><figure><img decoding="async" loading="lazy" alt="Normal priority messages (green) don&amp;#39;t overtake high priority (yellow) messages published first" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/message-priorities-high-first-8811c1a0c91be9947a40bdcca3ec0fff.png" width="2630" height="932" class="img_ev3q"><figcaption>Normal priority messages (green) don't overtake high priority (yellow) messages published first</figcaption></figure><p></p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>How Was This Test Performed?</summary><div><div class="collapsibleContent_i85q"><p>For this test we used <a href="https://github.com/rabbitmq/omq" target="_blank" rel="noopener noreferrer">omq</a>, a testing client for AMQP 1.0, MQTT and STOMP.
The quorum queue behaviour doesn't depend on the protocol used - an AMQP 1.0 was simply used because
<code>omq</code> emits message consumption metrics by message priority.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># declare a quorum queue (you can use the Management UI or any other method)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rabbitmqadmin declare queue name=qq queue_type=quorum</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># publish normal priority messages (10 publishers, 10k messages each)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">omq amqp --publishers 10 --consumers 0 --publish-to /queues/qq --message-priority 1 --pmessages 10000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># publish high priority messages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">omq amqp --publishers 10 --consumers 0 --publish-to /queues/qq --message-priority 10 --pmessages 10000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># consume all messages from the queue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">omq amqp --publishers 0 --consumers 1 --consume-from /queues/qq --consumer-credits 100</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>For the second scenario, just run the publishing commands in the reverse order.</p></div></div></details>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-if-i-need-more-control">What If I Need More Control?<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/28/quorum-queues-in-4.0#what-if-i-need-more-control" class="hash-link" aria-label="Direct link to What If I Need More Control?" title="Direct link to What If I Need More Control?">​</a></h3>
<p>If two priorities with a 2:1 delivery ratio doesn't meet your requirements, we can recommend two things:</p>
<ol>
<li>Reconsider your requirements. <!-- -->😄<!-- --> Reasoning about the message delivery order with many priorities
is really hard. It's probably easier to make sure that all your messages are delivered sufficiently quickly
and use the priorities just to make sure that in case of an occasional long backlog, important messages
can skip the queue.</li>
<li>If you really need more priorities and/or more control over how different priorities are handled,
using multiple queues is your best bet. You can develop a consumer that subscribes to multiple queues
and then decides which queue to consume from.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consumer-priorities-combined-with-single-active-consumer">Consumer Priorities Combined with Single Active Consumer<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/28/quorum-queues-in-4.0#consumer-priorities-combined-with-single-active-consumer" class="hash-link" aria-label="Direct link to Consumer Priorities Combined with Single Active Consumer" title="Direct link to Consumer Priorities Combined with Single Active Consumer">​</a></h2>
<p>Starting with RabbitMQ 4.0, quorum queues will take the consumer priority into account when selecting the single active consumer.
If a higher priority becomes available (subscribes), a quorum queue will switch over to it.
This is particularly useful if you have multiple queues that should have a single consumer each, but you don't want
a single instance of your application to be the consumer for all of them, which is likely to happen when the first
application instance that starts, subscribes to all those single-active-consumer queues. Now you can pick a different priority
when subscribing to different queues, to make sure that each instance consumes only from its "favorite" queue and only serves
as a backup consumer for other queues.</p>
<p>To better explain this functionality, let's review all the moving parts.
A <a href="https://www.rabbitmq.com/rabbitmq-website/docs/consumers#single-active-consumer">Single Active Consumer</a> is a queue argument which
prevents a queue from delivering messages to more than one consumer, regardless of how many
subscribed to the queue. One consumer is active, all other consumers are not. If the active
consumer disconnects, one of the other consumers is activated. This feature is used
if a strict message processing order needs to be maintained.</p>
<p><a href="https://www.rabbitmq.com/rabbitmq-website/docs/consumers#priority">Consumer Priority</a> allows you to specify that rather than delivering
messages to all subscribed consumers in a fair round-robin fashion (which is the default behavior
of both classic and quorum queues), a certain consumer should be preferred.</p>
<p>Until version 4.0, these features were effectively mutually exclusive - if Single Active Consumer was enabled,
a new consumer would never become active, regardless of its priority, as long as the previous consumer remained active.
Starting with 4.0, if the new consumer's priority is higher than the currently active consumer's, the quorum queue
will switch over to the higher priority consumer: it will stop delivering messages to the current
consumer, wait for all the messages to be acknowledged, and then will deactivate the old consumer,
and activate the higher priority consumer instead.</p>
<p>The graph below shows this behavior. There are three metrics on this graph:</p>
<ul>
<li>the green line shows the number of messages consumed by the first (default priority) consumer (which happens to be configured to consume 10 msgs/s)</li>
<li>yellow, shows the same value but for the second, higher priority consumer</li>
<li>blue, shows the number of unacknowledged messages (axis scale on the right)</li>
</ul>
<p></p><figure><img decoding="async" loading="lazy" alt="Single Active Consumer switchover: the normal-priority consumer (green) gets deactivated after it has acknowledged its messages, then the higher-priority consumer (yellow) gets activated" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/sac-and-consumer-priority-9a3bc0d9bc799d2628fc85d3fac1e9f1.png" width="2634" height="792" class="img_ev3q"><figcaption>Single Active Consumer switchover: the normal-priority consumer (green) gets deactivated after it has acknowledged its messages, then the higher-priority consumer (yellow) gets activated</figcaption></figure><p></p>
<p>Initially, we only have one consumer and as expected, it consumes 9-10 msgs/s (these jumps between 9 and 10
are simply a result of how the metrics are emitted and then displayed). This consumer is configured with the prefetch
of 1000 messages and since there were many messages in the queue - the prefetch buffer is used to the maximum.
Then the yellow line appears, initially at 0 msgs/s. This is the higher priority consumer, which is already connected,
but not yet active. From the moment it connected, we can see the number of unacknowledged messages going down, since the
queue no longer delivers messages to the original consumer. Once all of them are acknowledged, the new consumer
becomes the single active consumer and receives 1000 messages, since that's its prefetch value. It then happily
consumes around 10 msgs/s as configured.</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>How Was This Test Performed?</summary><div><div class="collapsibleContent_i85q"><p>For this test we used <a href="https://perftest.rabbitmq.com/" target="_blank" rel="noopener noreferrer">perf-test</a>, a testing client for AMQP 0.9.1.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># Publish 5000 messages to have a backlog (perf-test will declare a quorum queue `qq-sac`)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">perf-test --quorum-queue --queue qq-sac --pmessages 5000 --confirm 100 -qa x-single-active-consumer=true --consumers 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Start a consumer with the default priority and prefetch of 1000; consume ~10 msgs/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">perf-test --producers 0 --predeclared --queue qq-sac --consumer-latency 100000 --qos 1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># In another window, some time after starting the first consumer, start a higher priority consumer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">perf-test --producers 0 --predeclared --queue qq-sac --consumer-latency 100000 --qos 1000 --consumer-args x-priority=10</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>After some time you should see that the first consumer stopped receiving messages (no more output from <code>perf-test</code>),
while the second one receives messages.</p></div></div></details>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The settings used in this example were chosen to highlight the switchover process and are not great for
real world scenarios. If a consumer can only process 10 msgs/s, there's usually no reason to configure
the prefetch value as high as 1000.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="delivery-limit-is-now-20-by-default">Delivery Limit is Now 20 by Default<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/28/quorum-queues-in-4.0#delivery-limit-is-now-20-by-default" class="hash-link" aria-label="Direct link to Delivery Limit is Now 20 by Default" title="Direct link to Delivery Limit is Now 20 by Default">​</a></h2>
<div class="theme-admonition theme-admonition-warning admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>warning</div><div class="admonitionContent_BuS1"><p>This can be a breaking change for some applications</p></div></div>
<p>Quorum queues now have <a href="https://www.rabbitmq.com/docs/quorum-queues#poison-message-handling" target="_blank" rel="noopener noreferrer">the delivery limit</a> set to 20 by default.
In the past, the limit wasn't set and therefore was quorum queues would attempt the delivery forever,
until the message is either acknowledged or discarded by the consumer. This could lead to a situation
where a message is stuck in the queue and can never be delivered.</p>
<p>The downside of this change is that if dead lettering is not configured, messages will be dropped after 20 attempts.
Therfore, it is highly recommended to configure dead lettering for all quorum queues.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="faster-recovery-of-long-queues">Faster Recovery of Long Queues<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/28/quorum-queues-in-4.0#faster-recovery-of-long-queues" class="hash-link" aria-label="Direct link to Faster Recovery of Long Queues" title="Direct link to Faster Recovery of Long Queues">​</a></h2>
<p>This is less of a feature and more an internal change, but certainly worth mentioning. Up until now,
if a RabbitMQ node was restarted, all quorum queues on that node had to read through all of their data
(the Raft log) since the last snapshot to re-build their in-memory state. For example, if you publish a few million
messages to a quorum queue right now and then restart a node, you will see that after the node is up, the queue
will report <code>0</code> ready messages for quite some time (at least a few seconds) and you won't be able
to start consuming these messages. The queue is simply not yet ready to serve traffic - it's still reading
the data from disk (note: this doesn't mean that all that data is then kept in memory, a vast majority
of it is not, but an index / summary of the queue data is). Starting with RabbitMQ 4.0, quorum queues create
checkpoint files which include the state of the queue at a certain point in time. Upon startup, the queue
can read the most recent checkpoint and only the part of the Raft log from that point in time. These means
that quorum queues take significantly less time to start.</p>
<p>For example, a RabbitMQ node with one quorum queue containing 10 million 12-byte messages, takes
about 30 seconds to start on my machine. With RabbitMQ 4.0, it just takes a fraction of a second.</p>
<p>You may wonder what the difference is between a snapshot and a checkpoint. In many ways, they are the same - they actually
share the code that writes them to disk. The difference is that a snapshot is only created when the Raft log is truncated.
For many common queue use cases, this all that is needed - older messages are consumed, we create a snapshot that no longer
contains them and we truncate the log. At this point the queue has no memory of those messages ever being present.
Checkpoints on the other hand, are created periodicailly when we can't truncate the log. The test case scenario is a good
example - since we didn't consume any messages, the oldest messages are still there, we can't just forget about them.
But a checkpoint still allows the queue to start more quickly. A checkpoint can be promoted to a snapshot when the log
is truncated (in this example - after some of the older messages are consumed).</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>How Can I Try This?</summary><div><div class="collapsibleContent_i85q"><p>Once again, we'll use <a href="https://perftest.rabbitmq.com/" target="_blank" rel="noopener noreferrer">perf-test</a> to declare the queue and publish messages</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># Publish 10 million 12-byte messages (feel free to play with other values)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">perf-test --quorum-queue --queue qq --consumers 0 --pmessages 5000000 --confirm 1000 --producers 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># restart the node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rabbitmqctl stop_app &amp;&amp; rabbitmqctl start_app</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># list the queues (repeat this command until the number of messages is 10 million instead of 0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rabbitmqctl list_queues</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/28/quorum-queues-in-4.0#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>RabbitMQ 4.0 is a significant milestone for RabbitMQ. With the removal of classic queue mirroring, quorum queues
become the only option for highly available, replicated queues (note: <a href="https://www.rabbitmq.com/blog/2021/07/13/rabbitmq-streams-overview#what-are-rabbitmq-streams" target="_blank" rel="noopener noreferrer">streams are also highly available and replicated,
but technically not queues</a>;
nevertheless, they might still be a good choice for some use cases where classic mirrored queues were used in the past).
Quorum queues have offered higher data safety guarantees and much better performance than mirrored queues for years
and with these latest improvements, they become even more robust and performant in a wider range of scenarios.</p>
<p>You can play with RabbitMQ 4.0 beta now:
<a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.0-beta.5" target="_blank" rel="noopener noreferrer">https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.0-beta.5</a></p>]]></content>
        <author>
            <name>Michał Kuratczyk</name>
            <uri>https://github.com/mkuratczyk</uri>
        </author>
        <category label="RabbitMQ 4.0" term="RabbitMQ 4.0"/>
        <category label="Quorum Queues" term="Quorum Queues"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[AMQP 1.0 Benchmarks]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks"/>
        <updated>2024-08-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This blog post demonstrates that native AMQP 1.0 in RabbitMQ 4.0 provides significant performance and scalability improvements compared to AMQP 1.0 in RabbitMQ 3.13.]]></summary>
        <content type="html"><![CDATA[<p>This blog post demonstrates that <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp">native AMQP 1.0</a> in RabbitMQ 4.0 provides significant performance and scalability improvements compared to AMQP 1.0 in RabbitMQ 3.13.</p>
<p>Additionally, this blog post suggests that AMQP 1.0 can perform slightly better than AMQP 0.9.1 in RabbitMQ 4.0.</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Setup</summary><div><div class="collapsibleContent_i85q"><p>The following setup applies to all benchmarks in this blog post:</p><ul>
<li>Intel NUC 11</li>
<li>8 CPU cores</li>
<li>32 GB RAM</li>
<li>Ubuntu 22.04</li>
<li>Single node RabbitMQ server</li>
<li>Server runs with (only) 3 scheduler threads (set via <a href="https://www.erlang.org/doc/apps/erts/erl_cmd.html#emulator-flags" target="_blank" rel="noopener noreferrer">runtime flags</a> as <code>+S 3</code>)</li>
<li>Erlang/OTP 27.0.1</li>
<li>Clients and server run on the same box</li>
</ul><p>We use the latest RabbitMQ versions at the time of writing:</p><ul>
<li><a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.0-beta.5" target="_blank" rel="noopener noreferrer">v4.0.0-beta.5</a></li>
<li><a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.13.6" target="_blank" rel="noopener noreferrer">v3.13.6</a></li>
</ul><p>The following <a href="https://www.rabbitmq.com/rabbitmq-website/docs/configure#advanced-config-file">advanced.config</a> is applied:</p><div class="language-erl codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-erl codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> {rabbit, [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {loopback_users, []}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> ]},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> {rabbitmq_management_agent, [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {disable_metrics_collector, true}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> ]}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">].</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Metrics collection is disabled in the <code>rabbitmq_management_agent</code> plugin.
For <a href="https://www.rabbitmq.com/docs/production-checklist" target="_blank" rel="noopener noreferrer">production environments</a>, <a href="https://www.rabbitmq.com/docs/prometheus" target="_blank" rel="noopener noreferrer">Prometheus</a> is the recommended option.</p><p>RabbitMQ server is started as follows:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">make</span><span class="token plain"> run-broker </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">TEST_TMPDIR</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"</span><span class="token string environment constant" style="color:#36acaa">$HOME</span><span class="token string" style="color:#e3116c">/scratch/rabbit/test"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">RABBITMQ_CONFIG_FILE</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"</span><span class="token string environment constant" style="color:#36acaa">$HOME</span><span class="token string" style="color:#e3116c">/scratch/rabbit/advanced.config"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">PLUGINS</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"rabbitmq_prometheus rabbitmq_management rabbitmq_amqp1_0"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"+S 3"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The <code>rabbitmq_amqp1_0</code> plugin is a <a href="https://github.com/rabbitmq/rabbitmq-server/blob/v4.0.0-beta.5/deps/rabbitmq_amqp1_0/README.md" target="_blank" rel="noopener noreferrer">no-op plugin</a> in RabbitMQ 4.0.</p><p>The AMQP 1.0 benchmarks run <a href="https://github.com/ssorj/quiver" target="_blank" rel="noopener noreferrer">quiver</a> in a Docker container:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ docker run -it --rm --add-host host.docker.internal:host-gateway ssorj/quiver:latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bash-5.1# quiver --version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">quiver 0.4.0-SNAPSHOT</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="classic-queues">Classic Queues<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#classic-queues" class="hash-link" aria-label="Direct link to Classic Queues" title="Direct link to Classic Queues">​</a></h2>
<p>This section benchmarks <a href="https://www.rabbitmq.com/rabbitmq-website/docs/classic-queues">classic queues</a>.</p>
<p>We declare a classic queue called <code>my-classic-queue</code>:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">deps/rabbitmq_management/bin/rabbitmqadmin </span><span class="token builtin class-name">declare</span><span class="token plain"> queue </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">name</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">my-classic-queue </span><span class="token assign-left variable" style="color:#36acaa">queue_type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">classic </span><span class="token assign-left variable" style="color:#36acaa">durable</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-10-in-40">AMQP 1.0 in 4.0<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#amqp-10-in-40" class="hash-link" aria-label="Direct link to AMQP 1.0 in 4.0" title="Direct link to AMQP 1.0 in 4.0">​</a></h3>
<p>The client sends and receives 1 million messages.
Each message contains a payload of 12 bytes.
The receiver repeatedly tops up 200 <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-flow-control" target="_blank" rel="noopener noreferrer">link credits</a> at a time.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># quiver //host.docker.internal//queues/my-classic-queue \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --durable --count 1m --duration 10m --body-size 12 --credit 200</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RESULTS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Count ............................................. 1,000,000 messages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Duration ............................................... 10.1 seconds</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Sender rate .......................................... 99,413 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Receiver rate ........................................ 99,423 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">End-to-end rate ...................................... 99,413 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Latencies by percentile:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          0% ........ 0 ms       90.00% ........ 1 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         25% ........ 1 ms       99.00% ........ 2 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         50% ........ 1 ms       99.90% ........ 2 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        100% ........ 9 ms       99.99% ........ 9 ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-10-in-313">AMQP 1.0 in 3.13<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#amqp-10-in-313" class="hash-link" aria-label="Direct link to AMQP 1.0 in 3.13" title="Direct link to AMQP 1.0 in 3.13">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># quiver //host.docker.internal//amq/queue/my-classic-queue \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --durable --count 1m --duration 10m --body-size 12 --credit 200</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RESULTS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Count ............................................. 1,000,000 messages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Duration ............................................... 45.9 seconds</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Sender rate .......................................... 43,264 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Receiver rate ........................................ 21,822 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">End-to-end rate ...................................... 21,790 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Latencies by percentile:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          0% ....... 67 ms       90.00% .... 24445 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         25% .... 23056 ms       99.00% .... 24780 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         50% .... 23433 ms       99.90% .... 24869 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        100% .... 24873 ms       99.99% .... 24873 ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The same benchmark against RabbitMQ 3.13 results in 4.5 times lower throughput.</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Detailed test execution</summary><div><div class="collapsibleContent_i85q"><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">---------------------- Sender -----------------------  --------------------- Receiver ----------------------  --------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Time [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Time [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Lat [ms]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------------------------------------------  -----------------------------------------------------  --------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     2.1        130,814      65,342        8     79.1       2.1          3,509       1,753        1      7.5       777</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     4.1        206,588      37,849        6     79.1       4.1          5,995       1,242        0      7.5     2,458</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     6.1        294,650      43,987        6     79.1       6.1          9,505       1,753        1      7.5     5,066</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     8.1        360,184      32,734        5     79.4       8.1         13,893       2,194        0      7.5     6,190</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    10.1        458,486      49,102        6     79.4      10.1         15,793         950        1      7.5     9,259</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    12.1        524,020      32,734        5     79.4      12.1         21,644       2,923        1      7.5    11,163</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    14.1        622,322      49,102        5     79.4      14.1         25,154       1,753        1      7.5    13,451</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    16.1        687,856      32,734        4     79.4      16.1         27,639       1,241        1      7.5    15,246</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    18.1        786,158      49,102        6     81.0      18.1         30,124       1,241        1      7.5    17,649</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    20.1        884,460      49,102        6     81.0      20.1         32,610       1,242        1      7.5    19,408</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    22.1        949,994      32,734        4     81.0      22.1         35,535       1,462        0      7.5    21,293</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    24.1        999,912      24,934        4     81.8      24.1         38,167       1,315        1      7.5    23,321</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    26.1        999,974          31        2      0.0      26.1        117,745      39,749       11      7.5    24,475</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       -              -           -        -        -      28.1        202,589      42,380       11      7.5    24,364</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       -              -           -        -        -      30.1        292,554      44,938       13      7.5    24,244</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       -              -           -        -        -      32.1        377,691      42,526       15      7.5    23,955</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       -              -           -        -        -      34.1        469,704      45,961       14      7.5    23,660</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       -              -           -        -        -      36.1        555,719      42,965       12      7.5    23,463</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       -              -           -        -        -      38.1        649,048      46,618       12      7.5    23,264</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       -              -           -        -        -      40.1        737,696      44,280       15      7.5    23,140</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       -              -           -        -        -      42.1        826,491      44,353       15      7.5    23,100</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       -              -           -        -        -      44.1        917,187      45,303       16      7.5    23,066</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       -              -           -        -        -      46.1        999,974      41,394       14      0.0    22,781</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-091-in-40">AMQP 0.9.1 in 4.0<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#amqp-091-in-40" class="hash-link" aria-label="Direct link to AMQP 0.9.1 in 4.0" title="Direct link to AMQP 0.9.1 in 4.0">​</a></h3>
<p>For our AMQP 0.9.1 benchmarks we use <a href="https://perftest.rabbitmq.com/" target="_blank" rel="noopener noreferrer">PerfTest</a>.
We try to run a somewhat fair comparison of our previous AMQP 1.0 benchmark.</p>
<p>Since an AMQP 1.0 <a href="https://www.rabbitmq.com/rabbitmq-website/docs/amqp#target-address-v2">/queues/<!-- -->:queue</a> target address sends to the default exchange, we also send to the default exchange via AMQP 0.9.1.
Since we used <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-header" target="_blank" rel="noopener noreferrer">durable</a> messages with AMQP 1.0, we set the <code>persistent</code> flag in AMQP 0.9.1.
Since RabbitMQ settles with the <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-released" target="_blank" rel="noopener noreferrer">released</a> outcome when a message cannot be routed, we set the <code>mandatory</code> flag in AMQP 0.9.1.
Since RabbitMQ <code>v4.0.0-beta.5</code> uses a default <code>rabbit.max_link_credit</code> of 128 granting 128 more credits to the sending client when remaining credit falls below 0.5 * 128, we configure the AMQP 0.9.1 publisher to have at most 1.5 * 128 = 192 messages unconfirmed at a time.
Since we used 200 link credits in the previous run, we configure the AMQP 0.9.1 consumer with a <a href="https://www.rabbitmq.com/rabbitmq-website/docs/consumer-prefetch">prefetch</a> of 200.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ java -jar target/perf-test.jar \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --predeclared --exchange amq.default \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --routing-key my-classic-queue --queue my-classic-queue \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --flag persistent --flag mandatory \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --pmessages 1000000 --size 12 --confirm 192 --qos 200 --multi-ack-every 200</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-151706-485, sending rate avg: 88534 msg/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-151706-485, receiving rate avg: 88534 msg/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-151706-485, consumer latency min/median/75th/95th/99th 99/975/1320/1900/2799 µs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-151706-485, confirm latency min/median/75th/95th/99th 193/1691/2113/2887/3358 µs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary-classic-queues">Summary<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#summary-classic-queues" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h3>
<p></p><figure><img decoding="async" loading="lazy" alt="Figure 1: Classic queue end-to-end message rate" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/throughput-classic-queue-215d3f10d1e0213152fab2f26ca3921e.svg" width="600" height="371" class="img_ev3q"><figcaption>Figure 1: Classic queue end-to-end message rate</figcaption></figure><p></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="quorum-queues">Quorum Queues<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#quorum-queues" class="hash-link" aria-label="Direct link to Quorum Queues" title="Direct link to Quorum Queues">​</a></h2>
<p>This section benchmarks <a href="https://www.rabbitmq.com/rabbitmq-website/docs/quorum-queues">quorum queues</a>.</p>
<p>We declare a quorum queue called <code>my-quorum-queue</code>:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">deps/rabbitmq_management/bin/rabbitmqadmin </span><span class="token builtin class-name">declare</span><span class="token plain"> queue </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">name</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">my-quorum-queue </span><span class="token assign-left variable" style="color:#36acaa">queue_type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">quorum </span><span class="token assign-left variable" style="color:#36acaa">durable</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="flow-control-configuration">Flow Control Configuration<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#flow-control-configuration" class="hash-link" aria-label="Direct link to Flow Control Configuration" title="Direct link to Flow Control Configuration">​</a></h4>
<p>For highest data safety, quorum queues <a href="https://man7.org/linux/man-pages/man2/fsync.2.html" target="_blank" rel="noopener noreferrer">fsync</a> all <a href="https://github.com/rabbitmq/ra" target="_blank" rel="noopener noreferrer">Ra</a> commands including:</p>
<ul>
<li><a href="https://github.com/rabbitmq/rabbitmq-server/blob/v4.0.0-beta.5/deps/rabbit/src/rabbit_fifo.erl#L144" target="_blank" rel="noopener noreferrer">enqueue</a>: sender enqueues a message</li>
<li><a href="https://github.com/rabbitmq/rabbitmq-server/blob/v4.0.0-beta.5/deps/rabbit/src/rabbit_fifo.erl#L149" target="_blank" rel="noopener noreferrer">settle</a>: receiver accepts a message</li>
<li><a href="https://github.com/rabbitmq/rabbitmq-server/blob/v4.0.0-beta.5/deps/rabbit/src/rabbit_fifo.erl#L152" target="_blank" rel="noopener noreferrer">credit</a>: receiver tops up link credit</li>
</ul>
<p>Before a quorum queue confirms receipt of a message to the publisher, it ensures that any file modifications are flushed to disk, making the data safe even if the RabbitMQ node crashes shortly after.</p>
<p>The SSD of my Linux box is slow, taking 5-15 ms per fsync.
Since we want to compare AMQP protocol implementations without being bottlenecked by a cheap disk, the tests in this section increase flow control settings:</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary><code>advanced.config</code></summary><div><div class="collapsibleContent_i85q"><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> {rabbit, [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {loopback_users, []},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  %% RabbitMQ internal flow control for AMQP 0.9.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  %% Default: {400, 200}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {credit_flow_default_credit, {5000, 2500}},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  %% Maximum incoming-window of AMQP 1.0 session.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  %% Default: 400</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {max_incoming_window, 5000},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  %% Maximum link-credit RabbitMQ grants to AMQP 1.0 sender.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  %% Default: 128</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {max_link_credit, 2000},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  %% Maximum link-credit RabbitMQ AMQP 1.0 session grants to sending queue.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  %% Default: 256</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {max_queue_credit, 5000}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> ]},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> {rabbitmq_management_agent, [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {disable_metrics_collector, true}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> ]}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">].</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details>
<p>This configuration allows more Ra commands to be batched before RabbitMQ calls fsync.
<strong>For production use cases, we recommend enterprise-grade high performance disks that fsync faster</strong>, in which case there is likely no need to increase flow control settings.</p>
<p>RabbitMQ flow control settings present a trade-off:</p>
<ul>
<li>Low values ensure stability in production.</li>
<li>High values can result in higher performance for individual connections but may lead to higher memory spikes when many connections publish large messages concurrently.</li>
</ul>
<p>RabbitMQ uses conservative flow control default settings to favour stability in production over winning performance benchmarks.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-10-in-40-1">AMQP 1.0 in 4.0<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#amqp-10-in-40-1" class="hash-link" aria-label="Direct link to AMQP 1.0 in 4.0" title="Direct link to AMQP 1.0 in 4.0">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># quiver //host.docker.internal//queues/my-quorum-queue \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --durable --count 1m --duration 10m --body-size 12 --credit 5000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RESULTS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Count ............................................. 1,000,000 messages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Duration ............................................... 12.0 seconds</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Sender rate .......................................... 83,459 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Receiver rate ........................................ 83,396 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">End-to-end rate ...................................... 83,181 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Latencies by percentile:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          0% ........ 9 ms       90.00% ....... 47 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         25% ....... 27 ms       99.00% ....... 61 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         50% ....... 35 ms       99.90% ....... 76 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        100% ....... 81 ms       99.99% ....... 81 ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Default Flow Control Settings</summary><div><div class="collapsibleContent_i85q"><p>The previous benchmark calls fsync 1,244 times in the <a href="https://github.com/rabbitmq/ra/blob/e95ab7b9df1f8f4ffec8535d60185b3bc33a09bc/src/ra_log_wal.erl#L770" target="_blank" rel="noopener noreferrer">ra_log_wal</a> module (that implements the Raft write-ahead log).</p><p>The same benchmark with default flow control settings calls fsync 15,493 times resulting in significantly lower throughput:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># quiver //host.docker.internal//queues/my-quorum-queue \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --durable --count 1m --duration 10m --body-size 12 --credit 5000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RESULTS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Count ............................................. 1,000,000 messages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Duration .............................................. 100.2 seconds</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Sender rate ........................................... 9,986 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Receiver rate ......................................... 9,987 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">End-to-end rate ....................................... 9,983 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Latencies by percentile:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          0% ....... 10 ms       90.00% ....... 24 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         25% ....... 14 ms       99.00% ....... 30 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         50% ....... 18 ms       99.90% ....... 38 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        100% ....... 55 ms       99.99% ....... 47 ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Each fsync took 5.9 ms on average.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(15,493 - 1,244) * 5.9 ms = 84 seconds</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Therefore, this benchmark with default flow control settings is blocked for 84 seconds longer executing <code>fsync</code> than the previous benchmark with increased flow control settings.
This shows how critical enterprise-grade high performance disks are to get the best results out of quorum queues.
For your production workloads, we recommend using disks with lower <code>fsync</code> latency rather than tweaking
RabbitMQ flow control settings.</p><p>It's worth noting that the Raft WAL log is shared by all quorum queue replicas on a given RabbitMQ node.
This means that <code>ra_log_wal</code> will automatically batch multiple Raft commands (operations) into a single <code>fsync</code>
call when there are dozens of quorum queues with hundreds of connections.
Consequently, flushing an individual Ra command to disk becomes cheaper on average when there is more traffic on the node.
Our benchmark ran somewhat artificially with a single connection as fast as possible.</p></div></div></details>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-10-in-313-1">AMQP 1.0 in 3.13<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#amqp-10-in-313-1" class="hash-link" aria-label="Direct link to AMQP 1.0 in 3.13" title="Direct link to AMQP 1.0 in 3.13">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># quiver //host.docker.internal//amq/queue/my-quorum-queue \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --durable --count 1m --duration 10m --body-size 12 --credit 5000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---------------------- Sender -----------------------  --------------------- Receiver ----------------------  --------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Time [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Time [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Lat [ms]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------------------------------------------  -----------------------------------------------------  --------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     2.1        163,582      81,709       11     84.2       2.1         29,548      14,759        3      7.5       840</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     4.1        336,380      86,356       12    185.3       4.1         29,840         146        0      7.5     2,331</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     6.1        524,026      93,729       14    328.0       6.1         29,840           0        0      7.5         0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     8.1        687,864      81,837       11    462.3       8.1         31,302         730        1      7.5     6,780</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    10.1        884,470      98,303       14    605.4      10.1         31,447          72        0      7.5     7,897</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    12.1        999,924      57,669        7    687.5      12.1         31,447           0        0      7.5         0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    14.1        999,924           0        0    687.5      14.1         31,447           0        0      7.5         0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    16.1        999,924           0        0    687.5      16.1         31,447           0        1      7.5         0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    18.1        999,924           0        1    688.3      18.1         31,447           0        0      7.5         0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">receiver timed out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    20.1        999,924           0        0    688.3      20.1         31,447           0        0      7.5         0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>RabbitMQ 3.13 cannot handle this workload and the benchmark fails.</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Default Flow Control Settings</summary><div><div class="collapsibleContent_i85q"><p>The benchmark also fails with default flow control settings:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># quiver //host.docker.internal//amq/queue/my-quorum-queue \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --durable --count 1m --duration 10m --body-size 12 --credit 5000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---------------------- Sender -----------------------  --------------------- Receiver ----------------------  --------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Time [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Time [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Lat [ms]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------------------------------------------  -----------------------------------------------------  --------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     2.1        130,814      65,342        9     70.0       2.1         26,915      13,437        6      7.5     1,213</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     4.1        196,348      32,718        5     70.2       4.1         28,084         584        0      7.5     3,093</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     6.1        261,882      32,734        7     70.2       6.1         30,131       1,022        1      7.5     4,952</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     8.1        360,184      49,126        6     70.2       8.1         32,325       1,096        0      7.5     6,637</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    10.1        425,718      32,734        6     70.2      10.1         34,225         949        1      7.5     8,089</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    12.1        491,252      32,734        5     70.2      12.1         34,225           0        0      7.5         0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    14.1        589,554      49,102        7     70.2      14.1         34,225           0        0      7.5         0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    16.1        655,088      32,734        5     70.2      16.1         34,225           0        0      7.5         0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    18.1        720,622      32,734        6     70.2      18.1         34,225           0        0      7.5         0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">receiver timed out</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-091-in-40-1">AMQP 0.9.1 in 4.0<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#amqp-091-in-40-1" class="hash-link" aria-label="Direct link to AMQP 0.9.1 in 4.0" title="Direct link to AMQP 0.9.1 in 4.0">​</a></h3>
<p>Since we set <code>max_link_credit</code> to 2,000, we allow for a maximum of 2,000 * 1.5 = 3,000 unconfirmed messages in the publisher.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ java -jar target/perf-test.jar \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --predeclared --exchange amq.default \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --routing-key my-quorum-queue --queue my-quorum-queue \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --flag persistent --flag mandatory \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --pmessages 1000000 --size 12 --confirm 3000 --qos 5000 --multi-ack-every 5000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-085526-136, sending rate avg: 70067 msg/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-085526-136, receiving rate avg: 70067 msg/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-085526-136, consumer latency min/median/75th/95th/99th 8803/33127/40424/53407/62883 µs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-085526-136, confirm latency min/median/75th/95th/99th 8551/30323/38317/52103/63131 µs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Default Flow Control Settings</summary><div><div class="collapsibleContent_i85q"><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ java -jar target/perf-test.jar \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --predeclared --exchange amq.default \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --routing-key my-quorum-queue --queue my-quorum-queue \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --flag persistent --flag mandatory \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --pmessages 1000000 --size 12 --confirm 192 --qos 5000 --multi-ack-every 5000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-084359-441, sending rate avg: 9931 msg/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-084359-441, receiving rate avg: 9931 msg/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-084359-441, consumer latency min/median/75th/95th/99th 7512/17054/26256/34249/38641 µs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-084359-441, confirm latency min/median/75th/95th/99th 9432/16586/23918/32636/36858 µs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>These results are similar to the results of the default flow control settings in AMQP 1.0 in 4.0 because both benchmarks are bottlenecked by my slow disk.</p></div></div></details>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary-quorum-queues">Summary<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#summary-quorum-queues" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h3>
<p></p><figure><img decoding="async" loading="lazy" alt="Figure 2: Quorum queue end-to-end message rate" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/throughput-quorum-queue-7f61bcd561f964e3e5318aefb455dec1.svg" width="600" height="371" class="img_ev3q"><figcaption>Figure 2: Quorum queue end-to-end message rate</figcaption></figure><p></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="streams">Streams<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#streams" class="hash-link" aria-label="Direct link to Streams" title="Direct link to Streams">​</a></h2>
<p>This sections benchmarks <a href="https://www.rabbitmq.com/rabbitmq-website/docs/streams">streams</a>.</p>
<p>We declare a stream called <code>my-stream</code>:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">deps/rabbitmq_management/bin/rabbitmqadmin </span><span class="token builtin class-name">declare</span><span class="token plain"> queue </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">name</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">my-stream </span><span class="token assign-left variable" style="color:#36acaa">queue_type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">stream </span><span class="token assign-left variable" style="color:#36acaa">durable</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>(We run with default RabbitMQ flow control settings.)</p>
<p>We want the receiver to start consuming from the very beginning of the stream.
Quiver doesn't support passing a <code>filter</code> field to the <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-source" target="_blank" rel="noopener noreferrer">source</a> where we could specify a <code>rabbitmq:stream-offset-spec</code> value <code>first</code>.
Therefore, for this benchmark it's easier to patch RabbitMQ to use stream offset spec <code>first</code> by default instead of <code>next</code>:</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>git diff</summary><div><div class="collapsibleContent_i85q"><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">diff --git a/deps/rabbit/src/rabbit_stream_queue.erl b/deps/rabbit/src/rabbit_stream_queue.erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">index e36ad708eb..acd193d76f 100644</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--- a/deps/rabbit/src/rabbit_stream_queue.erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+++ b/deps/rabbit/src/rabbit_stream_queue.erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ -344,7 +344,7 @@ consume(Q, Spec, #stream_client{} = QState0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        {term(), non_neg_integer()}) -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     {ok, osiris:offset_spec()} | {error, term()}.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> parse_offset_arg(undefined) -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-    {ok, next};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+    {ok, first};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> parse_offset_arg({_, &lt;&lt;"first"&gt;&gt;}) -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     {ok, first};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> parse_offset_arg({_, &lt;&lt;"last"&gt;&gt;}) -&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-10-in-40-2">AMQP 1.0 in 4.0<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#amqp-10-in-40-2" class="hash-link" aria-label="Direct link to AMQP 1.0 in 4.0" title="Direct link to AMQP 1.0 in 4.0">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># quiver //host.docker.internal//queues/my-stream \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --durable --count 1m --duration 10m --body-size 12 --credit 5000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---------------------- Sender -----------------------  --------------------- Receiver ----------------------  --------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Time [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Time [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Lat [ms]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------------------------------------------  -----------------------------------------------------  --------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     2.1        278,782     139,321       25      8.0       2.1        215,185     107,539       22      7.6       224</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     4.1        554,492     137,717       25      8.0       4.1        434,027     109,312       24      7.6       651</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     6.1        825,082     135,160       25      8.0       6.1        650,236     107,997       26      7.6     1,079</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     8.1        999,992      87,368       17      0.0       8.1        888,973     119,249       29      7.6     1,469</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       -              -           -        -        -      10.1        999,993      55,455       13      0.0     1,583</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RESULTS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Count ............................................. 1,000,000 messages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Duration ................................................ 8.9 seconds</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Sender rate ......................................... 136,705 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Receiver rate ....................................... 112,587 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">End-to-end rate ..................................... 112,196 messages/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Latencies by percentile:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          0% ........ 7 ms       90.00% ..... 1553 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         25% ...... 519 ms       99.00% ..... 1612 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         50% ..... 1011 ms       99.90% ..... 1615 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        100% ..... 1616 ms       99.99% ..... 1616 ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It is easy to observe a substantially higher throughput.</p>
<p>Note that end-to-end latencies are very high just because the sender can write into the stream at a higher rate than RabbitMQ being able
to dispatch messages to the consumer ("receiver" in <code>quiver</code> terms).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-10-in-313-2">AMQP 1.0 in 3.13<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#amqp-10-in-313-2" class="hash-link" aria-label="Direct link to AMQP 1.0 in 3.13" title="Direct link to AMQP 1.0 in 3.13">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># quiver //host.docker.internal//amq/queue/my-stream \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --durable --count 1m --duration 10m --body-size 12 --credit 5000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---------------------- Sender -----------------------  --------------------- Receiver ----------------------  --------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Time [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Time [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Lat [ms]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------------------------------------------  -----------------------------------------------------  --------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     2.1        196,350      98,077       12     70.1       2.1          4,094       2,045        0      7.7       195</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     4.1        392,956      98,205       13    138.5       4.1          4,094           0        0      7.7         0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     6.1        524,026      65,470       10    196.5       6.1          4,094           0        0      7.7         0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     8.1        655,096      65,470       11    259.4       8.1          4,094           0        0      7.7         0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    10.1        786,166      65,470       10    307.5      10.1          4,094           0        0      7.7         0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">receiver timed out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    12.1        917,236      65,470        9    355.5      12.1          4,094           0        0      7.7         0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>RabbitMQ 3.13 cannot handle this workload and the benchmark fails.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-091-in-40-2">AMQP 0.9.1 in 4.0<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#amqp-091-in-40-2" class="hash-link" aria-label="Direct link to AMQP 0.9.1 in 4.0" title="Direct link to AMQP 0.9.1 in 4.0">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ java -jar target/perf-test.jar \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --predeclared --exchange amq.default \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --routing-key my-stream --queue my-stream \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --flag persistent --flag mandatory \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --pmessages 1000000 --size 12 --confirm 192 --qos 5000 --multi-ack-every 5000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-104223-225, sending rate avg: 88912 msg/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-104223-225, receiving rate avg: 88912 msg/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-104223-225, consumer latency min/median/75th/95th/99th 701/1340/1523/2500/4524 µs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id: test-104223-225, confirm latency min/median/75th/95th/99th 788/1983/2130/2437/2970 µs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Since streams store messages in AMQP 1.0 format, this workload requires RabbitMQ to translate each message between AMQP 0.9.1 and AMQP 1.0.
This explains why stream throughput is lower when using AMQP 0.9.1 clients compared to AMQP 1.0 clients.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary-streams">Summary<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#summary-streams" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h3>
<p></p><figure><img decoding="async" loading="lazy" alt="Figure 3: Stream end-to-end message rate" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/throughput-stream-a6526579118b787eb9d281abc8b4ef9a.svg" width="600" height="371" class="img_ev3q"><figcaption>Figure 3: Stream end-to-end message rate</figcaption></figure><p></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="many-connections">Many Connections<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#many-connections" class="hash-link" aria-label="Direct link to Many Connections" title="Direct link to Many Connections">​</a></h2>
<p>This section compares memory usage of connecting 40,000 clients with two AMQP 1.0 sessions / AMQP 0.9.1 channels per connection.</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Setup</summary><div><div class="collapsibleContent_i85q"><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">make</span><span class="token plain"> run-broker </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">TEST_TMPDIR</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"</span><span class="token string environment constant" style="color:#36acaa">$HOME</span><span class="token string" style="color:#e3116c">/scratch/rabbit/test"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">RABBITMQ_CONFIG_FILE</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"</span><span class="token string environment constant" style="color:#36acaa">$HOME</span><span class="token string" style="color:#e3116c">/scratch/rabbit/rabbitmq.conf"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">PLUGINS</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"rabbitmq_amqp1_0"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"+P 3000000 +S 6"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">ERL_MAX_PORTS</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">3000000</span><span class="token plain"> </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In the following <code>rabbitmq.conf</code>, we use small buffer sizes to better compare the memory usage of the protocol implementations.</p><div class="language-ini codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ini codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tcp_listen_options.sndbuf = 2048</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tcp_listen_options.recbuf = 2048</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vm_memory_high_watermark.relative = 0.95</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vm_memory_high_watermark_paging_ratio = 0.95</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">loopback_users = none</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>AMQP 1.0</summary><div><div class="collapsibleContent_i85q"><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"context"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"log"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"time"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/Azure/go-amqp"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">40_000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">%</span><span class="token number" style="color:#36acaa">1000</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"opened %d connections"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		conn</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> amqp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Dial</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">TODO</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			</span><span class="token string" style="color:#e3116c">"amqp://localhost"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">amqp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ConnOptions</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">SASLType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> amqp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">SASLTypeAnonymous</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Fatal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"open connection:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> conn</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewSession</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">TODO</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Fatal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"begin session:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> conn</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewSession</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">TODO</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Fatal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"begin session:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"opened all connections"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Sleep</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Hour</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details><details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>AMQP 0.9.1</summary><div><div class="collapsibleContent_i85q"><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"log"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"time"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	amqp </span><span class="token string" style="color:#e3116c">"github.com/rabbitmq/amqp091-go"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">40_000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">%</span><span class="token number" style="color:#36acaa">1000</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"opened %d connections"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		conn</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> amqp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Dial</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"amqp://guest:guest@localhost"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Fatal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"open connection:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> conn</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Channel</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Fatal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"open channel:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> conn</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Channel</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">			log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Fatal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"open channel:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"opened all connections"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Sleep</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Hour</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details></div></div></details>
<p>The examples below directly invoke <a href="https://www.erlang.org/doc/apps/erts/erlang.html#memory/0" target="_blank" rel="noopener noreferrer"><code>erlang:memory/0</code></a> on the node,
a function that returns the memory size in bytes for each memory type.</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary><code>rabbitmq-diagnostics</code></summary><div><div class="collapsibleContent_i85q"><p>To retrieve the same information from a running node, use <a href="https://www.rabbitmq.com/rabbitmq-website/docs/cli">CLI</a> command <a href="https://www.rabbitmq.com/rabbitmq-website/docs/man/rabbitmq-diagnostics.8">rabbitmq-diagnostics</a> like so:</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rabbitmq-diagnostics memory_breakdown</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This command can format the numbers using different information units (e.g. MiB, GiB) and supports JSON
output with <code>--formatter=json</code>:</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># pipes the output to `jq` for more readable formatting</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rabbitmq-diagnostics memory_breakdown </span><span class="token parameter variable" style="color:#36acaa">--formatter</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">json </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> jq</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-10-in-40-3">AMQP 1.0 in 4.0<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#amqp-10-in-40-3" class="hash-link" aria-label="Direct link to AMQP 1.0 in 4.0" title="Direct link to AMQP 1.0 in 4.0">​</a></h3>
<p>Here are the runtime-reported memory footprint numbers:</p>
<div class="language-erlang codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-erlang codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">1</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token atom">erlang</span><span class="token punctuation" style="color:#393A34">:</span><span class="token function" style="color:#d73a49">memory</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">total</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">5330809208</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">processes</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">4788022888</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">processes_used</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">4787945960</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">system</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">542786320</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">atom</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">999681</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">atom_used</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">974364</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">binary</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">194810368</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">code</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">19328950</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">ets</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">94161808</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token atom">erlang</span><span class="token punctuation" style="color:#393A34">:</span><span class="token function" style="color:#d73a49">system_info</span><span class="token punctuation" style="color:#393A34">(</span><span class="token atom">process_count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">360312</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-10-in-313-3">AMQP 1.0 in 3.13<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#amqp-10-in-313-3" class="hash-link" aria-label="Direct link to AMQP 1.0 in 3.13" title="Direct link to AMQP 1.0 in 3.13">​</a></h3>
<p>To compare, the runtime-reported memory footprint numbers in this test are:</p>
<div class="language-erlang codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-erlang codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">1</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token atom">erlang</span><span class="token punctuation" style="color:#393A34">:</span><span class="token function" style="color:#d73a49">memory</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">total</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">12066294144</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">processes</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">11156497904</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">processes_used</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">11156461208</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">system</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">909796240</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">atom</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">1089809</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">atom_used</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">1062780</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">binary</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">192784464</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">code</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">22068126</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">ets</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">318872128</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token atom">erlang</span><span class="token punctuation" style="color:#393A34">:</span><span class="token function" style="color:#d73a49">system_info</span><span class="token punctuation" style="color:#393A34">(</span><span class="token atom">process_count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1480318</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We observe that the memory usage of <code>processes</code> in RabbitMQ 3.13 is 11.1 GB compared to only 4.8 GB in RabbitMQ 4.0 (a reduction of about 56%).
As explained in the <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp#amqp-10-in-rabbitmq-313">previous</a> blog post, the RabbitMQ 3.13 implementation of AMQP 1.0 is resource heavy because each AMQP 1.0 session in the plugin includes an AMQP 0.9.1 client and maintains AMQP 0.9.1 state.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-091-in-40-3">AMQP 0.9.1 in 4.0<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#amqp-091-in-40-3" class="hash-link" aria-label="Direct link to AMQP 0.9.1 in 4.0" title="Direct link to AMQP 0.9.1 in 4.0">​</a></h3>
<div class="language-erlang codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-erlang codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">1</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token atom">erlang</span><span class="token punctuation" style="color:#393A34">:</span><span class="token function" style="color:#d73a49">memory</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">total</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">5409763512</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">processes</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">4716150248</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">processes_used</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">4715945080</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">system</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">693613264</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">atom</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">991489</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">atom_used</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">962578</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">binary</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">187229040</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">code</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">19118766</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token atom">ets</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">235605424</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token atom">erlang</span><span class="token punctuation" style="color:#393A34">:</span><span class="token function" style="color:#d73a49">system_info</span><span class="token punctuation" style="color:#393A34">(</span><span class="token atom">process_count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">600314</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary-many-connections">Summary<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#summary-many-connections" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h3>
<p></p><figure><img decoding="async" loading="lazy" alt="Figure 4: Memory usage of 40,000 connections and 80,000 sessions / channels" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/memory-many-connections-af340c0a7efe58d8b521dd3abb1117ba.svg" width="600" height="371" class="img_ev3q"><figcaption>Figure 4: Memory usage of 40,000 connections and 80,000 sessions / channels</figcaption></figure><p></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/21/amqp-benchmarks#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>This blog post demonstrated that the new native AMQP 1.0 implementation in RabbitMQ 4.0 performs multiple times better than AMQP 1.0 in RabbitMQ 3.13.</p>
<p>We also observed that AMQP 1.0 can perform better than AMQP 0.9.1.
However, it’s challenging to provide a fair comparison.
This blog post used an AMQP 1.0 client written in C and an AMQP 0.9.1 client written in Java.
Therefore, we do not claim or promise that you will observe better throughput with your AMQP 1.0 workloads.
The AMQP 0.9.1 implementation in RabbitMQ performs well since it has been stable and optimized for over 15 years.</p>
<p>Use cases where AMQP 1.0 will likely outperform AMQP 0.9.1 include:</p>
<ul>
<li>Sending to or receiving from a stream because a stream encodes messages in AMQP 1.0 format (as covered in this blog post).</li>
<li>Leveraging queue locality using the <a href="https://github.com/rabbitmq/rabbitmq-amqp-java-client" target="_blank" rel="noopener noreferrer">RabbitMQ AMQP 1.0 Java client</a>. (This feature will be covered separately.)</li>
<li>Publishing to or consuming from other queues when one target queue reaches its limits on the same connection (as covered in the <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/09/02/amqp-flow-control">AMQP 1.0 flow control</a> blog post).</li>
</ul>]]></content>
        <author>
            <name>David Ansari</name>
            <uri>https://github.com/ansd</uri>
        </author>
        <category label="AMQP 1.0" term="AMQP 1.0"/>
        <category label="RabbitMQ 4.0" term="RabbitMQ 4.0"/>
        <category label="Performance" term="Performance"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Package Repository Updates]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/11/package-repository-updates</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/11/package-repository-updates"/>
        <updated>2024-08-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Team RabbitMQ has two updates related to our Debian and RPM repositories:]]></summary>
        <content type="html"><![CDATA[<p>Team RabbitMQ has two updates related to our Debian and RPM repositories:</p>
<ol>
<li>On August 18, 2024, Team RabbitMQ's PackageCloud account will be discontinued</li>
<li>Cloudsmith mirror repositories now use <code>*.rabbitmq.com</code> domains, please update your repository definition files</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="mirrors-now-use-rabbitmqcom-domains">Mirrors Now Use <code>*.rabbitmq.com</code> Domains<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/11/package-repository-updates#mirrors-now-use-rabbitmqcom-domains" class="hash-link" aria-label="Direct link to mirrors-now-use-rabbitmqcom-domains" title="Direct link to mirrors-now-use-rabbitmqcom-domains">​</a></h2>
<p>The docs were updated to use <code>*.rabbitmq.com</code> for mirror subdomains, please update your repository files.
The previously used domain names won't go away, however,
this migration would make your setup more future-proof for large infrastructure changes our team expects
to happen in the rest of 2024.</p>
<p>See <a href="https://www.rabbitmq.com/docs/install-debian" target="_blank" rel="noopener noreferrer">Debian</a> and <a href="https://www.rabbitmq.com/docs/install-rpm" target="_blank" rel="noopener noreferrer">RPM</a> installation guides.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="packagecloud-will-be-discontinued-on-aug-18th-2024">PackageCloud Will Be Discontinued on Aug 18th, 2024<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/11/package-repository-updates#packagecloud-will-be-discontinued-on-aug-18th-2024" class="hash-link" aria-label="Direct link to PackageCloud Will Be Discontinued on Aug 18th, 2024" title="Direct link to PackageCloud Will Be Discontinued on Aug 18th, 2024">​</a></h2>
<p>PackageCloud, a great package distribution service we've been using since 2016 IIRC, will be discontinued on Aug 18, 2024.
This means that our PackageCloud repositories will become unavailable shortly after.</p>
<p>Please move to the mirrors used in <a href="https://www.rabbitmq.com/docs/install-debian" target="_blank" rel="noopener noreferrer">Debian</a> and <a href="https://www.rabbitmq.com/docs/install-rpm" target="_blank" rel="noopener noreferrer">RPM</a>
installation guides <strong>as soon as possible</strong>!</p>
<p>On behalf of the RabbitMQ Core Team I would like to thank the PackageCloud team for providing us
with a solid service over the last eight years, during which we only have experienced one minor outage.</p>
<p>This migration has nothing to do with the quality of the service but rather reflects the fact that the core team is
in a different corporate environment today compared to 2016-2023, plus we now have our own
mirrors for backup.</p>]]></content>
        <author>
            <name>Michael Klishin</name>
            <uri>https://github.com/michaelklishin</uri>
        </author>
        <category label="announcements" term="announcements"/>
        <category label="packages" term="packages"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Native AMQP 1.0]]></title>
        <id>https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp</id>
        <link href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp"/>
        <updated>2024-08-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We are pleased to announce that RabbitMQ 4.0 supports AMQP 1.0 as a core protocol, providing the following benefits:]]></summary>
        <content type="html"><![CDATA[<p>We are pleased to announce that RabbitMQ 4.0 supports <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-overview-v1.0-os.html" target="_blank" rel="noopener noreferrer">AMQP 1.0</a> as a core protocol, providing the following benefits:</p>
<ul>
<li>Modernized RabbitMQ to natively support the latest AMQP standard</li>
<li>Support for more AMQP 1.0 features</li>
<li>Significantly better AMQP 1.0 performance and scalability compared to RabbitMQ 3.13</li>
<li>Greater interoperability with other AMQP 1.0 message brokers</li>
<li>AMQP 1.0 is enabled by default in RabbitMQ 4.0</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-history">AMQP History<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp#amqp-history" class="hash-link" aria-label="Direct link to AMQP History" title="Direct link to AMQP History">​</a></h2>
<p>The Advanced Message Queuing Protocol (AMQP) is an application layer protocol and a standard for business messaging.</p>
<p>AMQP was first developed by John O’Hara at JPMorgan in 2003.
In his article <a href="https://dl.acm.org/doi/pdf/10.1145/1255421.1255424" target="_blank" rel="noopener noreferrer">Toward a Commodity Enterprise Middleware</a> from 2007, John O’Hara describes the original motivation behind AMQP.</p>
<p>The financial services industry required a high performance messaging middleware (also known as service bus).
This middleware must provide durability to avoid message loss and allow for store-and-forward and publish-subscribe techniques.
Use cases include automated trading and buffering of market data events whose arrival rates temporarily exceed the transactional processing rate performed by backend services.</p>
<p>Some commercial third-party middleware providers were overly expensive.
At one point, every major investment bank on Wall Street was building its own custom messaging middleware solution.
However, they encountered the same problems repeatedly.
Banks were not software companies, and messaging middleware is complex software that is hard to get right.</p>
<p>Banks have managed to collaborate in creating open technical standards such as:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/SWIFT" target="_blank" rel="noopener noreferrer">Society for Worldwide Interbank Financial Telecommunication</a> (SWIFT).</li>
<li><a href="https://en.wikipedia.org/wiki/Financial_Information_eXchange" target="_blank" rel="noopener noreferrer">Financial Information eXchange</a> (FIX) protocol</li>
<li><a href="https://en.wikipedia.org/wiki/FAST_protocol" target="_blank" rel="noopener noreferrer">FAST</a> protocol (FIX Adapted for STreaming)</li>
<li><a href="https://en.wikipedia.org/wiki/FpML" target="_blank" rel="noopener noreferrer">Financial products Markup Language</a> (FpML)</li>
</ul>
<p>Therefore, the same organizations should also be capable of creating an open standard for business messaging: That's how AMQP was born.</p>
<p>The requirements for the AMQP specification were:</p>
<ul>
<li>Open standard</li>
<li>Free of patents to enable anyone to implement a compatible implementation</li>
<li>Appealing for commercial implementations (otherwise, the AMQP specification would not succeed)</li>
<li>Should have more than one implementation (to qualify as a standard after all)</li>
<li>AMQP software had to be proven in live systems. Middleware is a critical piece of any system and must be trusted. This trust has to be earned.</li>
<li>Collective effort by many independent companies solving the same problem of connecting systems together</li>
</ul>
<p>Fast forward to today, AMQP is used in critical messaging infrastructure by most of the largest corporations in the world across all industries, and RabbitMQ is the most popular open-source AMQP message broker.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-versions">AMQP Versions<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp#amqp-versions" class="hash-link" aria-label="Direct link to AMQP Versions" title="Direct link to AMQP Versions">​</a></h2>
<p>The following table shows when different AMQP specifications were published:</p>
<table><thead><tr><th>AMQP version</th><th>Release date</th></tr></thead><tbody><tr><td><a href="https://www.rabbitmq.com/resources/specs/amqp0-8.pdf" target="_blank" rel="noopener noreferrer">0.8</a></td><td>June 2006</td></tr><tr><td><a href="https://www.rabbitmq.com/resources/specs/amqp0-9.pdf" target="_blank" rel="noopener noreferrer">0.9</a></td><td>December 2006</td></tr><tr><td><a href="https://www.amqp.org/specification/0-10/amqp-org-download" target="_blank" rel="noopener noreferrer">0.10</a></td><td>February 2008</td></tr><tr><td><a href="https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf" target="_blank" rel="noopener noreferrer">0.9.1</a></td><td>November 2008</td></tr><tr><td><a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-overview-v1.0-os.html" target="_blank" rel="noopener noreferrer">1.0</a></td><td>October 2011</td></tr></tbody></table>
<p>In his article from 2007, John O'Hara writes:</p>
<blockquote>
<p>The AMQP Working Group is rapidly evolving the protocol and hopes to reach version 1.0 during 2008</p>
</blockquote>
<p>Not only did the release of version 1.0 take three years longer than anticipated, but the protocol specification also changed completely.
The result is that AMQP 1.0 is a very different protocol compared to its pre-release versions such as AMQP 0.9.1.</p>
<p>When "AMQP" is mentioned in conversations or documentation, the version is often omitted, creating a lot of confusion about which protocol is meant.
Since RabbitMQ is the most popular message broker, many websites refer to AMQP 0.9.1.
Other documentation, in turn, refers to AMQP 1.0.</p>
<p>The rest of this blog post omits AMQP versions 0.8, 0.9, and 0.10 since they are old specifications that aren't used anymore.
Instead, we focus on the differences between AMQP versions 0.9.1 and 1.0, both of which are heavily used in today's message brokers.</p>
<p>On a very high level, the biggest difference between AMQP 0.9.1 and AMQP 1.0 is the following:</p>
<ul>
<li>AMQP 0.9.1 defines the protocol between client and server as well as server entities such as <a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#exchanges">exchanges</a>, <a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#queues">queues</a>, and <a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#bindings">bindings</a>.</li>
<li>AMQP 1.0 defines only the protocol between client and server.</li>
</ul>
<p></p><figure><img decoding="async" loading="lazy" alt="Figure 1: AMQP 0.9.1 vs AMQP 1.0" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/091-vs-10-301a67190ec7f6c431229df74c3bf008.png" width="3320" height="1290" class="img_ev3q"><figcaption>Figure 1: AMQP 0.9.1 vs AMQP 1.0</figcaption></figure><p></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-091">AMQP 0.9.1<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp#amqp-091" class="hash-link" aria-label="Direct link to AMQP 0.9.1" title="Direct link to AMQP 0.9.1">​</a></h2>
<p>A client publishes a message to an exchange, which routes the message to a queue.
The queue stores the message until it gets consumed by a client.</p>
<p>More precisely, a publisher sends a message to an instance of an exchange type.
The exchange type defines the routing algorithm.
The AMQP 0.9.1 specification defines different types of exchanges which must be implemented by an AMQP 0.9.1 broker:</p>
<ul>
<li><a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#exchange-direct">Direct exchange</a></li>
<li><a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#exchange-fanout">Fanout exchange</a></li>
<li><a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#exchange-topic">Topic exchange</a></li>
<li><a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#exchange-headers">Headers exchange</a></li>
</ul>
<p>Exchanges also offer an extension point.
RabbitMQ provides various other exchange types, and third-party plugins can also easily be added to RabbitMQ.</p>
<p>Depending on the binding (including the binding key) from a queue to an exchange instance and the routing key (and possibly other headers) of the message, the exchange type algorithm decides to which queue(s) the message gets copied.</p>
<p>The model in AMQP 0.9.1 is therefore simple, yet flexible and powerful.
If needed, complex routing topologies can be created, including <a href="https://www.rabbitmq.com/rabbitmq-website/docs/e2e">exchange to exchange bindings</a>.</p>
<p>Exchanges, queues, and bindings can be either pre-declared by an administrator or dynamically created via HTTP or, more commonly, directly by the client applications via AMQP 0.9.1.
Specifically, AMQP 0.9.1 defines protocol frames such as <code>exchange.declare</code>, <code>queue.declare</code>, and <code>queue.bind</code>.
Therefore, AMQP 0.9.1 client applications are aware of the server topology.</p>
<p>The RabbitMQ Summit 2023 talk <a href="https://youtu.be/pQEk5TIUCoc?feature=shared&amp;t=445" target="_blank" rel="noopener noreferrer">Serving millions of clients with Native MQTT and MQTT 5.0</a> explained that the AMQ 0.9.1 model is so powerful that it provides much of what an MQTT broker needs. RabbitMQ uses the AMQ 0.9.1 topic exchange type to match topics in incoming MQTT packets against topic filters of MQTT subscriptions.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-10">AMQP 1.0<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp#amqp-10" class="hash-link" aria-label="Direct link to AMQP 1.0" title="Direct link to AMQP 1.0">​</a></h2>
<p>AMQP 1.0 is more generic than AMQP 0.9.1.
AMQP 1.0 does not define a server model.
In fact, AMQP 1.0 is so generic that it does not even mandate a central broker to be present.
AMQP 1.0 defines peers exchanging messages with each other.
They do so by sending messages to a <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-target" target="_blank" rel="noopener noreferrer">target</a> and by consuming messages from a <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-source" target="_blank" rel="noopener noreferrer">source</a>.</p>
<p>Both targets and sources contain an <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-address-string" target="_blank" rel="noopener noreferrer">address</a>.
What internal object an AMQP 1.0 address refers to and how an address is resolved is not defined by the AMQP 1.0 specification because different AMQP 1.0 brokers have different models to receive, store, and send messages.</p>
<p>For example, in an AMQP 1.0 broker that implements the AMQP 0.9.1 model (such as RabbitMQ), an AMQP 1.0 target address refers to an AMQP 0.9.1 exchange, and an AMQP 1.0 source address refers to an AMQP 0.9.1 queue.
Other AMQP 1.0 brokers might choose that an address refers to an immutable log (a stream), a topic, some in-memory data structure, or a SQL database.
Yet another AMQP 1.0 implementation could be just a client library sending messages directly to another client without any central broker being involved where an address could refer to some operating system socket.
It's up to the AMQP 1.0 implementation which decides how it resolves an address and how it stores messages.</p>
<p>Because the AMQP 1.0 specification is so generic, it's easier for a wide range of brokers to add support for AMQP 1.0 independent of the model they use to store and forward messages.
That's why more AMQP 1.0 brokers exist compared to AMQP 0.9.1 brokers.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-091-vs-amqp-10">AMQP 0.9.1 vs. AMQP 1.0<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp#amqp-091-vs-amqp-10" class="hash-link" aria-label="Direct link to AMQP 0.9.1 vs. AMQP 1.0" title="Direct link to AMQP 0.9.1 vs. AMQP 1.0">​</a></h2>
<p>The following table compares AMQP 0.9.1 with AMQP 1.0:</p>
<table><thead><tr><th></th><th>AMQP 0.9.1</th><th>AMQP 1.0</th></tr></thead><tbody><tr><td><strong>Server model defined?</strong></td><td>Yes: exchanges, queues, bindings</td><td>No: implementation decides server model</td></tr><tr><td><strong>Standards</strong></td><td>-</td><td><a href="https://www.iso.org/standard/64955.html" target="_blank" rel="noopener noreferrer">ISO/IEC 19464</a> <br> <a href="https://www.amqp.org/node/102" target="_blank" rel="noopener noreferrer">OASIS</a></td></tr><tr><td><strong>Brokers</strong></td><td>RabbitMQ <br> SwiftMQ <br> LavinMQ <br> Apache Qpid Broker-J</td><td>RabbitMQ <br> Azure Service Bus <br> Azure Event Hubs <br> Apache ActiveMQ <br> Apache Qpid Broker-J <br> Apache Qpid C++ Broker <br> IBM MQ <br> Red Hat AMQ <br> SwiftMQ <br> Solace</td></tr><tr><td><strong>Client libraries</strong></td><td>large number of well maintained <a href="https://www.rabbitmq.com/rabbitmq-website/client-libraries/devtools">client libraries and developer tools</a></td><td>smaller ecosystem, but well maintained client libraries for .NET and Java</td></tr><tr><td><strong>Complexity</strong></td><td>medium</td><td>high</td></tr><tr><td><strong>Modular architecture?</strong></td><td>No</td><td>Yes, layers are: <br> 1. <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-types-v1.0-os.html" target="_blank" rel="noopener noreferrer">Types</a> <br> 2. <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html" target="_blank" rel="noopener noreferrer">Transport</a> <br> 3. <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html" target="_blank" rel="noopener noreferrer">Messaging</a> <br> 4. <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transactions-v1.0-os.html" target="_blank" rel="noopener noreferrer">Transactions</a> <br> 5. <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-security-v1.0-os.html" target="_blank" rel="noopener noreferrer">Security</a></td></tr><tr><td><strong>Extensibility</strong></td><td>Although the server model is <a href="https://www.rabbitmq.com/rabbitmq-website/tutorials/amqp-concepts#amqp-extensibility">extensible</a> via exchange types (and queue types in RabbitMQ) and RabbitMQ itself can be extended with plugins, extensibility of the protocol itself is very limited: RabbitMQ had to define custom AMQP 0.9.1 <a href="https://www.rabbitmq.com/rabbitmq-website/docs/extensions">protocol extensions</a>.</td><td>Designed for extensibility: <br> - Layered architecture allows higher layer to be (re)placed on top of lower layer  <br> - <code>properties</code> and <code>capabilities</code> fields in some frames allow for extensibility <br> - Numerous AMQP 1.0 <a href="https://github.com/oasis-tcs/amqp-specs/" target="_blank" rel="noopener noreferrer">extension specifications</a> exist. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td></tr><tr><td><strong>Type system</strong></td><td>limited and poorly defined</td><td>well defined <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-types-v1.0-os.html" target="_blank" rel="noopener noreferrer">types</a></td></tr><tr><td><strong>Flow control</strong></td><td>simple: e.g. <a href="https://www.rabbitmq.com/docs/consumer-prefetch" target="_blank" rel="noopener noreferrer">consumer prefetch</a></td><td>sophisticated: <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-flow-control" target="_blank" rel="noopener noreferrer">link flow control</a> and <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-session-flow-control" target="_blank" rel="noopener noreferrer">session flow control</a></td></tr><tr><td><strong>Features</strong></td><td>defines most important business messaging features</td><td>more features compared to AMQP 0.9.1 including (but not limited to): <br> - <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/10/11/modified-outcome">modified outcome</a> <br> - <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-idp429232" target="_blank" rel="noopener noreferrer">pausing consumers</a> <br> - <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-idp484080" target="_blank" rel="noopener noreferrer">transferring large messages</a> <br> - <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-idp157520" target="_blank" rel="noopener noreferrer">pipelined connection establishment</a> <br> - <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-sender-settle-mode" target="_blank" rel="noopener noreferrer">sender settle mode</a> <code>mixed</code> <br> - <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format" target="_blank" rel="noopener noreferrer">better defined message header sections</a> with immutability of the bare message</td></tr></tbody></table>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="the-pervasiveness-of-amqp-091">The Pervasiveness of AMQP 0.9.1<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp#the-pervasiveness-of-amqp-091" class="hash-link" aria-label="Direct link to The Pervasiveness of AMQP 0.9.1" title="Direct link to The Pervasiveness of AMQP 0.9.1">​</a></h4>
<p>Naively thinking, one might expect that the newer AMQP 1.0 protocol version is better, more feature-rich, and more performant, and therefore would obsolete and replace older AMQP 0.9.1 implementations.
However, this is not the case.
In fact, new AMQP 0.9.1 client libraries are still being created, such as the <a href="https://github.com/bloomberg/rmqcpp" target="_blank" rel="noopener noreferrer">C++ library</a> open-sourced by Bloomberg just last year.
Surprisingly, even entirely new AMQP 0.9.1 broker implementations, such as LavinMQ, have been developed from scratch years after AMQP 1.0 was released.</p>
<p>The reasons that AMQP 0.9.1 is so popular compared to AMQP 1.0 are RabbitMQ's strong ecosystem and community, and the fact that AMQP 0.9.1 is less complex.
Simplicity usually wins because simplicity leads to developers and users understanding the technology, which in turn results in more client libraries being developed and higher adoption.</p>
<p>As stated previously, AMQP 0.9.1 client applications are aware of exchanges, queues, and bindings.
John O’Hara even argued in his article from 2007 that interoperability cannot be achieved without the AMQP 0.9.1 protocol defining the model (exchanges, queues, and bindings):</p>
<blockquote>
<p>AMQP [0.9.1] is split into two main areas: transport model and queuing model.
AMQP [0.9.1] is unusual in that it thoroughly specifies the semantics of the services it provides within the queuing model;
since applications have a very intimate relationship with their middleware, this needs to be well defined or interoperability cannot be achieved.</p>
</blockquote>
<p>Seventeen years later, we can conclude that he was right.</p>
<p>Given that in 2024 AMQP 0.9.1 is still more pervasive compared to AMQP 1.0, has AMQP 1.0 failed?
As shown in the table above, many brokers have become AMQP 1.0 compliant.
Although no single broker implements the entire AMQP 1.0 specification due to its complexity, any AMQP 1.0 client can exchange messages with any of these AMQP 1.0 compliant brokers.
Therefore, arguably, we can conclude that both AMQP 0.9.1 and AMQP 1.0 have succeeded.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="why-does-rabbitmq-40-get-an-amqp-10-upgrade">Why does RabbitMQ 4.0 get an AMQP 1.0 upgrade?<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp#why-does-rabbitmq-40-get-an-amqp-10-upgrade" class="hash-link" aria-label="Direct link to Why does RabbitMQ 4.0 get an AMQP 1.0 upgrade?" title="Direct link to Why does RabbitMQ 4.0 get an AMQP 1.0 upgrade?">​</a></h4>
<p>There are several reasons why we have invested in first-class AMQP 1.0 support:</p>
<ol>
<li><strong>Customer Demand</strong>: Both commercial customers and open-source users have requested better AMQP 1.0 support. While not the primary reason for our investment, sometimes conversations occur at such a high, non-technical level that prospective customers prefer to base their central messaging infrastructure on the latest AMQP standard rather than a pre-release AMQP specification. An example can be found <a href="https://rabbitmq-users.narkive.com/GLjDgdl5/rabbitmq-discuss-pressured-to-move-to-amqp-1-0" target="_blank" rel="noopener noreferrer">here</a>.</li>
<li><strong>Protocol Features</strong>: The AMQP 1.0 specification has a better-defined type system and more protocol features, as partially shown in the table above. This blog post provides only an overview of AMQP 0.9.1 vs. AMQP 1.0, with subsequent posts covering AMQP 1.0 features in greater detail.</li>
<li><strong>Extensibility</strong>: AMQP 1.0 is designed for extensibility. More thought has been put into the protocol specification, and we believe we can leverage this extensibility in future RabbitMQ versions. For example, thanks to this extensibility, RabbitMQ can inform AMQP 1.0 clients about queue locality, allowing clients to publish and consume locally to the RabbitMQ node they are connected to.</li>
<li><strong>Improved Performance</strong>: The old RabbitMQ 3.13 plugin was limited in features, suboptimally designed, and slow due to its internal proxying via the AMQP 0.9.1 protocol. Numerous AMQP 1.0 implementation bugs have been fixed in RabbitMQ 4.0.</li>
<li><strong>Interoperability</strong>: An open source message broker such as RabbitMQ is all about interoperability. AMQP messages should be able to traverse different brokers and organizations. Since many brokers implement AMQP 1.0, users can more easily migrate to (and from) RabbitMQ. Another interoperability use case was demonstrated by Alvaro Videla in his RabbitMQ Summit 2023 <a href="https://youtu.be/WpG__E5zafQ?feature=shared&amp;t=2312" target="_blank" rel="noopener noreferrer">keynote</a>, where messages were moved from RabbitMQ to Real-Time Intelligence in Microsoft Fabric to analyze application messages using various Azure cloud services.</li>
<li><strong>Multi-Protocol Message Broker</strong>: RabbitMQ is the best multi-protocol message broker on the market. It supports AMQP 0.9.1, MQTT, Streams, and, since RabbitMQ 4.0, AMQP 1.0 natively. STOMP is supported via a plugin. RabbitMQ offers users full flexibility in how messages are published and consumed: Messages can be published to and consumed from the same queue using different protocols. RabbitMQ excels by performing <a href="https://www.rabbitmq.com/rabbitmq-website/docs/conversions">well-documented</a> message protocol conversions. Natively supporting AMQP 1.0 provides even greater flexibility to users.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-10-in-rabbitmq-313">AMQP 1.0 in RabbitMQ 3.13<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp#amqp-10-in-rabbitmq-313" class="hash-link" aria-label="Direct link to AMQP 1.0 in RabbitMQ 3.13" title="Direct link to AMQP 1.0 in RabbitMQ 3.13">​</a></h2>
<p>Since AMQP 1.0 was released in 2011, RabbitMQ has provided limited support for AMQP 1.0 via a plugin:</p>
<p></p><figure><img decoding="async" loading="lazy" alt="Figure 2: AMQP 1.0 plugin up to RabbitMQ 3.13" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/amqp10-plugin-09454396cadd95cf812a70748a008f39.png" width="3270" height="866" class="img_ev3q"><figcaption>Figure 2: AMQP 1.0 plugin up to RabbitMQ 3.13</figcaption></figure><p></p>
<p>The AMQP 1.0 plugin up to RabbitMQ 3.13 proxies AMQP 1.0 internally via AMQP 0.9.1.
In other words, the plugin translates each AMQP 1.0 message received from the client to an AMQP 0.9.1 message and then sends this translated message via the AMQP 0.9.1 protocol to RabbitMQ core.
This approach has major drawbacks:</p>
<ol>
<li><strong>Limited Feature Support:</strong> Support for AMQP 1.0 is limited to the subset of features provided by the AMQP 0.9.1 protocol.</li>
<li><strong>Slow Performance:</strong> Each message must be translated between AMQP 0.9.1 and AMQP 1.0.</li>
<li><strong>Resource Heavy:</strong> This approach is resource-intensive in terms of memory and CPU usage, as each AMQP 1.0 <a href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#section-sessions" target="_blank" rel="noopener noreferrer">session</a> in the plugin includes an AMQP 0.9.1 client and maintains AMQP 0.9.1 state.</li>
</ol>
<p>As explained in the <a href="https://www.rabbitmq.com/blog/2023/03/21/native-mqtt#overview" target="_blank" rel="noopener noreferrer">Serving Millions of Clients with Native MQTT</a> blog post, the MQTT plugin worked conceptually the same way up to RabbitMQ 3.11:
it also proxied internally via the AMQP 0.9.1 protocol.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="amqp-10-in-rabbitmq-40">AMQP 1.0 in RabbitMQ 4.0<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp#amqp-10-in-rabbitmq-40" class="hash-link" aria-label="Direct link to AMQP 1.0 in RabbitMQ 4.0" title="Direct link to AMQP 1.0 in RabbitMQ 4.0">​</a></h2>
<p>With RabbitMQ 4.0, native AMQP 1.0 support replaces the AMQP 1.0 plugin:</p>
<p></p><figure><img decoding="async" loading="lazy" alt="Figure 3: Native AMQP 1.0 in RabbitMQ 4.0" src="https://www.rabbitmq.com/rabbitmq-website/assets/images/native-amqp-af5ff1bf52524940d92e80e4663fbdf3.png" width="2622" height="852" class="img_ev3q"><figcaption>Figure 3: Native AMQP 1.0 in RabbitMQ 4.0</figcaption></figure><p></p>
<p>AMQP 1.0 clients send messages directly to exchanges (AMQP 1.0 targets) and receive messages directly from queues (AMQP 1.0 sources).
In other words, native AMQP 1.0 no longer proxies via the AMQP 0.9.1 <strong>protocol</strong> but continues to utilize the simple, flexible, and powerful AMQ 0.9.1 <strong>model</strong>.
This transition brings several benefits:</p>
<ol>
<li><strong>Enhanced Feature Support:</strong> More AMQP 1.0 features are supported. This mirrors how the introduction of Native MQTT in RabbitMQ 3.12 facilitated the addition of more protocol features, such as MQTT 5.0 in RabbitMQ 3.13.</li>
<li><strong>Fast Performance:</strong> Native AMQP 1.0 offers better throughput and lower latency.</li>
<li><strong>Resource Light:</strong> Lower memory and CPU usage on the broker, with a single Erlang process used per AMQP 1.0 session compared to 15 Erlang processes in RabbitMQ 3.13.</li>
</ol>
<p>Native AMQP 1.0 thus follows the success story of Native MQTT.</p>
<p>Obsoleting the AMQP 1.0 plugin, which seems straightforward in the diagram, actually required 12 months of engineering work.
This extensive effort was due to several factors:</p>
<ul>
<li><strong>Complexity of the AMQP 1.0 Protocol:</strong> AMQP 1.0 is the most complex protocol supported by RabbitMQ, more intricate than both AMQP 0.9.1 and MQTT.</li>
<li><strong>Queue modifications:</strong> AMQP 1.0 clients can directly consume from each queue type, necessitating changes to classic queues, quorum queues, and stream implementations.</li>
<li><strong>Rolling Upgrades:</strong> We support rolling upgrades from RabbitMQ 3.13 to 4.0, allowing you to upgrade your AMQP 1.0 workloads without downtime.</li>
</ul>
<p>Even though RabbitMQ 4.0 supports AMQP 1.0 natively, this does not imply that RabbitMQ supports all AMQP 1.0 features.
Like any other AMQP 1.0 broker, RabbitMQ's AMQP 1.0 implementation has <a href="https://www.rabbitmq.com/rabbitmq-website/docs/amqp#limitations">documented limitations</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="rabbitmq-amqp-10-clients">RabbitMQ AMQP 1.0 clients<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp#rabbitmq-amqp-10-clients" class="hash-link" aria-label="Direct link to RabbitMQ AMQP 1.0 clients" title="Direct link to RabbitMQ AMQP 1.0 clients">​</a></h2>
<p>We have developed two new AMQP 1.0 client libraries specifically for RabbitMQ:</p>
<ul>
<li><a href="https://github.com/rabbitmq/rabbitmq-amqp-java-client" target="_blank" rel="noopener noreferrer">RabbitMQ AMQP 1.0 <strong>Java</strong> client</a></li>
<li><a href="https://github.com/rabbitmq/rabbitmq-amqp-dotnet-client" target="_blank" rel="noopener noreferrer">RabbitMQ AMQP 1.0 <strong>.NET</strong> client</a></li>
</ul>
<p>These client libraries have the following characteristics:</p>
<ul>
<li><strong>Thin Wrappers:</strong> They are thin wrappers containing RabbitMQ-specific logic built around existing open-source AMQP 1.0 client libraries.</li>
<li><strong>Opinionated API:</strong> They offer a simple and safe API designed to help application developers easily get started with sending and receiving messages via AMQP 1.0.</li>
<li><strong>RabbitMQ Model Integration:</strong> They enable applications to manage RabbitMQ’s AMQ 0.9.1 model (such as declaring and deleting exchanges, queues, and bindings) through AMQP 1.0. This feature leverages the <a href="https://github.com/oasis-tcs/amqp-specs/blob/master/http-over-amqp-v1.0-wd06a.docx" target="_blank" rel="noopener noreferrer">HTTP over AMQP 1.0</a> extension specification.</li>
<li><strong>Best of Both Worlds:</strong> Applications can maintain an "intimate relationship with their middleware" by dynamically creating server topologies while enjoying a straightforward experience with the otherwise complex AMQP 1.0 protocol. Additionally, applications can optionally bypass the thin RabbitMQ-specific wrapper and interact directly with the underlying AMQP 1.0 client library to access more advanced AMQP 1.0 features.</li>
<li><strong>Reduced Network Traffic:</strong> In some scenarios, they can reduce intra-RabbitMQ cluster traffic by identifying the RabbitMQ nodes on which a given queue is located, allowing applications to publish and consume "locally" from these nodes.</li>
<li><strong>Optional:</strong> These client libraries are not required for interacting with RabbitMQ via AMQP 1.0. Any other AMQP 1.0 client should also be able to communicate with RabbitMQ.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="rabbitmq-modernizations">RabbitMQ Modernizations<a href="https://www.rabbitmq.com/rabbitmq-website/blog/2024/08/05/native-amqp#rabbitmq-modernizations" class="hash-link" aria-label="Direct link to RabbitMQ Modernizations" title="Direct link to RabbitMQ Modernizations">​</a></h2>
<p>RabbitMQ 4.0 completes its modernization journey, which began with RabbitMQ 3.8 in 2019.
These modernizations include:</p>
<ul>
<li><a href="https://www.rabbitmq.com/rabbitmq-website/docs/quorum-queues"><strong>Quorum Queues</strong></a>: Using the Raft consensus algorithm to provide a safe, replicated queue type resilient to network partitions.</li>
<li><a href="https://www.rabbitmq.com/rabbitmq-website/docs/prometheus"><strong>Prometheus Metrics and Grafana Dashboards</strong></a>: Offering first-class observability integrations and <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2021/05/03/alerting">alerts</a>.</li>
<li><a href="https://youtu.be/GxdyQSUEj5U" target="_blank" rel="noopener noreferrer"><strong>RabbitMQ on Kubernetes</strong></a>: Operators to run RabbitMQ anywhere.</li>
<li><a href="https://www.rabbitmq.com/rabbitmq-website/docs/streams"><strong>Streams</strong></a>: An immutable log providing message replay and high message throughput with the <a href="https://github.com/rabbitmq/rabbitmq-server/blob/main/deps/rabbitmq_stream/docs/PROTOCOL.adoc" target="_blank" rel="noopener noreferrer">stream protocol</a>.</li>
<li><strong><a href="https://www.rabbitmq.com/rabbitmq-website/docs/classic-queues#classic-queue-implementation-version-2">Classic Queue Storage Version 2</a></strong>: Providing higher message throughput and lower memory usage.</li>
<li><strong>Commercial <a href="https://docs.vmware.com/en/VMware-Tanzu-RabbitMQ-for-Kubernetes/3.13/tanzu-rabbitmq-kubernetes/standby-replication.html" target="_blank" rel="noopener noreferrer">Disaster Recovery Solution</a></strong>: Ensuring business continuity when the entire data center goes down.</li>
<li><strong><a href="https://www.rabbitmq.com/rabbitmq-website/blog/2023/03/21/native-mqtt">Native MQTT</a> and <a href="https://www.rabbitmq.com/rabbitmq-website/blog/2023/07/21/mqtt5">MQTT 5.0</a></strong>: Transforming RabbitMQ into an IoT broker.</li>
<li><a href="https://rabbitmq.github.io/khepri/" target="_blank" rel="noopener noreferrer"><strong>Khepri</strong></a>: Using the Raft consensus algorithm to provide a safe and scalable metadata store resilient to network partitions.</li>
<li><strong>Native AMQP 1.0:</strong> Upgrading RabbitMQ's core protocol to the latest AMQP standard (as covered in this blog post).</li>
</ul>
<p>We encourage you to try and test AMQP 1.0 in RabbitMQ 4.0 and provide <a href="https://www.rabbitmq.com/rabbitmq-website/contact">feedback</a>.
You can use the latest <a href="https://hub.docker.com/layers/library/rabbitmq/4.0/images/sha256-a1fb6ba3eff9a226074940f27beccfd2e4de989d3d4ebb0b1272e9f78aa44dd4" target="_blank" rel="noopener noreferrer"><code>rabbitmq:4.0</code></a> docker image.
While we encourage you to build new applications with AMQP 1.0, we will continue to support and maintain AMQP 0.9.1 in RabbitMQ 4.x.</p>
<p>Watch our <a href="https://youtu.be/LFu-kOOTLvs?feature=shared" target="_blank" rel="noopener noreferrer">RabbitMQ Summit 2024 talk on Native AMQP 1.0</a> and read more technical <a href="https://www.rabbitmq.com/rabbitmq-website/blog/tags/amqp-1-0">blog posts on AMQP 1.0</a> features and performance benchmarks.</p>]]></content>
        <author>
            <name>David Ansari</name>
            <uri>https://github.com/ansd</uri>
        </author>
        <category label="AMQP 1.0" term="AMQP 1.0"/>
        <category label="RabbitMQ 4.0" term="RabbitMQ 4.0"/>
        <category label="New Features" term="New Features"/>
    </entry>
</feed>