"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-docs-3-13-ha-38-b-f01"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-3-13-ha-index-md-38b.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"ha/index","title":"Classic Queue Mirroring","description":"<!--","source":"@site/versioned_docs/version-3.13/ha/index.md","sourceDirName":"ha","slug":"/ha/","permalink":"/rabbitmq-website/docs/3.13/ha/","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/versioned_docs/version-3.13/ha/index.md","tags":[],"version":"3.13","frontMatter":{"title":"Classic Queue Mirroring"},"sidebar":"docsSidebar","previous":{"title":"Classic Queues","permalink":"/rabbitmq-website/docs/3.13/classic-queues"},"next":{"title":"Migrate Mirrored Classic Queues to Quorum Queues","permalink":"/rabbitmq-website/docs/3.13/migrate-mcq-to-qq"}}');

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-3.13/ha/queue_mirroring_indicators_management_ui_row_only.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/queue_mirroring_indicators_management_ui_row_only-ccaea71cc4235863bd01cc86e324ae21.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmVyc2lvbmVkX2RvY3MvdmVyc2lvbi0zLjEzL2hhL3F1ZXVlX21pcnJvcmluZ19pbmRpY2F0b3JzX21hbmFnZW1lbnRfdWlfcm93X29ubHkucG5nIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi92ZXJzaW9uZWRfZG9jcy92ZXJzaW9uLTMuMTMvaGEvcXVldWVfbWlycm9yaW5nX2luZGljYXRvcnNfbWFuYWdlbWVudF91aV9yb3dfb25seS5wbmc/MWMwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2ltYWdlcy9xdWV1ZV9taXJyb3JpbmdfaW5kaWNhdG9yc19tYW5hZ2VtZW50X3VpX3Jvd19vbmx5LWNjYWVhNzFjYzQyMzU4NjNiZDAxY2M4NmUzMjRhZTIxLnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-3.13/ha/queue_mirroring_indicators_management_ui_row_only.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-3.13/ha/queue_mirroring_no_mirrors.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/queue_mirroring_no_mirrors-69bfbd5bf9411faa6fa7e8fe27cb77a0.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmVyc2lvbmVkX2RvY3MvdmVyc2lvbi0zLjEzL2hhL3F1ZXVlX21pcnJvcmluZ19ub19taXJyb3JzLnBuZyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYWJiaXRtcS13ZWJzaXRlLy4vdmVyc2lvbmVkX2RvY3MvdmVyc2lvbi0zLjEzL2hhL3F1ZXVlX21pcnJvcmluZ19ub19taXJyb3JzLnBuZz85NzEwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvaW1hZ2VzL3F1ZXVlX21pcnJvcmluZ19ub19taXJyb3JzLTY5YmZiZDViZjk0MTFmYWE2ZmE3ZThmZTI3Y2I3N2EwLnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-3.13/ha/queue_mirroring_no_mirrors.png\n");

/***/ }),

/***/ "./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-3.13/ha/queue_mirroring_one_mirror_present.png":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"assets/images/queue_mirroring_one_mirror_present-a2483a78f01e0813ddbf1c70ce840f67.png\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L21udC9kL3h5MjQwMS9jb2RlRG9jL3JhYmJpdG1xLXdlYnNpdGUvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmVyc2lvbmVkX2RvY3MvdmVyc2lvbi0zLjEzL2hhL3F1ZXVlX21pcnJvcmluZ19vbmVfbWlycm9yX3ByZXNlbnQucG5nIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi92ZXJzaW9uZWRfZG9jcy92ZXJzaW9uLTMuMTMvaGEvcXVldWVfbWlycm9yaW5nX29uZV9taXJyb3JfcHJlc2VudC5wbmc/ZjA5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2ltYWdlcy9xdWV1ZV9taXJyb3Jpbmdfb25lX21pcnJvcl9wcmVzZW50LWEyNDgzYTc4ZjAxZTA4MTNkZGJmMWM3MGNlODQwZjY3LnBuZ1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-3.13/ha/queue_mirroring_one_mirror_present.png\n");

/***/ }),

/***/ "./versioned_docs/version-3.13/ha/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_3_13_ha_index_md_38b_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_3_13_ha_index_md_38b_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-3-13-ha-index-md-38b.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n/* harmony import */ var _theme_Tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n/* harmony import */ var _theme_TabItem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Classic Queue Mirroring'\n};\nconst contentTitle = 'Classic Queue Mirroring (Deprecated)';\n\nconst assets = {\n\n};\n\n\n\n\n\nconst toc = [{\n  \"value\": \"Wait, There&#39;s a Better Way: Modern Replicated Queue Type and Streams\",\n  \"id\": \"interstitial\",\n  \"level\": 2\n}, {\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"What is Queue Mirroring\",\n  \"id\": \"what-is-mirroring\",\n  \"level\": 2\n}, {\n  \"value\": \"How Mirroring is Configured\",\n  \"id\": \"ways-to-configure\",\n  \"level\": 2\n}, {\n  \"value\": \"Queue Arguments that Control Mirroring\",\n  \"id\": \"mirroring-arguments\",\n  \"level\": 2\n}, {\n  \"value\": \"Replication Factor: How Many Mirrors are Optimal?\",\n  \"id\": \"replication-factor\",\n  \"level\": 3\n}, {\n  \"value\": \"How to Check if a Queue is Mirrored?\",\n  \"id\": \"how-to-check-i-a-queue-is-mirrored\",\n  \"level\": 2\n}, {\n  \"value\": \"How to Detect Policies that Enable Classic Queue Mirroring\",\n  \"id\": \"detect-usage\",\n  \"level\": 2\n}, {\n  \"value\": \"Mirroring and CQv2\",\n  \"id\": \"cqv2\",\n  \"level\": 2\n}, {\n  \"value\": \"Queue Leader Replicas, Leader Migration, Data Locality\",\n  \"id\": \"leader-migration-data-locality\",\n  \"level\": 2\n}, {\n  \"value\": \"Queue Leader Location\",\n  \"id\": \"queue-leader-location\",\n  \"level\": 3\n}, {\n  \"value\": \"&quot;nodes&quot; Policy and Migrating Leaders\",\n  \"id\": \"fixed-leader-promotion\",\n  \"level\": 3\n}, {\n  \"value\": \"Mirroring of Exclusive Queues\",\n  \"id\": \"exclusive-queues-are-not-mirrored\",\n  \"level\": 3\n}, {\n  \"value\": \"Non-mirrored Queue Behavior in a Cluster\",\n  \"id\": \"non-mirrored-queue-behavior-on-node-failure\",\n  \"level\": 2\n}, {\n  \"value\": \"Examples\",\n  \"id\": \"examples\",\n  \"level\": 2\n}, {\n  \"value\": \"Mirrored Queue Implementation and Semantics\",\n  \"id\": \"behaviour\",\n  \"level\": 2\n}, {\n  \"value\": \"Publisher Confirms and Transactions\",\n  \"id\": \"confirms-transactions\",\n  \"level\": 3\n}, {\n  \"value\": \"Flow Control\",\n  \"id\": \"flow-control\",\n  \"level\": 3\n}, {\n  \"value\": \"Leader Failures and Consumer Cancellation\",\n  \"id\": \"cancellation\",\n  \"level\": 3\n}, {\n  \"value\": \"Unsynchronised Mirrors\",\n  \"id\": \"unsynchronised-mirrors\",\n  \"level\": 2\n}, {\n  \"value\": \"Promotion of Unsynchronised Mirrors on Failure\",\n  \"id\": \"promoting-unsynchronised-mirrors\",\n  \"level\": 3\n}, {\n  \"value\": \"Stopping Nodes and Synchronisation\",\n  \"id\": \"start-stop\",\n  \"level\": 3\n}, {\n  \"value\": \"Stopping Nodes Hosting Queue Leader with Only Unsynchronised Mirrors\",\n  \"id\": \"cluster-shutdown\",\n  \"level\": 3\n}, {\n  \"value\": \"Loss of a Leader While All Mirrors are Stopped\",\n  \"id\": \"promotion-while-down\",\n  \"level\": 3\n}, {\n  \"value\": \"Batch Synchronization\",\n  \"id\": \"batch-sync\",\n  \"level\": 2\n}, {\n  \"value\": \"Configuring Synchronisation\",\n  \"id\": \"configuring-synchronisation\",\n  \"level\": 3\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    img: \"img\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"classic-queue-mirroring-deprecated\",\n        children: \"Classic Queue Mirroring (Deprecated)\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"danger\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"This guide covers a feature that had been \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/blog/2021/08/21/4.0-deprecation-announcements\",\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n            children: \"deprecated since 2021\"\n          })\n        }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://github.com/rabbitmq/rabbitmq-server/pull/9815\",\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n            children: \"was removed completely\"\n          })\n        }), \" from RabbitMQ 4.0.x.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"important\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./quorum-queues\",\n          children: \"Quorum queues\"\n        }), \" and/or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./streams\",\n          children: \"streams\"\n        }), \" should be used instead of mirrored classic queues.\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n          children: \"Non-replicated\"\n        }), \" classic queues continue being supported and developed.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"interstitial\",\n      children: \"Wait, There's a Better Way: Modern Replicated Queue Type and Streams\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This guide covers a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2021/08/21/4.0-deprecation-announcements\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n          children: \"long time deprecated\"\n        })\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/pull/9815\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n          children: \"in 4.x, removed\"\n        })\n      }), \" legacy feature: mirroring (queue contents replication) of classic queues.\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"Quorum queues\"\n      }), \" and/or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./streams\",\n        children: \"streams\"\n      }), \" should be used instead of mirrored classic queues.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Quorum queues are a more advanced queue type, which offers high availability using  replication and focuses on data safety. Quorum queues \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2022/05/05/rabbitmq-3.10-release-overview\",\n        children: \"support message TTL\"\n      }), \" and provide \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2022/05/16/rabbitmq-3.10-performance-improvements\",\n        children: \"higher throughput and more stable latency\"\n      }), \" compared to mirrored classic queues. Please \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./migrate-mcq-to-qq\",\n        children: \"migrate from Mirrored Classic Queues to Quorum Queues\"\n      }), \" now.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./streams\",\n        children: \"Streams\"\n      }), \" is an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2021/07/13/rabbitmq-streams-overview\",\n        children: \"alternative messaging data structure\"\n      }), \" supported by RabbitMQ.\\r\\nJust like quorum queues, streams are replicated.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Quorum queues should be the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"default choice\"\n      }), \" for a replicated queue type.\\r\\nClassic queue mirroring will be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"removed in a future version\"\n      }), \" of RabbitMQ:\\r\\nclassic queues will remain a supported non-replicated queue type.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Topics covered in this guide include,\\r\\nfor migrating away from classic mirrored queues:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#interstitial\",\n          children: \"Next generation replicated queues and streams\"\n        }), \", and why they should be preferred over classic queue mirroring\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"How to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#detect-usage\",\n          children: \"detect what policies enable classic queue mirroring\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For historical reference:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"What is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#what-is-mirroring\",\n          children: \"classic queue mirroring\"\n        }), \" and how it works\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"How to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#ways-to-configure\",\n          children: \"enable it\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"What \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#mirroring-arguments\",\n          children: \"mirroring settings are available\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Why \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#cqv2\",\n          children: \"mixed CQv1 and CQv2 clusters are not recommended with mirroring\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"What \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#replication-factor\",\n          children: \"replication factor\"\n        }), \" is recommended\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#leader-migration-data-locality\",\n          children: \"Data locality\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#behaviour\",\n          children: \"Leader election\"\n        }), \" (mirror promotion) and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#unsynchronised-mirrors\",\n          children: \"unsynchronised mirrors\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Mirrored vs. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#non-mirrored-queue-behavior-on-node-failure\",\n          children: \"non-mirrored queue behavior\"\n        }), \" in case of node failure\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#batch-sync\",\n          children: \"Batch synchronisation\"\n        }), \" of newly added and recovering mirrors\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"and more.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This guide assumes general familiarity with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering\",\n        children: \"RabbitMQ clustering\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues\",\n        children: \"quorum queues\"\n      }), \", and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./streams\",\n        children: \"streams\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"what-is-mirroring\",\n      children: \"What is Queue Mirroring\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"danger\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"This guide covers a feature that had been \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/blog/2021/08/21/4.0-deprecation-announcements\",\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n            children: \"deprecated since 2021\"\n          })\n        }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://github.com/rabbitmq/rabbitmq-server/pull/9815\",\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n            children: \"was removed completely\"\n          })\n        }), \" for the next major series, RabbitMQ 4.x.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"important\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./quorum-queues\",\n          children: \"Quorum queues\"\n        }), \" and/or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./streams\",\n          children: \"streams\"\n        }), \" should be used instead of mirrored classic queues.\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n          children: \"Non-replicated\"\n        }), \" classic queues continue being supported and developed.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"By default, contents of a queue within a RabbitMQ cluster are located on\\r\\na single node (the node on which the queue was\\r\\ndeclared). This is in contrast to exchanges and bindings,\\r\\nwhich can always be considered to be on all nodes. Queues\\r\\ncan optionally run mirrors (additional replicas) on other cluster nodes.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Each mirrored queue consists of one \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"leader replica\"\n      }), \" and\\r\\none or more \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"mirrors\"\n      }), \" (replicas). The leader is hosted on one\\r\\nnode commonly referred as the leader node for that queue. Each queue has\\r\\nits own leader node. All operations for a given queue are first applied\\r\\non the queue's leader node and then propagated to mirrors. This\\r\\ninvolves enqueueing publishes, delivering messages to consumers, tracking\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./confirms\",\n        children: \"acknowledgements from consumers\"\n      }), \" and so on.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Queue mirroring implies \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering\",\n        children: \"a cluster of nodes\"\n      }), \".\\r\\nIt is therefore not recommended for use\\r\\nacross a WAN (though of course, clients can still connect\\r\\nfrom as near and as far as needed).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Messages published to the queue are replicated to all\\r\\nmirrors. Consumers are connected to the leader regardless of\\r\\nwhich node they connect to, with mirrors dropping messages\\r\\nthat have been acknowledged at the leader. Queue mirroring\\r\\ntherefore enhances availability, but does not distribute\\r\\nload across nodes (all participating nodes each do all the\\r\\nwork).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If the node that hosts queue leader fails, the oldest mirror will be\\r\\npromoted to the new leader as long as it's synchronised. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#unsynchronised-mirrors\",\n        children: \"Unsynchronised mirrors\"\n      }), \"\\r\\ncan be promoted, too, depending on queue mirroring parameters.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"There are multiple terms commonly used to identify primary\\r\\nand secondary replicas in a distributed system. This guide\\r\\ntypically uses \\\"leader\\\" to refer to the primary replica of a\\r\\nqueue and \\\"mirror\\\" for secondary replicas.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Queue object fields in the HTTP API and CLI tools originally used the unfortunate term\\r\\n\\\"slave\\\" to refer to secondaries. That term still appears\\r\\nin column names in CLI tools for backwards compatibility but will be\\r\\nreplaced or removed in a future version.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"ways-to-configure\",\n      children: \"How Mirroring is Configured\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"danger\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"This guide covers a feature that had been \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/blog/2021/08/21/4.0-deprecation-announcements\",\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n            children: \"deprecated since 2021\"\n          })\n        }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://github.com/rabbitmq/rabbitmq-server/pull/9815\",\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n            children: \"was removed completely\"\n          })\n        }), \" for the next major series, RabbitMQ 4.x.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"important\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./quorum-queues\",\n          children: \"Quorum queues\"\n        }), \" and/or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./streams\",\n          children: \"streams\"\n        }), \" should be used instead of mirrored classic queues.\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n          children: \"Non-replicated\"\n        }), \" classic queues continue being supported and developed.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Mirroring parameters are configured using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./policies\",\n        children: \"policies\"\n      }), \". A policy matches\\r\\none or more queues by name (using a regular expression pattern) and\\r\\ncontains a definition (a map of optional arguments) that are added to the total set of\\r\\nproperties of the matching queues.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Please see \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./policies\",\n        children: \"Runtime Parameters and Policies\"\n      }), \" for more information on policies.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"mirroring-arguments\",\n      children: \"Queue Arguments that Control Mirroring\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"danger\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"This guide covers a feature that had been \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/blog/2021/08/21/4.0-deprecation-announcements\",\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n            children: \"deprecated since 2021\"\n          })\n        }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://github.com/rabbitmq/rabbitmq-server/pull/9815\",\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n            children: \"was removed completely\"\n          })\n        }), \" for the next major series, RabbitMQ 4.x.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"important\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./quorum-queues\",\n          children: \"Quorum queues\"\n        }), \" and/or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./streams\",\n          children: \"streams\"\n        }), \" should be used instead of mirrored classic queues.\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n          children: \"Non-replicated\"\n        }), \" classic queues continue being supported and developed.\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As we've covered above, queues have mirroring enabled\\r\\nvia \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./policies\",\n        children: \"policy\"\n      }), \". Policies\\r\\ncan change at any time; it is valid to create a non-mirrored\\r\\nqueue, and then make it mirrored at some later point (and\\r\\nvice versa). There is a difference between a non-mirrored\\r\\nqueue and a mirrored queue which does not have any mirrors -\\r\\nthe former lacks the extra mirroring infrastructure and will\\r\\nlikely provide higher throughput.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Adding mirrors to a queue increases cluster load but\\r\\nhelps lower the probability of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#unsynchronised-mirrors\",\n        children: \"losing all up-to-date replicas\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To make the classic queues mirrored, create a\\r\\npolicy which matches them and sets policy keys \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-mode\"\n      }), \" and (optionally) \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-params\"\n      }), \".\\r\\nThe following table explains the options for these keys:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"table\", {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"th\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"ha-mode\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"th\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"ha-params\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"th\", {\n          children: \"Result\"\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"exactly\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n            children: \"count\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"td\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n            children: \"Number of queue replicas (leader plus mirrors) in the cluster.\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [\"A \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n              children: \"count\"\n            }), \" value of 1 means a single replica: just the queue leader.\\r\\nIf the node running the queue leader becomes\\r\\nunavailable, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n              href: \"#non-mirrored-queue-behavior-on-node-failure\",\n              children: \"the behaviour depends on queue durability\"\n            }), \".\"]\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [\"A \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n              children: \"count\"\n            }), \" value of 2 means 2 replicas: 1 queue leader and 1 queue\\r\\nmirror. In other words: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"NumberOfQueueMirrors = NumberOfNodes - 1\"\n            }), \".\\r\\nIf the node running the queue leader becomes unavailable,\\r\\nthe queue mirror will be automatically promoted to leader\\r\\naccording to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n              href: \"#unsynchronised-mirrors\",\n              children: \"mirror promotion strategy\"\n            }), \" configured.\"]\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [\"If there are fewer than \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n              children: \"count\"\n            }), \" nodes in the cluster, the\\r\\nqueue is mirrored to all nodes. If there are more than\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n              children: \"count\"\n            }), \" nodes in the cluster, and a node containing a mirror\\r\\ngoes down, then a new mirror will be created on another node. Use\\r\\nof \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              children: \"exactly\"\n            }), \" mode with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"a\", {\n              href: \"#cluster-shutdown\",\n              children: [\"\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"\\\"ha-promote-on-shutdown\\\": \\\"always\\\"\"\n              })]\n            }), \" can be\\r\\ndangerous since queues can migrate across a cluster and become\\r\\nunsynced as it is brought down.\"]\n          })]\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"all\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"(none)\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"td\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n            children: \"Queue is mirrored across all nodes in the\\r\\ncluster. When a new node is added to the cluster, the\\r\\nqueue will be mirrored to that node.\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [\"This setting is very\\r\\nconservative. Mirroring to a quorum (N/2 + 1) of cluster nodes\\r\\nis \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n              href: \"#replication-factor\",\n              children: \"recommended instead\"\n            }), \".\\r\\nMirroring to all nodes will put additional\\r\\nstrain on all cluster nodes, including network I/O, disk I/O and\\r\\ndisk space usage.\"]\n          })]\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"nodes\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n            children: \"node names\"\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"td\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [\"Queue is mirrored to the nodes listed in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n              children: \"node names\"\n            }), \".\\r\\nNode names are the Erlang node names as they\\r\\nappear in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"rabbitmqctl cluster_status\"\n            }), \"; they\\r\\nusually have the form \\\"\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"tt\", {\n              children: \"rabbit@hostname\"\n            }), \"\\\".\"]\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n            children: \"If any of those node names are not a part of the cluster,\\r\\nthis does not constitute an error. If none of the nodes\\r\\nin the list are online at the time when the queue is\\r\\ndeclared then the queue will be created on the node that\\r\\nthe declaring client is connected to.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Whenever the HA policy for a queue changes it will endeavour\\r\\nto keep its existing mirrors as far as this fits with the new\\r\\npolicy.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"replication-factor\",\n      children: \"Replication Factor: How Many Mirrors are Optimal?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Mirroring to all nodes is the most conservative option.\\r\\nIt will put additional strain on all cluster nodes, including network I/O, disk I/O and\\r\\ndisk space usage. Having a replica on every node is unnecessary in most cases.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For clusters of 3 and more nodes\\r\\nit is recommended to replicate to a quorum (the majority) of nodes,\\r\\ne.g. 2 nodes in a 3 node cluster or 3 nodes in a 5 node cluster.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Since some data can be inherently transient or very time sensitive,\\r\\nit can be perfectly reasonable to use a lower number of mirrors\\r\\nfor some queues (or even not use any mirroring).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"how-to-check-i-a-queue-is-mirrored\",\n      children: \"How to Check if a Queue is Mirrored?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Mirrored queues will have a policy name and the number of additional replicas (mirrors)\\r\\nnext to it on the queue page in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./management\",\n        children: \"management UI\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Below is an example of a queue named \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"two.replicas\"\n      }), \" which has a leader\\r\\nand a mirror:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"figure\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Mirrored queue indicators in management UI\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-3.13/ha/queue_mirroring_indicators_management_ui_row_only.png\")[\"default\"]) + \"\",\n          width: \"944\",\n          height: \"200\"\n        })\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"leader node for the queue and its online mirror(s), if any, will be listed on the queue page:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"figure\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Mirrored queue details on individual queue page\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-3.13/ha/queue_mirroring_one_mirror_present.png\")[\"default\"]) + \"\",\n          width: \"710\",\n          height: \"492\"\n        })\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If the queue page does not list any mirrors, the queue is not mirrored (or has only one mirror which\\r\\nis not online):\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"figure\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.img, {\n          alt: \"Non-mirrored queue details on individual queue page\",\n          src: (__webpack_require__(\"./node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[contenthash].[ext]&fallback=/mnt/d/xy2401/codeDoc/rabbitmq-website/node_modules/file-loader/dist/cjs.js!./versioned_docs/version-3.13/ha/queue_mirroring_no_mirrors.png\")[\"default\"]) + \"\",\n          width: \"701\",\n          height: \"498\"\n        })\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a new queue mirror is added, the event is logged:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"2018-03-01 07:26:33.121 [info] <0.1360.0> Mirrored queue 'two.replicas' in vhost '/': Adding mirror on node hare@warp10: <37324.1148.0>\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to list queue leader and mirrors using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl list_queues\"\n      }), \". In this\\r\\nexample we also display queue policy since it's highly relevant:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"# mirror_pids is a new field alias introduced in RabbitMQ 3.11.4\\r\\nrabbitmqctl list_queues name policy pid mirror_pids\\r\\n\\r\\n# => Timeout: 60.0 seconds ...\\r\\n# => Listing queues for vhost / ...\\r\\n# => two.replicas ha-two <hare@hostname-2.1.2223.0> [<rabbit@hostname-1.3.1360.0>]\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"rabbitmqctl.bat list_queues name policy pid mirror_pids\\r\\n\\r\\n# => Timeout: 60.0 seconds ...\\r\\n# => Listing queues for vhost / ...\\r\\n# => two.replicas ha-two <hare@hostname-2.1.2223.0> [<rabbit@hostname-1.3.1360.0>]\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"cmd\",\n        label: \"cmd\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-batch\",\n            children: \"rem mirror_pids is a new field alias introduced in RabbitMQ 3.11.4\\r\\nrabbitmqctl.bat list_queues name policy pid mirror_pids\\r\\n\\r\\nrem => Timeout: 60.0 seconds ...\\r\\nrem => Listing queues for vhost / ...\\r\\nrem => two.replicas ha-two <hare@host-2.1.2223.0> [<rabbit@hostname-1.3.1360.0>]\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If a queue that's expected to be mirroring is not, this usually means that its name\\r\\ndoesn't match that specified in the policy that controls mirroring or that another\\r\\npolicy takes priority (and does not enable mirroring).\\r\\nSee \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./policies\",\n        children: \"Runtime Parameters and Policies\"\n      }), \" to learn more.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"detect-usage\",\n      children: \"How to Detect Policies that Enable Classic Queue Mirroring\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In order to prepare for migration away from classic mirrored queues, it may be necessary to first\\r\\nunderstand whether there are any policies in the cluster that enable use this deprecated feature.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"There are two \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-diagnostics\"\n      }), \" commands that help with this:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbitmq-diagnostics check_if_cluster_has_classic_queue_mirroring_policy\"\n        }), \", a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./monitoring#health-checks\",\n          children: \"health check\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rabbitmq-diagnostics list_policies_with_classic_queue_mirroring\"\n        }), \" that lists the problematic policies\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"# exits with a non-zero code if any policies in the cluster\\r\\n# enable classic queue mirroring\\r\\nrabbitmq-diagnostics check_if_cluster_has_classic_queue_mirroring_policy\\r\\n\\r\\n# lists policies that enable classic queue mirroring\\r\\nrabbitmq-diagnostics list_policies_with_classic_queue_mirroring -s --formatter=pretty_table\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"# exits with a non-zero code if any policies in the cluster\\r\\n# enabling classic queue mirroring\\r\\nrabbitmq-diagnostics.bat check_if_cluster_has_classic_queue_mirroring_policy\\r\\n\\r\\n# lists policies that enable classic queue mirroring\\r\\nrabbitmq-diagnostics.bat list_policies_with_classic_queue_mirroring -s --formatter=pretty_table\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"cmd\",\n        label: \"cmd\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-batch\",\n            children: \"rem exits with a non-zero code if any policies in the cluster\\r\\nrem enabling classic queue mirroring\\r\\nrabbitmq-diagnostics.bat check_if_cluster_has_classic_queue_mirroring_policy\\r\\n\\r\\nrem lists policies that enable classic queue mirroring\\r\\nrabbitmq-diagnostics.bat list_policies_with_classic_queue_mirroring -s --formatter=pretty_table\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"cqv2\",\n      children: \"Mirroring and CQv2\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.admonition, {\n      type: \"warning\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./persistence-conf#queue-version\",\n          children: \"Classic queues version 2\"\n        }), \" can be used with mirroring.\\r\\nHowever, combining v1 and v2 members is not recommended\"]\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It may happen if some nodes default to version 1 while other\\r\\nnodes default to version 2 (a new mirror will use the local node's default version if not explicitly set). Version 2\\r\\nis significantly faster in many situations and can overload a v1 mirror. The easiest solution is to switch to version 2\\r\\nusing policies before changing the default version in the configuration.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"leader-migration-data-locality\",\n      children: \"Queue Leader Replicas, Leader Migration, Data Locality\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"queue-leader-location\",\n      children: \"Queue Leader Location\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This section has been moved to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./clustering#replica-placement\",\n        children: \"Clustering guide\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"fixed-leader-promotion\",\n      children: \"\\\"nodes\\\" Policy and Migrating Leaders\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that setting or modifying a \\\"nodes\\\" policy can cause\\r\\nthe existing leader to go away if it is not listed in the\\r\\nnew policy. In order to prevent message loss, RabbitMQ will\\r\\nkeep the existing leader around until at least one other\\r\\nmirror has synchronised (even if this is a long\\r\\ntime). However, once synchronisation has occurred things will\\r\\nproceed just as if the node had failed: consumers will be\\r\\ndisconnected from the leader and will need to reconnect.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For example, if a queue is on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"[A B]\"\n      }), \"\\r\\n(with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"A\"\n      }), \" the leader), and you give it\\r\\na \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"nodes\"\n      }), \" policy telling it to be on\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"[C D]\"\n      }), \", it will initially end up on\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"[A C D]\"\n      }), \". As soon as the queue synchronises on its new\\r\\nmirrors \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"[C D]\"\n      }), \", the leader on \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"A\"\n      }), \"\\r\\nwill shut down.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"exclusive-queues-are-not-mirrored\",\n      children: \"Mirroring of Exclusive Queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Exclusive queues will be deleted when the connection that declared them is\\r\\nclosed. For this reason, it is not useful for an exclusive queue to be mirrored\\r\\n(or a non-durable queue, for that matter) since when the node hosting it goes\\r\\ndown, the connection will close and the queue will need to be deleted anyway.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For this reason, exclusive queues are never mirrored (even if they match a\\r\\npolicy stating that they should be). They are also never durable (even if\\r\\ndeclared as such).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"non-mirrored-queue-behavior-on-node-failure\",\n      children: \"Non-mirrored Queue Behavior in a Cluster\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This guide focuses on mirrored queues, however, it is important\\r\\nto briefly explain how non-mirrored queues behave in a cluster in contrast\\r\\nwith mirrored ones.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If leader node of a queue (the node running queue leader) is available,\\r\\nall queue operations (e.g. declaration, binding and consumer management, message routing\\r\\nto the queue) can be performed on any node. Cluster nodes will route\\r\\noperations to the leader node transparently to the clients.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If leader node of a queue\\r\\nbecomes unavailable, the behaviour of a non-mirrored queue\\r\\ndepends on its durability. A durable queue will become\\r\\nunavailable until the node comes back.\\r\\nAll operations on a durable queue with unavailable leader node\\r\\nwill fail with a message in server logs that looks like this:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"operation queue.declare caused a channel exception not_found: home node 'rabbit@hostname' of durable queue 'queue-name' in vhost '/' is down or inaccessible\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A non-durable one will be deleted.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In case it is desired that the queue remains available at all times,\\r\\nmirrors can be configured to be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#unsynchronised-mirrors\",\n        children: \"promoted to leader even when not in sync\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"examples\",\n      children: \"Examples\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Below is a policy where queues whose names begin with\\r\\n\\\"\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"two.\"\n      }), \"\\\" are mirrored to any two nodes in the\\r\\ncluster, with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#configuring-synchronisation\",\n        children: \"automatic synchronisation\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqctl set_policy ha-two \\\"^two\\\\.\\\" \\\\\\r\\n  '{\\\"ha-mode\\\":\\\"exactly\\\",\\\"ha-params\\\":2,\\\"ha-sync-mode\\\":\\\"automatic\\\"}'\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"rabbitmqctl.bat set_policy ha-two \\\"^two\\\\.\\\" ^\\r\\n   \\\"{\\\"\\\"ha-mode\\\"\\\":\\\"\\\"exactly\\\"\\\",\\\"\\\"ha-params\\\"\\\":2,\\\"\\\"ha-sync-mode\\\"\\\":\\\"\\\"automatic\\\"\\\"}\\\"\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"http-api\",\n        label: \"HTTP API\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-ini\",\n            children: \"PUT /api/policies/%2f/ha-two\\r\\n{\\r\\n  \\\"pattern\\\":\\\"^two\\\\.\\\",\\r\\n  \\\"definition\\\": {\\r\\n    \\\"ha-mode\\\":\\\"exactly\\\",\\r\\n    \\\"ha-params\\\":2,\\r\\n    \\\"ha-sync-mode\\\":\\\"automatic\\\"\\r\\n  }\\r\\n}\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"ui\",\n        label: \"Management UI\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"ul\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Navigate to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Admin\"\n              }), \" > \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Policies\"\n              }), \" > \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Add / update a       policy\"\n              }), \".\"]\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Enter \\\"ha-two\\\" next to Name and \\\"^two.\\\" next to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Pattern\"\n              }), \".\"]\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n              children: \"Enter \\\"ha-mode\\\" = \\\"exactly\\\" in the first line\\r\\nnext to Policy, then \\\"ha-params\\\" = 2 in the second\\r\\nline, then \\\"ha-sync-mode\\\" = \\\"automatic\\\" in the third,\\r\\nand set the type on the second line to \\\"Number\\\".\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Click \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Add policy\"\n              }), \".\"]\n            })\n          })]\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The following example uses the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"\\\"all\\\"\"\n      }), \" mode, which is excessive\\r\\nand usually unnecessary in clusters of five nodes or larger:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.admonition, {\n          type: \"warning\",\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n            children: \"Mirroring to all nodes is unnecessary and will result\\r\\nin unnecessary resource waste.\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [\"Consider mirroring to the majority (N/2+1) nodes with \\\"ha-mode\\\":\\\"exactly\\\" instead.\\r\\nSee \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n              href: \"#replication-factor\",\n              children: \"Replication Factor\"\n            }), \" above.\"]\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqctl set_policy ha-all \\\"^ha\\\\.\\\" '{\\\"ha-mode\\\":\\\"all\\\"}'\\n\"\n          })\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.admonition, {\n          type: \"warning\",\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n            children: \"Mirroring to all nodes is unnecessary and will result\\r\\nin unnecessary resource waste.\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [\"Consider mirroring to the majority (N/2+1) nodes with \\\"ha-mode\\\":\\\"exactly\\\" instead.\\r\\nSee \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n              href: \"#replication-factor\",\n              children: \"Replication Factor\"\n            }), \" above.\"]\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"rabbitmqctl.bat set_policy ha-all \\\"^ha\\\\.\\\" \\\"{\\\"\\\"ha-mode\\\"\\\":\\\"\\\"all\\\"\\\"}\\\"\\n\"\n          })\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"http-api\",\n        label: \"HTTP API\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-ini\",\n            children: \"PUT /api/policies/%2f/ha-two\\r\\n{\\r\\n  \\\"pattern\\\":\\\"^two\\\\.\\\",\\r\\n  \\\"definition\\\": {\\r\\n    \\\"ha-mode\\\":\\\"all\\\",\\r\\n    \\\"ha-sync-mode\\\":\\\"automatic\\\"\\r\\n  }\\r\\n}\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"ui\",\n        label: \"Management UI\",\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.admonition, {\n          type: \"warning\",\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n            children: \"Mirroring to all nodes is unnecessary and will result\\r\\nin unnecessary resource waste.\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [\"Consider mirroring to the majority (N/2+1) nodes with \\\"ha-mode\\\":\\\"exactly\\\" instead.\\r\\nSee \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n              href: \"#replication-factor\",\n              children: \"Replication Factor\"\n            }), \" above.\"]\n          })]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"ul\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Navigate to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n                children: \"Admin\"\n              }), \" > \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n                children: \"Policies\"\n              }), \" > \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n                children: \"Add / update a policy\"\n              }), \".\"]\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Enter \\\"ha-all\\\" next to Name, \\\"^ha.\\\" next to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Pattern\"\n              }), \",\\r\\nand \\\"ha-mode\\\" = \\\"all\\\" into Definition properties (or press Queues[Classic] -> \\\"HA mode\\\" and enter word \\\"all\\\" into value)\"]\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Click \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n                children: \"Add policy\"\n              }), \".\"]\n            })\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"A policy where queues whose names begin with\\r\\n\\\"\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"nodes.\"\n      }), \"\\\" are mirrored to specific nodes in the\\r\\ncluster:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqctl set_policy ha-nodes \\\"^nodes\\\\.\\\" \\\\\\r\\n  '{\\\"ha-mode\\\":\\\"nodes\\\",\\\"ha-params\\\":[\\\"rabbit@nodeA\\\", \\\"rabbit@nodeB\\\"]}'\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"rabbitmqctl.bat set_policy ha-nodes \\\"^nodes\\\\.\\\" ^\\r\\n  \\\"{\\\"\\\"ha-mode\\\"\\\":\\\"\\\"nodes\\\"\\\",\\\"\\\"ha-params\\\"\\\":[\\\"\\\"rabbit@nodeA\\\"\\\", \\\"\\\"rabbit@nodeB\\\"\\\"]}\\\"\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"http-api\",\n        label: \"HTTP API\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-ini\",\n            children: \"PUT /api/policies/%2f/ha-nodes\\r\\n  {\\r\\n    \\\"pattern\\\":\\\"^nodes\\\\.\\\",\\r\\n    \\\"definition\\\":{\\r\\n      \\\"ha-mode\\\":\\\"nodes\\\",\\r\\n      \\\"ha-params\\\":[\\\"rabbit@nodeA\\\", \\\"rabbit@nodeB\\\"]\\r\\n    }\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"ui\",\n        label: \"Management UI\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"ul\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Navigate to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Admin\"\n              }), \" > \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Policies\"\n              }), \" > \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Add / update a       policy\"\n              }), \".\"]\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Enter \\\"ha-nodes\\\" next to Name and \\\"^nodes.\\\" next to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Pattern\"\n              }), \".\"]\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n              children: \"Enter \\\"ha-mode\\\" = \\\"nodes\\\" in the first line next to\\r\\nPolicy, then \\\"ha-params\\\" in the second line, set the\\r\\nsecond line's type to \\\"List\\\", and then enter\\r\\n\\\"rabbit@nodeA\\\" and \\\"rabbit@nodeB\\\" in the sublist which\\r\\nappears.\"\n            })\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n              children: [\"Click \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n                children: \"Add policy\"\n              }), \".\"]\n            })\n          })]\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"behaviour\",\n      children: \"Mirrored Queue Implementation and Semantics\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As discussed, for each mirrored queue there is one\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"leader\"\n      }), \" replica and several \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"mirrors\"\n      }), \", each on a\\r\\ndifferent node. The mirrors apply the operations that occur\\r\\nto the leader in exactly the same order as the leader and\\r\\nthus maintain the same state. All actions other than\\r\\npublishes go only to the leader, and the leader then\\r\\nbroadcasts the effect of the actions to the mirrors. Thus\\r\\nclients consuming from a mirrored queue are in fact\\r\\nconsuming from the leader.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Should a mirror fail, there is little to be done other than\\r\\nsome bookkeeping: the leader remains the leader and no\\r\\nclient need to take any action or be informed of the failure.\\r\\nNote that mirror failures may not be detected immediately and\\r\\nthe interruption of the per-connection flow control mechanism\\r\\ncan delay message publication. The details are described\\r\\nin the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./nettick\",\n        children: \"Inter-node Communication Heartbeats\"\n      }), \" guide.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If the leader fails, then one of the mirrors will be promoted to\\r\\nleader as follows:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The longest running mirror is promoted to leader, the assumption\\r\\nbeing that it is most likely to be fully synchronised with the\\r\\nleader. If there is no mirror that is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#unsynchronised-mirrors\",\n          children: \"synchronised\"\n        }), \" with the\\r\\nleader, messages that only existed on leader will be lost.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"The mirror considers all previous consumers to have been abruptly\\r\\ndisconnected. It requeues all messages that have been delivered\\r\\nto clients but are pending acknowledgement. This can include\\r\\nmessages for which a client has issued acknowledgements, say, if\\r\\nan acknowledgement was either lost on the wire before reaching the\\r\\nnode hosting queue leader, or it was lost when broadcast from the leader to the\\r\\nmirrors. In either case, the new leader has no choice but to\\r\\nrequeue all messages that it has not seen acknowledgements for.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Consumers that have requested to be notified when a queue fails\\r\\nover \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#cancellation\",\n          children: \"will be notified of cancellation\"\n        }), \".\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"As a result of the requeuing, clients that re-consume from the\\r\\nqueue \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"b\", {\n          children: \"must\"\n        }), \" be aware that they are likely to subsequently\\r\\nreceive messages that they have already received.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"As the chosen mirror becomes the leader, no messages that are\\r\\npublished to the mirrored queue during this time will be lost\\r\\n(barring subsequent failures on the promoted node).\\r\\nMessages published to a node that hosts queue mirror are routed\\r\\nto the queue leader and then replicated to all mirrors. Should the leader fail,\\r\\nthe messages continue to be sent to the mirrors and will be added\\r\\nto the queue once the promotion of a mirror to the leader completes.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Messages published by clients using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./confirms\",\n          children: \"publisher confirms\"\n        }), \" will still be\\r\\nconfirmed even if the leader (or any mirrors) fail\\r\\nbetween the message being published and a confirmation received\\r\\nby the publisher. From the point of view of the publisher,\\r\\npublishing to a mirrored queue is no different from publishing to a non-mirrored one.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If consumers use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./confirms\",\n        children: \"automatic acknowledgement mode\"\n      }), \", then messages can be lost. This is no different\\r\\nfrom non-mirrored queues, of course: the broker considers a message\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"acknowledged\"\n      }), \" as soon as it has been sent to a consumer in automatic acknowledgement mode.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Should the client disconnect abruptly, the message may never be received. In the case of a\\r\\nmirrored queue, should the leader die, messages that are in-flight on\\r\\ntheir way to consumers in automatic acknowledgement mode may never be received\\r\\nby those clients, and will not be requeued by the new leader. Because\\r\\nof the possibility that the consuming client is connected to a node\\r\\nthat survives, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#cancellation\",\n        children: \"consumer cancellation notification\"\n      }), \" is useful to identify when such events may have\\r\\noccurred. Of course, in practise, if data safety is less important\\r\\nthan throughput, the automatic acknowledgement mode is the way to go.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"confirms-transactions\",\n      children: \"Publisher Confirms and Transactions\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Mirrored queues support both \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./confirms\",\n        children: \"publisher confirms\"\n      }), \" and\\r\\ntransactions. The semantics chosen are that in the case of both confirms and\\r\\ntransactions, the action spans all mirrors of the\\r\\nqueue. So in the case of a transaction, a\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"tx.commit-ok\"\n      }), \" will only be returned to a\\r\\nclient when the transaction has been applied across all\\r\\nmirrors of the queue. Equally, in the case of publisher\\r\\nconfirms, a message will only be confirmed to the\\r\\npublisher when it has been accepted by all of the\\r\\nmirrors. It is correct to think of the semantics as being\\r\\nthe same as a message being routed to multiple normal\\r\\nqueues, and of a transaction with publications within\\r\\nthat similarly are routed to multiple queues.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"flow-control\",\n      children: \"Flow Control\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ uses a credit-based algorithm to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        href: \"./memory#per-connection\",\n        children: \"limit the rate of\\r\\nmessage publication\"\n      }), \".  Publishers are permitted to\\r\\npublish when they receive credit from all mirrors of a\\r\\nqueue.  Credit in this context means permission to\\r\\npublish.  Mirrors that fail to issue credit can cause\\r\\npublishers to stall. Publishers will remain blocked until\\r\\nall mirrors issue credit or until the remaining nodes\\r\\nconsider the mirror to be disconnected from the cluster.\\r\\nErlang detects such disconnections by periodically sending\\r\\na tick to all nodes. The tick interval can be controlled\\r\\nwith the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./nettick\",\n        children: \"net_ticktime\"\n      }), \"\\r\\nconfiguration setting.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"cancellation\",\n      children: \"Leader Failures and Consumer Cancellation\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Clients that are consuming from a mirrored queue may wish\\r\\nto know that the queue from which they have been consuming\\r\\nhas failed over. When a mirrored queue fails over,\\r\\nknowledge of which messages have been sent to which\\r\\nconsumer is lost, and therefore all unacknowledged\\r\\nmessages are redelivered with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"redelivered\"\n      }), \"\\r\\nflag set. Consumers may wish to know this is going to\\r\\nhappen.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If so, they can consume with the argument\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-cancel-on-ha-failover\"\n      }), \" set to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \". Their consuming will then be cancelled\\r\\non failover and a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./consumer-cancel\",\n        children: \"consumer\\r\\ncancellation notification\"\n      }), \" sent. It is then the\\r\\nconsumer's responsibility to reissue\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.consume\"\n      }), \" to start consuming again.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For example (in Java):\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"Channel channel = ...;\\r\\nConsumer consumer = ...;\\r\\nMap<String, Object> args = new HashMap<String, Object>();\\r\\nargs.put(\\\"x-cancel-on-ha-failover\\\", true);\\r\\nchannel.basicConsume(\\\"my-queue\\\", false, args, consumer);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This creates a new consumer with the argument set.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"unsynchronised-mirrors\",\n      children: \"Unsynchronised Mirrors\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A node may join a cluster at any time. Depending on the\\r\\nconfiguration of a queue, when a node joins a cluster,\\r\\nqueues may add a mirror on the new node. At this point, the\\r\\nnew mirror will be empty: it will not contain any existing\\r\\ncontents of the queue. Such a mirror will receive new\\r\\nmessages published to the queue, and thus over time will\\r\\naccurately represent the tail of the mirrored queue. As\\r\\nmessages are drained from the mirrored queue, the size of\\r\\nthe head of the queue for which the new mirror is missing\\r\\nmessages, will shrink until eventually the mirror's contents\\r\\nprecisely match the leader's contents. At this point, the\\r\\nmirror can be considered fully synchronised, but it is\\r\\nimportant to note that this has occurred because of actions\\r\\nof clients in terms of draining the pre-existing head of the\\r\\nqueue.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A newly added mirror provides no additional form of\\r\\nredundancy or availability of the queue's contents that\\r\\nexisted before the mirror was added, unless the queue has\\r\\nbeen explicitly synchronised. Since the queue becomes\\r\\nunresponsive while explicit synchronisation is occurring, it\\r\\nis preferable to allow active queues from which messages are\\r\\nbeing drained to synchronise naturally, and only explicitly\\r\\nsynchronise inactive queues.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When enabling automatic queue mirroring, consider the expected on disk\\r\\ndata set of the queues involved. Queues with a sizeable data set\\r\\n(say, tens of gigabytes or more) will have to replicate it to\\r\\nthe newly added mirror(s), which can put a significant load on\\r\\ncluster resources such as network bandwidth and disk I/O. This is\\r\\na common scenario with lazy queues, for example.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To see mirror status (whether they are synchronised), use:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqctl list_queues name mirror_pids synchronised_mirror_pids\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"rabbitmqctl.bat list_queues name mirror_pids synchronised_mirror_pids\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"cmd\",\n        label: \"cmd\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-batch\",\n            children: \"rabbitmqctl.bat list_queues name mirror_pids synchronised_mirror_pids\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is possible to manually synchronise a queue:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqctl sync_queue \\\"{name}\\\"\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"rabbitmqctl.bat sync_queue '{name}'\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"cmd\",\n        label: \"cmd\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-batch\",\n            children: \"rabbitmqctl.bat sync_queue \\\"{name}\\\"\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Or cancel an in-progress synchronisation:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      groupId: \"examples\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqctl cancel_sync_queue \\\"{name}\\\"\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"rabbitmqctl.bat cancel_sync_queue '{name}'\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"cmd\",\n        label: \"cmd\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-batch\",\n            children: \"rabbitmqctl.bat cancel_sync_queue \\\"{name}\\\"\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"These features are also available through the management plugin.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"promoting-unsynchronised-mirrors\",\n      children: \"Promotion of Unsynchronised Mirrors on Failure\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"By default if a queue's leader node fails, loses\\r\\nconnection to its peers or is removed from the cluster,\\r\\nthe oldest mirror will be promoted to be the new\\r\\nleader. In some circumstances this mirror can be\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#unsynchronised-mirrors\",\n        children: \"unsynchronised\"\n      }), \", which will cause data loss.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Starting with RabbitMQ 3.7.5, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-promote-on-failure\"\n      }), \"\\r\\npolicy key controls whether unsynchronised mirror promotion is allowed. When set to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"when-synced\"\n      }), \", it will make sure that unsynchronised mirrors\\r\\nare not promoted.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Default value is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"always\"\n      }), \".\\r\\nThe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"when-synced\"\n      }), \" value should be used with care. It trades off\\r\\nsafety from unsynchronised mirror promotion for increased reliance on queue leader's\\r\\navailability. Sometimes queue availability can be more important than consistency.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"when-synced\"\n      }), \" promotion strategy avoids data loss due to promotion of an unsynchronised mirror\\r\\nbut makes queue availability dependent on its leader's availability.\\r\\nIn the event of queue leader node failure the queue will become unavailable until queue leader\\r\\nrecovers. In case of a permanent loss of queue leader the queue won't be available\\r\\nunless it is deleted and redeclared. Deleting a queue deletes all of its contents,\\r\\nwhich means permanent loss of a leader with this promotion strategy equates to losing all\\r\\nqueue contents.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Systems that use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"when-synced\"\n      }), \" promotion strategy must use\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./confirms\",\n        children: \"publisher confirms\"\n      }), \" in order to detect queue unavailability\\r\\nand broker's inability to enqueue messages.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"start-stop\",\n      children: \"Stopping Nodes and Synchronisation\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If you stop a RabbitMQ node which contains the leader of a\\r\\nmirrored queue, some mirror on some other node will be\\r\\npromoted to the leader (assuming there is a synchronised mirror;\\r\\nsee \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#cluster-shutdown\",\n        children: \"below\"\n      }), \"). If you\\r\\ncontinue to stop nodes then you will reach a point where a\\r\\nmirrored queue has no more mirrors: it exists only on one\\r\\nnode, which is now its leader.  If the mirrored queue was\\r\\ndeclared \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n        children: \"durable\"\n      }), \" then, if its last remaining node is\\r\\nshutdown, durable messages in the queue will survive the\\r\\nrestart of that node. In general, as you restart other\\r\\nnodes, if they were previously part of a mirrored queue then\\r\\nthey will rejoin the mirrored queue.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"However, there is currently no way for a mirror to know\\r\\nwhether or not its queue contents have diverged from the\\r\\nleader to which it is rejoining (this could happen during a\\r\\nnetwork partition, for example). As such, when a mirror\\r\\nrejoins a mirrored queue, it throws away any durable local\\r\\ncontents it already has and starts empty. Its behaviour is\\r\\nat this point the same as if it were a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        href: \"#unsynchronised-mirrors\",\n        children: \"new node joining the cluster\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"cluster-shutdown\",\n      children: \"Stopping Nodes Hosting Queue Leader with Only Unsynchronised Mirrors\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It's possible that when you shut down a leader node that\\r\\nall available mirrors are unsynchronised. A common\\r\\nsituation in which this can occur is rolling cluster\\r\\nupgrades.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"By default, RabbitMQ will refuse to promote\\r\\nan unsynchronised mirror on controlled leader shutdown\\r\\n(i.e. explicit stop of the RabbitMQ service or shutdown of\\r\\nthe OS) in order to avoid message loss; instead the entire\\r\\nqueue will shut down as if the unsynchronised mirrors were\\r\\nnot there.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"An uncontrolled leader shutdown (i.e. server or\\r\\nnode crash, or network outage) will still trigger a\\r\\npromotion of an unsynchronised mirror.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If you would prefer to have queue leader move to an\\r\\nunsynchronised mirror in all circumstances (i.e. you would\\r\\nchoose availability of the queue over avoiding message\\r\\nloss due to unsynchronised mirror promotion) then set the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-promote-on-shutdown\"\n      }), \" policy key to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"always\"\n      }), \" rather than its default value of\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"when-synced\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-promote-on-failure\"\n      }), \" policy key is set to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"when-synced\"\n      }), \", unsynchronised mirrors will not be promoted\\r\\neven if the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-promote-on-shutdown\"\n      }), \" key is set to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"always\"\n      }), \". This means that in the event of queue leader node\\r\\nfailure the queue will become unavailable until leader recovers.\\r\\nIn case of a permanent loss of queue leader the queue won't be available\\r\\nunless it is deleted (that will also delete all of its contents) and redeclared.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-promote-on-shutdown\"\n      }), \" and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-promote-on-failure\"\n      }), \" have different default behaviours.\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-promote-on-shutdown\"\n      }), \" is set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"when-synced\"\n      }), \"\\r\\nby default, while \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-promote-on-failure\"\n      }), \" is set to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"always\"\n      }), \" by default.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"promotion-while-down\",\n      children: \"Loss of a Leader While All Mirrors are Stopped\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is possible to lose the leader for a queue while all\\r\\nmirrors for the queue are shut down. In normal operation\\r\\nthe last node for a queue to shut down will become the\\r\\nleader, and we want that node to still be the leader when\\r\\nit starts again (since it may have received messages that\\r\\nno other mirror saw).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"However, when you invoke\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl forget_cluster_node\"\n      }), \", RabbitMQ will attempt to find\\r\\na currently stopped mirror for each queue which has its\\r\\nleader on the node we are forgetting, and \\\"promote\\\" that\\r\\nmirror to be the new leader when it starts up again. If\\r\\nthere is more than one candidate, the most recently\\r\\nstopped mirror will be chosen.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It's important to understand that RabbitMQ can only\\r\\npromote \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"b\", {\n        children: \"stopped\"\n      }), \" mirrors during\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"forget_cluster_node\"\n      }), \", since any mirrors that\\r\\nare started again will clear out their contents as\\r\\ndescribed at \\\"\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#start-stop\",\n        children: \"stopping nodes and\\r\\nsynchronisation\"\n      }), \"\\\" above. Therefore when removing a lost\\r\\nleader in a stopped cluster, you must invoke\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmqctl forget_cluster_node\"\n      }), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n        children: \"before\"\n      }), \"\\r\\nstarting mirrors again.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"batch-sync\",\n      children: \"Batch Synchronization\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Classic queue leaders perform synchronisation in\\r\\nbatches. Batch can be configured via the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-sync-batch-size\"\n      }), \" queue argument. If no value is set \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mirroring_sync_batch_size\"\n      }), \"\\r\\nis used as the default value. Earlier\\r\\nversions (prior to 3.6.0) will synchronise \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"1\"\n      }), \" message at a\\r\\ntime by default. By synchronising messages in batches,\\r\\nthe synchronisation process can be sped up considerably.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To choose the right value for\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-sync-batch-size\"\n      }), \" you need to consider:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"average message size\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"network throughput between RabbitMQ nodes\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"net_ticktime\"\n        }), \" value\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For example, if you set \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ha-sync-batch-size\"\n      }), \" to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"50000\"\n      }), \" messages, and each message in the\\r\\nqueue is 1KB, then each synchronisation message between nodes\\r\\nwill be ~49MB. You need to make sure that your network\\r\\nbetween queue mirrors can accommodate this kind of traffic. If the\\r\\nnetwork takes longer than \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./nettick\",\n        children: \"net_ticktime\"\n      }), \"\\r\\nto send one batch of messages, then nodes in the cluster could\\r\\nthink they are in the presence of a network partition.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The amount of data sent over the network can also be controlled by setting\\r\\nthe parameter \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mirroring_sync_max_throughput\"\n      }), \". The parameter specifies the\\r\\nnumber of bytes per second that is being transferred. The default is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"0\"\n      }), \", which disables\\r\\nthis feature.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"configuring-synchronisation\",\n      children: \"Configuring Synchronisation\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Let's start with the most important aspect of queue\\r\\nsynchronisation: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"while a queue is being synchronised, all other\\r\\nqueue operations will be blocked\"\n      }), \". Depending on multiple\\r\\nfactors, a queue might be blocked by synchronisation for many\\r\\nminutes or hours, and in extreme cases even days.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Queue synchronisation can be configured as follows:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"ha-sync-mode: manual\"\n        }), \": this is the default mode.\\r\\nA new queue mirror will not receive existing messages, it will\\r\\nonly receive new messages. The new queue mirror will become an\\r\\nexact replica of the leader over time, once consumers have\\r\\ndrained messages that only exist on the leader. If the leader\\r\\nqueue fails before all unsynchronised messages are drained,\\r\\nthose messages will be lost. You can fully synchronise a queue\\r\\nmanually, refer to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#unsynchronised-mirrors\",\n          children: \"unsynchronised mirrors\"\n        }), \"\\r\\nsection for details.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"ha-sync-mode: automatic\"\n        }), \": a queue will\\r\\nautomatically synchronise when a new mirror joins. It is worth\\r\\nreiterating that queue synchronisation is a blocking operation.\\r\\nIf queues are small, or you have a fast network between\\r\\nRabbitMQ nodes and the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"ha-sync-batch-size\"\n        }), \" was\\r\\noptimised, this is a good choice.\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./versioned_docs/version-3.13/ha/index.md\n");

/***/ })

}]);