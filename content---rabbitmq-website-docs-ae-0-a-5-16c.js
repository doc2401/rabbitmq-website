"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-docs-ae-0-a-5-16c"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-4-1-ae-md-0a5.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"ae","title":"Alternate Exchanges","description":"<!--","source":"@site/versioned_docs/version-4.1/ae.md","sourceDirName":".","slug":"/ae","permalink":"/rabbitmq-website/docs/ae","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/versioned_docs/version-4.1/ae.md","tags":[],"version":"4.1","frontMatter":{"title":"Alternate Exchanges"},"sidebar":"docsSidebar","previous":{"title":"Exchange to Exchange Bindings","permalink":"/rabbitmq-website/docs/e2e"},"next":{"title":"Sender-selected Distribution","permalink":"/rabbitmq-website/docs/sender-selected"}}');

/***/ }),

/***/ "./versioned_docs/version-4.1/ae.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_4_1_ae_md_0a5_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_4_1_ae_md_0a5_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-4-1-ae-md-0a5.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n/* harmony import */ var _theme_Tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n/* harmony import */ var _theme_TabItem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Alternate Exchanges'\n};\nconst contentTitle = 'Alternate Exchanges';\n\nconst assets = {\n\n};\n\n\n\n\n\nconst toc = [{\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"How to Define an Alternate Exchange\",\n  \"id\": \"define\",\n  \"level\": 2\n}, {\n  \"value\": \"Configuration Using a Policy\",\n  \"id\": \"define-using-policy\",\n  \"level\": 3\n}, {\n  \"value\": \"Configuration Using Client-provided Arguments\",\n  \"id\": \"define-using-arguments\",\n  \"level\": 3\n}, {\n  \"value\": \"How Alternate Exchanges Work\",\n  \"id\": \"how-it-works\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"alternate-exchanges\",\n        children: \"Alternate Exchanges\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is sometimes desirable to let clients handle messages\\r\\nthat an exchange was unable to route (i.e. either because\\r\\nthere were no bound queues or no matching\\r\\nbindings). Typical examples of this are\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"detecting when clients accidentally or maliciously publish messages that cannot be routed\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"\\\"or else\\\" routing semantics where some messages are handled specially and the rest by a generic handler\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Alternate Exchange (\\\"AE\\\") is a feature that addresses these use cases.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"define\",\n      children: \"How to Define an Alternate Exchange\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For any given exchange except for the default one, an AE can be defined by clients using\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./policies\",\n        children: \"policies\"\n      }), \". This is the recommended option\\r\\nas policies are significantly simplify changes to such options (e.g. during\\r\\nupgrades).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In modern RabbitMQ versions, the default exchange is a special-cased convention in the code\\r\\nand not a \\\"real\\\" exchange. Therefore it does not support the alternate exchange feature.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Alternatively, optional exchange arguments can be provided by client\\r\\nat exchange declaration time.\\r\\nIn the case where both policy and arguments specify an AE, the one\\r\\nspecified in arguments overrules the one specified in policy.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"define-using-policy\",\n      children: \"Configuration Using a Policy\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This is the recommended way of defining alternate exchanges.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To specify an AE using policy, add the key 'alternate-exchange'\\r\\nto a policy definition and make sure that the policy matches the exchange(s)\\r\\nthat need the AE defined. For example:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_theme_Tabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"bash\",\n        label: \"bash\",\n        default: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-bash\",\n            children: \"rabbitmqctl set_policy AE \\\"^my-direct$\\\" '{\\\"alternate-exchange\\\":\\\"my-ae\\\"}' --apply-to exchanges\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"PowerShell\",\n        label: \"PowerShell\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-PowerShell\",\n            children: \"rabbitmqctl.bat set_policy AE '^my-direct$' '\\\"{\\\"\\\"alternate-exchange\\\"\\\":\\\"\\\"my-ae\\\"\\\"}\\\"' --apply-to exchanges\\n\"\n          })\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_theme_TabItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        value: \"cmd\",\n        label: \"cmd\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            className: \"language-batch\",\n            children: \"rabbitmqctl.bat set_policy AE \\\"^my-direct$\\\" \\\"{\\\"\\\"alternate-exchange\\\"\\\":\\\"\\\"my-ae\\\"\\\"}\\\" --apply-to exchanges\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This will apply an AE of \\\"my-ae\\\" to the exchange called\\r\\n\\\"my-direct\\\". Policies can also be defined using the management\\r\\nplugin, see the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./policies\",\n        children: \"policy documentation\"\n      }), \" for more details.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"define-using-arguments\",\n      children: \"Configuration Using Client-provided Arguments\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This way of defining an alternate exchange is discouraged. Consider\\r\\nusing a policy instead (see above).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When creating an exchange the name of an AE can be\\r\\noptionally supplied in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"exchange.declare\"\n      }), \"\\r\\nmethod's \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"arguments\"\n      }), \" table by specifying a key\\r\\nof 'alternate-exchange' and a string value containing the name.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When an AE has been specified, in addition to the usual\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"configure\"\n      }), \" permission on the declared exchange,\\r\\nthe user needs to have \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"read\"\n      }), \" permissions on that\\r\\nexchange and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"write\"\n      }), \" permissions on the AE.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For example:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"Map<String, Object> args = new HashMap<String, Object>();\\r\\nargs.put(\\\"alternate-exchange\\\", \\\"my-ae\\\");\\r\\nchannel.exchangeDeclare(\\\"my-direct\\\", \\\"direct\\\", false, false, args);\\r\\nchannel.exchangeDeclare(\\\"my-ae\\\", \\\"fanout\\\");\\r\\nchannel.queueDeclare(\\\"routed\\\");\\r\\nchannel.queueBind(\\\"routed\\\", \\\"my-direct\\\", \\\"key1\\\");\\r\\nchannel.queueDeclare(\\\"unrouted\\\");\\r\\nchannel.queueBind(\\\"unrouted\\\", \\\"my-ae\\\", \\\"\\\");\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"In the above fragment of Java code we create a direct\\r\\nexchange 'my-direct' that is configured with an AE called\\r\\n'my-ae'. The latter is declared as a fanout exchange. We\\r\\nbind one queue 'routed' to 'my-direct' with a binding key\\r\\nof 'key1', and a queue 'unrouted' to 'my-ae'.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"how-it-works\",\n      children: \"How Alternate Exchanges Work\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Whenever a message published to an exchange with a configured AE cannot be routed\\r\\nto any queue, the channel re-publishes the message to the specified AE\\r\\ninstead. If that AE does not exist then a warning is logged. If\\r\\nan AE cannot route a message, it in turn publishes the message\\r\\nto its AE, if it has one configured. This process continues\\r\\nuntil either the message is successfully routed, the end of the\\r\\nchain of AEs is reached, or an AE is encountered which has\\r\\nalready attempted to route the message.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"For example if we publish a message to 'my-direct' with a\\r\\nrouting key of 'key1' then that message is routed to the\\r\\n'routed' queue, in accordance with the standard AMQP\\r\\nbehaviour.  However, when publishing a message to\\r\\n'my-direct' with a routing key of 'key2', rather than\\r\\nbeing discarded the message is routed via our configured\\r\\nAE to the 'unrouted' queue.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The behaviour of an AE purely pertains to routing. If a message\\r\\nis routed via an AE it still counts as routed for the purpose of\\r\\nthe 'mandatory' flag, and the message is otherwise unchanged.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./versioned_docs/version-4.1/ae.md\n");

/***/ })

}]);