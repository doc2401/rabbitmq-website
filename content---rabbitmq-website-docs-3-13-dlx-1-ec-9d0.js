"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-docs-3-13-dlx-1-ec-9d0"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-3-13-dlx-md-1ec.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"dlx","title":"Dead Letter Exchanges","description":"<!--","source":"@site/versioned_docs/version-3.13/dlx.md","sourceDirName":".","slug":"/dlx","permalink":"/rabbitmq-website/docs/3.13/dlx","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/versioned_docs/version-3.13/dlx.md","tags":[],"version":"3.13","frontMatter":{"title":"Dead Letter Exchanges"},"sidebar":"docsSidebar","previous":{"title":"Lazy Queues","permalink":"/rabbitmq-website/docs/3.13/lazy-queues"},"next":{"title":"Priority Queues","permalink":"/rabbitmq-website/docs/3.13/priority"}}');

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./versioned_docs/version-3.13/dlx.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_3_13_dlx_md_1ec_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_default_site_versioned_docs_version_3_13_dlx_md_1ec_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-3-13-dlx-md-1ec.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Dead Letter Exchanges'\n};\nconst contentTitle = 'Dead Letter Exchanges';\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  \"value\": \"What is a Dead Letter Exchange\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"Configuring a Dead Letter Exchange using a Policy\",\n  \"id\": \"using-policies\",\n  \"level\": 2\n}, {\n  \"value\": \"Configuring a Dead Letter Exchange using Optional Queue Arguments\",\n  \"id\": \"using-optional-queue-arguments\",\n  \"level\": 2\n}, {\n  \"value\": \"Routing Dead-Lettered Messages\",\n  \"id\": \"routing\",\n  \"level\": 2\n}, {\n  \"value\": \"Safety\",\n  \"id\": \"safety\",\n  \"level\": 2\n}, {\n  \"value\": \"Re-Publishing with Publisher Confirms\",\n  \"id\": \"re-publishing-with-publisher-confirms\",\n  \"level\": 3\n}, {\n  \"value\": \"Dead-Lettered Effects on Messages\",\n  \"id\": \"effects\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"dead-letter-exchanges\",\n        children: \"Dead Letter Exchanges\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"What is a Dead Letter Exchange\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Messages from a queue can be \\\"dead-lettered\\\", which means these messages are republished to an exchange when any of the following four events occur.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The message is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./confirms\",\n          children: \"negatively acknowledged\"\n        }), \" by a consumer using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"basic.reject\"\n        }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"basic.nack\"\n        }), \" with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"requeue\"\n        }), \" parameter set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"false\"\n        }), \", or\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The message expires due to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./ttl\",\n          children: \"per-message TTL\"\n        }), \", or\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The message is dropped because its queue exceeded a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./maxlength\",\n          children: \"length limit\"\n        }), \", or\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The message is returned more times to a quorum queue than the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./quorum-queues#poison-message-handling\",\n          children: \"delivery-limit\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If an entire \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./ttl#queue-ttl\",\n        children: \"queue expires\"\n      }), \", the messages in the queue are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"not\"\n      }), \" dead-lettered.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Dead letter exchanges (DLXs) are normal exchanges. They can be\\r\\nany of the usual types and are declared as normal.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For any given queue, a DLX can be defined by clients using the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./queues#optional-arguments\",\n        children: \"queue's arguments\"\n      }), \", or in the server\\r\\nusing \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./policies\",\n        children: \"policies\"\n      }), \". In the\\r\\ncase where both policy and arguments specify a DLX, the one\\r\\nspecified in arguments overrules the one specified in policy.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Configuration using policies is recommended as it allows for DLX\\r\\nreconfiguration that does not involve application redeployment.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"using-policies\",\n      children: \"Configuring a Dead Letter Exchange using a Policy\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To specify a DLX using policy, add the key \\\"dead-letter-exchange\\\"\\r\\nto a policy definition. For example:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"table\", {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"th\", {\n          children: \"rabbitmqctl\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              className: \"language-bash\",\n              children: \"rabbitmqctl set_policy DLX \\\".*\\\" '{\\\"dead-letter-exchange\\\":\\\"my-dlx\\\"}' --apply-to queues\\n\"\n            })\n          })\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"th\", {\n          children: \"rabbitmqctl (Windows)\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n              className: \"language-PowerShell\",\n              children: \"rabbitmqctl set_policy DLX \\\".*\\\" \\\"{\\\"\\\"dead-letter-exchange\\\"\\\":\\\"\\\"my-dlx\\\"\\\"}\\\" --apply-to queues\\n\"\n            })\n          })\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The previous policy applies the DLX \\\"my-dlx\\\" to all queues. This is an example only, in practice, different sets of queues usually use different dead lettering settings (or none at all).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Similarly, an explicit routing key can be specified by adding\\r\\nthe key \\\"dead-letter-routing-key\\\" to the policy.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Policies can also be defined using the management plugin, see\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./policies\",\n        children: \"policy documentation\"\n      }), \" for more details.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"using-optional-queue-arguments\",\n      children: \"Configuring a Dead Letter Exchange using Optional Queue Arguments\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To set the DLX for a queue, specify\\r\\nthe optional \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-dead-letter-exchange\"\n      }), \" argument when\\r\\ndeclaring the queue. The value must be an exchange name in\\r\\nthe same virtual host:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.exchangeDeclare(\\\"some.exchange.name\\\", \\\"direct\\\");\\r\\n\\r\\nMap<String, Object> args = new HashMap<String, Object>();\\r\\nargs.put(\\\"x-dead-letter-exchange\\\", \\\"some.exchange.name\\\");\\r\\nchannel.queueDeclare(\\\"myqueue\\\", false, false, false, args);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The previous code declares a new exchange called\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"some.exchange.name\"\n      }), \" and sets this new exchange\\r\\nas the dead letter exchange for a newly created queue.\\r\\nNote, the exchange does not have to be declared when\\r\\nthe queue is declared but it should exist by the time\\r\\nmessages need to be dead-lettered. If it is missing then,\\r\\nthe messages are silently dropped.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"You may also specify a routing key to use when the messages are being\\r\\ndead-lettered.  If the routing key is not set, the\\r\\nmessage's own routing keys are used.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"args.put(\\\"x-dead-letter-routing-key\\\", \\\"some-routing-key\\\");\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a dead letter exchange is specified, in addition to\\r\\nthe usual configure permissions on the declared queue, the user\\r\\nmust have read permissions on that queue and write\\r\\npermissions on the dead letter exchange. Permissions are\\r\\nverified at the time the queue is declared.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"routing\",\n      children: \"Routing Dead-Lettered Messages\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Dead-lettered messages are routed to their dead letter\\r\\nexchange either:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"with the routing key specified for the queue they\\r\\nwere on; or, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n          children: \"if this was not set\"\n        }), \",\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"with the same routing keys they were originally\\r\\npublished with\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For example, if you publish a message to an exchange with a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"foo\"\n      }), \"\\r\\nrouting key, and that message is\\r\\ndead-lettered, it is published to its dead letter\\r\\nexchange with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"foo\"\n      }), \" routing key. If the queue\\r\\nthe message originally landed on is declared with\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-dead-letter-routing-key\"\n      }), \" set to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"bar\"\n      }), \", then the message is published to\\r\\nits dead letter exchange with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"bar\"\n      }), \" routing key.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note, if a specific routing key was not set for the\\r\\nqueue, messages on it are dead-lettered with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"all\"\n      }), \"\\r\\ntheir original routing keys.  This includes routing keys\\r\\nadded by the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"CC\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"BCC\"\n      }), \" headers\\r\\n(refer to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./sender-selected\",\n        children: \"Sender-selected distribution\"\n      }), \" for details about these two headers).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to form a cycle of message dead-lettering.  For\\r\\ninstance, this can happen when a queue \\\"dead-letters\\\"\\r\\nmessages to the default exchange without specifying a\\r\\ndead-letter routing key. Messages in such cycles (that is,\\r\\nmessages that reach the same queue twice) are\\r\\ndropped \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n        children: \"if there was no rejection in the entire cycle\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"safety\",\n      children: \"Safety\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Dead-lettering is a form of message publishing, and as any form of publishing,\\r\\nit can fail in certain scenarios. For example, if dead lettering is\\r\\nconfigured to use a quorum queue that does not have an online quorum,\\r\\nthe publishing will fail, and the node perfoming dead lettering will log\\r\\na message similar to the following:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Cannot forward any dead-letter messages from source quorum queue 'qq.input' in vhost 'my-vhost'\\r\\nwith configured dead-letter-exchange exchange 'amq.topic' in vhost 'my-vhost'\\r\\nand configured dead-letter-routing-key 'my-app.events.type.abc'\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"re-publishing-with-publisher-confirms\",\n      children: \"Re-Publishing with Publisher Confirms\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"By default, dead-lettered messages are re-published \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em, {\n        children: \"without\"\n      }), \" publisher\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./confirms\",\n        children: \"confirms\"\n      }), \" turned on internally. Therefore using DLX in a clustered\\r\\nRabbitMQ environment is not guaranteed to be safe. Messages are removed from the\\r\\noriginal queue immediately after publishing to the DLX target queue. This ensures\\r\\nthat there is no chance of excessive message build up that could exhaust broker\\r\\nresources. However, messages can be lost if the target queue is not available to accept messages.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Quorum queues support \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./quorum-queues#dead-lettering\",\n        children: \"at-least-once dead-lettering\"\n      }), \"\\r\\nwhere messages are re-published with publisher confirms turned on internally.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"effects\",\n      children: \"Dead-Lettered Effects on Messages\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Dead-lettering a message modifies its headers:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"the exchange name is replaced with that of the latest dead-letter exchange\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"the routing key may be replaced with that specified in a queue performing dead lettering,\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"if the above happens, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"CC\"\n        }), \" header will also be removed, and\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"BCC\"\n        }), \" header will be removed as per \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./sender-selected\",\n          children: \"Sender-selected distribution\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The dead-lettering process adds an array to the header of\\r\\neach dead-lettered message named \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-death\"\n      }), \".\\r\\nThis array contains an entry for each dead lettering event, which is\\r\\nidentified by a pair of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"{queue, reason}\"\n      }), \".\\r\\nEach such entry is a table that consists\\r\\nof several fields:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"queue\"\n        }), \": the name of the queue the message was in before it was dead-lettered\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"reason\"\n        }), \": the reason for dead lettering (desribed further below)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"time\"\n        }), \": the date and time the message was dead lettered as a 64-bit AMQP 0-9-1 timestamp\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"exchange\"\n        }), \": the exchange the message was published to (note, this is a dead letter exchange if the message is dead lettered multiple times)\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"routing-keys\"\n        }), \": the routing keys (including \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"CC\"\n        }), \" keys but excluding\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"BCC\"\n        }), \" ones) the message was published with\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"count\"\n        }), \": how many times this message was dead-lettered in this queue for this reason\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"original-expiration\"\n        }), \" (if the message was dead-lettered due to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./ttl#per-message-ttl-in-publishers\",\n          children: \"per-message TTL\"\n        }), \"): the original \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"expiration\"\n        }), \" property of the message. The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"expiration\"\n        }), \" property is removed from the message on dead-lettering to prevent it from expiring again in any queues it is routed to.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"New entries are prepended to the beginning of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-death\"\n      }), \"\\r\\narray. In the case where \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"x-death\"\n      }), \" already contains an entry with\\r\\nthe same queue and dead lettering reason, its count field is\\r\\nincremented and it is moved to the beginning of the array.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"reason\"\n      }), \" is a name describing why the\\r\\nmessage was dead-lettered and is one of the following:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"rejected\"\n        }), \": the message was rejected with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"requeue\"\n        }), \" parameter set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"false\"\n        })]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"expired\"\n        }), \": the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./ttl\",\n          children: \"message TTL\"\n        }), \" has expired\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"maxlen\"\n        }), \": the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./maxlength\",\n          children: \"maximum allowed queue length\"\n        }), \" was exceeded\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"delivery_limit\"\n        }), \": the message is returned more times than the limit (set by policy argument \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"./quorum-queues#poison-message-handling\",\n          children: \"delivery-limit\"\n        }), \" of quorum queues).\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Three top-level headers are added for the very first dead-lettering\\r\\nevent. They are\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-first-death-reason\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-first-death-queue\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"x-first-death-exchange\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"They have the same values as the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"reason\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"queue\"\n      }), \",\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"exchange\"\n      }), \" fields of the original dead lettering event.\\r\\nOnce added, these headers are never modified.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that the array is sorted most-recent-first, so the\\r\\nmost recent dead-lettering is recorded in the first\\r\\nentry.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi92ZXJzaW9uZWRfZG9jcy92ZXJzaW9uLTMuMTMvZGx4Lm1kIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi92ZXJzaW9uZWRfZG9jcy92ZXJzaW9uLTMuMTMvZGx4Lm1kP2I4YWEiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmV4cG9ydCBjb25zdCBmcm9udE1hdHRlciA9IHtcblx0dGl0bGU6ICdEZWFkIExldHRlciBFeGNoYW5nZXMnXG59O1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRUaXRsZSA9ICdEZWFkIExldHRlciBFeGNoYW5nZXMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIG1ldGFkYXRhfSBmcm9tICdAc2l0ZS8uZG9jdXNhdXJ1cy9kb2N1c2F1cnVzLXBsdWdpbi1jb250ZW50LWRvY3MvZGVmYXVsdC9zaXRlLXZlcnNpb25lZC1kb2NzLXZlcnNpb24tMy0xMy1kbHgtbWQtMWVjLmpzb24nXG5leHBvcnQgY29uc3QgYXNzZXRzID0ge1xuXG59O1xuXG5pbXBvcnQge0ZyYWdtZW50IGFzIF9GcmFnbWVudCwganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHN9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHt1c2VNRFhDb21wb25lbnRzIGFzIF9wcm92aWRlQ29tcG9uZW50c30gZnJvbSBcIkBtZHgtanMvcmVhY3RcIjtcbmV4cG9ydCBjb25zdCB0b2MgPSBbe1xuICBcInZhbHVlXCI6IFwiV2hhdCBpcyBhIERlYWQgTGV0dGVyIEV4Y2hhbmdlXCIsXG4gIFwiaWRcIjogXCJvdmVydmlld1wiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIkNvbmZpZ3VyaW5nIGEgRGVhZCBMZXR0ZXIgRXhjaGFuZ2UgdXNpbmcgYSBQb2xpY3lcIixcbiAgXCJpZFwiOiBcInVzaW5nLXBvbGljaWVzXCIsXG4gIFwibGV2ZWxcIjogMlxufSwge1xuICBcInZhbHVlXCI6IFwiQ29uZmlndXJpbmcgYSBEZWFkIExldHRlciBFeGNoYW5nZSB1c2luZyBPcHRpb25hbCBRdWV1ZSBBcmd1bWVudHNcIixcbiAgXCJpZFwiOiBcInVzaW5nLW9wdGlvbmFsLXF1ZXVlLWFyZ3VtZW50c1wiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlJvdXRpbmcgRGVhZC1MZXR0ZXJlZCBNZXNzYWdlc1wiLFxuICBcImlkXCI6IFwicm91dGluZ1wiLFxuICBcImxldmVsXCI6IDJcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIlNhZmV0eVwiLFxuICBcImlkXCI6IFwic2FmZXR5XCIsXG4gIFwibGV2ZWxcIjogMlxufSwge1xuICBcInZhbHVlXCI6IFwiUmUtUHVibGlzaGluZyB3aXRoIFB1Ymxpc2hlciBDb25maXJtc1wiLFxuICBcImlkXCI6IFwicmUtcHVibGlzaGluZy13aXRoLXB1Ymxpc2hlci1jb25maXJtc1wiLFxuICBcImxldmVsXCI6IDNcbn0sIHtcbiAgXCJ2YWx1ZVwiOiBcIkRlYWQtTGV0dGVyZWQgRWZmZWN0cyBvbiBNZXNzYWdlc1wiLFxuICBcImlkXCI6IFwiZWZmZWN0c1wiLFxuICBcImxldmVsXCI6IDJcbn1dO1xuZnVuY3Rpb24gX2NyZWF0ZU1keENvbnRlbnQocHJvcHMpIHtcbiAgY29uc3QgX2NvbXBvbmVudHMgPSB7XG4gICAgYTogXCJhXCIsXG4gICAgY29kZTogXCJjb2RlXCIsXG4gICAgZW06IFwiZW1cIixcbiAgICBoMTogXCJoMVwiLFxuICAgIGgyOiBcImgyXCIsXG4gICAgaDM6IFwiaDNcIixcbiAgICBoZWFkZXI6IFwiaGVhZGVyXCIsXG4gICAgbGk6IFwibGlcIixcbiAgICBvbDogXCJvbFwiLFxuICAgIHA6IFwicFwiLFxuICAgIHByZTogXCJwcmVcIixcbiAgICBzdHJvbmc6IFwic3Ryb25nXCIsXG4gICAgdWw6IFwidWxcIixcbiAgICAuLi5fcHJvdmlkZUNvbXBvbmVudHMoKSxcbiAgICAuLi5wcm9wcy5jb21wb25lbnRzXG4gIH07XG4gIHJldHVybiBfanN4cyhfRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMuaGVhZGVyLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5oMSwge1xuICAgICAgICBpZDogXCJkZWFkLWxldHRlci1leGNoYW5nZXNcIixcbiAgICAgICAgY2hpbGRyZW46IFwiRGVhZCBMZXR0ZXIgRXhjaGFuZ2VzXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDIsIHtcbiAgICAgIGlkOiBcIm92ZXJ2aWV3XCIsXG4gICAgICBjaGlsZHJlbjogXCJXaGF0IGlzIGEgRGVhZCBMZXR0ZXIgRXhjaGFuZ2VcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIk1lc3NhZ2VzIGZyb20gYSBxdWV1ZSBjYW4gYmUgXFxcImRlYWQtbGV0dGVyZWRcXFwiLCB3aGljaCBtZWFucyB0aGVzZSBtZXNzYWdlcyBhcmUgcmVwdWJsaXNoZWQgdG8gYW4gZXhjaGFuZ2Ugd2hlbiBhbnkgb2YgdGhlIGZvbGxvd2luZyBmb3VyIGV2ZW50cyBvY2N1ci5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5vbCwge1xuICAgICAgY2hpbGRyZW46IFtcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW1wiVGhlIG1lc3NhZ2UgaXMgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICAgIGhyZWY6IFwiLi9jb25maXJtc1wiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIm5lZ2F0aXZlbHkgYWNrbm93bGVkZ2VkXCJcbiAgICAgICAgfSksIFwiIGJ5IGEgY29uc3VtZXIgdXNpbmcgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcImJhc2ljLnJlamVjdFwiXG4gICAgICAgIH0pLCBcIiBvciBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiYmFzaWMubmFja1wiXG4gICAgICAgIH0pLCBcIiB3aXRoIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJyZXF1ZXVlXCJcbiAgICAgICAgfSksIFwiIHBhcmFtZXRlciBzZXQgdG8gXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcImZhbHNlXCJcbiAgICAgICAgfSksIFwiLCBvclwiXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbXCJUaGUgbWVzc2FnZSBleHBpcmVzIGR1ZSB0byBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgICAgaHJlZjogXCIuL3R0bFwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcInBlci1tZXNzYWdlIFRUTFwiXG4gICAgICAgIH0pLCBcIiwgb3JcIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW1wiVGhlIG1lc3NhZ2UgaXMgZHJvcHBlZCBiZWNhdXNlIGl0cyBxdWV1ZSBleGNlZWRlZCBhIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIi4vbWF4bGVuZ3RoXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwibGVuZ3RoIGxpbWl0XCJcbiAgICAgICAgfSksIFwiLCBvclwiXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbXCJUaGUgbWVzc2FnZSBpcyByZXR1cm5lZCBtb3JlIHRpbWVzIHRvIGEgcXVvcnVtIHF1ZXVlIHRoYW4gdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIi4vcXVvcnVtLXF1ZXVlcyNwb2lzb24tbWVzc2FnZS1oYW5kbGluZ1wiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcImRlbGl2ZXJ5LWxpbWl0XCJcbiAgICAgICAgfSksIFwiLlwiXVxuICAgICAgfSksIFwiXFxuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJJZiBhbiBlbnRpcmUgXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vdHRsI3F1ZXVlLXR0bFwiLFxuICAgICAgICBjaGlsZHJlbjogXCJxdWV1ZSBleHBpcmVzXCJcbiAgICAgIH0pLCBcIiwgdGhlIG1lc3NhZ2VzIGluIHRoZSBxdWV1ZSBhcmUgXCIsIF9qc3goX2NvbXBvbmVudHMuc3Ryb25nLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIm5vdFwiXG4gICAgICB9KSwgXCIgZGVhZC1sZXR0ZXJlZC5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJEZWFkIGxldHRlciBleGNoYW5nZXMgKERMWHMpIGFyZSBub3JtYWwgZXhjaGFuZ2VzLiBUaGV5IGNhbiBiZVxcclxcbmFueSBvZiB0aGUgdXN1YWwgdHlwZXMgYW5kIGFyZSBkZWNsYXJlZCBhcyBub3JtYWwuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkZvciBhbnkgZ2l2ZW4gcXVldWUsIGEgRExYIGNhbiBiZSBkZWZpbmVkIGJ5IGNsaWVudHMgdXNpbmcgdGhlXFxyXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuYSwge1xuICAgICAgICBocmVmOiBcIi4vcXVldWVzI29wdGlvbmFsLWFyZ3VtZW50c1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJxdWV1ZSdzIGFyZ3VtZW50c1wiXG4gICAgICB9KSwgXCIsIG9yIGluIHRoZSBzZXJ2ZXJcXHJcXG51c2luZyBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9wb2xpY2llc1wiLFxuICAgICAgICBjaGlsZHJlbjogXCJwb2xpY2llc1wiXG4gICAgICB9KSwgXCIuIEluIHRoZVxcclxcbmNhc2Ugd2hlcmUgYm90aCBwb2xpY3kgYW5kIGFyZ3VtZW50cyBzcGVjaWZ5IGEgRExYLCB0aGUgb25lXFxyXFxuc3BlY2lmaWVkIGluIGFyZ3VtZW50cyBvdmVycnVsZXMgdGhlIG9uZSBzcGVjaWZpZWQgaW4gcG9saWN5LlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkNvbmZpZ3VyYXRpb24gdXNpbmcgcG9saWNpZXMgaXMgcmVjb21tZW5kZWQgYXMgaXQgYWxsb3dzIGZvciBETFhcXHJcXG5yZWNvbmZpZ3VyYXRpb24gdGhhdCBkb2VzIG5vdCBpbnZvbHZlIGFwcGxpY2F0aW9uIHJlZGVwbG95bWVudC5cIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJ1c2luZy1wb2xpY2llc1wiLFxuICAgICAgY2hpbGRyZW46IFwiQ29uZmlndXJpbmcgYSBEZWFkIExldHRlciBFeGNoYW5nZSB1c2luZyBhIFBvbGljeVwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiVG8gc3BlY2lmeSBhIERMWCB1c2luZyBwb2xpY3ksIGFkZCB0aGUga2V5IFxcXCJkZWFkLWxldHRlci1leGNoYW5nZVxcXCJcXHJcXG50byBhIHBvbGljeSBkZWZpbml0aW9uLiBGb3IgZXhhbXBsZTpcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhcInRhYmxlXCIsIHtcbiAgICAgIGNoaWxkcmVuOiBbX2pzeHMoXCJ0clwiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChcInRoXCIsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRtcWN0bFwiXG4gICAgICAgIH0pLCBfanN4KFwidGRcIiwge1xuICAgICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtYmFzaFwiLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRtcWN0bCBzZXRfcG9saWN5IERMWCBcXFwiLipcXFwiICd7XFxcImRlYWQtbGV0dGVyLWV4Y2hhbmdlXFxcIjpcXFwibXktZGx4XFxcIn0nIC0tYXBwbHktdG8gcXVldWVzXFxuXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSldXG4gICAgICB9KSwgX2pzeHMoXCJ0clwiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChcInRoXCIsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJyYWJiaXRtcWN0bCAoV2luZG93cylcIlxuICAgICAgICB9KSwgX2pzeChcInRkXCIsIHtcbiAgICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImxhbmd1YWdlLVBvd2VyU2hlbGxcIixcbiAgICAgICAgICAgICAgY2hpbGRyZW46IFwicmFiYml0bXFjdGwgc2V0X3BvbGljeSBETFggXFxcIi4qXFxcIiBcXFwie1xcXCJcXFwiZGVhZC1sZXR0ZXItZXhjaGFuZ2VcXFwiXFxcIjpcXFwiXFxcIm15LWRseFxcXCJcXFwifVxcXCIgLS1hcHBseS10byBxdWV1ZXNcXG5cIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9KV1cbiAgICAgIH0pXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlRoZSBwcmV2aW91cyBwb2xpY3kgYXBwbGllcyB0aGUgRExYIFxcXCJteS1kbHhcXFwiIHRvIGFsbCBxdWV1ZXMuIFRoaXMgaXMgYW4gZXhhbXBsZSBvbmx5LCBpbiBwcmFjdGljZSwgZGlmZmVyZW50IHNldHMgb2YgcXVldWVzIHVzdWFsbHkgdXNlIGRpZmZlcmVudCBkZWFkIGxldHRlcmluZyBzZXR0aW5ncyAob3Igbm9uZSBhdCBhbGwpLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiU2ltaWxhcmx5LCBhbiBleHBsaWNpdCByb3V0aW5nIGtleSBjYW4gYmUgc3BlY2lmaWVkIGJ5IGFkZGluZ1xcclxcbnRoZSBrZXkgXFxcImRlYWQtbGV0dGVyLXJvdXRpbmcta2V5XFxcIiB0byB0aGUgcG9saWN5LlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJQb2xpY2llcyBjYW4gYWxzbyBiZSBkZWZpbmVkIHVzaW5nIHRoZSBtYW5hZ2VtZW50IHBsdWdpbiwgc2VlXFxyXFxudGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL3BvbGljaWVzXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcInBvbGljeSBkb2N1bWVudGF0aW9uXCJcbiAgICAgIH0pLCBcIiBmb3IgbW9yZSBkZXRhaWxzLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmgyLCB7XG4gICAgICBpZDogXCJ1c2luZy1vcHRpb25hbC1xdWV1ZS1hcmd1bWVudHNcIixcbiAgICAgIGNoaWxkcmVuOiBcIkNvbmZpZ3VyaW5nIGEgRGVhZCBMZXR0ZXIgRXhjaGFuZ2UgdXNpbmcgT3B0aW9uYWwgUXVldWUgQXJndW1lbnRzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlRvIHNldCB0aGUgRExYIGZvciBhIHF1ZXVlLCBzcGVjaWZ5XFxyXFxudGhlIG9wdGlvbmFsIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwieC1kZWFkLWxldHRlci1leGNoYW5nZVwiXG4gICAgICB9KSwgXCIgYXJndW1lbnQgd2hlblxcclxcbmRlY2xhcmluZyB0aGUgcXVldWUuIFRoZSB2YWx1ZSBtdXN0IGJlIGFuIGV4Y2hhbmdlIG5hbWUgaW5cXHJcXG50aGUgc2FtZSB2aXJ0dWFsIGhvc3Q6XCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1qYXZhXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImNoYW5uZWwuZXhjaGFuZ2VEZWNsYXJlKFxcXCJzb21lLmV4Y2hhbmdlLm5hbWVcXFwiLCBcXFwiZGlyZWN0XFxcIik7XFxyXFxuXFxyXFxuTWFwPFN0cmluZywgT2JqZWN0PiBhcmdzID0gbmV3IEhhc2hNYXA8U3RyaW5nLCBPYmplY3Q+KCk7XFxyXFxuYXJncy5wdXQoXFxcIngtZGVhZC1sZXR0ZXItZXhjaGFuZ2VcXFwiLCBcXFwic29tZS5leGNoYW5nZS5uYW1lXFxcIik7XFxyXFxuY2hhbm5lbC5xdWV1ZURlY2xhcmUoXFxcIm15cXVldWVcXFwiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBhcmdzKTtcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlRoZSBwcmV2aW91cyBjb2RlIGRlY2xhcmVzIGEgbmV3IGV4Y2hhbmdlIGNhbGxlZFxcclxcblwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwic29tZS5leGNoYW5nZS5uYW1lXCJcbiAgICAgIH0pLCBcIiBhbmQgc2V0cyB0aGlzIG5ldyBleGNoYW5nZVxcclxcbmFzIHRoZSBkZWFkIGxldHRlciBleGNoYW5nZSBmb3IgYSBuZXdseSBjcmVhdGVkIHF1ZXVlLlxcclxcbk5vdGUsIHRoZSBleGNoYW5nZSBkb2VzIG5vdCBoYXZlIHRvIGJlIGRlY2xhcmVkIHdoZW5cXHJcXG50aGUgcXVldWUgaXMgZGVjbGFyZWQgYnV0IGl0IHNob3VsZCBleGlzdCBieSB0aGUgdGltZVxcclxcbm1lc3NhZ2VzIG5lZWQgdG8gYmUgZGVhZC1sZXR0ZXJlZC4gSWYgaXQgaXMgbWlzc2luZyB0aGVuLFxcclxcbnRoZSBtZXNzYWdlcyBhcmUgc2lsZW50bHkgZHJvcHBlZC5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJZb3UgbWF5IGFsc28gc3BlY2lmeSBhIHJvdXRpbmcga2V5IHRvIHVzZSB3aGVuIHRoZSBtZXNzYWdlcyBhcmUgYmVpbmdcXHJcXG5kZWFkLWxldHRlcmVkLiAgSWYgdGhlIHJvdXRpbmcga2V5IGlzIG5vdCBzZXQsIHRoZVxcclxcbm1lc3NhZ2UncyBvd24gcm91dGluZyBrZXlzIGFyZSB1c2VkLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucHJlLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1qYXZhXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImFyZ3MucHV0KFxcXCJ4LWRlYWQtbGV0dGVyLXJvdXRpbmcta2V5XFxcIiwgXFxcInNvbWUtcm91dGluZy1rZXlcXFwiKTtcXG5cIlxuICAgICAgfSlcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJXaGVuIGEgZGVhZCBsZXR0ZXIgZXhjaGFuZ2UgaXMgc3BlY2lmaWVkLCBpbiBhZGRpdGlvbiB0b1xcclxcbnRoZSB1c3VhbCBjb25maWd1cmUgcGVybWlzc2lvbnMgb24gdGhlIGRlY2xhcmVkIHF1ZXVlLCB0aGUgdXNlclxcclxcbm11c3QgaGF2ZSByZWFkIHBlcm1pc3Npb25zIG9uIHRoYXQgcXVldWUgYW5kIHdyaXRlXFxyXFxucGVybWlzc2lvbnMgb24gdGhlIGRlYWQgbGV0dGVyIGV4Y2hhbmdlLiBQZXJtaXNzaW9ucyBhcmVcXHJcXG52ZXJpZmllZCBhdCB0aGUgdGltZSB0aGUgcXVldWUgaXMgZGVjbGFyZWQuXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwicm91dGluZ1wiLFxuICAgICAgY2hpbGRyZW46IFwiUm91dGluZyBEZWFkLUxldHRlcmVkIE1lc3NhZ2VzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJEZWFkLWxldHRlcmVkIG1lc3NhZ2VzIGFyZSByb3V0ZWQgdG8gdGhlaXIgZGVhZCBsZXR0ZXJcXHJcXG5leGNoYW5nZSBlaXRoZXI6XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMudWwsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcIndpdGggdGhlIHJvdXRpbmcga2V5IHNwZWNpZmllZCBmb3IgdGhlIHF1ZXVlIHRoZXlcXHJcXG53ZXJlIG9uOyBvciwgXCIsIF9qc3goX2NvbXBvbmVudHMuZW0sIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJpZiB0aGlzIHdhcyBub3Qgc2V0XCJcbiAgICAgICAgfSksIFwiLFwiXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFwid2l0aCB0aGUgc2FtZSByb3V0aW5nIGtleXMgdGhleSB3ZXJlIG9yaWdpbmFsbHlcXHJcXG5wdWJsaXNoZWQgd2l0aFwiXG4gICAgICB9KSwgXCJcXG5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIkZvciBleGFtcGxlLCBpZiB5b3UgcHVibGlzaCBhIG1lc3NhZ2UgdG8gYW4gZXhjaGFuZ2Ugd2l0aCBhIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiZm9vXCJcbiAgICAgIH0pLCBcIlxcclxcbnJvdXRpbmcga2V5LCBhbmQgdGhhdCBtZXNzYWdlIGlzXFxyXFxuZGVhZC1sZXR0ZXJlZCwgaXQgaXMgcHVibGlzaGVkIHRvIGl0cyBkZWFkIGxldHRlclxcclxcbmV4Y2hhbmdlIHdpdGggdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiZm9vXCJcbiAgICAgIH0pLCBcIiByb3V0aW5nIGtleS4gSWYgdGhlIHF1ZXVlXFxyXFxudGhlIG1lc3NhZ2Ugb3JpZ2luYWxseSBsYW5kZWQgb24gaXMgZGVjbGFyZWQgd2l0aFxcclxcblwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwieC1kZWFkLWxldHRlci1yb3V0aW5nLWtleVwiXG4gICAgICB9KSwgXCIgc2V0IHRvXFxyXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJiYXJcIlxuICAgICAgfSksIFwiLCB0aGVuIHRoZSBtZXNzYWdlIGlzIHB1Ymxpc2hlZCB0b1xcclxcbml0cyBkZWFkIGxldHRlciBleGNoYW5nZSB3aXRoIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImJhclwiXG4gICAgICB9KSwgXCIgcm91dGluZyBrZXkuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJOb3RlLCBpZiBhIHNwZWNpZmljIHJvdXRpbmcga2V5IHdhcyBub3Qgc2V0IGZvciB0aGVcXHJcXG5xdWV1ZSwgbWVzc2FnZXMgb24gaXQgYXJlIGRlYWQtbGV0dGVyZWQgd2l0aCBcIiwgX2pzeChcImVtXCIsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiYWxsXCJcbiAgICAgIH0pLCBcIlxcclxcbnRoZWlyIG9yaWdpbmFsIHJvdXRpbmcga2V5cy4gIFRoaXMgaW5jbHVkZXMgcm91dGluZyBrZXlzXFxyXFxuYWRkZWQgYnkgdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwiQ0NcIlxuICAgICAgfSksIFwiIGFuZCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIkJDQ1wiXG4gICAgICB9KSwgXCIgaGVhZGVyc1xcclxcbihyZWZlciB0byBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9zZW5kZXItc2VsZWN0ZWRcIixcbiAgICAgICAgY2hpbGRyZW46IFwiU2VuZGVyLXNlbGVjdGVkIGRpc3RyaWJ1dGlvblwiXG4gICAgICB9KSwgXCIgZm9yIGRldGFpbHMgYWJvdXQgdGhlc2UgdHdvIGhlYWRlcnMpLlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiSXQgaXMgcG9zc2libGUgdG8gZm9ybSBhIGN5Y2xlIG9mIG1lc3NhZ2UgZGVhZC1sZXR0ZXJpbmcuICBGb3JcXHJcXG5pbnN0YW5jZSwgdGhpcyBjYW4gaGFwcGVuIHdoZW4gYSBxdWV1ZSBcXFwiZGVhZC1sZXR0ZXJzXFxcIlxcclxcbm1lc3NhZ2VzIHRvIHRoZSBkZWZhdWx0IGV4Y2hhbmdlIHdpdGhvdXQgc3BlY2lmeWluZyBhXFxyXFxuZGVhZC1sZXR0ZXIgcm91dGluZyBrZXkuIE1lc3NhZ2VzIGluIHN1Y2ggY3ljbGVzICh0aGF0IGlzLFxcclxcbm1lc3NhZ2VzIHRoYXQgcmVhY2ggdGhlIHNhbWUgcXVldWUgdHdpY2UpIGFyZVxcclxcbmRyb3BwZWQgXCIsIF9qc3goXCJlbVwiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcImlmIHRoZXJlIHdhcyBubyByZWplY3Rpb24gaW4gdGhlIGVudGlyZSBjeWNsZVwiXG4gICAgICB9KSwgXCIuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDIsIHtcbiAgICAgIGlkOiBcInNhZmV0eVwiLFxuICAgICAgY2hpbGRyZW46IFwiU2FmZXR5XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJEZWFkLWxldHRlcmluZyBpcyBhIGZvcm0gb2YgbWVzc2FnZSBwdWJsaXNoaW5nLCBhbmQgYXMgYW55IGZvcm0gb2YgcHVibGlzaGluZyxcXHJcXG5pdCBjYW4gZmFpbCBpbiBjZXJ0YWluIHNjZW5hcmlvcy4gRm9yIGV4YW1wbGUsIGlmIGRlYWQgbGV0dGVyaW5nIGlzXFxyXFxuY29uZmlndXJlZCB0byB1c2UgYSBxdW9ydW0gcXVldWUgdGhhdCBkb2VzIG5vdCBoYXZlIGFuIG9ubGluZSBxdW9ydW0sXFxyXFxudGhlIHB1Ymxpc2hpbmcgd2lsbCBmYWlsLCBhbmQgdGhlIG5vZGUgcGVyZm9taW5nIGRlYWQgbGV0dGVyaW5nIHdpbGwgbG9nXFxyXFxuYSBtZXNzYWdlIHNpbWlsYXIgdG8gdGhlIGZvbGxvd2luZzpcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJDYW5ub3QgZm9yd2FyZCBhbnkgZGVhZC1sZXR0ZXIgbWVzc2FnZXMgZnJvbSBzb3VyY2UgcXVvcnVtIHF1ZXVlICdxcS5pbnB1dCcgaW4gdmhvc3QgJ215LXZob3N0J1xcclxcbndpdGggY29uZmlndXJlZCBkZWFkLWxldHRlci1leGNoYW5nZSBleGNoYW5nZSAnYW1xLnRvcGljJyBpbiB2aG9zdCAnbXktdmhvc3QnXFxyXFxuYW5kIGNvbmZpZ3VyZWQgZGVhZC1sZXR0ZXItcm91dGluZy1rZXkgJ215LWFwcC5ldmVudHMudHlwZS5hYmMnXFxuXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDMsIHtcbiAgICAgIGlkOiBcInJlLXB1Ymxpc2hpbmctd2l0aC1wdWJsaXNoZXItY29uZmlybXNcIixcbiAgICAgIGNoaWxkcmVuOiBcIlJlLVB1Ymxpc2hpbmcgd2l0aCBQdWJsaXNoZXIgQ29uZmlybXNcIlxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiQnkgZGVmYXVsdCwgZGVhZC1sZXR0ZXJlZCBtZXNzYWdlcyBhcmUgcmUtcHVibGlzaGVkIFwiLCBfanN4KF9jb21wb25lbnRzLmVtLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIndpdGhvdXRcIlxuICAgICAgfSksIFwiIHB1Ymxpc2hlclxcclxcblwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgaHJlZjogXCIuL2NvbmZpcm1zXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImNvbmZpcm1zXCJcbiAgICAgIH0pLCBcIiB0dXJuZWQgb24gaW50ZXJuYWxseS4gVGhlcmVmb3JlIHVzaW5nIERMWCBpbiBhIGNsdXN0ZXJlZFxcclxcblJhYmJpdE1RIGVudmlyb25tZW50IGlzIG5vdCBndWFyYW50ZWVkIHRvIGJlIHNhZmUuIE1lc3NhZ2VzIGFyZSByZW1vdmVkIGZyb20gdGhlXFxyXFxub3JpZ2luYWwgcXVldWUgaW1tZWRpYXRlbHkgYWZ0ZXIgcHVibGlzaGluZyB0byB0aGUgRExYIHRhcmdldCBxdWV1ZS4gVGhpcyBlbnN1cmVzXFxyXFxudGhhdCB0aGVyZSBpcyBubyBjaGFuY2Ugb2YgZXhjZXNzaXZlIG1lc3NhZ2UgYnVpbGQgdXAgdGhhdCBjb3VsZCBleGhhdXN0IGJyb2tlclxcclxcbnJlc291cmNlcy4gSG93ZXZlciwgbWVzc2FnZXMgY2FuIGJlIGxvc3QgaWYgdGhlIHRhcmdldCBxdWV1ZSBpcyBub3QgYXZhaWxhYmxlIHRvIGFjY2VwdCBtZXNzYWdlcy5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFtcIlF1b3J1bSBxdWV1ZXMgc3VwcG9ydCBcIiwgX2pzeChfY29tcG9uZW50cy5hLCB7XG4gICAgICAgIGhyZWY6IFwiLi9xdW9ydW0tcXVldWVzI2RlYWQtbGV0dGVyaW5nXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcImF0LWxlYXN0LW9uY2UgZGVhZC1sZXR0ZXJpbmdcIlxuICAgICAgfSksIFwiXFxyXFxud2hlcmUgbWVzc2FnZXMgYXJlIHJlLXB1Ymxpc2hlZCB3aXRoIHB1Ymxpc2hlciBjb25maXJtcyB0dXJuZWQgb24gaW50ZXJuYWxseS5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5oMiwge1xuICAgICAgaWQ6IFwiZWZmZWN0c1wiLFxuICAgICAgY2hpbGRyZW46IFwiRGVhZC1MZXR0ZXJlZCBFZmZlY3RzIG9uIE1lc3NhZ2VzXCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJEZWFkLWxldHRlcmluZyBhIG1lc3NhZ2UgbW9kaWZpZXMgaXRzIGhlYWRlcnM6XCJcbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMudWwsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogXCJ0aGUgZXhjaGFuZ2UgbmFtZSBpcyByZXBsYWNlZCB3aXRoIHRoYXQgb2YgdGhlIGxhdGVzdCBkZWFkLWxldHRlciBleGNoYW5nZVwiXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogXCJ0aGUgcm91dGluZyBrZXkgbWF5IGJlIHJlcGxhY2VkIHdpdGggdGhhdCBzcGVjaWZpZWQgaW4gYSBxdWV1ZSBwZXJmb3JtaW5nIGRlYWQgbGV0dGVyaW5nLFwiXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcImlmIHRoZSBhYm92ZSBoYXBwZW5zLCB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcIkNDXCJcbiAgICAgICAgfSksIFwiIGhlYWRlciB3aWxsIGFsc28gYmUgcmVtb3ZlZCwgYW5kXCJdXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtcInRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiQkNDXCJcbiAgICAgICAgfSksIFwiIGhlYWRlciB3aWxsIGJlIHJlbW92ZWQgYXMgcGVyIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIi4vc2VuZGVyLXNlbGVjdGVkXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiU2VuZGVyLXNlbGVjdGVkIGRpc3RyaWJ1dGlvblwiXG4gICAgICAgIH0pXVxuICAgICAgfSksIFwiXFxuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnAsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJUaGUgZGVhZC1sZXR0ZXJpbmcgcHJvY2VzcyBhZGRzIGFuIGFycmF5IHRvIHRoZSBoZWFkZXIgb2ZcXHJcXG5lYWNoIGRlYWQtbGV0dGVyZWQgbWVzc2FnZSBuYW1lZCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIngtZGVhdGhcIlxuICAgICAgfSksIFwiLlxcclxcblRoaXMgYXJyYXkgY29udGFpbnMgYW4gZW50cnkgZm9yIGVhY2ggZGVhZCBsZXR0ZXJpbmcgZXZlbnQsIHdoaWNoIGlzXFxyXFxuaWRlbnRpZmllZCBieSBhIHBhaXIgb2YgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJ7cXVldWUsIHJlYXNvbn1cIlxuICAgICAgfSksIFwiLlxcclxcbkVhY2ggc3VjaCBlbnRyeSBpcyBhIHRhYmxlIHRoYXQgY29uc2lzdHNcXHJcXG5vZiBzZXZlcmFsIGZpZWxkczpcIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMudWwsIHtcbiAgICAgIGNoaWxkcmVuOiBbXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJxdWV1ZVwiXG4gICAgICAgIH0pLCBcIjogdGhlIG5hbWUgb2YgdGhlIHF1ZXVlIHRoZSBtZXNzYWdlIHdhcyBpbiBiZWZvcmUgaXQgd2FzIGRlYWQtbGV0dGVyZWRcIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcInJlYXNvblwiXG4gICAgICAgIH0pLCBcIjogdGhlIHJlYXNvbiBmb3IgZGVhZCBsZXR0ZXJpbmcgKGRlc3JpYmVkIGZ1cnRoZXIgYmVsb3cpXCJdXG4gICAgICB9KSwgXCJcXG5cIiwgX2pzeHMoX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IFtfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJ0aW1lXCJcbiAgICAgICAgfSksIFwiOiB0aGUgZGF0ZSBhbmQgdGltZSB0aGUgbWVzc2FnZSB3YXMgZGVhZCBsZXR0ZXJlZCBhcyBhIDY0LWJpdCBBTVFQIDAtOS0xIHRpbWVzdGFtcFwiXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiZXhjaGFuZ2VcIlxuICAgICAgICB9KSwgXCI6IHRoZSBleGNoYW5nZSB0aGUgbWVzc2FnZSB3YXMgcHVibGlzaGVkIHRvIChub3RlLCB0aGlzIGlzIGEgZGVhZCBsZXR0ZXIgZXhjaGFuZ2UgaWYgdGhlIG1lc3NhZ2UgaXMgZGVhZCBsZXR0ZXJlZCBtdWx0aXBsZSB0aW1lcylcIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcInJvdXRpbmcta2V5c1wiXG4gICAgICAgIH0pLCBcIjogdGhlIHJvdXRpbmcga2V5cyAoaW5jbHVkaW5nIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJDQ1wiXG4gICAgICAgIH0pLCBcIiBrZXlzIGJ1dCBleGNsdWRpbmdcXHJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiQkNDXCJcbiAgICAgICAgfSksIFwiIG9uZXMpIHRoZSBtZXNzYWdlIHdhcyBwdWJsaXNoZWQgd2l0aFwiXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiY291bnRcIlxuICAgICAgICB9KSwgXCI6IGhvdyBtYW55IHRpbWVzIHRoaXMgbWVzc2FnZSB3YXMgZGVhZC1sZXR0ZXJlZCBpbiB0aGlzIHF1ZXVlIGZvciB0aGlzIHJlYXNvblwiXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwib3JpZ2luYWwtZXhwaXJhdGlvblwiXG4gICAgICAgIH0pLCBcIiAoaWYgdGhlIG1lc3NhZ2Ugd2FzIGRlYWQtbGV0dGVyZWQgZHVlIHRvIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIi4vdHRsI3Blci1tZXNzYWdlLXR0bC1pbi1wdWJsaXNoZXJzXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwicGVyLW1lc3NhZ2UgVFRMXCJcbiAgICAgICAgfSksIFwiKTogdGhlIG9yaWdpbmFsIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJleHBpcmF0aW9uXCJcbiAgICAgICAgfSksIFwiIHByb3BlcnR5IG9mIHRoZSBtZXNzYWdlLiBUaGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcImV4cGlyYXRpb25cIlxuICAgICAgICB9KSwgXCIgcHJvcGVydHkgaXMgcmVtb3ZlZCBmcm9tIHRoZSBtZXNzYWdlIG9uIGRlYWQtbGV0dGVyaW5nIHRvIHByZXZlbnQgaXQgZnJvbSBleHBpcmluZyBhZ2FpbiBpbiBhbnkgcXVldWVzIGl0IGlzIHJvdXRlZCB0by5cIl1cbiAgICAgIH0pLCBcIlxcblwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiTmV3IGVudHJpZXMgYXJlIHByZXBlbmRlZCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIngtZGVhdGhcIlxuICAgICAgfSksIFwiXFxyXFxuYXJyYXkuIEluIHRoZSBjYXNlIHdoZXJlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwieC1kZWF0aFwiXG4gICAgICB9KSwgXCIgYWxyZWFkeSBjb250YWlucyBhbiBlbnRyeSB3aXRoXFxyXFxudGhlIHNhbWUgcXVldWUgYW5kIGRlYWQgbGV0dGVyaW5nIHJlYXNvbiwgaXRzIGNvdW50IGZpZWxkIGlzXFxyXFxuaW5jcmVtZW50ZWQgYW5kIGl0IGlzIG1vdmVkIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5LlwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgY2hpbGRyZW46IFwicmVhc29uXCJcbiAgICAgIH0pLCBcIiBpcyBhIG5hbWUgZGVzY3JpYmluZyB3aHkgdGhlXFxyXFxubWVzc2FnZSB3YXMgZGVhZC1sZXR0ZXJlZCBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmc6XCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnVsLCB7XG4gICAgICBjaGlsZHJlbjogW1wiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwicmVqZWN0ZWRcIlxuICAgICAgICB9KSwgXCI6IHRoZSBtZXNzYWdlIHdhcyByZWplY3RlZCB3aXRoIHRoZSBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwicmVxdWV1ZVwiXG4gICAgICAgIH0pLCBcIiBwYXJhbWV0ZXIgc2V0IHRvIFwiLCBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJmYWxzZVwiXG4gICAgICAgIH0pXVxuICAgICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFwiZXhwaXJlZFwiXG4gICAgICAgIH0pLCBcIjogdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIi4vdHRsXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwibWVzc2FnZSBUVExcIlxuICAgICAgICB9KSwgXCIgaGFzIGV4cGlyZWRcIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcIm1heGxlblwiXG4gICAgICAgIH0pLCBcIjogdGhlIFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIi4vbWF4bGVuZ3RoXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwibWF4aW11bSBhbGxvd2VkIHF1ZXVlIGxlbmd0aFwiXG4gICAgICAgIH0pLCBcIiB3YXMgZXhjZWVkZWRcIl1cbiAgICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5saSwge1xuICAgICAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcImRlbGl2ZXJ5X2xpbWl0XCJcbiAgICAgICAgfSksIFwiOiB0aGUgbWVzc2FnZSBpcyByZXR1cm5lZCBtb3JlIHRpbWVzIHRoYW4gdGhlIGxpbWl0IChzZXQgYnkgcG9saWN5IGFyZ3VtZW50IFwiLCBfanN4KF9jb21wb25lbnRzLmEsIHtcbiAgICAgICAgICBocmVmOiBcIi4vcXVvcnVtLXF1ZXVlcyNwb2lzb24tbWVzc2FnZS1oYW5kbGluZ1wiLFxuICAgICAgICAgIGNoaWxkcmVuOiBcImRlbGl2ZXJ5LWxpbWl0XCJcbiAgICAgICAgfSksIFwiIG9mIHF1b3J1bSBxdWV1ZXMpLlwiXVxuICAgICAgfSksIFwiXFxuXCJdXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiVGhyZWUgdG9wLWxldmVsIGhlYWRlcnMgYXJlIGFkZGVkIGZvciB0aGUgdmVyeSBmaXJzdCBkZWFkLWxldHRlcmluZ1xcclxcbmV2ZW50LiBUaGV5IGFyZVwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3hzKF9jb21wb25lbnRzLnVsLCB7XG4gICAgICBjaGlsZHJlbjogW1wiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMubGksIHtcbiAgICAgICAgY2hpbGRyZW46IF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcIngtZmlyc3QtZGVhdGgtcmVhc29uXCJcbiAgICAgICAgfSlcbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJ4LWZpcnN0LWRlYXRoLXF1ZXVlXCJcbiAgICAgICAgfSlcbiAgICAgIH0pLCBcIlxcblwiLCBfanN4KF9jb21wb25lbnRzLmxpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJ4LWZpcnN0LWRlYXRoLWV4Y2hhbmdlXCJcbiAgICAgICAgfSlcbiAgICAgIH0pLCBcIlxcblwiXVxuICAgIH0pLCBcIlxcblwiLCBfanN4cyhfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogW1wiVGhleSBoYXZlIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGUgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJyZWFzb25cIlxuICAgICAgfSksIFwiLCBcIiwgX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcInF1ZXVlXCJcbiAgICAgIH0pLCBcIixcXHJcXG5hbmQgXCIsIF9qc3goX2NvbXBvbmVudHMuY29kZSwge1xuICAgICAgICBjaGlsZHJlbjogXCJleGNoYW5nZVwiXG4gICAgICB9KSwgXCIgZmllbGRzIG9mIHRoZSBvcmlnaW5hbCBkZWFkIGxldHRlcmluZyBldmVudC5cXHJcXG5PbmNlIGFkZGVkLCB0aGVzZSBoZWFkZXJzIGFyZSBuZXZlciBtb2RpZmllZC5cIl1cbiAgICB9KSwgXCJcXG5cIiwgX2pzeChfY29tcG9uZW50cy5wLCB7XG4gICAgICBjaGlsZHJlbjogXCJOb3RlIHRoYXQgdGhlIGFycmF5IGlzIHNvcnRlZCBtb3N0LXJlY2VudC1maXJzdCwgc28gdGhlXFxyXFxubW9zdCByZWNlbnQgZGVhZC1sZXR0ZXJpbmcgaXMgcmVjb3JkZWQgaW4gdGhlIGZpcnN0XFxyXFxuZW50cnkuXCJcbiAgICB9KV1cbiAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHByb3BzID0ge30pIHtcbiAgY29uc3Qge3dyYXBwZXI6IE1EWExheW91dH0gPSB7XG4gICAgLi4uX3Byb3ZpZGVDb21wb25lbnRzKCksXG4gICAgLi4ucHJvcHMuY29tcG9uZW50c1xuICB9O1xuICByZXR1cm4gTURYTGF5b3V0ID8gX2pzeChNRFhMYXlvdXQsIHtcbiAgICAuLi5wcm9wcyxcbiAgICBjaGlsZHJlbjogX2pzeChfY3JlYXRlTWR4Q29udGVudCwge1xuICAgICAgLi4ucHJvcHNcbiAgICB9KVxuICB9KSA6IF9jcmVhdGVNZHhDb250ZW50KHByb3BzKTtcbn1cblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./versioned_docs/version-3.13/dlx.md\n");

/***/ })

}]);