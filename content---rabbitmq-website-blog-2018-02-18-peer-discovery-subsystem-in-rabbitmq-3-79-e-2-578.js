"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-blog-2018-02-18-peer-discovery-subsystem-in-rabbitmq-3-79-e-2-578"],{

/***/ "./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2018-02-18-peer-discovery-subsystem-in-rabbitmq-3-7-index-md-9e2.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"permalink":"/rabbitmq-website/blog/2018/02/18/peer-discovery-subsystem-in-rabbitmq-3-7","editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/blog/2018-02-18-peer-discovery-subsystem-in-rabbitmq-3-7/index.md","source":"@site/blog/2018-02-18-peer-discovery-subsystem-in-rabbitmq-3-7/index.md","title":"Peer Discovery Subsystem in RabbitMQ 3.7","description":"In this blog post we\'re going to take a closer look at a new","date":"2018-02-18T00:00:00.000Z","tags":[{"inline":true,"label":"New Features","permalink":"/rabbitmq-website/blog/tags/new-features"}],"readingTime":8.3,"hasTruncateMarker":true,"authors":[{"name":"Michael Klishin","url":"https://github.com/michaelklishin","socials":{"github":"https://github.com/michaelklishin","linkedin":"https://www.linkedin.com/in/michaelklishin/","bluesky":"https://bsky.app/profile/michaelklishin.bsky.social"},"imageURL":"https://github.com/michaelklishin.png","key":"mklishin","page":null}],"frontMatter":{"title":"Peer Discovery Subsystem in RabbitMQ 3.7","tags":["New Features"],"authors":["mklishin"]},"unlisted":false,"prevItem":{"title":"New Configuration Format in RabbitMQ 3.7","permalink":"/rabbitmq-website/blog/2018/02/22/new-configuration-format-in-rabbitmq-3-7"},"nextItem":{"title":"What\'s New in RabbitMQ 3.7","permalink":"/rabbitmq-website/blog/2018/02/05/whats-new-in-rabbitmq-3-7"}}');

/***/ }),

/***/ "./blog/2018-02-18-peer-discovery-subsystem-in-rabbitmq-3-7/index.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2018_02_18_peer_discovery_subsystem_in_rabbitmq_3_7_index_md_9e2_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_blog_default_site_blog_2018_02_18_peer_discovery_subsystem_in_rabbitmq_3_7_index_md_9e2_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2018-02-18-peer-discovery-subsystem-in-rabbitmq-3-7-index-md-9e2.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Peer Discovery Subsystem in RabbitMQ 3.7',\n\ttags: [\n\t\t'New Features'\n\t],\n\tauthors: [\n\t\t'mklishin'\n\t]\n};\nconst contentTitle = undefined;\n\nconst assets = {\n\"authorsImageUrls\": [undefined],\n};\n\n\n\nconst toc = [{\n  \"value\": \"Why Do We Need Peer Discovery?\",\n  \"id\": \"why-do-we-need-peer-discovery\",\n  \"level\": 2\n}, {\n  \"value\": \"A Better Way\",\n  \"id\": \"a-better-way\",\n  \"level\": 2\n}, {\n  \"value\": \"How Does it Work?\",\n  \"id\": \"how-does-it-work\",\n  \"level\": 2\n}, {\n  \"value\": \"Node Registration and Unregistration\",\n  \"id\": \"node-registration-and-unregistration\",\n  \"level\": 3\n}, {\n  \"value\": \"Using a Preconfigured Set\",\n  \"id\": \"using-a-preconfigured-set\",\n  \"level\": 2\n}, {\n  \"value\": \"Using AWS Instance Filtering\",\n  \"id\": \"using-aws-instance-filtering\",\n  \"level\": 2\n}, {\n  \"value\": \"IAM Roles and Permissions\",\n  \"id\": \"iam-roles-and-permissions\",\n  \"level\": 4\n}, {\n  \"value\": \"Node Names\",\n  \"id\": \"node-names\",\n  \"level\": 4\n}, {\n  \"value\": \"The Chicken and Egg Problem of Peer Discovery\",\n  \"id\": \"the-chicken-and-egg-problem-of-peer-discovery\",\n  \"level\": 3\n}, {\n  \"value\": \"What Peer Discovery Does not Do\",\n  \"id\": \"what-peer-discovery-does-not-do\",\n  \"level\": 2\n}, {\n  \"value\": \"Peer Discovery Troubleshooting\",\n  \"id\": \"peer-discovery-troubleshooting\",\n  \"level\": 2\n}, {\n  \"value\": \"Differences from <code>rabbitmq-autocluster</code>\",\n  \"id\": \"differences-from-rabbitmq-autocluster\",\n  \"level\": 2\n}, {\n  \"value\": \"Future Work\",\n  \"id\": \"future-work\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In this blog post we're going to take a closer look at a new\\r\\nsubsystem introduced in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/release-information\",\n        children: \"RabbitMQ 3.7.0\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"why-do-we-need-peer-discovery\",\n      children: \"Why Do We Need Peer Discovery?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Users of open source data services such as RabbitMQ have increasing\\r\\nexpectations around operations automation. This includes so-called Day\\r\\n1 operations: initial cluster provisioning.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a RabbitMQ cluster is first formed, newly booting nodes need\\r\\nto have a way to discover each other. In versions up to and including 3.6.x were\\r\\ntwo ways of doing this:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"CLI tools\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"A list of nodes in configuration file\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The former option is used by some provisioning tools but is generally\\r\\nnot very automation friendly. The latter is more convenient but\\r\\nhas its own limitations: the set of nodes is fixed and changing it requires\\r\\na config file redeployment and node restart.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"a-better-way\",\n      children: \"A Better Way\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"There is a third option and it has been around in the community for a few years:\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-autocluster\",\n        children: \"rabbitmq-autocluster\"\n      }), \", a plugin\\r\\noriginally developed by Gavin Roy.\\r\\nThat plugin modifies RabbitMQ boot process and injects a peer discovery step.\\r\\nThe list of peers in this case doesn't have to come from the config file:\\r\\nit can be retrieved from an AWS autoscaling group\\r\\nor an external tool such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://coreos.com/etcd/docs/latest/\",\n        children: \"etcd\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-autocluster\"\n      }), \" authors concluded that there is no one true way of\\r\\nperforming peer discovery and that different approaches made sense for different\\r\\ndeployment scenarios. As such, they introduced a pluggable interface.\\r\\nA specific implementation of this pluggable interface is called a peer\\r\\ndiscovery mechanism. Given the explosion of platforms and deployment automation\\r\\nstacks in the last few years, this turned out to be a wise decision.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For RabbitMQ 3.7.0 we took \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-autocluster\"\n      }), \" and integrated its\\r\\nmain ideas into the core with some modifications influenced by our\\r\\nexperience supporting production RabbitMQ installations and community\\r\\nfeedback.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The result is a new \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/cluster-formation\",\n        children: \"peer discovery subsystem\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"how-does-it-work\",\n      children: \"How Does it Work?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a node starts and detects it doesn't have a previously\\r\\ninitialised database, it will check if there's a peer\\r\\ndiscovery mechanism configured. If that's the case, it will\\r\\nthen perform the discovery and attempt to contact each\\r\\ndiscovered peer in order. Finally, it will attempt to join the\\r\\ncluster of the first reachable peer.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Some mechanisms assume all cluster members are known ahead of time (for example, listed\\r\\nin the config file), others are dynamic (nodes can come and go).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ 3.7 ships with a number of mechanisms:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"AWS (EC2 instance tags or autoscaling groups)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Kubernetes\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"etcd\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Consul\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Pre-configured DNS records\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Config file\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"and it is easy to introduce support for more options in the future.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Since the ability to list cluster nodes in the config file is not new,\\r\\nlet's focus on the new features.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"node-registration-and-unregistration\",\n      children: \"Node Registration and Unregistration\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Some mechanisms use a data store to keep track of node list.\\r\\nNewly joined cluster members update the data store to indicate their presence.\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/cluster-formation#peer-discovery-etcd\",\n        children: \"etcd\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/cluster-formation#peer-discovery-consul\",\n        children: \"Consul\"\n      }), \" are two options supported via\\r\\nplugins that ship with RabbitMQ.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"With other mechanisms cluster membership is managed out-of-band (by a mechanism that\\r\\nRabbitMQ nodes cannot control). For example, the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/cluster-formation#peer-discovery-aws\",\n        children: \"AWS mechanism\"\n      }), \" uses EC2 instance\\r\\nfiltering or autoscaling group membership, both of which are managed and updated\\r\\nby AWS.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"using-a-preconfigured-set\",\n      children: \"Using a Preconfigured Set\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"But enough theory, let's take a look at what it takes to configure a list of nodes\\r\\nfor peer discovery using the new config format\\r\\nthat was \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/blog/2018/02/05/whats-new-in-rabbitmq-3-7\",\n        children: \"introduced alongside peer discovery in 3.7\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"First we have to tell RabbitMQ to use the classic config mechanism for peer discovery.\\r\\nThis is done using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.peer_discovery_backend\"\n      }), \" key.\\r\\nThen list one or more nodes using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cluster_formation.classic_config.nodes\"\n      }), \", which is a collection:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\\r\\n\\r\\ncluster_formation.classic_config.nodes.1 = rabbit@hostname1.eng.example.local\\r\\ncluster_formation.classic_config.nodes.2 = rabbit@hostname2.eng.example.local\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"And that's it.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This discovery method is perhaps the easiest to get started with but it has one\\r\\nobvious issue: the list of nodes is static.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Next let's take a look at a mechanism that uses dynamic node lists: the AWS EC2\\r\\ninstance filtering.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"using-aws-instance-filtering\",\n      children: \"Using AWS Instance Filtering\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Just like with the earlier example, we have to tell the node to use AWS\\r\\nfor peer discovery:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = rabbit_peer_discovery_aws\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"There are two ways to use the AWS mechanism but the backend name (module) is\\r\\nthe same for both.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To use instance filtering, the plugin requires an AWS region to be configured\\r\\nas well as a pair of credentials. Sensitive configuration file values\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/configure#configuration-encryption\",\n        children: \"can be encrypted\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Here's a config file example that does both:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = rabbit_peer_discovery_aws\\r\\n\\r\\ncluster_formation.aws.region = us-east-1\\r\\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\\r\\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The node now has enough information to try consulting the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\",\n        children: \"EC2 Instance Metadata service\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Finally the operator needs to provide a set of tags to filter on. The tags are key/value pairs.\\r\\nThis means it is possible to filter on more than one tag, for example, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq\"\n      }), \" and cluster name\\r\\nor environment type (e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"development\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"test\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"production\"\n      }), \").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Here's a complete config example that uses 3 tags, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"region\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"service\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"environment\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.peer_discovery_backend = rabbit_peer_discovery_aws\\r\\n\\r\\ncluster_formation.aws.region = us-east-1\\r\\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\\r\\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\\r\\n\\r\\ncluster_formation.aws.instance_tags.region = us-east-1\\r\\ncluster_formation.aws.instance_tags.service = rabbitmq\\r\\ncluster_formation.aws.instance_tags.environment = staging\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"We are all set with this example. The only thing left to discuss is how to handle a natural race\\r\\ncondition that occurs when a cluster is first formed and node listing therefore can only\\r\\nreturn an empty set. This will be covered in a separate section below.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"iam-roles-and-permissions\",\n      children: \"IAM Roles and Permissions\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\",\n        children: \"IAM role\"\n      }), \" is assigned\\r\\nto EC2 instances running RabbitMQ nodes, a policy has to be used to allow said instances use EC2 Instance\\r\\nMetadata Service. Here's an example of such policy:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-json\",\n        children: \"{\\r\\n    \\\"Version\\\": \\\"2012-10-17\\\",\\r\\n    \\\"Statement\\\": [\\r\\n        {\\r\\n            \\\"Effect\\\": \\\"Allow\\\",\\r\\n            \\\"Action\\\": [\\r\\n                \\\"autoscaling:DescribeAutoScalingInstances\\\",\\r\\n                \\\"ec2:DescribeInstances\\\"\\r\\n            ],\\r\\n            \\\"Resource\\\": [\\r\\n                \\\"*\\\"\\r\\n            ]\\r\\n        }\\r\\n    ]\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Without this policy in place the AWS peer discovery plugin won't be able to list instances and\\r\\ndiscovery will fail. When discovery fails, the node will consider it to be a fatal condition\\r\\nand terminate.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4, {\n      id: \"node-names\",\n      children: \"Node Names\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"By default node names with AWS peer discovery will be computed using private hostnames.\\r\\nIt is possible to switch to private IP addresses as well:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-ini\",\n        children: \"cluster_formation.aws.use_private_ip = true\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"the-chicken-and-egg-problem-of-peer-discovery\",\n      children: \"The Chicken and Egg Problem of Peer Discovery\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Consider a deployment where the entire cluster is provisioned at once\\r\\nand all nodes start in parallel. For example, they may have been just\\r\\ncreated by BOSH or an AWS Cluster Formation template. In this case\\r\\nthere's a natural race condition between node registration and more\\r\\nthan one node can become \\\"first to register\\\" (discovers no existing\\r\\npeers and thus starts as standalone).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Different peer discovery backends use different approaches to minimize\\r\\nthe probability of such scenario. Some acquire a lock with their\\r\\ndata service (etcd, Consul) and release it after registering, retrying\\r\\nif lock acquisition fails.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Others use a technique known as randomized startup delay. With\\r\\nrandomized startup delay nodes will delay their startup for a randomly\\r\\npicked value (between 5 and 60 seconds by default).\\r\\nWhile this strategy may seem naive at first, it works quite well in practice\\r\\nwith sufficiently high max delay intervals. It is also used for leader election\\r\\nin some distributed system algorithms, for example, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://raft.github.io\",\n        children: \"Raft\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Some backends (config file, DNS) rely on a pre-configured set of peers\\r\\nand do not suffer from this issue since when a node attempts to join\\r\\nits peer, it will continue retrying for a period of time.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"what-peer-discovery-does-not-do\",\n      children: \"What Peer Discovery Does not Do\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Peer discovery was introduced to solve a narrow set of problems. It does not\\r\\nchange how RabbitMQ clusters operate once formed. Even though some mechanisms\\r\\nintroduce \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/cluster-formation#node-health-checks-and-cleanup\",\n        children: \"additional features\"\n      }), \",\\r\\nsome problems (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/clustering#erlang-cookie\",\n        children: \"shared secret distribution\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/monitoring\",\n        children: \"monitoring\"\n      }), \", for example)\\r\\nshould be solved by different tools.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Peer discovery is also performed by blank (uninitialised) nodes. If a\\r\\nnode previously was a cluster member, it will try to contact its \\\"last\\r\\nseen\\\" peer on boot for a period of time. In this case, no peer\\r\\ndiscovery will be performed. This is no different from how earlier\\r\\nRabbitMQ versions worked in this scenario.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"peer-discovery-troubleshooting\",\n      children: \"Peer Discovery Troubleshooting\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Reasoning about an automated cluster formation system that also\\r\\nuses a peer discovery mechanism that has external dependencies\\r\\n(e.g. AWS APIs or etcd) can be tricky. For this reason all peer\\r\\ndiscovery implementations log key decisions and most log all external\\r\\nrequests at \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"debug\"\n      }), \" log level. When in doubt, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/logging\",\n        children: \"enable debug logging\"\n      }), \"\\r\\nand take a look at node logs!\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"And keep in mind what's covered in the above section on when\\r\\npeer discovery is not meant to kick in.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.h2, {\n      id: \"differences-from-rabbitmq-autocluster\",\n      children: [\"Differences from \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-autocluster\"\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"While the new peer discovery subsystem is similar to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-autocluster\"\n      }), \"\\r\\nin many ways, there is a couple of important differences that matter\\r\\nto operators.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"With \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-autocluster\"\n      }), \", nodes will reset themselves before joining\\r\\nits peers. This makes sense in some environments and doesn't in other.\\r\\nPeer discovery in RabbitMQ core does not do this.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-autocluster\"\n      }), \" allows environment variables to be used\\r\\nfor mechanism-specific configuration in addition to RabbitMQ\\r\\nconfig file. While this feature was retained to simplify migration,\\r\\nit should be considered deprecated by the peer discovery subsystem\\r\\nin 3.7.0.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Peer discovery in the core uses the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/configure\",\n        children: \"new configuration file format\"\n      }), \"\\r\\nheavily. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-autocluster\"\n      }), \" does not support that format since it\\r\\nnow is effectively a 3.6.x-only plugin.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"future-work\",\n      children: \"Future Work\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Most major aspects of the peer discovery subsystem described in this\\r\\npost have a few years of battle testing via \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"rabbitmq-autocluster\"\n      }), \". However,\\r\\nas more and more users adopt this feature in more and more environments,\\r\\nnew feedback from a broader set of users and use cases accumulates.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Currently one open ended question is whether inability to contact\\r\\nan external service used by a peer discovery mechanism (e.g. an AWS API endpoint\\r\\nor etcd or DNS) should immediately be considered a fatal failure that makes\\r\\nthe node stop, or should peer discovery be retried for a period of time.\\r\\nYou feedback is welcome \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://groups.google.com/forum/#!forum/rabbitmq-users\",\n        children: \"on the RabbitMQ mailing list\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./blog/2018-02-18-peer-discovery-subsystem-in-rabbitmq-3-7/index.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);