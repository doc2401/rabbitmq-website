"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-amqp-0-9-1-errata-902-78f"],{

/***/ "./.docusaurus/docusaurus-plugin-content-pages/default/site-src-pages-amqp-0-9-1-errata-md-902.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"type":"mdx","permalink":"/rabbitmq-website/amqp-0-9-1-errata","source":"@site/src/pages/amqp-0-9-1-errata.md","title":"AMQP 0-9-1 Errata","description":"Here we list errors and ambiguities in the 0-9-1 specification and provide our interpretations and corrections.","frontMatter":{"title":"AMQP 0-9-1 Errata"},"unlisted":false}');

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ }),

/***/ "./src/pages/amqp-0-9-1-errata.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_pages_default_site_src_pages_amqp_0_9_1_errata_md_902_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_pages_default_site_src_pages_amqp_0_9_1_errata_md_902_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-pages/default/site-src-pages-amqp-0-9-1-errata-md-902.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'AMQP 0-9-1 Errata'\n};\nconst contentTitle = undefined;\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  \"value\": \"1 Use of &quot;consumer&quot;\",\n  \"id\": \"section_1\",\n  \"level\": 2\n}, {\n  \"value\": \"2 basic.recover with requeue=false\",\n  \"id\": \"section_2\",\n  \"level\": 2\n}, {\n  \"value\": \"3 Field types\",\n  \"id\": \"section_3\",\n  \"level\": 2\n}, {\n  \"value\": \"0-9   0-9-1   Qpid/Rabbit  Type               Remarks\",\n  \"id\": \"0-9---0-9-1---qpidrabbit--type---------------remarks\",\n  \"level\": 2\n}, {\n  \"value\": \"4 field-array\",\n  \"id\": \"section_4\",\n  \"level\": 2\n}, {\n  \"value\": \"5 Exclusive and auto-delete deletion\",\n  \"id\": \"section_5\",\n  \"level\": 2\n}, {\n  \"value\": \"6 Queue and exchange &quot;equivalent&quot; and &quot;pre-existence&quot; rules\",\n  \"id\": \"section_6\",\n  \"level\": 2\n}, {\n  \"value\": \"7 Exclusive rule (amqp0-9-1.xml:1503)\",\n  \"id\": \"section_7\",\n  \"level\": 2\n}, {\n  \"value\": \"8 Exclusive and other errors\",\n  \"id\": \"section_8\",\n  \"level\": 2\n}, {\n  \"value\": \"9 Passive and no-wait (amqp0-9-1.xml:1214,1423)\",\n  \"id\": \"section_9\",\n  \"level\": 2\n}, {\n  \"value\": \"10 Special case value for channel-max and frame-max\",\n  \"id\": \"section_10\",\n  \"level\": 2\n}, {\n  \"value\": \"11 frame-max, method and content header frames\",\n  \"id\": \"section_11\",\n  \"level\": 2\n}, {\n  \"value\": \"12 Heartbeat format\",\n  \"id\": \"section_12\",\n  \"level\": 2\n}, {\n  \"value\": \"13 Heartbeat monitoring\",\n  \"id\": \"section_13\",\n  \"level\": 2\n}, {\n  \"value\": \"14 Default exchange\",\n  \"id\": \"section_14\",\n  \"level\": 2\n}, {\n  \"value\": \"15 EBNF Grammar\",\n  \"id\": \"section_15\",\n  \"level\": 2\n}, {\n  \"value\": \"16 Strings vs bytes\",\n  \"id\": \"section_16\",\n  \"level\": 2\n}, {\n  \"value\": \"17 Missing 312 (&quot;No route&quot;) channel exception\",\n  \"id\": \"section_17\",\n  \"level\": 2\n}, {\n  \"value\": \"18 502 channel exception\",\n  \"id\": \"section_18\",\n  \"level\": 2\n}, {\n  \"value\": \"19 auto-delete vs exclusive\",\n  \"id\": \"section_19\",\n  \"level\": 2\n}, {\n  \"value\": \"20 Durability of amq.* exchanges\",\n  \"id\": \"section_20\",\n  \"level\": 2\n}, {\n  \"value\": \"21 Rejecting messages with an unknown delivery tag\",\n  \"id\": \"section_21\",\n  \"level\": 2\n}, {\n  \"value\": \"22 Heartbeat errors\",\n  \"id\": \"section_22\",\n  \"level\": 2\n}, {\n  \"value\": \"23 Required server-properties\",\n  \"id\": \"section_23\",\n  \"level\": 2\n}, {\n  \"value\": \"24 &#39;nowait&#39; on all synchronous commands\",\n  \"id\": \"section_24\",\n  \"level\": 2\n}, {\n  \"value\": \"25 Deprecation of auto-delete exchanges\",\n  \"id\": \"section_25\",\n  \"level\": 2\n}, {\n  \"value\": \"26 Deprecation of internal exchanges\",\n  \"id\": \"section_26\",\n  \"level\": 2\n}, {\n  \"value\": \"27 Basic content field explanation references queues\",\n  \"id\": \"section_27\",\n  \"level\": 2\n}, {\n  \"value\": \"28 basic.recover synchronicity\",\n  \"id\": \"section_28\",\n  \"level\": 2\n}, {\n  \"value\": \"29 Heartbeat frametype inconsistency\",\n  \"id\": \"section_29\",\n  \"level\": 2\n}, {\n  \"value\": \"30 durable vs exclusive\",\n  \"id\": \"section_30\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    h2: \"h2\",\n    p: \"p\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n    id: \"left-content\",\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      className: \"intro\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"Here we list errors and ambiguities in the 0-9-1 specification and provide our interpretations and corrections.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_1\",\n        children: \"1 Use of \\\"consumer\\\"\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"The word \\\"consumer\\\" is used fairly indiscriminately. In general, we've interpreted it to mean \\\"client\\\", except in situations in which it clearly refers specifically to a triple\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n          className: \"code\",\n          children: \"{connection, channel, consumer-tag}\"\n        }), \".\"]\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"An example of the first, generic meaning is in channel.flow: \\\"This method asks the peer to pause or restart the flow of content data sent by a consumer.\\\"\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"An example of the second, specific use is in basic.consume: \\\"Request exclusive consumer access, meaning only this consumer can access the queue.\\\"\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"(This should really be cleaned up in subsequent revisions of the specification.)\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_2\",\n        children: \"2 basic.recover with requeue=false\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"The stanza for basic.recover says\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"\\\"This method asks the server to redeliver all unacknowledged messages on a specified channel. Zero or more messages may be redelivered.\\\"\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"and\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"\\\"If [requeue] is zero, the message will be redelivered to the original recipient. If this bit is 1, the server will attempt to requeue the message, potentially then delivering it to an alternative subscriber.\\\"\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"These don't account for\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"ul\", {\n      className: \"plain\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children: \"Messages that were handed over as a result of basic.get; or,\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children: \"Consumers that have since since cancelled.\"\n      })]\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"RabbitMQ doesn't try to redeliver messages that were sent as a response to basic.get, and doesn't attempt to find out if a consumer has been cancelled.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"(Probably the best solution to this under-specification is to remove the requeue flag and just always requeue things.)\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_3\",\n        children: \"3 Field types\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"Tony to the AMQ dev list:\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"pre\", {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"The changes from 0-9's table field type definitions (S,I,D,T,F,V) to\\r\\n0-9-1's type definitions (t,b,B,U,u,I,i,L,l,f,d,D,s,S,A,T,F,V) are not,\\r\\nas far as I can tell, the changes that were discussed in the 0-9-1 SIG.\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"The types mentioned in the final spec do not line up with any of the\\r\\nvariants discussed in the 0-9-1 SIG. In particular, they are\\r\\ngratuitously \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"b\", {}), \"INCOMPATIBLE\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"b\", {}), \" with the Qpid-java 0-9 field type\\r\\nextensions, which are also implemented by the RabbitMQ client libraries\\r\\nand the RabbitMQ broker.\"]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"The final word I can find on the subject by trawling my archive is a\\r\\nmessage from John O'Hara (attached). Unless there was subsequent\\r\\ndiscussion that I've missed, I would have expected the final version of\\r\\nthe 0-9-1 spec to at least be based on the list John provided.\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"Here's a tabular summary of the state of things:\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"0-9---0-9-1---qpidrabbit--type---------------remarks\",\n        children: \"0-9   0-9-1   Qpid/Rabbit  Type               Remarks\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"t       t            Boolean\\r\\nb       b            Signed 8-bit\\r\\nB       B            Unsigned 8-bit\\r\\nU       s            Signed 16-bit      (A1)\\r\\nu       u            Unsigned 16-bit\\r\\nI     I       I            Signed 32-bit\\r\\ni       i            Unsigned 32-bit\\r\\nL       l            Signed 64-bit      (B)\\r\\nl                    Unsigned 64-bit\\r\\nf       f            32-bit float\\r\\nd       d            64-bit float\\r\\nD     D       D            Decimal\\r\\ns                    Short string       (A2)\\r\\nS     S       S            Long string\\r\\nA       A            Array              (C)\\r\\nT     T       T            Timestamp (u64)\\r\\nF     F       F            Nested Table\\r\\nV     V       V            Void\\r\\nx            Byte array         (D)\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"Remarks:\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"A1, A2: Notice how the types \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"b\", {}), \"CONFLICT\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"b\", {}), \" here. In Qpid and Rabbit,\\r\\n's' means a signed 16-bit integer; in 0-9-1, it means a\\r\\nshort string.\"]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"B: Notice how the signednesses \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"b\", {}), \"CONFLICT\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"b\", {}), \" here. In Qpid and Rabbit,\\r\\n'l' means a signed 64-bit integer; in 0-9-1, it means an unsigned\\r\\n64-bit integer.\"]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"C: I cannot find any discussion about the addition of this. Is my\\r\\narchive missing a few messages?\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"D: John [O'Hara]objected to this when John proposed a list himself. I believe it to\\r\\nbe vital: byte arrays are not strings. Furthermore, Qpid and\\r\\nRabbit already have code deployed that uses this type specifier.\"\n      })]\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"RabbitMQ continues to use the tags in the third column.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"Other notes:\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ul\", {\n      className: \"plain\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n          children: [\"Decimals encoding: \\\"They are encoded as an octet representing the number of places followed by a long signed integer\\\", but the grammar contradicts that and says: \\\"decimal-value = scale long-uint\\\". We treat the decimal value as\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"b\", {\n            children: \"signed\"\n          }), \" integer.\"]\n        })\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_4\",\n        children: \"4 field-array\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"p\", {\n      children: [\"The protocol grammar has a production for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n        className: \"code\",\n        children: \"field-array\"\n      }), \", and it appears on the right-hand-side of a production for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n        className: \"code\",\n        children: \"field-value\"\n      }), \".\"]\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"pre\", {\n      children: \"field-array = long-int *field-value\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"There is no explanation elsewhere for this, as there is for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n          className: \"code\",\n          children: \"field-table\"\n        }), \". In particular, there is nothing explaining what the long-int value represents. RabbitMQ uses the total length in bytes of the encoded\\r\\nfield-values, similarly to field-table; it also treats it as a long-uint, since that is what field-table uses (on the supposition that \\\"long-int\\\" is a typo).\"]\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_5\",\n        children: \"5 Exclusive and auto-delete deletion\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"AMQP 0-8 and 0-9-1 both have rules regarding deletion of exclusive and auto-delete queues. However, they do not specify whether this happens synchronously; i.e., before the broker responds to its peer.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"(Actually 0-8 said that the server should wait a \\\"polite amount of time\\\").\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"RabbitMQ now deletes auto-delete and queues synchronously with basic.cancel, channel close, and connection close, and exclusive queues synchronously with the latter two.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"An auto-delete queue will not be deleted if:\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"ul\", {\n      className: \"plain\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"li\", {\n        children: [\"it didn't have a consumer - consuming with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n          className: \"code\",\n          children: \"basic.get\"\n        }), \" does not count as having a consumer\"]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"li\", {\n        children: [\"the consumer failed to send \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n          className: \"code\",\n          children: \"basic.cancel\"\n        }), \" (e.g. consumer crashed)\"]\n      })]\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_6\",\n        children: \"6 Queue and exchange \\\"equivalent\\\" and \\\"pre-existence\\\" rules\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"\\\"If [passive] not set and the queue exists, the server MUST check that the existing queue has the same values for durable, exclusive, auto-delete, and arguments fields. The server MUST respond with Declare-Ok if the requested queue\\r\\nmatches these fields, and MUST raise a channel exception if not.\\\"\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"and similarly for exchange declaration.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"The rules fail to specify the exact error code. RabbitMQ uses 'precondition-failed'.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"Furthermore, the exchange.declare specs contain a separate \\\"typed\\\" rule concerning the re-declaration with a different type. That rule is superfluous, since it subsumed by the equivalence rules, and specifies a\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"b\", {\n          children: \"connection\"\n        }), \" error of 'not-allowed'. The rule should be removed.\"]\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_7\",\n        children: \"7 Exclusive rule (amqp0-9-1.xml:1503)\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"\\\"One client declares an exclusive queue. A second client on a different connection attempts to declare, bind, consume, purge, delete, or declare a queue of the same name.\\\"\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"\\\"declare\\\" appears twice, and basic.get and queue.unbind not at all (basic.cancel is local to a channel anyway). RabbitMQ extends the exclusivity to queue.declare (including passive declare), queue.bind, queue.unbind, queue.purge,\\r\\nqueue.delete, basic.consume, and basic.get.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_8\",\n        children: \"8 Exclusive and other errors\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"In general, RabbitMQ privileges exclusivity ahead of other things; i.e., it checks that first, and will send a resource-locked even if there are other problems, like non-equivalence.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_9\",\n        children: \"9 Passive and no-wait (amqp0-9-1.xml:1214,1423)\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"\\\".. A declare with both passive and no-wait has no effect.\\\"\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"However, passively declaring a queue which exists and is exclusive to another connection is explicitly prohibited in the exclusive rule (amqp0-9-1.xml:1486), and passively declaring a queue or exchange that doesn't exist should send\\r\\na channel exception. RabbitMQ ignores the sentence quoted above; i.e., it will send a channel exception if a queue exclusive to another connection, or a non-existent queue or exchange, is passively declared even with no-wait.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_10\",\n        children: \"10 Special case value for channel-max and frame-max\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"The spec for the channel-max field in connection.tune says \\\"Zero indicates no specified limit\\\" and there is a similar special case for frame-max; but, in tune-ok, the \\\"upper-limit\\\" rule says: \\\"If the client specifies a channel max\\r\\n[/frame-max]that is higher than the value provided by the server, the server MUST close the connection without attempting a negotiated close\\\".\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"This is ambiguous if the server sends zero in tune: if the rule is taken literally, the client is not allowed to send any value other than zero in tune-ok, so it can't negotiate down the limit.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"RabbitMQ doesn't put a limit on channel-max, and treats any number in tune-ok as valid. It does put a limit on frame-max, and checks that the value sent in tune-ok is less than or equal.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_11\",\n        children: \"11 frame-max, method and content header frames\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"The specification states that frame-max (negotiated in connection.tune and connection.tune-ok) gives an upper limit to total frame size; that is, including the frame header and frame-end octet. However, there's no way to split\\r\\nmethods or content headers across multiple frames. RabbitMQ currently ignores the frame-max for methods and content headers.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_12\",\n        children: \"12 Heartbeat format\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"The grammar has the production\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"heartbeat = %d8 %d0 %d0 frame-end\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"which doesn't fit the frame format. RabbitMQ, Qpid and OpenAMQ all send eight bytes, following the frame format:\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"frame-type (octet) = %d8 channel (short) = %d0 %d0 payload (long) = %d0 %d0 %d0 %d0 frame-end (octet) = %xCE\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_13\",\n        children: \"13 Heartbeat monitoring\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"The spec says:\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"pre\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"The client should start sending heartbeats after receiving a Connection.Tune\\r\\nmethod, and start monitoring heartbeats after receiving Connection.Open.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"p\", {\n      children: [\"but of course, the client \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"b\", {\n        className: \"\",\n        children: \"sends\"\n      }), \" Connection.Open.\"]\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_14\",\n        children: \"14 Default exchange\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"The spec is a bit vague on the default exchange: it says\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"pre\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"The server MUST NOT allow clients to access the default exchange except\\r\\nby specifying an empty exchange name in the Queue.Bind and content Publish\\r\\nmethods.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"However, 0-10 spec makes things a bit more rigid:\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"pre\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"The default exchange MUST NOT be accessible to the client except by\\r\\nspecifying an empty exchange name in a content publish command (such as\\r\\nmessage.transfer). That is, the server must not let clients explicitly\\r\\nbind, unbind, delete, or make any other reference to this exchange.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"RabbitMQ prevents all access to the default exchange other than publishing. This includes exchange redeclaration and queue.bind redeclarations to queues. For exchange-to-exchange bindings, neither the source or the destination are\\r\\npermitted to be the default exchange.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_15\",\n        children: \"15 EBNF Grammar\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n        children: [\"The EBNF grammar (p. 32) is broken: \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"tt\", {\n          className: \"\",\n          children: \"8*OCTET\"\n        }), \" should be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"tt\", {\n          className: \"\",\n          children: \"8 OCTET\"\n        }), \", according to the syntax description \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"tt\", {\n          className: \"\",\n          children: \"8*OCTET\"\n        }), \" means \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"b\", {\n          className: \"\",\n          children: \"AT LEAST\"\n        }), \" 8 octets (see bullet point 'The Operator\\r\\n\\\"*\\\" ...').\"]\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_16\",\n        children: \"16 Strings vs bytes\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"The spec is confused about utf-8 strings vs. raw bytes. E.g. what's a \\\"character\\\"? A valid code point? An octet? What does equality mean? Same bytes? Same in some normal form? How is mal-formed utf-8 handled? The grammar on p. 31\\r\\nsuggests strings are just raw bytes (i.e. can contain invalid utf-8), but other parts of the spec seem to contradict that (e.g. 4.2.5.3, p. 35)\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_17\",\n        children: \"17 Missing 312 (\\\"No route\\\") channel exception\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"Section 1.2 ought to define an exception 312 \\\"No route\\\", which used to exist in 0-9 and is what RabbitMQ sends back with 'basic.return' when a 'mandatory' message cannot be delivered to any queue.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_18\",\n        children: \"18 502 channel exception\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"Section 1.1 under queue-name says \\\"If the client did not declare a queue, and the method needs a queue name, this will result in a 502 (syntax error) channel exception\\\". This is in fact a connection exception.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_19\",\n        children: \"19 auto-delete vs exclusive\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"Section 4.5 says \\\"When the server closes a connection, it deletes any auto-delete owned by that connection.\\\" That's not what auto-delete means - this should presumably say \\\"...deletes any exclusive queues owned...\\\".\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_20\",\n        children: \"20 Durability of amq.* exchanges\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"The spec doesn't say if the standard exchanges should be durable or not. RabbitMQ declares them as durable. Unfortunately, the Qpid Java Client forcibly declares them as non durable (through N levels of abstractions), thus breaking\\r\\ninteroperability almost completely.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_21\",\n        children: \"21 Rejecting messages with an unknown delivery tag\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"The spec doesn't say what should happen when a client sends a basic.reject with an unknown delivery tag. The server should probably handle this in the same way as for basic.ack, namely a raise a precondition_failed error.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_22\",\n        children: \"22 Heartbeat errors\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"In section 4.2.7 the spec says \\\"A peer that receives an invalid heartbeat frame MUST raise a connection exception with reply code 501 (frame error).\\\" It is unclear how a heartbeat frame can be identified as such and be invalid\\r\\nsimultaneously.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_23\",\n        children: \"23 Required server-properties\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"The xml spec for connection.start states that the server-properties field \\\"SHOULD contain at least these fields: 'host', specifying the server host name or address ...\\\". The 'host' field was added to this list in 0-9; it is not\\r\\npresent in 0-8. It is the only field whose value isn't freely chosen by the implementation. Furthermore, it is not clear at all what information should be included here and what a client could learn from that. The hostname may not\\r\\nidentify a broker uniquely. And it may not be DNS resolvable. And the presence of firewalls and proxies makes the same true of the IP address. Additionally, including this information may reveal details of the brokers network\\r\\ninfrastructure to clients that ought to remain hidden.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"Therefore this field should not be required. RabbitMQ does not supply it.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_24\",\n        children: \"24 'nowait' on all synchronous commands\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"All synchronous commands should have a 'nowait' flag that makes them asynchronous, unless there are specific circumstances where that doesn't make sense. Currently falling foul of this are: 'queue.unbind', 'basic.qos',\\r\\n'basic.recover' (which instead has a sync and async variant), 'tx.select', 'tx.commit', 'tx.rollback'. Of these, 'queue.unbind' is the most glaring departure from the established pattern.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n      className: \"docSection\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        name: \"section_25\",\n        className: \"anchor\",\n        id: \"\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h2\", {\n        className: \"docHeading\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n          className: \"anchor\",\n          href: \"#section_25\"\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_25\",\n        children: \"25 Deprecation of auto-delete exchanges\"\n      })]\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"The 'auto-delete' flag on 'exchange.declare' got deprecated in 0-9-1. Auto-delete exchanges are actually quite useful, so this flag should be restored.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"Also note that the spec still refers to auto-delete exchanges: \\\"Exchanges may be durable, temporary, or auto-deleted.\\\" (p. 26).\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"RabbitMQ supports auto-delete exchanges.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_26\",\n        children: \"26 Deprecation of internal exchanges\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"The 'internal' flag on 'exchange.declare' got deprecated in 0-9-1. Internal exchanges (which 0-8 defines as exchanges used for internal wiring to which clients are not allowed to publish directly) are actually quite useful,\\r\\nparticular in combination with extensions such as exchange-to-exchange bindings. So this flag should be restored.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"Also note that the basic publish rule (02) still makes reference to internal exchanges: \\\"If the exchange was declared as an internal exchange...\\\"\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_27\",\n        children: \"27 Basic content field explanation references queues\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n        children: \"The XML comments on the basic content fields state that \\\"delivery-mode\\\" is for \\\"for queues that implement persistence\\\". That is misleading (in that it mentions queues) and circular. The delivery-mode controls whether messages\\r\\nsurvive a broker restart.\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"Similarly, the comments state that \\\"priority\\\" is \\\"for queues that implement priorities\\\". Priorities can be taken into account by a broker in all stages of message processing, not just when enqueuing.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"And on a cosmetic note, the vertical alignment of the basic content definitions is slightly off.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_28\",\n        children: \"28 basic.recover synchronicity\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"Although basic.recover is introduced as a synchronous version of basic.recover-async, it is not marked as synchronous in the XML spec.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_29\",\n        children: \"29 Heartbeat frametype inconsistency\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"The PDF specifies the heartbeat frametype as 4. The XML specifies it as 8.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      className: \"docSection\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n        id: \"section_30\",\n        children: \"30 durable vs exclusive\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n      children: \"The spec does not define what happens if a client tries to declare a queue which is both durable and exclusive. RabbitMQ will treat a request to declare such a queue as a request for an exclusive transient queue.\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n      id: \"help-and-feedback\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h2\", {\n        children: \"Getting Help and Providing Feedback\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n          children: [\"If you have questions about the contents of this guide or any other topic related to RabbitMQ, don't hesitate to ask them using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n            href: \"https://github.com/rabbitmq/rabbitmq-server/discussions\",\n            children: \"GitHub Discussions\"\n          }), \" or our\\r\\ncommunity \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n            href: \"https://www.rabbitmq.com/discord\",\n            children: \"Discord server\"\n          }), \".\"]\n        })\n      })]\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n      id: \"contribute\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h2\", {\n        children: \"Help Us Improve the Docs <3\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"p\", {\n        children: [\"If you'd like to contribute an improvement to the site, its source is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n          href: \"https://github.com/rabbitmq/rabbitmq-website\",\n          children: \"available on GitHub\"\n        }), \". Simply fork the repository and submit a pull request. Thank you!\"]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/amqp-0-9-1-errata.md\n");

/***/ })

}]);