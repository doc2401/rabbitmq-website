"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkrabbitmq_website"] = globalThis["webpackChunkrabbitmq_website"] || []).push([["content---rabbitmq-website-client-libraries-java-api-guide-505-26b"],{

/***/ "./.docusaurus/docusaurus-plugin-content-docs/client-libraries/site-client-libraries-java-api-guide-md-505.json":
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"id":"java-api-guide","title":"Java Client API Guide","description":"<!--","source":"@site/client-libraries/java-api-guide.md","sourceDirName":".","slug":"/java-api-guide","permalink":"/rabbitmq-website/client-libraries/java-api-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/rabbitmq/rabbitmq-website/tree/main/client-libraries/java-api-guide.md","tags":[],"version":"current","frontMatter":{"title":"Java Client API Guide"},"sidebar":"clientLibsSidebar","previous":{"title":"RabbitMQ Java Client Library","permalink":"/rabbitmq-website/client-libraries/java-client"},"next":{"title":"JMS client","permalink":"/rabbitmq-website/client-libraries/jms-client"}}');

/***/ }),

/***/ "./client-libraries/java-api-guide.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   contentTitle: () => (/* binding */ contentTitle),\n/* harmony export */   \"default\": () => (/* binding */ MDXContent),\n/* harmony export */   frontMatter: () => (/* binding */ frontMatter),\n/* harmony export */   metadata: () => (/* reexport default export from named module */ _site_docusaurus_docusaurus_plugin_content_docs_client_libraries_site_client_libraries_java_api_guide_md_505_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _site_docusaurus_docusaurus_plugin_content_docs_client_libraries_site_client_libraries_java_api_guide_md_505_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.docusaurus/docusaurus-plugin-content-docs/client-libraries/site-client-libraries-java-api-guide-md-505.json\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n\n\nconst frontMatter = {\n\ttitle: 'Java Client API Guide'\n};\nconst contentTitle = 'Java Client API Guide';\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"Support Timeline\",\n  \"id\": \"support-timeline\",\n  \"level\": 2\n}, {\n  \"value\": \"JDK and Android Version Support\",\n  \"id\": \"jdk-versions\",\n  \"level\": 2\n}, {\n  \"value\": \"License\",\n  \"id\": \"license\",\n  \"level\": 2\n}, {\n  \"value\": \"Overview\",\n  \"id\": \"overview\",\n  \"level\": 2\n}, {\n  \"value\": \"Connections and Channels\",\n  \"id\": \"connections-and-channels\",\n  \"level\": 2\n}, {\n  \"value\": \"Connecting to RabbitMQ\",\n  \"id\": \"connecting\",\n  \"level\": 2\n}, {\n  \"value\": \"Connecting Using a URI\",\n  \"id\": \"uri\",\n  \"level\": 3\n}, {\n  \"value\": \"Using Lists of Endpoints\",\n  \"id\": \"endpoints-list\",\n  \"level\": 3\n}, {\n  \"value\": \"Disconnecting from RabbitMQ\",\n  \"id\": \"disconnecting\",\n  \"level\": 2\n}, {\n  \"value\": \"Connection and Channel Lifespan\",\n  \"id\": \"connection-and-channel-lifespan\",\n  \"level\": 2\n}, {\n  \"value\": \"Client-Provided Connection Name\",\n  \"id\": \"client-provided-names\",\n  \"level\": 2\n}, {\n  \"value\": \"Using Exchanges and Queues\",\n  \"id\": \"exchanges-and-queues\",\n  \"level\": 2\n}, {\n  \"value\": \"Passive Declaration\",\n  \"id\": \"passive-declaration\",\n  \"level\": 3\n}, {\n  \"value\": \"Operations with Optional Responses\",\n  \"id\": \"nowait-methods\",\n  \"level\": 3\n}, {\n  \"value\": \"Deleting Entities and Purging Messages\",\n  \"id\": \"deleting-entities\",\n  \"level\": 3\n}, {\n  \"value\": \"Publishing Messages\",\n  \"id\": \"publishing\",\n  \"level\": 2\n}, {\n  \"value\": \"Channels and Concurrency Considerations (Thread Safety)\",\n  \"id\": \"concurrency\",\n  \"level\": 2\n}, {\n  \"value\": \"Receiving Messages by Subscription (&quot;Push API&quot;)\",\n  \"id\": \"consuming\",\n  \"level\": 2\n}, {\n  \"value\": \"Retrieving Individual Messages (&quot;Pull API&quot;)\",\n  \"id\": \"getting\",\n  \"level\": 2\n}, {\n  \"value\": \"Handling unroutable messages\",\n  \"id\": \"returning\",\n  \"level\": 2\n}, {\n  \"value\": \"Shutdown Protocol\",\n  \"id\": \"shutdown\",\n  \"level\": 2\n}, {\n  \"value\": \"Overview of the Client Shutdown Process\",\n  \"id\": \"shutdown-overview\",\n  \"level\": 3\n}, {\n  \"value\": \"Information about the circumstances of a shutdown\",\n  \"id\": \"shutdown-cause\",\n  \"level\": 3\n}, {\n  \"value\": \"Atomicity and use of the isOpen() method\",\n  \"id\": \"shutdown-atomicity\",\n  \"level\": 3\n}, {\n  \"value\": \"Advanced Connection options\",\n  \"id\": \"advanced-connection\",\n  \"level\": 2\n}, {\n  \"value\": \"Consumer Operation Thread Pool\",\n  \"id\": \"consumer-thread-pool\",\n  \"level\": 3\n}, {\n  \"value\": \"Service discovery with the AddressResolver interface\",\n  \"id\": \"service-discovery-with-address-resolver\",\n  \"level\": 3\n}, {\n  \"value\": \"Heartbeat Timeout\",\n  \"id\": \"heartbeats-timeout\",\n  \"level\": 3\n}, {\n  \"value\": \"Custom Thread Factories\",\n  \"id\": \"thread-factories\",\n  \"level\": 3\n}, {\n  \"value\": \"Support for Java non-blocking IO\",\n  \"id\": \"java-nio\",\n  \"level\": 3\n}, {\n  \"value\": \"Automatic Recovery From Network Failures\",\n  \"id\": \"recovery\",\n  \"level\": 2\n}, {\n  \"value\": \"Connection Recovery\",\n  \"id\": \"connection-recovery\",\n  \"level\": 3\n}, {\n  \"value\": \"When Will Connection Recovery Be Triggered?\",\n  \"id\": \"recovery-triggers\",\n  \"level\": 3\n}, {\n  \"value\": \"Recovery Listeners\",\n  \"id\": \"recovery-listeners\",\n  \"level\": 3\n}, {\n  \"value\": \"Effects on Publishing\",\n  \"id\": \"publishers\",\n  \"level\": 3\n}, {\n  \"value\": \"Topology Recovery\",\n  \"id\": \"topology-recovery\",\n  \"level\": 3\n}, {\n  \"value\": \"Failure Detection and Recovery Limitations\",\n  \"id\": \"automatic-recovery-limitations\",\n  \"level\": 3\n}, {\n  \"value\": \"Manual Acknowledgements and Automatic Recovery\",\n  \"id\": \"recovery-and-acknowledgements\",\n  \"level\": 3\n}, {\n  \"value\": \"Channels Lifecycle and Topology Recovery\",\n  \"id\": \"recovery-channel-lifecycle\",\n  \"level\": 3\n}, {\n  \"value\": \"Unhandled Exceptions\",\n  \"id\": \"unhandled-exceptions\",\n  \"level\": 2\n}, {\n  \"value\": \"Metrics and Monitoring\",\n  \"id\": \"metrics\",\n  \"level\": 2\n}, {\n  \"value\": \"Micrometer support\",\n  \"id\": \"metrics-micrometer\",\n  \"level\": 3\n}, {\n  \"value\": \"Dropwizard Metrics support\",\n  \"id\": \"metrics-dropwizard-metrics\",\n  \"level\": 3\n}, {\n  \"value\": \"RabbitMQ Java Client on Google App Engine\",\n  \"id\": \"gae-pitfalls\",\n  \"level\": 2\n}, {\n  \"value\": \"Caveats and Limitations\",\n  \"id\": \"cache-pitfalls\",\n  \"level\": 2\n}, {\n  \"value\": \"The RPC (Request/Reply) Pattern: an Example\",\n  \"id\": \"rpc\",\n  \"level\": 2\n}, {\n  \"value\": \"TLS Support\",\n  \"id\": \"tls\",\n  \"level\": 2\n}, {\n  \"value\": \"OAuth 2 Support\",\n  \"id\": \"oauth2-support\",\n  \"level\": 2\n}, {\n  \"value\": \"Getting the OAuth 2 Token\",\n  \"id\": \"oauth2-getting-token\",\n  \"level\": 3\n}, {\n  \"value\": \"Refreshing the Token\",\n  \"id\": \"oauth2-refreshing-token\",\n  \"level\": 3\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.header, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1, {\n        id: \"java-client-api-guide\",\n        children: \"Java Client API Guide\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This guide covers \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./java-client\",\n        children: \"RabbitMQ Java client\"\n      }), \" and its public API.\\r\\nIt assumes that the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://central.sonatype.com/artifact/com.rabbitmq/amqp-client\",\n        children: \"most recent major version of the client\"\n      }), \" is used\\r\\nand the reader is familiar with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/tutorials\",\n        children: \"the basics\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Key sections of the guide are:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#license\",\n          children: \"Licensing\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#jdk-versions\",\n          children: \"JDK and Android versions\"\n        }), \" supported\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#support-timeline\",\n          children: \"Support Timeline\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#connecting\",\n          children: \"Connecting to RabbitMQ\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#connection-and-channel-lifespan\",\n          children: \"Connection and Channel Lifespan\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#client-provided-names\",\n          children: \"Client-provided connection name\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#exchanges-and-queues\",\n          children: \"Using Exchanges and Queues\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#publishing\",\n          children: \"Publishing Messages\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#consuming\",\n          children: \"Consuming Using a Subscription\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#concurrency\",\n          children: \"Concurrency Considerations and Safety\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#recovery\",\n          children: \"Automatic Recovery From Network Failures\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#unhandled-exceptions\",\n          children: \"Unhandled Exceptions\"\n        }), \" in consumers\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#metrics\",\n          children: \"Metrics and Monitoring\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#service-discovery-with-address-resolver\",\n          children: \"Endpoint Resolution with the AddressResolver Interface\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#rpc\",\n          children: \"Request/Response Pattern\"\n        }), \" (\\\"RPC\\\")\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#tls\",\n          children: \"TLS support\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"#oauth2-support\",\n          children: \"OAuth 2 support\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"An \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://rabbitmq.github.io/rabbitmq-java-client/api/current/\",\n        children: \"API reference\"\n      }), \" (JavaDoc) is available separately.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"support-timeline\",\n      children: \"Support Timeline\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Please see the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./java-versions\",\n        children: \"RabbitMQ Java libraries support page\"\n      }), \" for the support timeline.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"jdk-versions\",\n      children: \"JDK and Android Version Support\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"5.x release series of this library \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./java-versions\",\n        children: \"require JDK 8\"\n      }), \", both for compilation and at runtime. On Android,\\r\\nthis means only \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://developer.android.com/guide/platform/j8-jack.html\",\n        children: \"Android 7.0 or later\"\n      }), \" versions are supported.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"4.x release series \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"./java-versions\",\n        children: \"support JDK 6\"\n      }), \" and Android versions prior to 7.0.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"license\",\n      children: \"License\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The library is open source, developed \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-java-client/\",\n        children: \"on GitHub\"\n      }), \", and is triple-licensed under\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n          children: \"Apache Public License 2.0\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"https://www.mozilla.org/MPL/2.0/\",\n          children: \"Mozilla Public License 2.0\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"http://www.gnu.org/licenses/gpl-2.0.html\",\n          children: \"GPL 2.0\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This means that the user can consider the library to be licensed under \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"any of the licenses from the list above\"\n      }), \".\\r\\nFor example, the user may choose the Apache Public License 2.0 and include this client into\\r\\na commercial product. Codebases that are licensed under the GPLv2 may choose GPLv2, and so on.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"overview\",\n      children: \"Overview\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The client API exposes key entities in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/tutorials/amqp-concepts\",\n        children: \"AMQP 0-9-1 protocol model\"\n      }), \",\\r\\nwith additional abstractions for ease of use.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ Java client uses \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"com.rabbitmq.client\"\n      }), \" as its top-level package.\\r\\nThe key classes and interfaces are:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Channel: represents an AMQP 0-9-1 channel, and provides most of the operations (protocol methods).\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Connection: represents an AMQP 0-9-1 connection\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"ConnectionFactory: constructs \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"Connection\"\n        }), \" instances\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Consumer: represents a message consumer\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"DefaultConsumer: commonly used base class for consumers\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"BasicProperties: message properties (metadata)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"BasicProperties.Builder: builder for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"BasicProperties\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Protocol operations are available through the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \" interface. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Connection\"\n      }), \" is\\r\\nused to open channels, register connection lifecycle event\\r\\nhandlers, and close connections that are no longer needed.\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Connection\"\n      }), \"s are instantiated through \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ConnectionFactory\"\n      }), \",\\r\\nwhich is how you configure various connection settings, such as the vhost or username.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"connections-and-channels\",\n      children: \"Connections and Channels\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The core API classes are \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Connection\"\n      }), \"\\r\\nand \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \", representing an AMQP 0-9-1 connection and\\r\\nchannel, respectively. They are typically imported before used:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"import com.rabbitmq.client.Connection;\\r\\nimport com.rabbitmq.client.Channel;\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"connecting\",\n      children: \"Connecting to RabbitMQ\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The following code connects to a RabbitMQ node using the given parameters (host name, port number, etc):\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory factory = new ConnectionFactory();\\r\\n// \\\"guest\\\"/\\\"guest\\\" by default, limited to localhost connections\\r\\nfactory.setUsername(userName);\\r\\nfactory.setPassword(password);\\r\\nfactory.setVirtualHost(virtualHost);\\r\\nfactory.setHost(hostName);\\r\\nfactory.setPort(portNumber);\\r\\n\\r\\nConnection conn = factory.newConnection();\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"All of these parameters have sensible defaults for a RabbitMQ\\r\\nnode running locally.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The default value for a property will be used if the property\\r\\nremains unassigned prior to creating a connection:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"table\", {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"thead\", {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: \"Property\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n            children: \"Default Value\"\n          })]\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Username\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"\\\"guest\\\"\"\n          })\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Password\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"\\\"guest\\\"\"\n          })\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Virtual host\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"\\\"/\\\"\"\n          })\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"Hostname\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children: \"\\\"localhost\\\"\"\n          })\n        })]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"tr\", {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: \"port\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"td\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"5672\"\n            }), \" for regular connections,\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n              children: \"5671\"\n            }), \" for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n              href: \"/docs/ssl\",\n              children: \"connections that use TLS\"\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"uri\",\n      children: \"Connecting Using a URI\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Alternatively, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/uri-spec\",\n        children: \"URIs\"\n      }), \" may be used:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory factory = new ConnectionFactory();\\r\\nfactory.setUri(\\\"amqp://userName:password@hostName:portNumber/virtualHost\\\");\\r\\nConnection conn = factory.newConnection();\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"All of these parameters have sensible defaults for a stock\\r\\nRabbitMQ server running locally.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Successful and unsuccessful client connection events can be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/logging\",\n        children: \"observed in server node logs\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/access-control\",\n        children: \"user guest can only connect from localhost\"\n      }), \" by default.\\r\\nThis is to limit well-known credential use in production systems.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Application developers can \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#client-provided-names\",\n        children: \"assign a custom name to a connection\"\n      }), \". If set,\\r\\nthe name will be mentioned in RabbitMQ node logs as well as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/management\",\n        children: \"management UI\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Connection\"\n      }), \" interface can then be used to open a channel:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"Channel channel = conn.createChannel();\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The channel can now be used to send and receive messages, as described in subsequent sections.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"endpoints-list\",\n      children: \"Using Lists of Endpoints\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to specify a list of endpoints to use when connecting. The first\\r\\nreachable endpoint will be used. In case of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#recovery\",\n        children: \"connection failures\"\n      }), \", using\\r\\na list of endpoints makes it possible for the application to connect to a different\\r\\nnode if the original one is down.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To use multiple of endpoint, provide a list of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Address\"\n      }), \"es to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ConnectionFactory#newConnection\"\n      }), \".\\r\\nAn \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Address\"\n      }), \" represents a hostname and port pair.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"Address[] addrArr = new Address[]{ new Address(hostname1, portnumber1)\\r\\n                                 , new Address(hostname2, portnumber2)};\\r\\nConnection conn = factory.newConnection(addrArr);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"will attempt to connect to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"hostname1:portnumber1\"\n      }), \", and if\\r\\nthat fails to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"hostname2:portnumber2\"\n      }), \". The connection returned is\\r\\nthe first in the array that succeeds (without throwing\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"IOException\"\n      }), \"). This is entirely equivalent to repeatedly\\r\\nsetting host and port on a factory, calling\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"factory.newConnection()\"\n      }), \" each time, until one of them succeeds.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ExecutorService\"\n      }), \" is provided as well (using the\\r\\nform \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"factory.newConnection(es, addrArr)\"\n      }), \") the thread pool is\\r\\nassociated with the (first) successful connection.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If you want more control over the host to connect to, see\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#service-discovery-with-address-resolver\",\n        children: \"the support for service discovery\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"disconnecting\",\n      children: \"Disconnecting from RabbitMQ\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To disconnect, simply close the channel and the connection:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.close();\\r\\nconn.close();\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that closing the channel may be considered good practice, but is not strictly necessary here - it will be done\\r\\nautomatically anyway when the underlying connection is closed.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Client disconnection events can be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/networking#logging\",\n        children: \"observed in server node logs\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"connection-and-channel-lifespan\",\n      children: \"Connection and Channel Lifespan\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Client \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/connections\",\n        children: \"connections\"\n      }), \" are meant to be long-lived. The underlying protocol is designed and optimized for\\r\\nlong running connections. That means that opening a new connection per operation,\\r\\ne.g. a message published, is unnecessary and strongly discouraged as it will introduce a lot of\\r\\nnetwork roundtrips and overhead.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/channels\",\n        children: \"Channels\"\n      }), \" are also meant to be long-lived but since many recoverable protocol errors will\\r\\nresult in channel closure, channel lifespan could be shorter than that of its connection.\\r\\nClosing and opening new channels per operation is usually unnecessary but can be\\r\\nappropriate. When in doubt, consider reusing channels first.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/channels#error-handling\",\n        children: \"Channel-level exceptions\"\n      }), \" such as attempts to consume from a\\r\\nqueue that does not exist will result in channel closure. A closed channel can no\\r\\nlonger be used and will not receive any more events from the server (such\\r\\nas message deliveries). Channel-level exceptions will be logged by RabbitMQ\\r\\nand will initiate a shutdown sequence for the channel (see below).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"client-provided-names\",\n      children: \"Client-Provided Connection Name\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"RabbitMQ nodes have a limited amount of information about their clients:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"their TCP endpoint (source IP address and port)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"the credentials used\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This information alone can make identifying applications and instances problematic, in particular when credentials can be\\r\\nshared and clients connect over a load balancer but \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/networking#proxy-protocol\",\n        children: \"Proxy protocol\"\n      }), \" cannot be enabled.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To make it easier to identify clients in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/logging\",\n        children: \"server logs\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/management\",\n        children: \"management UI\"\n      }), \",\\r\\nAMQP 0-9-1 client connections, including the RabbitMQ Java client, can provide a custom identifier.\\r\\nIf set, the identifier will be mentioned in log entries and management UI. The identifier is known as\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"client-provided connection name\"\n      }), \". The name can be used to identify an application or a specific component\\r\\nwithin an application. The name is optional; however, developers are strongly encouraged to provide one\\r\\nas it would significantly simplify certain operational tasks.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"RabbitMQ Java client's \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.a, {\n        href: \"https://rabbitmq.github.io/rabbitmq-java-client/api/current/com/rabbitmq/client/ConnectionFactory.html#newConnection(java.util.concurrent.ExecutorService,com.rabbitmq.client.Address%5B%5D,java.lang.String)\",\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"ConnectionFactory#newConnection\"\n        }), \" method overrides\"]\n      }), \"\\r\\naccept a client-provided connection name. Here's a modified connection example used above\\r\\nwhich provides such a name:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory factory = new ConnectionFactory();\\r\\nfactory.setUri(\\\"amqp://userName:password@hostName:portNumber/virtualHost\\\");\\r\\n// provides a custom connection name\\r\\nConnection conn = factory.newConnection(\\\"app:audit component:event-consumer\\\");\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"exchanges-and-queues\",\n      children: \"Using Exchanges and Queues\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Client applications work with [exchanges] and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/queues\",\n        children: \"queues\"\n      }), \",\\r\\nthe high-level \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/tutorials/amqp-concepts\",\n        children: \"building blocks of the protocol\"\n      }), \".\\r\\nThese must be declared before they can be used. Declaring either type of object\\r\\nsimply ensures that one of that name exists, creating it if necessary.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Continuing the previous example, the following code declares an exchange and a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/queues#server-named-queues\",\n        children: \"server-named queue\"\n      }), \",\\r\\nthen binds them together.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.exchangeDeclare(exchangeName, \\\"direct\\\", true);\\r\\nString queueName = channel.queueDeclare().getQueue();\\r\\nchannel.queueBind(queueName, exchangeName, routingKey);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This will actively declare the following objects,\\r\\nboth of which can be customised by using additional parameters.\\r\\nHere neither of them have any special arguments.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"a durable, non-autodelete exchange of \\\"direct\\\" type\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"a non-durable, exclusive, autodelete queue with a generated name\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The above function calls then bind the queue to the exchange with the\\r\\ngiven routing key.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Note that this would be a typical way to declare a queue when only one\\r\\nclient wants to work with it: it doesn't need a well-known name, no\\r\\nother client can use it (exclusive) and will be cleaned up\\r\\nautomatically (autodelete). If several clients want to share a queue\\r\\nwith a well-known name, this code would be appropriate:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.exchangeDeclare(exchangeName, \\\"direct\\\", true);\\r\\nchannel.queueDeclare(queueName, true, false, false, null);\\r\\nchannel.queueBind(queueName, exchangeName, routingKey);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This will actively declare:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"a durable, non-autodelete exchange of \\\"direct\\\" type\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"a durable, non-exclusive, non-autodelete queue with a well-known name\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Many \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \" API methods are overloaded.\\r\\nThese convenient short forms of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"exchangeDeclare\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"queueDeclare\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"queueBind\"\n      }), \"\\r\\nuse sensible defaults. There are also longer forms with more parameters, to let you override these defaults\\r\\nas necessary, giving full control where needed.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This \\\"short form, long form\\\" pattern is used throughout the client API uses.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"passive-declaration\",\n      children: \"Passive Declaration\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Queues and exchanges can be declared \\\"passively\\\". A passive declare simply checks that the entity\\r\\nwith the provided name exists. If it does, the operation is a no-op. For queues successful\\r\\npassive declares will return the same information as non-passive ones, namely the number of\\r\\nconsumers and messages in \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/confirms\",\n        children: \"ready state\"\n      }), \" in the queue.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If the entity does not exist, the operation fails with a channel level exception. The channel\\r\\ncannot be used after that. A new channel should be opened. It is common to use one-off (temporary)\\r\\nchannels for passive declarations.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#queueDeclarePassive\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#exchangeDeclarePassive\"\n      }), \" are the\\r\\nmethods used for passive declaration. The following example demonstrates \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#queueDeclarePassive\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"Queue.DeclareOk response = channel.queueDeclarePassive(\\\"queue-name\\\");\\r\\n// returns the number of messages in Ready state in the queue\\r\\nresponse.getMessageCount();\\r\\n// returns the number of consumers the queue has\\r\\nresponse.getConsumerCount();\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#exchangeDeclarePassive\"\n      }), \"'s return value contains no useful information. Therefore\\r\\nif the method returns and no channel exceptions occurs, it means that the exchange does exist.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"nowait-methods\",\n      children: \"Operations with Optional Responses\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Some common operations also have a \\\"no wait\\\" version which won't wait for server\\r\\nresponse. For example, to declare a queue and instruct the server to not send any\\r\\nresponse, use\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.queueDeclareNoWait(queueName, true, false, false, null);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \\\"no wait\\\" versions are more efficient but offer lower safety guarantees, e.g. they\\r\\nare more dependent on the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/heartbeats\",\n        children: \"heartbeat mechanism\"\n      }), \" for detection of failed operations.\\r\\nWhen in doubt, start with the standard version. The \\\"no wait\\\" versions are only needed in scenarios\\r\\nwith high topology (queue, binding) churn.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"deleting-entities\",\n      children: \"Deleting Entities and Purging Messages\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A queue or exchange can be explicitly deleted:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.queueDelete(\\\"queue-name\\\")\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"It is possible to delete a queue only if it is empty:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.queueDelete(\\\"queue-name\\\", false, true)\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"or if it is not used (does not have any consumers):\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.queueDelete(\\\"queue-name\\\", true, false)\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A queue can be purged (all of its messages deleted):\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.queuePurge(\\\"queue-name\\\")\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"publishing\",\n      children: \"Publishing Messages\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To publish a message to an exchange, use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel.basicPublish\"\n      }), \" as follows:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"byte[] messageBodyBytes = \\\"Hello, world!\\\".getBytes();\\r\\nchannel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For fine control, use overloaded variants to specify the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mandatory\"\n      }), \" flag,\\r\\nor send messages with pre-set message properties (see the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/publishers\",\n        children: \"Publishers guide\"\n      }), \" for details):\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.basicPublish(exchangeName, routingKey, mandatory,\\r\\n                     MessageProperties.PERSISTENT_TEXT_PLAIN,\\r\\n                     messageBodyBytes);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This sends a message with delivery mode 2 (persistent), priority 1\\r\\nand content-type \\\"text/plain\\\". Use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Builder\"\n      }), \" class to build a\\r\\nmessage properties object with as many properties as needed, for example:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.basicPublish(exchangeName, routingKey,\\r\\n             new AMQP.BasicProperties.Builder()\\r\\n               .contentType(\\\"text/plain\\\")\\r\\n               .deliveryMode(2)\\r\\n               .priority(1)\\r\\n               .userId(\\\"bob\\\")\\r\\n               .build(),\\r\\n               messageBodyBytes);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This example publishes a message with custom headers:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"Map<String, Object> headers = new HashMap<String, Object>();\\r\\nheaders.put(\\\"latitude\\\",  51.5252949);\\r\\nheaders.put(\\\"longitude\\\", -0.0905493);\\r\\n\\r\\nchannel.basicPublish(exchangeName, routingKey,\\r\\n             new AMQP.BasicProperties.Builder()\\r\\n               .headers(headers)\\r\\n               .build(),\\r\\n               messageBodyBytes);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This example publishes a message with expiration:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.basicPublish(exchangeName, routingKey,\\r\\n             new AMQP.BasicProperties.Builder()\\r\\n               .expiration(\\\"60000\\\")\\r\\n               .build(),\\r\\n               messageBodyBytes);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"This is just a brief set of examples that does not demonstrate every\\r\\nsupported property.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"BasicProperties\"\n      }), \" is an inner class of an outer class, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"AMQP\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Invocations of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#basicPublish\"\n      }), \" will eventually block if a\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/alarms\",\n        children: \"resource-driven alarm\"\n      }), \" is in effect.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"concurrency\",\n      children: \"Channels and Concurrency Considerations (Thread Safety)\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Sharing \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \" instances between\\r\\nthreads should be avoided. Applications\\r\\nshould be using a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \" per thread\\r\\ninstead of sharing the same \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \" across\\r\\nmultiple threads.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"While some operations on channels are safe to invoke\\r\\nconcurrently, some are not and will result in incorrect frame interleaving\\r\\non the wire, double acknowledgements and so on.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Concurrent publishing on a shared channel can result in\\r\\nincorrect frame interleaving on the wire, triggering a\\r\\nconnection-level protocol exception and immediate connection closure by the broker.\\r\\nIt therefore requires explicit synchronization in application\\r\\ncode (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#basicPublish\"\n      }), \" must be invoked in a\\r\\ncritical section). Sharing channels between threads will also\\r\\ninterfere with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/confirms\",\n        children: \"Publisher\\r\\nConfirms\"\n      }), \". Concurrent publishing on a shared channel is best avoided entirely,\\r\\ne.g. by using a channel per thread.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to use channel pooling to avoid concurrent\\r\\npublishing on a shared channel: once a thread is done working\\r\\nwith a channel, it returns it to the pool, making the\\r\\nchannel available for another thread. Channel pooling can be\\r\\nthought of as a specific synchronization solution. It is\\r\\nrecommended that an existing pooling library is used\\r\\ninstead of a homegrown solution. For example, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://projects.spring.io/spring-amqp/\",\n        children: \"Spring AMQP\"\n      }), \"\\r\\nwhich comes with a ready-to-use channel pooling feature.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Channels consume resources and in most cases applications very rarely need more than a few hundreds\\r\\nopen channels in the same JVM process. If we assume that the application\\r\\nhas a thread for each channel (as channel shouldn't be used concurrently), thousands\\r\\nof threads for a single JVM is already a fair amount of overhead that likely can be avoided.\\r\\nMoreover a few fast publishers can easily saturate a network interface and a broker node:\\r\\npublishing involves less work than routing, storing and delivering messages.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A classic anti-pattern to be avoided is opening a channel for each published message. Channels\\r\\nare supposed to be reasonably long-lived and opening a new one is a network round-trip which\\r\\nmakes this pattern extremely inefficient.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Consuming in one thread and publishing in another thread on a shared channel\\r\\ncan be safe.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Server-pushed deliveries (see the section below) are\\r\\ndispatched concurrently with a guarantee that per-channel\\r\\nordering is preserved.  The dispatch mechanism uses a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"java.util.concurrent.ExecutorService\"\n        })\n      }), \",\\r\\none per connection.  It is possible to provide a custom\\r\\nexecutor that will be shared by all connections produced by a\\r\\nsingle \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ConnectionFactory\"\n      }), \" using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ConnectionFactory#setSharedExecutor\"\n      }), \" setter.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/confirms\",\n        children: \"manual acknowledgements\"\n      }), \" are used, it is important\\r\\nto consider what thread does the acknowledgement. If it's different from the\\r\\nthread that received the delivery (e.g. \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer#handleDelivery\"\n      }), \"\\r\\ndelegated delivery handling to a different thread), acknowledging\\r\\nwith the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"multiple\"\n      }), \" parameter set to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"true\"\n      }), \" is unsafe\\r\\nand will result in double-acknowledgements, and therefore a channel-level protocol\\r\\nexception that closes the channel. Acknowledging a single message at a time\\r\\ncan be safe.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"consuming\",\n      children: \"Receiving Messages by Subscription (\\\"Push API\\\")\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"import com.rabbitmq.client.Consumer;\\r\\nimport com.rabbitmq.client.DefaultConsumer;\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The most efficient way to receive messages is to set up a\\r\\nsubscription using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \"\\r\\ninterface. The messages will then be delivered\\r\\nautomatically as they arrive, rather than having to be\\r\\nexplicitly requested.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When calling the API methods relating to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \"s, individual subscriptions are\\r\\nalways referred to by their consumer tags. A consumer tag is a consumer\\r\\nidentifier which can be either client- or server-generated. To let\\r\\nRabbitMQ generate a node-wide unique tag, use a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#basicConsume\"\n      }), \" override\\r\\nthat doesn't take a consumer tag argument or pass an empty string\\r\\nfor consumer tag and use the value returned by \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#basicConsume\"\n      }), \".\\r\\nConsumer tags are used to cancel consumers.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Distinct \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \" instances must have distinct\\r\\nconsumer tags. Duplicate consumer tags on a connection is\\r\\nstrongly discouraged and can lead to issues with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#connection-recovery\",\n        children: \"automatic\\r\\nconnection recovery\"\n      }), \" and confusing monitoring data when\\r\\nconsumers are monitored.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The easiest way to implement a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \" is to\\r\\nsubclass the convenience class \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"DefaultConsumer\"\n      }), \".\\r\\nAn object of this subclass can be passed on a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basicConsume\"\n      }), \"\\r\\ncall to set up the subscription:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"boolean autoAck = false;\\r\\nchannel.basicConsume(queueName, autoAck, \\\"myConsumerTag\\\",\\r\\n     new DefaultConsumer(channel) {\\r\\n         @Override\\r\\n         public void handleDelivery(String consumerTag,\\r\\n                                    Envelope envelope,\\r\\n                                    AMQP.BasicProperties properties,\\r\\n                                    byte[] body)\\r\\n             throws IOException\\r\\n         {\\r\\n             String routingKey = envelope.getRoutingKey();\\r\\n             String contentType = properties.getContentType();\\r\\n             long deliveryTag = envelope.getDeliveryTag();\\r\\n             <i>// (process the message components here ...)</i>\\r\\n             channel.basicAck(deliveryTag, false);\\r\\n         }\\r\\n     });\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Here, since we specified \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"autoAck = false\"\n      }), \",\\r\\nit is necessary to acknowledge messages delivered to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \",\\r\\nmost conveniently done in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"handleDelivery\"\n      }), \"\\r\\nmethod, as illustrated.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"More sophisticated \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \"s will need to override further\\r\\nmethods.  In particular, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"handleShutdownSignal\"\n      }), \"\\r\\nis called when channels and connections close, and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"handleConsumeOk\"\n      }), \" is passed the consumer tag\\r\\nbefore any other callbacks to that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \" are called.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \"s can also implement the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"handleCancelOk\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"handleCancel\"\n      }), \"\\r\\nmethods to be notified of explicit and implicit cancellations,\\r\\nrespectively.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"You can explicitly cancel a particular \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \" with\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel.basicCancel\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.basicCancel(consumerTag);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"passing the consumer tag.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Just like with publishers, it is important to consider concurrency\\r\\nhazard safety for consumers.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Callbacks to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \"s are dispatched in a thread\\r\\npool separate from the thread that instantiated its\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \".  This means that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \"s\\r\\ncan safely call blocking methods on the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Connection\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \", such as\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#queueDeclare\"\n      }), \" or \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#basicCancel\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Each \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \" will dispatch all deliveries to its \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \" handler methods on it\\r\\nin order they were sent by RabbitMQ.\\r\\nOrdering of deliveries between channels is not guaranteed: those\\r\\ndeliveries can be dispatched in parallel.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"For the most common use case of one \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \" per\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \", this means \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \"s do\\r\\nnot hold up other \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \"s.\\r\\nWith multiple \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \"s per \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \" be aware that\\r\\na long-running \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \" may hold up dispatch of\\r\\ncallbacks to other \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \"s on that\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Please refer to the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#concurrency\",\n        children: \"Concurrency Considerations\"\n      }), \" (Thread Safety)\\r\\nsection for other topics related to concurrency and\\r\\nconcurrency hazard safety.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"getting\",\n      children: \"Retrieving Individual Messages (\\\"Pull API\\\")\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is also possible to retrieve individual messages on demand (\\\"pull API\\\" a.k.a. polling).\\r\\nThis approach to consumption is highly inefficient as it is effectively polling\\r\\nand applications repeatedly have to ask for results even if the vast majority of the requests\\r\\nyield no results. Therefore using this approach \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"is highly discouraged\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To \\\"pull\\\" a message, use the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel.basicGet\"\n      }), \" method.  The returned value is an\\r\\ninstance of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"GetResponse\"\n      }), \", from which the header information (properties)\\r\\nand message body can be extracted:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"boolean autoAck = false;\\r\\nGetResponse response = channel.basicGet(queueName, autoAck);\\r\\nif (response == null) {\\r\\n    // No message retrieved.\\r\\n} else {\\r\\n    AMQP.BasicProperties props = response.getProps();\\r\\n    byte[] body = response.getBody();\\r\\n    long deliveryTag = response.getEnvelope().getDeliveryTag();\\r\\n    // ...\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"and since this example uses \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/confirms\",\n        children: \"manual acknowledgements\"\n      }), \" (the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"autoAck = false\"\n      }), \" above),\\r\\nyou must also call \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel.basicAck\"\n      }), \" to acknowledge that you have successfully received the message:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"// ...\\r\\nchannel.basicAck(method.deliveryTag, false); // acknowledge receipt of the message\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"returning\",\n      children: \"Handling unroutable messages\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If a message is published with the \\\"mandatory\\\" flags set,\\r\\nbut cannot be routed, the broker will return it to the\\r\\nsending client (via an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"AMQP.Basic.Return\"\n      }), \"\\r\\ncommand).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To be notified of such returns, clients can implement the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ReturnListener\"\n      }), \"\\r\\ninterface and call \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel.addReturnListener\"\n      }), \".\\r\\nIf the client has not configured a return listener for a particular channel,\\r\\nthen the associated returned messages will be silently dropped.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"channel.addReturnListener(new ReturnListener() {\\r\\n    public void handleReturn(int replyCode,\\r\\n                                  String replyText,\\r\\n                                  String exchange,\\r\\n                                  String routingKey,\\r\\n                                  AMQP.BasicProperties properties,\\r\\n                                  byte[] body)\\r\\n    throws IOException {\\r\\n        ...\\r\\n    }\\r\\n});\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"A return listener will be called, for example, if the client publishes a message with\\r\\nthe \\\"mandatory\\\" flag set to an exchange of \\\"direct\\\" type which is not bound to a queue.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"shutdown\",\n      children: \"Shutdown Protocol\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"shutdown-overview\",\n      children: \"Overview of the Client Shutdown Process\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The AMQP 0-9-1 connection and channel share the same general\\r\\napproach to managing network failure, internal failure,\\r\\nand explicit local shutdown.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The AMQP 0-9-1 connection and channel have the following lifecycle states:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"open\"\n          }), \": the object is ready to use\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"closing\"\n          }), \": the object has been explicitly\\r\\nnotified to shut down locally, has issued a shutdown\\r\\nrequest to any supporting lower-layer objects, and is\\r\\nwaiting for their shutdown procedures to complete\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"closed\"\n          }), \": the object has received all\\r\\nshutdown-complete notification(s) from any lower-layer\\r\\nobjects, and as a consequence has shut itself down\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Those objects always end up in the closed state,\\r\\nregardless of the reason that caused the closure, like\\r\\nan application request, an internal client library\\r\\nfailure, a remote network request or network failure.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The connection and channel objects possess the\\r\\nfollowing shutdown-related methods:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"addShutdownListener(ShutdownListener listener)\"\n          }), \" and\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"removeShutdownListener(ShutdownListener listener)\"\n          }), \", to manage any listeners, which will\\r\\nbe fired when the object transitions to\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"closed\"\n          }), \" state. Note that, adding a\\r\\nShutdownListener to an object that is already closed\\r\\nwill fire the listener immediately\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"getCloseReason()\"\n          }), \", to allow the\\r\\ninvestigation of what was the reason of the object's\\r\\nshutdown\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"isOpen()\"\n          }), \", useful for testing whether the\\r\\nobject is in an open state\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"close(int closeCode, String closeMessage)\"\n          }), \", to explicitly notify the object\\r\\nto shut down\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Simple usage of listeners would look like:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"import com.rabbitmq.client.ShutdownSignalException;\\r\\nimport com.rabbitmq.client.ShutdownListener;\\r\\n\\r\\nconnection.addShutdownListener(new ShutdownListener() {\\r\\n    public void shutdownCompleted(ShutdownSignalException cause)\\r\\n    {\\r\\n        ...\\r\\n    }\\r\\n});\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"shutdown-cause\",\n      children: \"Information about the circumstances of a shutdown\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"One can retrieve the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ShutdownSignalException\"\n      }), \", which contains all\\r\\nthe information available about the close reason, either\\r\\nby explicitly calling the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"getCloseReason()\"\n      }), \"\\r\\nmethod or by using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"cause\"\n      }), \" parameter in\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"service(ShutdownSignalException cause)\"\n      }), \"\\r\\nmethod of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ShutdownListener\"\n      }), \" class.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ShutdownSignalException\"\n      }), \" class provides\\r\\nmethods to analyze the reason of the shutdown. By\\r\\ncalling the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"isHardError()\"\n      }), \" method we get\\r\\ninformation whether it was a connection or a channel\\r\\nerror, and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"getReason()\"\n      }), \" returns information\\r\\nabout the cause, in the form an AMQP method - either\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"AMQP.Channel.Close\"\n      }), \" or\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"AMQP.Connection.Close\"\n      }), \" (or null if the cause\\r\\nwas some exception in the library, such as a network\\r\\ncommunication failure, in which case that exception can\\r\\nbe retrieved with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"getCause()\"\n      }), \").\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"public void shutdownCompleted(ShutdownSignalException cause)\\r\\n{\\r\\n  if (cause.isHardError())\\r\\n  {\\r\\n    Connection conn = (Connection)cause.getReference();\\r\\n    if (!cause.isInitiatedByApplication())\\r\\n    {\\r\\n      Method reason = cause.getReason();\\r\\n      ...\\r\\n    }\\r\\n    ...\\r\\n  } else {\\r\\n    Channel ch = (Channel)cause.getReference();\\r\\n    ...\\r\\n  }\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"shutdown-atomicity\",\n      children: \"Atomicity and use of the isOpen() method\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Use of the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"isOpen()\"\n      }), \" method of channel and\\r\\nconnection objects is not recommended for production\\r\\ncode, because the value returned by the method is\\r\\ndependent on the existence of the shutdown cause.  The\\r\\nfollowing code illustrates the possibility of race\\r\\nconditions:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"public void brokenMethod(Channel channel)\\r\\n{\\r\\n    if (channel.isOpen())\\r\\n    {\\r\\n        // The following code depends on the channel being in open state.\\r\\n        // However there is a possibility of the change in the channel state\\r\\n        // between isOpen() and basicQos(1) call\\r\\n        ...\\r\\n        channel.basicQos(1);\\r\\n    }\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Instead, we should normally ignore such checking, and\\r\\nsimply attempt the action desired. If during the\\r\\nexecution of the code the channel of the connection is\\r\\nclosed, a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ShutdownSignalException\"\n      }), \" will be\\r\\nthrown indicating that the object is in an invalid\\r\\nstate. We should also catch for \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"IOException\"\n      }), \"\\r\\ncaused either by \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"SocketException\"\n      }), \", when\\r\\nbroker closes the connection unexpectedly, or\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ShutdownSignalException\"\n      }), \", when broker\\r\\ninitiated clean close.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"public void validMethod(Channel channel)\\r\\n{\\r\\n    try {\\r\\n        ...\\r\\n        channel.basicQos(1);\\r\\n    } catch (ShutdownSignalException sse) {\\r\\n        // possibly check if channel was closed\\r\\n        // by the time we started action and reasons for\\r\\n        // closing it\\r\\n        ...\\r\\n    } catch (IOException ioe) {\\r\\n        // check why connection was closed\\r\\n        ...\\r\\n    }\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"advanced-connection\",\n      children: \"Advanced Connection options\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"consumer-thread-pool\",\n      children: \"Consumer Operation Thread Pool\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \" threads (see \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#consuming\",\n        children: \"Receiving\"\n      }), \" below) are\\r\\nautomatically allocated in a new \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ExecutorService\"\n      }), \" thread pool\\r\\nby default. If greater control is required supply an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ExecutorService\"\n      }), \" on the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"newConnection()\"\n      }), \" method, so that this pool of threads is\\r\\nused instead. Here is an example where a larger thread pool is\\r\\nsupplied than is normally allocated:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ExecutorService es = Executors.newFixedThreadPool(20);\\r\\nConnection conn = factory.newConnection(es);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Both \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Executors\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ExecutorService\"\n      }), \" classes\\r\\nare in the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"java.util.concurrent\"\n      }), \" package.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When the connection is closed a default \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ExecutorService\"\n      }), \"\\r\\nwill be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"shutdown()\"\n      }), \", but a user-supplied\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ExecutorService\"\n      }), \" (like \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"es\"\n      }), \" above) will\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"not\"\n      }), \" be \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"shutdown()\"\n      }), \".\\r\\nClients that supply a custom \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ExecutorService\"\n      }), \" must ensure\\r\\nit is shutdown eventually (by calling its \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"shutdown()\"\n      }), \"\\r\\nmethod), or else the pool's threads may prevent JVM termination.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The same executor service may be shared between multiple connections,\\r\\nor serially re-used on re-connection but it cannot be used after it is\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"shutdown()\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Use of this feature should only be considered if there is evidence\\r\\nthat there is a severe bottleneck in the processing of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \"\\r\\ncallbacks.\\r\\nIf there are no \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Consumer\"\n      }), \" callbacks executed, or very few, the default\\r\\nallocation is more than sufficient. The overhead is initially minimal and\\r\\nthe total thread resources allocated are bounded, even if a burst of consumer\\r\\nactivity may occasionally occur.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"service-discovery-with-address-resolver\",\n      children: \"Service discovery with the AddressResolver interface\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to use an implementation of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"AddressResolver\"\n      }), \" to change the endpoint resolution algorithm\\r\\nused at connection time:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"Connection conn = factory.newConnection(addressResolver);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"AddressResolver\"\n      }), \" interface is like the following:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"public interface AddressResolver {\\r\\n\\r\\n  List<Address> getAddresses() throws IOException;\\r\\n\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Just like with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#endpoints-list\",\n        children: \"a list of endpoints\"\n      }), \",\\r\\nthe first \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Address\"\n      }), \" returned will be tried first, then\\r\\nthe second if the client fails to connect to the first, and so on.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"If an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ExecutorService\"\n      }), \" is provided as well (using the\\r\\nform \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"factory.newConnection(es, addressResolver)\"\n      }), \") the thread pool is\\r\\nassociated with the (first) successful connection.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"AddressResolver\"\n      }), \" is the perfect place to implement\\r\\ncustom service discovery logic, which is especially useful in a dynamic\\r\\ninfrastructure. Combined with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#recovery\",\n        children: \"automatic recovery\"\n      }), \",\\r\\nthe client can automatically connect to nodes that weren't even up\\r\\nwhen it was first started. Affinity and load balancing are other\\r\\nscenarios where a custom \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"AddressResolver\"\n      }), \" could be useful.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The Java client ships with the following implementations\\r\\n(see the javadoc for details):\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"DnsRecordIpAddressResolver\"\n          }), \": given the name\\r\\nof a host, returns its IP addresses (resolution against\\r\\nthe platform DNS server). This can be useful for simple\\r\\nDNS-based load balancing or failover.\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n            children: \"DnsSrvRecordAddressResolver\"\n          }), \": given the name\\r\\nof a service, returns hostname/port pairs. The search is\\r\\nimplemented as a DNS SRV request. This can be useful\\r\\nwhen using a service registry like \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n            href: \"https://www.consul.io/\",\n            children: \"HashiCorp Consul\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"heartbeats-timeout\",\n      children: \"Heartbeat Timeout\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"See the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/heartbeats\",\n        children: \"Heartbeats guide\"\n      }), \" for more information about heartbeats and how to configure them in the Java client.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"thread-factories\",\n      children: \"Custom Thread Factories\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Environments such as Google App Engine (GAE) can \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        href: \"https://developers.google.com/appengine/docs/java/#Java_The_sandbox\",\n        children: \"restrict\\r\\ndirect thread instantiation\"\n      }), \". To use RabbitMQ Java client in such environments,\\r\\nit's necessary to configure a custom \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ThreadFactory\"\n      }), \" that uses\\r\\nan appropriate method to instantiate threads, e.g. GAE's \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ThreadManager\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Below is an example for Google App Engine.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"import com.google.appengine.api.ThreadManager;\\r\\n\\r\\nConnectionFactory cf = new ConnectionFactory();\\r\\ncf.setThreadFactory(ThreadManager.backgroundThreadFactory());\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"java-nio\",\n      children: \"Support for Java non-blocking IO\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Version 4.0 of the Java client brings support for Java non-blocking\\r\\nIO (a.k.a Java NIO). NIO isn't supposed to be faster than blocking IO,\\r\\nit simply allows to control resources (in this case, threads) more easily.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"With the default blocking IO mode, each connection uses a thread to read\\r\\nfrom the network socket. With the NIO mode, you can control the number of\\r\\nthreads that read and write from/to the network socket.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Use the NIO mode if your Java process uses many connections (dozens or hundreds).\\r\\nYou should use fewer threads than with the default blocking mode. With the\\r\\nappropriate number of threads set, you shouldn't\\r\\nexperience any decrease in performance, especially if the connections are\\r\\nnot so busy.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"NIO must be enabled explicitly:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory connectionFactory = new ConnectionFactory();\\r\\nconnectionFactory.useNio();\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The NIO mode can be configured through the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"NioParams\"\n      }), \" class:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"  connectionFactory.setNioParams(new NioParams().setNbIoThreads(4));\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The NIO mode uses reasonable defaults, but you may need to change them according\\r\\nto your own workload. Some of the settings are: the total number of IO\\r\\nthreads used, the size of buffers, a service executor to use for the IO loops,\\r\\nparameters for the in-memory write queue (write requests are enqueued before\\r\\nbeing sent on the network). Please read the Javadoc for details and defaults.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"recovery\",\n      children: \"Automatic Recovery From Network Failures\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"connection-recovery\",\n      children: \"Connection Recovery\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Network connection between clients and RabbitMQ nodes can fail.\\r\\nRabbitMQ Java client supports automatic recovery of connections\\r\\nand topology (queues, exchanges, bindings, and consumers).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The automatic recovery process for many applications follows the following steps:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Reconnect\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Restore connection listeners\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Re-open channels\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Restore channel listeners\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Restore channel \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"basic.qos\"\n        }), \" setting, publisher confirms and transaction settings\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Topology recovery includes the following actions, performed for every channel\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Re-declare exchanges (except for predefined ones)\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Re-declare queues\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Recover all bindings\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Recover all consumers\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"As of version 4.0.0 of the Java client, automatic recovery is enabled\\r\\nby default (and thus topology recovery as well).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Topology recovery relies on a per-connection cache of entities (queues, exchanges,\\r\\nbindings, consumers). When, say, a queue is declared on a connection, it will be added to the cache.\\r\\nWhen it is deleted or is scheduled for deletion (e.g. because it is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/queues\",\n        children: \"auto-deleted\"\n      }), \")\\r\\nit will be removed. This model has some limitations covered below.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To disable or enable automatic connection recovery, use\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"factory.setAutomaticRecoveryEnabled(boolean)\"\n      }), \"\\r\\nmethod. The following snippet shows how to explicitly\\r\\nenable automatic recovery (e.g. for Java client prior 4.0.0):\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory factory = new ConnectionFactory();\\r\\nfactory.setUsername(userName);\\r\\nfactory.setPassword(password);\\r\\nfactory.setVirtualHost(virtualHost);\\r\\nfactory.setHost(hostName);\\r\\nfactory.setPort(portNumber);\\r\\nfactory.setAutomaticRecoveryEnabled(true);\\r\\n// connection that will recover automatically\\r\\nConnection conn = factory.newConnection();\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If recovery fails due to an exception (e.g. RabbitMQ node is\\r\\nstill not reachable), it will be retried after a fixed time interval (default\\r\\nis 5 seconds). The interval can be configured:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory factory = new ConnectionFactory();\\r\\n// attempt recovery every 10 seconds\\r\\nfactory.setNetworkRecoveryInterval(10000);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When a list of addresses is provided, the list is shuffled and\\r\\nall addresses are tried, one after the next:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory factory = new ConnectionFactory();\\r\\n\\r\\nAddress[] addresses = {new Address(\\\"192.168.1.4\\\"), new Address(\\\"192.168.1.5\\\")};\\r\\nfactory.newConnection(addresses);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"recovery-triggers\",\n      children: \"When Will Connection Recovery Be Triggered?\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Automatic connection recovery, if enabled, will be triggered by the following events:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"An I/O exception is thrown in connection's I/O loop\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"A socket read operation times out\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Missed server \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n          href: \"/docs/heartbeats\",\n          children: \"heartbeats\"\n        }), \" are detected\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Any other unexpected exception is thrown in connection's I/O loop\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"whichever happens first.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"If initial client connection to a RabbitMQ node fails, automatic connection\\r\\nrecovery won't kick in. Applications developers are responsible for retrying\\r\\nsuch connections, logging failed attempts, implementing a limit to the number\\r\\nof retries and so on. Here's a very basic example:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory factory = new ConnectionFactory();\\r\\n// configure various connection settings\\r\\n\\r\\ntry {\\r\\n  Connection conn = factory.newConnection();\\r\\n} catch (java.net.ConnectException e) {\\r\\n  Thread.sleep(5000);\\r\\n  // apply retry logic\\r\\n}\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When a connection is closed by the application via the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Connection.Close\"\n      }), \" method,\\r\\nconnection recovery will not be initiated.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Channel-level exceptions will not trigger any kind of recovery as they usually\\r\\nindicate a semantic issue in the application (e.g. an attempt to consume from a\\r\\nnon-existent queue).\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"recovery-listeners\",\n      children: \"Recovery Listeners\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to register one or more recovery listeners on recoverable connections\\r\\nand channels. When connection recovery is enabled, connections returned by\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ConnectionFactory#newConnection\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Connection#createChannel\"\n      }), \"\\r\\nimplement \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"com.rabbitmq.client.Recoverable\"\n      }), \", providing two methods with\\r\\nfairly descriptive names:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"addRecoveryListener\"\n        })\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"removeRecoveryListener\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note that you currently need to cast connections and channels to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Recoverable\"\n      }), \"\\r\\nin order to use those methods.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"publishers\",\n      children: \"Effects on Publishing\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Messages that are published using \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel.basicPublish\"\n      }), \" when connection is down\\r\\nwill be lost. The client does not enqueue them for delivery after connection has recovered.\\r\\nTo ensure that published messages reach RabbitMQ applications need to use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/confirms\",\n        children: \"Publisher Confirms\"\n      }), \"\\r\\nand account for connection failures.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"topology-recovery\",\n      children: \"Topology Recovery\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Topology recovery involves recovery of exchanges, queues, bindings\\r\\nand consumers. It is enabled by default when automatic recovery is\\r\\nenabled. Topology recovery is enabled by default in modern versions of the client.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Topology recovery can be disabled explicitly if needed:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory factory = new ConnectionFactory();\\r\\n\\r\\nConnection conn = factory.newConnection();\\r\\n// enable automatic recovery (e.g. Java client prior 4.0.0)\\r\\nfactory.setAutomaticRecoveryEnabled(true);\\r\\n// disable topology recovery\\r\\nfactory.setTopologyRecoveryEnabled(false);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"automatic-recovery-limitations\",\n      children: \"Failure Detection and Recovery Limitations\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Automatic connection recovery has a number of limitations and intentional\\r\\ndesign decisions that applications developers need to be aware of.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Topology recovery relies on a per-connection cache of entities (queues, exchanges,\\r\\nbindings, consumers). When, say, a queue is declared on a connection, it will be added to the cache.\\r\\nWhen it is deleted or is scheduled for deletion (e.g. because it is \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/queues\",\n        children: \"auto-deleted\"\n      }), \")\\r\\nit will be removed. This makes it possible to declare and delete entities on different\\r\\nchannels without having unexpected results. It also means that consumer tags (a channel-specific identifier)\\r\\nmust be unique across all channels on connections that use automatic connection recovery.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When a connection is down or lost, it \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/heartbeats\",\n        children: \"takes time to detect\"\n      }), \".\\r\\nTherefore there is a window of time in which both the\\r\\nlibrary and the application are unaware of effective\\r\\nconnection failure.  Any messages published during this\\r\\ntime frame are serialised and written to the TCP socket\\r\\nas usual. Their delivery to the broker can only be\\r\\nguaranteed via \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/confirms\",\n        children: \"publisher\\r\\nconfirms\"\n      }), \": publishing in AMQP 0-9-1 is entirely\\r\\nasynchronous by design.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When a socket or I/O operation error is detected by a\\r\\nconnection with automatic recovery enabled, recovery\\r\\nbegins after a configurable delay, 5 seconds by\\r\\ndefault. This design assumes that even though a lot of\\r\\nnetwork failures are transient and generally short\\r\\nlived, they do not go away in an instant. Having a delay\\r\\nalso avoids an inherent race condition between server-side resource\\r\\ncleanup (such as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/queues\",\n        children: \"exclusive or auto-delete queue\"\n      }), \" deletion)\\r\\nand operations performed on a newly opened connection on the same resources.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Connection recovery attempts by default will continue at identical time intervals until\\r\\na new connection is successfully opened.\\r\\nRecovery delay can be made dynamic by providing a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RecoveryDelayHandler\"\n      }), \"\\r\\nimplementation instance to \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ConnectionFactory#setRecoveryDelayHandler\"\n      }), \".\\r\\nImplementations that use dynamically computed delay intervals should avoid\\r\\nvalues that are too low (such as values that are lower than 2 seconds).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"When a connection is in the recovering state, any\\r\\npublishes attempted on its channels will be rejected\\r\\nwith an exception. The client currently does not perform\\r\\nany internal buffering of such outgoing messages. It is\\r\\nan application developer's responsibility to keep track of such\\r\\nmessages and republish them when recovery succeeds.\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/confirms\",\n        children: \"Publisher confirms\"\n      }), \" is a protocol extension\\r\\nthat should be used by publishers that cannot afford message loss.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Connection recovery will not kick in when a channel is closed due to a\\r\\nchannel-level exception. Such exceptions often indicate application-level\\r\\nissues. The library cannot make an informed decision about when that's\\r\\nthe case.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Closed channels won't be recovered even after connection recovery kicks in.\\r\\nThis includes both explicitly closed channels and the channel-level exception\\r\\ncase above.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"recovery-and-acknowledgements\",\n      children: \"Manual Acknowledgements and Automatic Recovery\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"When manual acknowledgements are used, it is possible that\\r\\nnetwork connection to RabbitMQ node fails between message\\r\\ndelivery and acknowledgement. After connection recovery,\\r\\nRabbitMQ will reset delivery tags on all channels.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"This means that \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n        children: \"basic.ack\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n        children: \"basic.nack\"\n      }), \", and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"i\", {\n        children: \"basic.reject\"\n      }), \"\\r\\nwith old delivery tags will cause a channel exception. To avoid this,\\r\\nRabbitMQ Java client keeps track of and updates delivery tags to make them monotonically\\r\\ngrowing between recoveries.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel.basicAck\"\n      }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel.basicNack\"\n      }), \", and\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel.basicReject\"\n      }), \" then translate adjusted\\r\\ndelivery tags into those used by RabbitMQ.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Acknowledgements with stale delivery tags will not be sent. Applications\\r\\nthat use manual acknowledgements and automatic recovery must\\r\\nbe capable of handling redeliveries.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"recovery-channel-lifecycle\",\n      children: \"Channels Lifecycle and Topology Recovery\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Automatic connection recovery is meant to be as transparent as possible\\r\\nfor the application developer, that's why \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \" instances\\r\\nremain the same even if several connections fail and recover behind the scenes.\\r\\nTechnically, when automatic recovery is on, \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel\"\n      }), \" instances\\r\\nact as proxies or decorators: they delegate the AMQP business to an\\r\\nactual AMQP channel implementation and implement some recovery machinery around it.\\r\\nThat is why you shouldn't close a channel after it has created some resources\\r\\n(queues, exchanges, bindings) or topology recovery for those resources\\r\\nwill fail later, as the channel has been closed. Instead, leave creating channels open\\r\\nfor the life of the application.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"unhandled-exceptions\",\n      children: \"Unhandled Exceptions\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Unhandled exceptions related to connection, channel, recovery,\\r\\nand consumer lifecycle are delegated to the exception\\r\\nhandler. Exception handler is any object that implements the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ExceptionHandler\"\n      }), \" interface.  By default, an\\r\\ninstance of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"DefaultExceptionHandler\"\n      }), \" is used. It\\r\\nprints exception details to the standard output.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It is possible to override the handler using\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ConnectionFactory#setExceptionHandler\"\n      }), \". It will be\\r\\nused for all connections created by the factory:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory factory = new ConnectionFactory();\\r\\ncf.setExceptionHandler(customHandler);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Exception handlers should be used for exception logging.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"metrics\",\n      children: \"Metrics and Monitoring\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The client collects runtime metrics (e.g. number\\r\\nof published messages) for active connections. Metric collection is optional feature that should be set up\\r\\nat the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ConnectionFactory\"\n      }), \" level, using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"setMetricsCollector(metricsCollector)\"\n      }), \" method.\\r\\nThis method expects a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"MetricsCollector\"\n      }), \" instance, which is\\r\\ncalled in several places of the client code.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The client supports \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://micrometer.io\",\n        children: \"Micrometer\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://metrics.dropwizard.io\",\n        children: \"Dropwizard Metrics\"\n      }), \" and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://opentelemetry.io/\",\n        children: \"OpenTelemetry\"\n      }), \" out of the box.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Here are the collected metrics:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Number of open connections\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Number of open channels\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Number of published messages\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Number of confirmed messages\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Number of negatively acknowledged (nack-ed) outbound messages\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Number of unroutable outbound messages that got returned\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Number of failures of outbound messages\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Number of consumed messages\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Number of acknowledged messages\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Number of rejected messages\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Both Micrometer and Dropwizard Metrics provide counts, but also\\r\\nmean rate, last five minute rate, etc, for messages-related\\r\\nmetrics. They also support common tools for monitoring and reporting\\r\\n(JMX, Graphite, Ganglia, Datadog, etc). See the dedicated\\r\\nsections below for more details.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Developers should keep a few things in mind when enabling metric collection.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Don't forget to add the appropriate dependencies (in Maven, Gradle, or even as JAR files) to JVM\\r\\nclasspath when using Micrometer or Dropwizard Metrics.\\r\\nThose are optional dependencies and will not be pulled automatically with the Java client.\\r\\nYou may also need to add other dependencies depending on the reporting\\r\\nbackend(s) used.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"Metrics collection is extensible. Implementing a custom\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"MetricsCollector\"\n        }), \" for specific needs is encouraged.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li, {\n        children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"MetricsCollector\"\n        }), \" is set at the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n          children: \"ConnectionFactory\"\n        }), \"\\r\\nlevel but can be shared across different instances.\"]\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"Metrics collection doesn't support transactions. E.g. if an acknowledgment\\r\\nis sent in a transaction and the transaction is then rolled back,\\r\\nthe acknowledgment is counted in the client metrics (but not by the broker\\r\\nobviously). Note the acknowledgment is actually sent to the broker and\\r\\nthen cancelled by the transaction rollback, so the client metrics\\r\\nare correct in term of acknowledgments sent. As a summary, don't use\\r\\nclient metrics for critical business logic, they're not guaranteed\\r\\nto be perfectly accurate. They are meant to be used to simplify reasoning\\r\\nabout a running system and make operations more efficient.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"metrics-micrometer\",\n      children: \"Micrometer support\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Metric collection has to be enabled first:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://micrometer.io\",\n        children: \"Micrometer\"\n      }), \" the following way:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory connectionFactory = new ConnectionFactory();\\r\\nMicrometerMetricsCollector metrics = new MicrometerMetricsCollector();\\r\\nconnectionFactory.setMetricsCollector(metrics);\\r\\n...\\r\\nmetrics.getPublishedMessages(); // get Micrometer's Counter object\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Micrometer supports \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://micrometer.io/docs\",\n        children: \"several reporting backends\"\n      }), \":\\r\\nNetflix Atlas, Prometheus, Datadog, Influx, JMX, etc.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"You would typically pass in an instance of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"MeterRegistry\"\n      }), \"\\r\\nto the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"MicrometerMetricsCollector\"\n      }), \". Here is an example\\r\\nwith JMX:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"JmxMeterRegistry registry = new JmxMeterRegistry();\\r\\nMicrometerMetricsCollector metrics = new MicrometerMetricsCollector(registry);\\r\\nConnectionFactory connectionFactory = new ConnectionFactory();\\r\\nconnectionFactory.setMetricsCollector(metrics);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"metrics-dropwizard-metrics\",\n      children: \"Dropwizard Metrics support\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Enable metrics collection with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://metrics.dropwizard.io\",\n        children: \"Dropwizard\"\n      }), \" like so:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory connectionFactory = new ConnectionFactory();\\r\\nStandardMetricsCollector metrics = new StandardMetricsCollector();\\r\\nconnectionFactory.setMetricsCollector(metrics);\\r\\n...\\r\\nmetrics.getPublishedMessages(); // get Metrics' Meter object\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Dropwizard Metrics supports \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"http://metrics.dropwizard.io/3.2.3/getting-started.html\",\n        children: \"several reporting backends\"\n      }), \":\\r\\nconsole, JMX, HTTP, Graphite, Ganglia, etc.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"You would typically pass in an instance of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"MetricsRegistry\"\n      }), \"\\r\\nto the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"StandardMetricsCollector\"\n      }), \". Here is an example\\r\\nwith JMX:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"MetricRegistry registry = new MetricRegistry();\\r\\nStandardMetricsCollector metrics = new StandardMetricsCollector(registry);\\r\\n\\r\\nConnectionFactory connectionFactory = new ConnectionFactory();\\r\\nconnectionFactory.setMetricsCollector(metrics);\\r\\n\\r\\nJmxReporter reporter = JmxReporter\\r\\n  .forRegistry(registry)\\r\\n  .inDomain(\\\"com.rabbitmq.client.jmx\\\")\\r\\n  .build();\\r\\nreporter.start();\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"gae-pitfalls\",\n      children: \"RabbitMQ Java Client on Google App Engine\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Using RabbitMQ Java client on Google App Engine (GAE) requires using a custom\\r\\nthread factory that instantiates thread using GAE's \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ThreadManager\"\n      }), \" (see above).\\r\\nIn addition, it is necessary to set a low heartbeat interval (4-5 seconds) to avoid running\\r\\ninto the low \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"InputStream\"\n      }), \" read timeouts on GAE:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory factory = new ConnectionFactory();\\r\\ncf.setRequestedHeartbeat(5);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"cache-pitfalls\",\n      children: \"Caveats and Limitations\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"To make topology recovery possible, RabbitMQ Java client maintains a cache\\r\\nof declared queues, exchanges, and bindings. The cache is per-connection. Certain\\r\\nRabbitMQ features make it impossible for clients to observe some topology changes,\\r\\ne.g. when a queue is deleted due to TTL. RabbitMQ Java client tries to invalidate\\r\\ncache entries in the most common cases:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"When a queue is deleted.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"When an exchange is deleted.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"When a binding is deleted.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"When a consumer is cancelled on an auto-deleted queue.\"\n      }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li, {\n        children: \"When a queue or exchange is unbound from an auto-deleted exchange.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"However, the client cannot track these topology changes beyond a single connection.\\r\\nApplications that rely on auto-delete queues or exchanges, as well as queue TTL (note: not message TTL!),\\r\\nand use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"#connection-recovery\",\n        children: \"automatic connection recovery\"\n      }), \", should explicitly delete entities know to be unused\\r\\nor deleted, to purge client-side topology cache. This is facilitated by \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#queueDelete\"\n      }), \",\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#exchangeDelete\"\n      }), \", \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#queueUnbind\"\n      }), \", and \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"Channel#exchangeUnbind\"\n      }), \"\\r\\nbeing idempotent in RabbitMQ 3.3.x (deleting what's not there does not result in an exception).\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"rpc\",\n      children: \"The RPC (Request/Reply) Pattern: an Example\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"As a programming convenience, the Java client API offers a\\r\\nclass \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RpcClient\"\n      }), \" which uses a temporary reply\\r\\nqueue to provide simple \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/tutorials/tutorial-six-java\",\n        children: \"RPC-style communication\"\n      }), \" facilities via AMQP 0-9-1.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"The class doesn't impose any particular format on the RPC arguments and return values.\\r\\nIt simply provides a mechanism for sending a message to a given exchange with a particular\\r\\nrouting key, and waiting for a response on a reply queue.\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"import com.rabbitmq.client.RpcClient;\\r\\n\\r\\nRpcClient rpc = new RpcClient(channel, exchangeName, routingKey);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"(The implementation details of how this class uses AMQP 0-9-1 are as follows: request messages are sent with the\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.correlation_id\"\n      }), \" field set to a value unique for this \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"RpcClient\"\n      }), \" instance,\\r\\nand with \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"basic.reply_to\"\n      }), \" set to the name of the reply queue.)\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p, {\n      children: \"Once you have created an instance of this class, you can use it to send RPC requests by using any of the following methods:\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"byte[] primitiveCall(byte[] message);\\r\\nString stringCall(String message)\\r\\nMap mapCall(Map message)\\r\\nMap mapCall(Object[] keyValuePairs)\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"primitiveCall\"\n      }), \" method transfers raw byte arrays as the request and response\\r\\nbodies. The method \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"stringCall\"\n      }), \" is a thin\\r\\nconvenience wrapper around \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"primitiveCall\"\n      }), \",\\r\\ntreating the message bodies as \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"String\"\n      }), \" instances\\r\\nin the default character encoding.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"mapCall\"\n      }), \" variants are a little more sophisticated: they encode\\r\\na \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"java.util.Map\"\n      }), \" containing ordinary Java values\\r\\ninto an AMQP 0-9-1 binary table representation, and decode the\\r\\nresponse in the same way. (Note that there are some restrictions on what value\\r\\ntypes can be used here - see the javadoc for details.)\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"All the marshalling/unmarshalling convenience methods use \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"primitiveCall\"\n      }), \" as a\\r\\ntransport mechanism, and just provide a wrapping layer on top of it.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"tls\",\n      children: \"TLS Support\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"It's possible to encrypt the communication between the client and the broker\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/ssl\",\n        children: \"using TLS\"\n      }), \". Client and server authentication (a.k.a. peer verification) is also supported.\\r\\nHere is the simplest, most naive way to use encryption with the Java client:\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"ConnectionFactory factory = new ConnectionFactory();\\r\\nfactory.setHost(\\\"localhost\\\");\\r\\nfactory.setPort(5671);\\r\\n\\r\\n// Only suitable for development.\\r\\n// This code will not perform peer certificate chain verification and prone\\r\\n// to man-in-the-middle attacks.\\r\\n// See the main TLS guide to learn about peer verification and how to enable it.\\r\\nfactory.useSslProtocol();\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Note the client doesn't enforce any server authentication (\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/ssl#peer-verification\",\n        children: \"peer certificate chain verification\"\n      }), \") in the above\\r\\nsample as the default, \\\"trust all certificates\\\" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"TrustManager\"\n      }), \" is used.\\r\\nThis is convenient for local development but \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong, {\n        children: \"prone to man-in-the-middle attacks\"\n      }), \"\\r\\nand therefore \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/production-checklist\",\n        children: \"not recommended for production\"\n      }), \".\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"To learn more about TLS support in RabbitMQ, see\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/ssl\",\n        children: \"TLS guide\"\n      }), \". If you only want to configure\\r\\nthe Java client (especially the peer verification and trust manager parts),\\r\\nread \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"/docs/ssl#java-client\",\n        children: \"the appropriate section\"\n      }), \" of the TLS guide.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2, {\n      id: \"oauth2-support\",\n      children: \"OAuth 2 Support\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The client can authenticate against an OAuth 2 server like \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/cloudfoundry/uaa\",\n        children: \"UAA\"\n      }), \".\\r\\nThe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/tree/main/deps/rabbitmq_auth_backend_oauth2\",\n        children: \"OAuth 2 plugin\"\n      }), \"\\r\\nmust be enabled on the server side and configured to use the same\\r\\nOAuth 2 server as the client.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"oauth2-getting-token\",\n      children: \"Getting the OAuth 2 Token\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The Java client provides the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"OAuth2ClientCredentialsGrantCredentialsProvider\"\n      }), \"\\r\\nclass to get a JWT token using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://tools.ietf.org/html/rfc6749#section-4.4\",\n        children: \"OAuth 2 Client Credentials flow\"\n      }), \".\\r\\nThe client will send the JWT token in the password field when opening a connection.\\r\\nThe broker will then verify the JWT token signature, validity, and permissions\\r\\nbefore authorising the connection and granting access to the requested\\r\\nvirtual host.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Prefer the use of \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"OAuth2ClientCredentialsGrantCredentialsProviderBuilder\"\n      }), \"\\r\\nto create an \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"OAuth2ClientCredentialsGrantCredentialsProvider\"\n      }), \" instance and\\r\\nthen set it up on the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ConnectionFactory\"\n      }), \". The\\r\\nfollowing snippet shows how to configure and create an instance of the OAuth 2 credentials provider\\r\\nfor the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://github.com/rabbitmq/rabbitmq-server/tree/main/deps/rabbitmq_auth_backend_oauth2#examples\",\n        children: \"example setup of the OAuth 2 plugin\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"import com.rabbitmq.client.impl.OAuth2ClientCredentialsGrantCredentialsProvider.\\r\\n        OAuth2ClientCredentialsGrantCredentialsProviderBuilder;\\r\\n...\\r\\nCredentialsProvider credentialsProvider =\\r\\n  new OAuth2ClientCredentialsGrantCredentialsProviderBuilder()\\r\\n    .tokenEndpointUri(\\\"http://localhost:8080/uaa/oauth/token/\\\")\\r\\n    .clientId(\\\"rabbit_client\\\").clientSecret(\\\"rabbit_secret\\\")\\r\\n    .grantType(\\\"password\\\")\\r\\n    .parameter(\\\"username\\\", \\\"rabbit_super\\\")\\r\\n    .parameter(\\\"password\\\", \\\"rabbit_super\\\")\\r\\n    .build();\\r\\n\\r\\nconnectionFactory.setCredentialsProvider(credentialsProvider);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"In production, make sure to use HTTPS for the token endpoint URI and configure\\r\\nthe \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"SSLContext\"\n      }), \" if necessary for the HTTPS requests (to verify and trust\\r\\nthe identity of the OAuth 2 server). The following snippet does\\r\\nso by using the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"tls().sslContext()\"\n      }), \" method from\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"OAuth2ClientCredentialsGrantCredentialsProviderBuilder\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"SSLContext sslContext = ... // create and initialise SSLContext\\r\\n\\r\\nCredentialsProvider credentialsProvider =\\r\\n  new OAuth2ClientCredentialsGrantCredentialsProviderBuilder()\\r\\n    .tokenEndpointUri(\\\"http://localhost:8080/uaa/oauth/token/\\\")\\r\\n    .clientId(\\\"rabbit_client\\\").clientSecret(\\\"rabbit_secret\\\")\\r\\n    .grantType(\\\"password\\\")\\r\\n    .parameter(\\\"username\\\", \\\"rabbit_super\\\")\\r\\n    .parameter(\\\"password\\\", \\\"rabbit_super\\\")\\r\\n    .tls()                    // configure TLS\\r\\n      .sslContext(sslContext) // set SSLContext\\r\\n      .builder()              // back to main configuration\\r\\n    .build();\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Please consult the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://rabbitmq.github.io/rabbitmq-java-client/api/current/com/rabbitmq/client/impl/OAuth2ClientCredentialsGrantCredentialsProvider.html\",\n        children: \"Javadoc\"\n      }), \"\\r\\nto see all the available options.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3, {\n      id: \"oauth2-refreshing-token\",\n      children: \"Refreshing the Token\"\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"Tokens expire and the broker will refuse operations on connections with\\r\\nexpired tokens. To avoid this, it is possible to call\\r\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"CredentialsProvider#refresh()\"\n      }), \" before expiration and send the new\\r\\ntoken to the server. This is cumbersome\\r\\nfrom an application point of view, so the Java client provides\\r\\nhelp with the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"DefaultCredentialsRefreshService\"\n      }), \". This utility\\r\\ntracks used tokens, refreshes them before they expire, and send\\r\\nthe new tokens for the connections it is responsible for.\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The following snippet shows how to create a \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"DefaultCredentialsRefreshService\"\n      }), \"\\r\\ninstance and set it up on the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"ConnectionFactory\"\n      }), \":\"]\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        className: \"language-java\",\n        children: \"import com.rabbitmq.client.impl.DefaultCredentialsRefreshService.\\r\\n        DefaultCredentialsRefreshServiceBuilder;\\r\\n...\\r\\nCredentialsRefreshService refreshService =\\r\\n  new DefaultCredentialsRefreshServiceBuilder().build();\\r\\ncf.setCredentialsRefreshService(refreshService);\\n\"\n      })\n    }), \"\\n\", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p, {\n      children: [\"The \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code, {\n        children: \"DefaultCredentialsRefreshService\"\n      }), \" schedules a refresh after 80%\\r\\nof the token validity time, e.g. if the token expires in 60 minutes,\\r\\nit will be refreshed after 48 minutes. This is the default behaviour,\\r\\nplease consult the \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a, {\n        href: \"https://rabbitmq.github.io/rabbitmq-java-client/api/current/com/rabbitmq/client/impl/DefaultCredentialsRefreshService.html\",\n        children: \"Javadoc\"\n      }), \"\\r\\nfor more information.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout, {\n    ...props,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./client-libraries/java-api-guide.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhYmJpdG1xLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MjA0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWENvbXBvbmVudHN9IGZyb20gJ21keC90eXBlcy5qcydcbiAqIEBpbXBvcnQge0NvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGV9IGZyb20gJ3JlYWN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICogICBFbGVtZW50LlxuICogQHNhdGlzZmllcyB7Q29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gTURYUHJvdmlkZXIocHJvcGVydGllcykge1xuICAvKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuICBsZXQgYWxsQ29tcG9uZW50c1xuXG4gIGlmIChwcm9wZXJ0aWVzLmRpc2FibGVQYXJlbnRDb250ZXh0KSB7XG4gICAgYWxsQ29tcG9uZW50cyA9XG4gICAgICB0eXBlb2YgcHJvcGVydGllcy5jb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvcGVydGllcy5jb21wb25lbnRzKGVtcHR5Q29tcG9uZW50cylcbiAgICAgICAgOiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgfHwgZW1wdHlDb21wb25lbnRzXG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMocHJvcGVydGllcy5jb21wb25lbnRzKVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgTURYQ29udGV4dC5Qcm92aWRlcixcbiAgICB7dmFsdWU6IGFsbENvbXBvbmVudHN9LFxuICAgIHByb3BlcnRpZXMuY2hpbGRyZW5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);